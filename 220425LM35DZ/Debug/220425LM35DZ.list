
220425LM35DZ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007604  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08007718  08007718  00017718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c0c  08007c0c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007c0c  08007c0c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c0c  08007c0c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c0c  08007c0c  00017c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c10  08007c10  00017c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007c14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  200001e0  08007df4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08007df4  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006db0  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017b7  00000000  00000000  00026fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  00028770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000748  00000000  00000000  00028f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001814b  00000000  00000000  000296a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008901  00000000  00000000  000417f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008856d  00000000  00000000  0004a0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2661  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003488  00000000  00000000  000d26b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080076fc 	.word	0x080076fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080076fc 	.word	0x080076fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bdc:	f000 fb4c 	bl	8001278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be0:	f000 f84e 	bl	8000c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be4:	f000 f90c 	bl	8000e00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000be8:	f000 f8e0 	bl	8000dac <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000bec:	f000 f8a0 	bl	8000d30 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_ADC_Start(&hadc1);
 8000bf0:	481f      	ldr	r0, [pc, #124]	; (8000c70 <main+0x98>)
 8000bf2:	f000 fc7b 	bl	80014ec <HAL_ADC_Start>
	if(HAL_ADC_PollForConversion(&hadc1, 10) != HAL_OK)
 8000bf6:	210a      	movs	r1, #10
 8000bf8:	481d      	ldr	r0, [pc, #116]	; (8000c70 <main+0x98>)
 8000bfa:	f000 fd25 	bl	8001648 <HAL_ADC_PollForConversion>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d0f5      	beq.n	8000bf0 <main+0x18>
	{
		adc_value = HAL_ADC_GetValue(&hadc1);
 8000c04:	481a      	ldr	r0, [pc, #104]	; (8000c70 <main+0x98>)
 8000c06:	f000 fe25 	bl	8001854 <HAL_ADC_GetValue>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <main+0x9c>)
 8000c0e:	6013      	str	r3, [r2, #0]
		temp = (adc_value * 330.0 / 1023.0);
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <main+0x9c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fbe5 	bl	80003e4 <__aeabi_ui2d>
 8000c1a:	a311      	add	r3, pc, #68	; (adr r3, 8000c60 <main+0x88>)
 8000c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c20:	f7ff fc5a 	bl	80004d8 <__aeabi_dmul>
 8000c24:	4602      	mov	r2, r0
 8000c26:	460b      	mov	r3, r1
 8000c28:	4610      	mov	r0, r2
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	a30e      	add	r3, pc, #56	; (adr r3, 8000c68 <main+0x90>)
 8000c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c32:	f7ff fd7b 	bl	800072c <__aeabi_ddiv>
 8000c36:	4602      	mov	r2, r0
 8000c38:	460b      	mov	r3, r1
 8000c3a:	4610      	mov	r0, r2
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f7ff ff43 	bl	8000ac8 <__aeabi_d2f>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4a0c      	ldr	r2, [pc, #48]	; (8000c78 <main+0xa0>)
 8000c46:	6013      	str	r3, [r2, #0]
		printf("TEMP : %.1lf\r\n", temp);
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <main+0xa0>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fbeb 	bl	8000428 <__aeabi_f2d>
 8000c52:	4602      	mov	r2, r0
 8000c54:	460b      	mov	r3, r1
 8000c56:	4809      	ldr	r0, [pc, #36]	; (8000c7c <main+0xa4>)
 8000c58:	f002 ff74 	bl	8003b44 <iprintf>
	HAL_ADC_Start(&hadc1);
 8000c5c:	e7c8      	b.n	8000bf0 <main+0x18>
 8000c5e:	bf00      	nop
 8000c60:	00000000 	.word	0x00000000
 8000c64:	4074a000 	.word	0x4074a000
 8000c68:	00000000 	.word	0x00000000
 8000c6c:	408ff800 	.word	0x408ff800
 8000c70:	200001fc 	.word	0x200001fc
 8000c74:	20000270 	.word	0x20000270
 8000c78:	20000274 	.word	0x20000274
 8000c7c:	08007718 	.word	0x08007718

08000c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b094      	sub	sp, #80	; 0x50
 8000c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c8a:	2228      	movs	r2, #40	; 0x28
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f002 f8e2 	bl	8002e58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb8:	2310      	movs	r3, #16
 8000cba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000cc4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f001 fa2c 	bl	800212c <HAL_RCC_OscConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000cda:	f000 f8ff 	bl	8000edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cde:	230f      	movs	r3, #15
 8000ce0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2102      	movs	r1, #2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f001 fc98 	bl	8002630 <HAL_RCC_ClockConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000d06:	f000 f8e9 	bl	8000edc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000d0e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000d12:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	4618      	mov	r0, r3
 8000d18:	f001 fe22 	bl	8002960 <HAL_RCCEx_PeriphCLKConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d22:	f000 f8db 	bl	8000edc <Error_Handler>
  }
}
 8000d26:	bf00      	nop
 8000d28:	3750      	adds	r7, #80	; 0x50
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d40:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <MX_ADC1_Init+0x74>)
 8000d42:	4a19      	ldr	r2, [pc, #100]	; (8000da8 <MX_ADC1_Init+0x78>)
 8000d44:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <MX_ADC1_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <MX_ADC1_Init+0x74>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <MX_ADC1_Init+0x74>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <MX_ADC1_Init+0x74>)
 8000d5a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d5e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d60:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <MX_ADC1_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <MX_ADC1_Init+0x74>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d6c:	480d      	ldr	r0, [pc, #52]	; (8000da4 <MX_ADC1_Init+0x74>)
 8000d6e:	f000 fae5 	bl	800133c <HAL_ADC_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000d78:	f000 f8b0 	bl	8000edc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d80:	2301      	movs	r3, #1
 8000d82:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000d84:	2302      	movs	r3, #2
 8000d86:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_ADC1_Init+0x74>)
 8000d8e:	f000 fd6d 	bl	800186c <HAL_ADC_ConfigChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d98:	f000 f8a0 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	3710      	adds	r7, #16
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200001fc 	.word	0x200001fc
 8000da8:	40012400 	.word	0x40012400

08000dac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <MX_USART2_UART_Init+0x50>)
 8000db4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000db8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000de2:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_USART2_UART_Init+0x4c>)
 8000de4:	f001 ff32 	bl	8002c4c <HAL_UART_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dee:	f000 f875 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2000022c 	.word	0x2000022c
 8000dfc:	40004400 	.word	0x40004400

08000e00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e14:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <MX_GPIO_Init+0xcc>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a2c      	ldr	r2, [pc, #176]	; (8000ecc <MX_GPIO_Init+0xcc>)
 8000e1a:	f043 0310 	orr.w	r3, r3, #16
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <MX_GPIO_Init+0xcc>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0310 	and.w	r3, r3, #16
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2c:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <MX_GPIO_Init+0xcc>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a26      	ldr	r2, [pc, #152]	; (8000ecc <MX_GPIO_Init+0xcc>)
 8000e32:	f043 0320 	orr.w	r3, r3, #32
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <MX_GPIO_Init+0xcc>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0320 	and.w	r3, r3, #32
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <MX_GPIO_Init+0xcc>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a20      	ldr	r2, [pc, #128]	; (8000ecc <MX_GPIO_Init+0xcc>)
 8000e4a:	f043 0304 	orr.w	r3, r3, #4
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <MX_GPIO_Init+0xcc>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <MX_GPIO_Init+0xcc>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	4a1a      	ldr	r2, [pc, #104]	; (8000ecc <MX_GPIO_Init+0xcc>)
 8000e62:	f043 0308 	orr.w	r3, r3, #8
 8000e66:	6193      	str	r3, [r2, #24]
 8000e68:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <MX_GPIO_Init+0xcc>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f003 0308 	and.w	r3, r3, #8
 8000e70:	603b      	str	r3, [r7, #0]
 8000e72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2120      	movs	r1, #32
 8000e78:	4815      	ldr	r0, [pc, #84]	; (8000ed0 <MX_GPIO_Init+0xd0>)
 8000e7a:	f001 f91d 	bl	80020b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <MX_GPIO_Init+0xd4>)
 8000e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4619      	mov	r1, r3
 8000e92:	4811      	ldr	r0, [pc, #68]	; (8000ed8 <MX_GPIO_Init+0xd8>)
 8000e94:	f000 ff8c 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e98:	2320      	movs	r3, #32
 8000e9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	4619      	mov	r1, r3
 8000eae:	4808      	ldr	r0, [pc, #32]	; (8000ed0 <MX_GPIO_Init+0xd0>)
 8000eb0:	f000 ff7e 	bl	8001db0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2028      	movs	r0, #40	; 0x28
 8000eba:	f000 ff42 	bl	8001d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ebe:	2028      	movs	r0, #40	; 0x28
 8000ec0:	f000 ff5b 	bl	8001d7a <HAL_NVIC_EnableIRQ>

}
 8000ec4:	bf00      	nop
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40010800 	.word	0x40010800
 8000ed4:	10110000 	.word	0x10110000
 8000ed8:	40011000 	.word	0x40011000

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <Error_Handler+0x8>
	...

08000ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <HAL_MspInit+0x5c>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	4a14      	ldr	r2, [pc, #80]	; (8000f44 <HAL_MspInit+0x5c>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6193      	str	r3, [r2, #24]
 8000efa:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_MspInit+0x5c>)
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <HAL_MspInit+0x5c>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <HAL_MspInit+0x5c>)
 8000f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f10:	61d3      	str	r3, [r2, #28]
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <HAL_MspInit+0x5c>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_MspInit+0x60>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <HAL_MspInit+0x60>)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40010000 	.word	0x40010000

08000f4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <HAL_ADC_MspInit+0x6c>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d121      	bne.n	8000fb0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <HAL_ADC_MspInit+0x70>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <HAL_ADC_MspInit+0x70>)
 8000f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <HAL_ADC_MspInit+0x70>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <HAL_ADC_MspInit+0x70>)
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	4a0c      	ldr	r2, [pc, #48]	; (8000fbc <HAL_ADC_MspInit+0x70>)
 8000f8a:	f043 0304 	orr.w	r3, r3, #4
 8000f8e:	6193      	str	r3, [r2, #24]
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_ADC_MspInit+0x70>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f003 0304 	and.w	r3, r3, #4
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <HAL_ADC_MspInit+0x74>)
 8000fac:	f000 ff00 	bl	8001db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fb0:	bf00      	nop
 8000fb2:	3720      	adds	r7, #32
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40012400 	.word	0x40012400
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010800 	.word	0x40010800

08000fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b088      	sub	sp, #32
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a15      	ldr	r2, [pc, #84]	; (8001034 <HAL_UART_MspInit+0x70>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d123      	bne.n	800102c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_UART_MspInit+0x74>)
 8000fe6:	69db      	ldr	r3, [r3, #28]
 8000fe8:	4a13      	ldr	r2, [pc, #76]	; (8001038 <HAL_UART_MspInit+0x74>)
 8000fea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fee:	61d3      	str	r3, [r2, #28]
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <HAL_UART_MspInit+0x74>)
 8000ff2:	69db      	ldr	r3, [r3, #28]
 8000ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_UART_MspInit+0x74>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <HAL_UART_MspInit+0x74>)
 8001002:	f043 0304 	orr.w	r3, r3, #4
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <HAL_UART_MspInit+0x74>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001014:	230c      	movs	r3, #12
 8001016:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2302      	movs	r3, #2
 800101e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	4619      	mov	r1, r3
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <HAL_UART_MspInit+0x78>)
 8001028:	f000 fec2 	bl	8001db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800102c:	bf00      	nop
 800102e:	3720      	adds	r7, #32
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40004400 	.word	0x40004400
 8001038:	40021000 	.word	0x40021000
 800103c:	40010800 	.word	0x40010800

08001040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <NMI_Handler+0x4>

08001046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <HardFault_Handler+0x4>

0800104c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <MemManage_Handler+0x4>

08001052 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <BusFault_Handler+0x4>

08001058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800105c:	e7fe      	b.n	800105c <UsageFault_Handler+0x4>

0800105e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr

0800106a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr

08001076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr

08001082 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001086:	f000 f93d 	bl	8001304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}

0800108e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001092:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001096:	f001 f827 	bl	80020e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}

0800109e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
	return 1;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <_kill>:

int _kill(int pid, int sig)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010b6:	f001 fea5 	bl	8002e04 <__errno>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2216      	movs	r2, #22
 80010be:	601a      	str	r2, [r3, #0]
	return -1;
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <_exit>:

void _exit (int status)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010d4:	f04f 31ff 	mov.w	r1, #4294967295
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ffe7 	bl	80010ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80010de:	e7fe      	b.n	80010de <_exit+0x12>

080010e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	e00a      	b.n	8001108 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010f2:	f3af 8000 	nop.w
 80010f6:	4601      	mov	r1, r0
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	60ba      	str	r2, [r7, #8]
 80010fe:	b2ca      	uxtb	r2, r1
 8001100:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	3301      	adds	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	429a      	cmp	r2, r3
 800110e:	dbf0      	blt.n	80010f2 <_read+0x12>
	}

return len;
 8001110:	687b      	ldr	r3, [r7, #4]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	e009      	b.n	8001140 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	60ba      	str	r2, [r7, #8]
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3301      	adds	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	429a      	cmp	r2, r3
 8001146:	dbf1      	blt.n	800112c <_write+0x12>
	}
	return len;
 8001148:	687b      	ldr	r3, [r7, #4]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <_close>:

int _close(int file)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
	return -1;
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001178:	605a      	str	r2, [r3, #4]
	return 0;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr

08001186 <_isatty>:

int _isatty(int file)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
	return 1;
 800118e:	2301      	movs	r3, #1
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr

0800119a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800119a:	b480      	push	{r7}
 800119c:	b085      	sub	sp, #20
 800119e:	af00      	add	r7, sp, #0
 80011a0:	60f8      	str	r0, [r7, #12]
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
	return 0;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
	...

080011b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011bc:	4a14      	ldr	r2, [pc, #80]	; (8001210 <_sbrk+0x5c>)
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <_sbrk+0x60>)
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <_sbrk+0x64>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d102      	bne.n	80011d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <_sbrk+0x64>)
 80011d2:	4a12      	ldr	r2, [pc, #72]	; (800121c <_sbrk+0x68>)
 80011d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <_sbrk+0x64>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d207      	bcs.n	80011f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e4:	f001 fe0e 	bl	8002e04 <__errno>
 80011e8:	4603      	mov	r3, r0
 80011ea:	220c      	movs	r2, #12
 80011ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295
 80011f2:	e009      	b.n	8001208 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <_sbrk+0x64>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	4a05      	ldr	r2, [pc, #20]	; (8001218 <_sbrk+0x64>)
 8001204:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20005000 	.word	0x20005000
 8001214:	00000400 	.word	0x00000400
 8001218:	20000278 	.word	0x20000278
 800121c:	20000290 	.word	0x20000290

08001220 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800122c:	480c      	ldr	r0, [pc, #48]	; (8001260 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800122e:	490d      	ldr	r1, [pc, #52]	; (8001264 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001230:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001234:	e002      	b.n	800123c <LoopCopyDataInit>

08001236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123a:	3304      	adds	r3, #4

0800123c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800123c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001240:	d3f9      	bcc.n	8001236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001244:	4c0a      	ldr	r4, [pc, #40]	; (8001270 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001248:	e001      	b.n	800124e <LoopFillZerobss>

0800124a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800124c:	3204      	adds	r2, #4

0800124e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001250:	d3fb      	bcc.n	800124a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001252:	f7ff ffe5 	bl	8001220 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001256:	f001 fddb 	bl	8002e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800125a:	f7ff fcbd 	bl	8000bd8 <main>
  bx lr
 800125e:	4770      	bx	lr
  ldr r0, =_sdata
 8001260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001264:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001268:	08007c14 	.word	0x08007c14
  ldr r2, =_sbss
 800126c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001270:	20000290 	.word	0x20000290

08001274 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001274:	e7fe      	b.n	8001274 <ADC1_2_IRQHandler>
	...

08001278 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <HAL_Init+0x28>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <HAL_Init+0x28>)
 8001282:	f043 0310 	orr.w	r3, r3, #16
 8001286:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001288:	2003      	movs	r0, #3
 800128a:	f000 fd4f 	bl	8001d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128e:	2000      	movs	r0, #0
 8001290:	f000 f808 	bl	80012a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001294:	f7ff fe28 	bl	8000ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40022000 	.word	0x40022000

080012a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_InitTick+0x54>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_InitTick+0x58>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4619      	mov	r1, r3
 80012b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80012be:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 fd67 	bl	8001d96 <HAL_SYSTICK_Config>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00e      	b.n	80012f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b0f      	cmp	r3, #15
 80012d6:	d80a      	bhi.n	80012ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d8:	2200      	movs	r2, #0
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295
 80012e0:	f000 fd2f 	bl	8001d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e4:	4a06      	ldr	r2, [pc, #24]	; (8001300 <HAL_InitTick+0x5c>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e000      	b.n	80012f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000000 	.word	0x20000000
 80012fc:	20000008 	.word	0x20000008
 8001300:	20000004 	.word	0x20000004

08001304 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_IncTick+0x1c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_IncTick+0x20>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4413      	add	r3, r2
 8001314:	4a03      	ldr	r2, [pc, #12]	; (8001324 <HAL_IncTick+0x20>)
 8001316:	6013      	str	r3, [r2, #0]
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	20000008 	.word	0x20000008
 8001324:	2000027c 	.word	0x2000027c

08001328 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return uwTick;
 800132c:	4b02      	ldr	r3, [pc, #8]	; (8001338 <HAL_GetTick+0x10>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	2000027c 	.word	0x2000027c

0800133c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800134c:	2300      	movs	r3, #0
 800134e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e0be      	b.n	80014dc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001368:	2b00      	cmp	r3, #0
 800136a:	d109      	bne.n	8001380 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff fde6 	bl	8000f4c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 fbc5 	bl	8001b10 <ADC_ConversionStop_Disable>
 8001386:	4603      	mov	r3, r0
 8001388:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	2b00      	cmp	r3, #0
 8001394:	f040 8099 	bne.w	80014ca <HAL_ADC_Init+0x18e>
 8001398:	7dfb      	ldrb	r3, [r7, #23]
 800139a:	2b00      	cmp	r3, #0
 800139c:	f040 8095 	bne.w	80014ca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013a8:	f023 0302 	bic.w	r3, r3, #2
 80013ac:	f043 0202 	orr.w	r2, r3, #2
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	7b1b      	ldrb	r3, [r3, #12]
 80013c2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013c4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013d4:	d003      	beq.n	80013de <HAL_ADC_Init+0xa2>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d102      	bne.n	80013e4 <HAL_ADC_Init+0xa8>
 80013de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013e2:	e000      	b.n	80013e6 <HAL_ADC_Init+0xaa>
 80013e4:	2300      	movs	r3, #0
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7d1b      	ldrb	r3, [r3, #20]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d119      	bne.n	8001428 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7b1b      	ldrb	r3, [r3, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d109      	bne.n	8001410 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	3b01      	subs	r3, #1
 8001402:	035a      	lsls	r2, r3, #13
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	e00b      	b.n	8001428 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001414:	f043 0220 	orr.w	r2, r3, #32
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001420:	f043 0201 	orr.w	r2, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	430a      	orrs	r2, r1
 800143a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <HAL_ADC_Init+0x1a8>)
 8001444:	4013      	ands	r3, r2
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	68b9      	ldr	r1, [r7, #8]
 800144c:	430b      	orrs	r3, r1
 800144e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001458:	d003      	beq.n	8001462 <HAL_ADC_Init+0x126>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d104      	bne.n	800146c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	3b01      	subs	r3, #1
 8001468:	051b      	lsls	r3, r3, #20
 800146a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001472:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	430a      	orrs	r2, r1
 800147e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <HAL_ADC_Init+0x1ac>)
 8001488:	4013      	ands	r3, r2
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	429a      	cmp	r2, r3
 800148e:	d10b      	bne.n	80014a8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149a:	f023 0303 	bic.w	r3, r3, #3
 800149e:	f043 0201 	orr.w	r2, r3, #1
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014a6:	e018      	b.n	80014da <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ac:	f023 0312 	bic.w	r3, r3, #18
 80014b0:	f043 0210 	orr.w	r2, r3, #16
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014bc:	f043 0201 	orr.w	r2, r3, #1
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014c8:	e007      	b.n	80014da <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ce:	f043 0210 	orr.w	r2, r3, #16
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014da:	7dfb      	ldrb	r3, [r7, #23]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	ffe1f7fd 	.word	0xffe1f7fd
 80014e8:	ff1f0efe 	.word	0xff1f0efe

080014ec <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d101      	bne.n	8001506 <HAL_ADC_Start+0x1a>
 8001502:	2302      	movs	r3, #2
 8001504:	e098      	b.n	8001638 <HAL_ADC_Start+0x14c>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 faa4 	bl	8001a5c <ADC_Enable>
 8001514:	4603      	mov	r3, r0
 8001516:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	2b00      	cmp	r3, #0
 800151c:	f040 8087 	bne.w	800162e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a41      	ldr	r2, [pc, #260]	; (8001640 <HAL_ADC_Start+0x154>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d105      	bne.n	800154a <HAL_ADC_Start+0x5e>
 800153e:	4b41      	ldr	r3, [pc, #260]	; (8001644 <HAL_ADC_Start+0x158>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d115      	bne.n	8001576 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001560:	2b00      	cmp	r3, #0
 8001562:	d026      	beq.n	80015b2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001568:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800156c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001574:	e01d      	b.n	80015b2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a2f      	ldr	r2, [pc, #188]	; (8001644 <HAL_ADC_Start+0x158>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d004      	beq.n	8001596 <HAL_ADC_Start+0xaa>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a2b      	ldr	r2, [pc, #172]	; (8001640 <HAL_ADC_Start+0x154>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d10d      	bne.n	80015b2 <HAL_ADC_Start+0xc6>
 8001596:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <HAL_ADC_Start+0x158>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d007      	beq.n	80015b2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d006      	beq.n	80015cc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	f023 0206 	bic.w	r2, r3, #6
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80015ca:	e002      	b.n	80015d2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f06f 0202 	mvn.w	r2, #2
 80015e2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015ee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015f2:	d113      	bne.n	800161c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015f8:	4a11      	ldr	r2, [pc, #68]	; (8001640 <HAL_ADC_Start+0x154>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d105      	bne.n	800160a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <HAL_ADC_Start+0x158>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001606:	2b00      	cmp	r3, #0
 8001608:	d108      	bne.n	800161c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	e00c      	b.n	8001636 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	e003      	b.n	8001636 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001636:	7bfb      	ldrb	r3, [r7, #15]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40012800 	.word	0x40012800
 8001644:	40012400 	.word	0x40012400

08001648 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b087      	sub	sp, #28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800165e:	f7ff fe63 	bl	8001328 <HAL_GetTick>
 8001662:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00b      	beq.n	800168a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001676:	f043 0220 	orr.w	r2, r3, #32
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e0d3      	b.n	8001832 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001694:	2b00      	cmp	r3, #0
 8001696:	d131      	bne.n	80016fc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d12a      	bne.n	80016fc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80016a6:	e021      	b.n	80016ec <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ae:	d01d      	beq.n	80016ec <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d007      	beq.n	80016c6 <HAL_ADC_PollForConversion+0x7e>
 80016b6:	f7ff fe37 	bl	8001328 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d212      	bcs.n	80016ec <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d10b      	bne.n	80016ec <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	f043 0204 	orr.w	r2, r3, #4
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e0a2      	b.n	8001832 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0d6      	beq.n	80016a8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80016fa:	e070      	b.n	80017de <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80016fc:	4b4f      	ldr	r3, [pc, #316]	; (800183c <HAL_ADC_PollForConversion+0x1f4>)
 80016fe:	681c      	ldr	r4, [r3, #0]
 8001700:	2002      	movs	r0, #2
 8001702:	f001 f9e3 	bl	8002acc <HAL_RCCEx_GetPeriphCLKFreq>
 8001706:	4603      	mov	r3, r0
 8001708:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6919      	ldr	r1, [r3, #16]
 8001712:	4b4b      	ldr	r3, [pc, #300]	; (8001840 <HAL_ADC_PollForConversion+0x1f8>)
 8001714:	400b      	ands	r3, r1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d118      	bne.n	800174c <HAL_ADC_PollForConversion+0x104>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68d9      	ldr	r1, [r3, #12]
 8001720:	4b48      	ldr	r3, [pc, #288]	; (8001844 <HAL_ADC_PollForConversion+0x1fc>)
 8001722:	400b      	ands	r3, r1
 8001724:	2b00      	cmp	r3, #0
 8001726:	d111      	bne.n	800174c <HAL_ADC_PollForConversion+0x104>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6919      	ldr	r1, [r3, #16]
 800172e:	4b46      	ldr	r3, [pc, #280]	; (8001848 <HAL_ADC_PollForConversion+0x200>)
 8001730:	400b      	ands	r3, r1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d108      	bne.n	8001748 <HAL_ADC_PollForConversion+0x100>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68d9      	ldr	r1, [r3, #12]
 800173c:	4b43      	ldr	r3, [pc, #268]	; (800184c <HAL_ADC_PollForConversion+0x204>)
 800173e:	400b      	ands	r3, r1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_ADC_PollForConversion+0x100>
 8001744:	2314      	movs	r3, #20
 8001746:	e020      	b.n	800178a <HAL_ADC_PollForConversion+0x142>
 8001748:	2329      	movs	r3, #41	; 0x29
 800174a:	e01e      	b.n	800178a <HAL_ADC_PollForConversion+0x142>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6919      	ldr	r1, [r3, #16]
 8001752:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <HAL_ADC_PollForConversion+0x200>)
 8001754:	400b      	ands	r3, r1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d106      	bne.n	8001768 <HAL_ADC_PollForConversion+0x120>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68d9      	ldr	r1, [r3, #12]
 8001760:	4b3a      	ldr	r3, [pc, #232]	; (800184c <HAL_ADC_PollForConversion+0x204>)
 8001762:	400b      	ands	r3, r1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00d      	beq.n	8001784 <HAL_ADC_PollForConversion+0x13c>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6919      	ldr	r1, [r3, #16]
 800176e:	4b38      	ldr	r3, [pc, #224]	; (8001850 <HAL_ADC_PollForConversion+0x208>)
 8001770:	400b      	ands	r3, r1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d108      	bne.n	8001788 <HAL_ADC_PollForConversion+0x140>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68d9      	ldr	r1, [r3, #12]
 800177c:	4b34      	ldr	r3, [pc, #208]	; (8001850 <HAL_ADC_PollForConversion+0x208>)
 800177e:	400b      	ands	r3, r1
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_ADC_PollForConversion+0x140>
 8001784:	2354      	movs	r3, #84	; 0x54
 8001786:	e000      	b.n	800178a <HAL_ADC_PollForConversion+0x142>
 8001788:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800178a:	fb02 f303 	mul.w	r3, r2, r3
 800178e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001790:	e021      	b.n	80017d6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d01a      	beq.n	80017d0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d007      	beq.n	80017b0 <HAL_ADC_PollForConversion+0x168>
 80017a0:	f7ff fdc2 	bl	8001328 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d20f      	bcs.n	80017d0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d90b      	bls.n	80017d0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017bc:	f043 0204 	orr.w	r2, r3, #4
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e030      	b.n	8001832 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	3301      	adds	r3, #1
 80017d4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d8d9      	bhi.n	8001792 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f06f 0212 	mvn.w	r2, #18
 80017e6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80017fe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001802:	d115      	bne.n	8001830 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001808:	2b00      	cmp	r3, #0
 800180a:	d111      	bne.n	8001830 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d105      	bne.n	8001830 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	f043 0201 	orr.w	r2, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	371c      	adds	r7, #28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd90      	pop	{r4, r7, pc}
 800183a:	bf00      	nop
 800183c:	20000000 	.word	0x20000000
 8001840:	24924924 	.word	0x24924924
 8001844:	00924924 	.word	0x00924924
 8001848:	12492492 	.word	0x12492492
 800184c:	00492492 	.word	0x00492492
 8001850:	00249249 	.word	0x00249249

08001854 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800187a:	2300      	movs	r3, #0
 800187c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001884:	2b01      	cmp	r3, #1
 8001886:	d101      	bne.n	800188c <HAL_ADC_ConfigChannel+0x20>
 8001888:	2302      	movs	r3, #2
 800188a:	e0dc      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x1da>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b06      	cmp	r3, #6
 800189a:	d81c      	bhi.n	80018d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	3b05      	subs	r3, #5
 80018ae:	221f      	movs	r2, #31
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	4019      	ands	r1, r3
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	3b05      	subs	r3, #5
 80018c8:	fa00 f203 	lsl.w	r2, r0, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	635a      	str	r2, [r3, #52]	; 0x34
 80018d4:	e03c      	b.n	8001950 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b0c      	cmp	r3, #12
 80018dc:	d81c      	bhi.n	8001918 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	3b23      	subs	r3, #35	; 0x23
 80018f0:	221f      	movs	r2, #31
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	4019      	ands	r1, r3
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	6818      	ldr	r0, [r3, #0]
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	3b23      	subs	r3, #35	; 0x23
 800190a:	fa00 f203 	lsl.w	r2, r0, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	631a      	str	r2, [r3, #48]	; 0x30
 8001916:	e01b      	b.n	8001950 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	3b41      	subs	r3, #65	; 0x41
 800192a:	221f      	movs	r2, #31
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	4019      	ands	r1, r3
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	6818      	ldr	r0, [r3, #0]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	3b41      	subs	r3, #65	; 0x41
 8001944:	fa00 f203 	lsl.w	r2, r0, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	430a      	orrs	r2, r1
 800194e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b09      	cmp	r3, #9
 8001956:	d91c      	bls.n	8001992 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68d9      	ldr	r1, [r3, #12]
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4613      	mov	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	4413      	add	r3, r2
 8001968:	3b1e      	subs	r3, #30
 800196a:	2207      	movs	r2, #7
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	4019      	ands	r1, r3
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	6898      	ldr	r0, [r3, #8]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4613      	mov	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	3b1e      	subs	r3, #30
 8001984:	fa00 f203 	lsl.w	r2, r0, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	60da      	str	r2, [r3, #12]
 8001990:	e019      	b.n	80019c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6919      	ldr	r1, [r3, #16]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4613      	mov	r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	2207      	movs	r2, #7
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	4019      	ands	r1, r3
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	6898      	ldr	r0, [r3, #8]
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4613      	mov	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	fa00 f203 	lsl.w	r2, r0, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b10      	cmp	r3, #16
 80019cc:	d003      	beq.n	80019d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019d2:	2b11      	cmp	r3, #17
 80019d4:	d132      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a1d      	ldr	r2, [pc, #116]	; (8001a50 <HAL_ADC_ConfigChannel+0x1e4>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d125      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d126      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80019fc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b10      	cmp	r3, #16
 8001a04:	d11a      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <HAL_ADC_ConfigChannel+0x1e8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a13      	ldr	r2, [pc, #76]	; (8001a58 <HAL_ADC_ConfigChannel+0x1ec>)
 8001a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a10:	0c9a      	lsrs	r2, r3, #18
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a1c:	e002      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f9      	bne.n	8001a1e <HAL_ADC_ConfigChannel+0x1b2>
 8001a2a:	e007      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a30:	f043 0220 	orr.w	r2, r3, #32
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	40012400 	.word	0x40012400
 8001a54:	20000000 	.word	0x20000000
 8001a58:	431bde83 	.word	0x431bde83

08001a5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d040      	beq.n	8001afc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f042 0201 	orr.w	r2, r2, #1
 8001a88:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a8a:	4b1f      	ldr	r3, [pc, #124]	; (8001b08 <ADC_Enable+0xac>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a1f      	ldr	r2, [pc, #124]	; (8001b0c <ADC_Enable+0xb0>)
 8001a90:	fba2 2303 	umull	r2, r3, r2, r3
 8001a94:	0c9b      	lsrs	r3, r3, #18
 8001a96:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a98:	e002      	b.n	8001aa0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f9      	bne.n	8001a9a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001aa6:	f7ff fc3f 	bl	8001328 <HAL_GetTick>
 8001aaa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001aac:	e01f      	b.n	8001aee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001aae:	f7ff fc3b 	bl	8001328 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d918      	bls.n	8001aee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d011      	beq.n	8001aee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ace:	f043 0210 	orr.w	r2, r3, #16
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ada:	f043 0201 	orr.w	r2, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e007      	b.n	8001afe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d1d8      	bne.n	8001aae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	431bde83 	.word	0x431bde83

08001b10 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d12e      	bne.n	8001b88 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0201 	bic.w	r2, r2, #1
 8001b38:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b3a:	f7ff fbf5 	bl	8001328 <HAL_GetTick>
 8001b3e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b40:	e01b      	b.n	8001b7a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b42:	f7ff fbf1 	bl	8001328 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d914      	bls.n	8001b7a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d10d      	bne.n	8001b7a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b62:	f043 0210 	orr.w	r2, r3, #16
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	f043 0201 	orr.w	r2, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e007      	b.n	8001b8a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d0dc      	beq.n	8001b42 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc6:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	60d3      	str	r3, [r2, #12]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	f003 0307 	and.w	r3, r3, #7
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	db0b      	blt.n	8001c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	f003 021f 	and.w	r2, r3, #31
 8001c10:	4906      	ldr	r1, [pc, #24]	; (8001c2c <__NVIC_EnableIRQ+0x34>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	2001      	movs	r0, #1
 8001c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	e000e100 	.word	0xe000e100

08001c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	db0a      	blt.n	8001c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	490c      	ldr	r1, [pc, #48]	; (8001c7c <__NVIC_SetPriority+0x4c>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	0112      	lsls	r2, r2, #4
 8001c50:	b2d2      	uxtb	r2, r2
 8001c52:	440b      	add	r3, r1
 8001c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c58:	e00a      	b.n	8001c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4908      	ldr	r1, [pc, #32]	; (8001c80 <__NVIC_SetPriority+0x50>)
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	3b04      	subs	r3, #4
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	761a      	strb	r2, [r3, #24]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000e100 	.word	0xe000e100
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	f1c3 0307 	rsb	r3, r3, #7
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	bf28      	it	cs
 8001ca2:	2304      	movcs	r3, #4
 8001ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	2b06      	cmp	r3, #6
 8001cac:	d902      	bls.n	8001cb4 <NVIC_EncodePriority+0x30>
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3b03      	subs	r3, #3
 8001cb2:	e000      	b.n	8001cb6 <NVIC_EncodePriority+0x32>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	401a      	ands	r2, r3
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	43d9      	mvns	r1, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cdc:	4313      	orrs	r3, r2
         );
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf8:	d301      	bcc.n	8001cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00f      	b.n	8001d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <SysTick_Config+0x40>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d06:	210f      	movs	r1, #15
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	f7ff ff90 	bl	8001c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <SysTick_Config+0x40>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <SysTick_Config+0x40>)
 8001d18:	2207      	movs	r2, #7
 8001d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	e000e010 	.word	0xe000e010

08001d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff2d 	bl	8001b94 <__NVIC_SetPriorityGrouping>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	4603      	mov	r3, r0
 8001d4a:	60b9      	str	r1, [r7, #8]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d54:	f7ff ff42 	bl	8001bdc <__NVIC_GetPriorityGrouping>
 8001d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	68b9      	ldr	r1, [r7, #8]
 8001d5e:	6978      	ldr	r0, [r7, #20]
 8001d60:	f7ff ff90 	bl	8001c84 <NVIC_EncodePriority>
 8001d64:	4602      	mov	r2, r0
 8001d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff5f 	bl	8001c30 <__NVIC_SetPriority>
}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff35 	bl	8001bf8 <__NVIC_EnableIRQ>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff ffa2 	bl	8001ce8 <SysTick_Config>
 8001da4:	4603      	mov	r3, r0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b08b      	sub	sp, #44	; 0x2c
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc2:	e169      	b.n	8002098 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	69fa      	ldr	r2, [r7, #28]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	f040 8158 	bne.w	8002092 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4a9a      	ldr	r2, [pc, #616]	; (8002050 <HAL_GPIO_Init+0x2a0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d05e      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001dec:	4a98      	ldr	r2, [pc, #608]	; (8002050 <HAL_GPIO_Init+0x2a0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d875      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001df2:	4a98      	ldr	r2, [pc, #608]	; (8002054 <HAL_GPIO_Init+0x2a4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d058      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001df8:	4a96      	ldr	r2, [pc, #600]	; (8002054 <HAL_GPIO_Init+0x2a4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d86f      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001dfe:	4a96      	ldr	r2, [pc, #600]	; (8002058 <HAL_GPIO_Init+0x2a8>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d052      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001e04:	4a94      	ldr	r2, [pc, #592]	; (8002058 <HAL_GPIO_Init+0x2a8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d869      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e0a:	4a94      	ldr	r2, [pc, #592]	; (800205c <HAL_GPIO_Init+0x2ac>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d04c      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001e10:	4a92      	ldr	r2, [pc, #584]	; (800205c <HAL_GPIO_Init+0x2ac>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d863      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e16:	4a92      	ldr	r2, [pc, #584]	; (8002060 <HAL_GPIO_Init+0x2b0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d046      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
 8001e1c:	4a90      	ldr	r2, [pc, #576]	; (8002060 <HAL_GPIO_Init+0x2b0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d85d      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e22:	2b12      	cmp	r3, #18
 8001e24:	d82a      	bhi.n	8001e7c <HAL_GPIO_Init+0xcc>
 8001e26:	2b12      	cmp	r3, #18
 8001e28:	d859      	bhi.n	8001ede <HAL_GPIO_Init+0x12e>
 8001e2a:	a201      	add	r2, pc, #4	; (adr r2, 8001e30 <HAL_GPIO_Init+0x80>)
 8001e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e30:	08001eab 	.word	0x08001eab
 8001e34:	08001e85 	.word	0x08001e85
 8001e38:	08001e97 	.word	0x08001e97
 8001e3c:	08001ed9 	.word	0x08001ed9
 8001e40:	08001edf 	.word	0x08001edf
 8001e44:	08001edf 	.word	0x08001edf
 8001e48:	08001edf 	.word	0x08001edf
 8001e4c:	08001edf 	.word	0x08001edf
 8001e50:	08001edf 	.word	0x08001edf
 8001e54:	08001edf 	.word	0x08001edf
 8001e58:	08001edf 	.word	0x08001edf
 8001e5c:	08001edf 	.word	0x08001edf
 8001e60:	08001edf 	.word	0x08001edf
 8001e64:	08001edf 	.word	0x08001edf
 8001e68:	08001edf 	.word	0x08001edf
 8001e6c:	08001edf 	.word	0x08001edf
 8001e70:	08001edf 	.word	0x08001edf
 8001e74:	08001e8d 	.word	0x08001e8d
 8001e78:	08001ea1 	.word	0x08001ea1
 8001e7c:	4a79      	ldr	r2, [pc, #484]	; (8002064 <HAL_GPIO_Init+0x2b4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d013      	beq.n	8001eaa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e82:	e02c      	b.n	8001ede <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	623b      	str	r3, [r7, #32]
          break;
 8001e8a:	e029      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	3304      	adds	r3, #4
 8001e92:	623b      	str	r3, [r7, #32]
          break;
 8001e94:	e024      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	3308      	adds	r3, #8
 8001e9c:	623b      	str	r3, [r7, #32]
          break;
 8001e9e:	e01f      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	330c      	adds	r3, #12
 8001ea6:	623b      	str	r3, [r7, #32]
          break;
 8001ea8:	e01a      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d102      	bne.n	8001eb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	623b      	str	r3, [r7, #32]
          break;
 8001eb6:	e013      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d105      	bne.n	8001ecc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec0:	2308      	movs	r3, #8
 8001ec2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69fa      	ldr	r2, [r7, #28]
 8001ec8:	611a      	str	r2, [r3, #16]
          break;
 8001eca:	e009      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ecc:	2308      	movs	r3, #8
 8001ece:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69fa      	ldr	r2, [r7, #28]
 8001ed4:	615a      	str	r2, [r3, #20]
          break;
 8001ed6:	e003      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]
          break;
 8001edc:	e000      	b.n	8001ee0 <HAL_GPIO_Init+0x130>
          break;
 8001ede:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	2bff      	cmp	r3, #255	; 0xff
 8001ee4:	d801      	bhi.n	8001eea <HAL_GPIO_Init+0x13a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	e001      	b.n	8001eee <HAL_GPIO_Init+0x13e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3304      	adds	r3, #4
 8001eee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2bff      	cmp	r3, #255	; 0xff
 8001ef4:	d802      	bhi.n	8001efc <HAL_GPIO_Init+0x14c>
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	e002      	b.n	8001f02 <HAL_GPIO_Init+0x152>
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	3b08      	subs	r3, #8
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	210f      	movs	r1, #15
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	401a      	ands	r2, r3
 8001f14:	6a39      	ldr	r1, [r7, #32]
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 80b1 	beq.w	8002092 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f30:	4b4d      	ldr	r3, [pc, #308]	; (8002068 <HAL_GPIO_Init+0x2b8>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	4a4c      	ldr	r2, [pc, #304]	; (8002068 <HAL_GPIO_Init+0x2b8>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6193      	str	r3, [r2, #24]
 8001f3c:	4b4a      	ldr	r3, [pc, #296]	; (8002068 <HAL_GPIO_Init+0x2b8>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f48:	4a48      	ldr	r2, [pc, #288]	; (800206c <HAL_GPIO_Init+0x2bc>)
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	3302      	adds	r3, #2
 8001f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	220f      	movs	r2, #15
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a40      	ldr	r2, [pc, #256]	; (8002070 <HAL_GPIO_Init+0x2c0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d013      	beq.n	8001f9c <HAL_GPIO_Init+0x1ec>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a3f      	ldr	r2, [pc, #252]	; (8002074 <HAL_GPIO_Init+0x2c4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d00d      	beq.n	8001f98 <HAL_GPIO_Init+0x1e8>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a3e      	ldr	r2, [pc, #248]	; (8002078 <HAL_GPIO_Init+0x2c8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d007      	beq.n	8001f94 <HAL_GPIO_Init+0x1e4>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a3d      	ldr	r2, [pc, #244]	; (800207c <HAL_GPIO_Init+0x2cc>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d101      	bne.n	8001f90 <HAL_GPIO_Init+0x1e0>
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e006      	b.n	8001f9e <HAL_GPIO_Init+0x1ee>
 8001f90:	2304      	movs	r3, #4
 8001f92:	e004      	b.n	8001f9e <HAL_GPIO_Init+0x1ee>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e002      	b.n	8001f9e <HAL_GPIO_Init+0x1ee>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_GPIO_Init+0x1ee>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa0:	f002 0203 	and.w	r2, r2, #3
 8001fa4:	0092      	lsls	r2, r2, #2
 8001fa6:	4093      	lsls	r3, r2
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fae:	492f      	ldr	r1, [pc, #188]	; (800206c <HAL_GPIO_Init+0x2bc>)
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d006      	beq.n	8001fd6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fc8:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	492c      	ldr	r1, [pc, #176]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	600b      	str	r3, [r1, #0]
 8001fd4:	e006      	b.n	8001fe4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fd6:	4b2a      	ldr	r3, [pc, #168]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	4928      	ldr	r1, [pc, #160]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d006      	beq.n	8001ffe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ff0:	4b23      	ldr	r3, [pc, #140]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	4922      	ldr	r1, [pc, #136]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
 8001ffc:	e006      	b.n	800200c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ffe:	4b20      	ldr	r3, [pc, #128]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	43db      	mvns	r3, r3
 8002006:	491e      	ldr	r1, [pc, #120]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8002008:	4013      	ands	r3, r2
 800200a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d006      	beq.n	8002026 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	4918      	ldr	r1, [pc, #96]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	608b      	str	r3, [r1, #8]
 8002024:	e006      	b.n	8002034 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	43db      	mvns	r3, r3
 800202e:	4914      	ldr	r1, [pc, #80]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8002030:	4013      	ands	r3, r2
 8002032:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d021      	beq.n	8002084 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	490e      	ldr	r1, [pc, #56]	; (8002080 <HAL_GPIO_Init+0x2d0>)
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	60cb      	str	r3, [r1, #12]
 800204c:	e021      	b.n	8002092 <HAL_GPIO_Init+0x2e2>
 800204e:	bf00      	nop
 8002050:	10320000 	.word	0x10320000
 8002054:	10310000 	.word	0x10310000
 8002058:	10220000 	.word	0x10220000
 800205c:	10210000 	.word	0x10210000
 8002060:	10120000 	.word	0x10120000
 8002064:	10110000 	.word	0x10110000
 8002068:	40021000 	.word	0x40021000
 800206c:	40010000 	.word	0x40010000
 8002070:	40010800 	.word	0x40010800
 8002074:	40010c00 	.word	0x40010c00
 8002078:	40011000 	.word	0x40011000
 800207c:	40011400 	.word	0x40011400
 8002080:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_GPIO_Init+0x304>)
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	43db      	mvns	r3, r3
 800208c:	4909      	ldr	r1, [pc, #36]	; (80020b4 <HAL_GPIO_Init+0x304>)
 800208e:	4013      	ands	r3, r2
 8002090:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	3301      	adds	r3, #1
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	fa22 f303 	lsr.w	r3, r2, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f47f ae8e 	bne.w	8001dc4 <HAL_GPIO_Init+0x14>
  }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	372c      	adds	r7, #44	; 0x2c
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	40010400 	.word	0x40010400

080020b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	807b      	strh	r3, [r7, #2]
 80020c4:	4613      	mov	r3, r2
 80020c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020c8:	787b      	ldrb	r3, [r7, #1]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ce:	887a      	ldrh	r2, [r7, #2]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020d4:	e003      	b.n	80020de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020d6:	887b      	ldrh	r3, [r7, #2]
 80020d8:	041a      	lsls	r2, r3, #16
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	611a      	str	r2, [r3, #16]
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr

080020e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020f2:	4b08      	ldr	r3, [pc, #32]	; (8002114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d006      	beq.n	800210c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020fe:	4a05      	ldr	r2, [pc, #20]	; (8002114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002104:	88fb      	ldrh	r3, [r7, #6]
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f806 	bl	8002118 <HAL_GPIO_EXTI_Callback>
  }
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40010400 	.word	0x40010400

08002118 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e272      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8087 	beq.w	800225a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800214c:	4b92      	ldr	r3, [pc, #584]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b04      	cmp	r3, #4
 8002156:	d00c      	beq.n	8002172 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002158:	4b8f      	ldr	r3, [pc, #572]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 030c 	and.w	r3, r3, #12
 8002160:	2b08      	cmp	r3, #8
 8002162:	d112      	bne.n	800218a <HAL_RCC_OscConfig+0x5e>
 8002164:	4b8c      	ldr	r3, [pc, #560]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002170:	d10b      	bne.n	800218a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002172:	4b89      	ldr	r3, [pc, #548]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d06c      	beq.n	8002258 <HAL_RCC_OscConfig+0x12c>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d168      	bne.n	8002258 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e24c      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002192:	d106      	bne.n	80021a2 <HAL_RCC_OscConfig+0x76>
 8002194:	4b80      	ldr	r3, [pc, #512]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a7f      	ldr	r2, [pc, #508]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 800219a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	e02e      	b.n	8002200 <HAL_RCC_OscConfig+0xd4>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x98>
 80021aa:	4b7b      	ldr	r3, [pc, #492]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a7a      	ldr	r2, [pc, #488]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	4b78      	ldr	r3, [pc, #480]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a77      	ldr	r2, [pc, #476]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e01d      	b.n	8002200 <HAL_RCC_OscConfig+0xd4>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0xbc>
 80021ce:	4b72      	ldr	r3, [pc, #456]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a71      	ldr	r2, [pc, #452]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b6f      	ldr	r3, [pc, #444]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a6e      	ldr	r2, [pc, #440]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e00b      	b.n	8002200 <HAL_RCC_OscConfig+0xd4>
 80021e8:	4b6b      	ldr	r3, [pc, #428]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a6a      	ldr	r2, [pc, #424]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b68      	ldr	r3, [pc, #416]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a67      	ldr	r2, [pc, #412]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff f88e 	bl	8001328 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002210:	f7ff f88a 	bl	8001328 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	; 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e200      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b5d      	ldr	r3, [pc, #372]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0xe4>
 800222e:	e014      	b.n	800225a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7ff f87a 	bl	8001328 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002238:	f7ff f876 	bl	8001328 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	; 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e1ec      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	4b53      	ldr	r3, [pc, #332]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x10c>
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d063      	beq.n	800232e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002266:	4b4c      	ldr	r3, [pc, #304]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00b      	beq.n	800228a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002272:	4b49      	ldr	r3, [pc, #292]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b08      	cmp	r3, #8
 800227c:	d11c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x18c>
 800227e:	4b46      	ldr	r3, [pc, #280]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d116      	bne.n	80022b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228a:	4b43      	ldr	r3, [pc, #268]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_RCC_OscConfig+0x176>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e1c0      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a2:	4b3d      	ldr	r3, [pc, #244]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4939      	ldr	r1, [pc, #228]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	e03a      	b.n	800232e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d020      	beq.n	8002302 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c0:	4b36      	ldr	r3, [pc, #216]	; (800239c <HAL_RCC_OscConfig+0x270>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c6:	f7ff f82f 	bl	8001328 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ce:	f7ff f82b 	bl	8001328 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e1a1      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e0:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ec:	4b2a      	ldr	r3, [pc, #168]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4927      	ldr	r1, [pc, #156]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]
 8002300:	e015      	b.n	800232e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002302:	4b26      	ldr	r3, [pc, #152]	; (800239c <HAL_RCC_OscConfig+0x270>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7ff f80e 	bl	8001328 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002310:	f7ff f80a 	bl	8001328 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e180      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d03a      	beq.n	80023b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d019      	beq.n	8002376 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002342:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002344:	2201      	movs	r2, #1
 8002346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002348:	f7fe ffee 	bl	8001328 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002350:	f7fe ffea 	bl	8001328 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e160      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002362:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800236e:	2001      	movs	r0, #1
 8002370:	f000 fad8 	bl	8002924 <RCC_Delay>
 8002374:	e01c      	b.n	80023b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002376:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237c:	f7fe ffd4 	bl	8001328 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002382:	e00f      	b.n	80023a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002384:	f7fe ffd0 	bl	8001328 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d908      	bls.n	80023a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e146      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
 800239c:	42420000 	.word	0x42420000
 80023a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a4:	4b92      	ldr	r3, [pc, #584]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1e9      	bne.n	8002384 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80a6 	beq.w	800250a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c2:	4b8b      	ldr	r3, [pc, #556]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10d      	bne.n	80023ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	4b88      	ldr	r3, [pc, #544]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	4a87      	ldr	r2, [pc, #540]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d8:	61d3      	str	r3, [r2, #28]
 80023da:	4b85      	ldr	r3, [pc, #532]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e6:	2301      	movs	r3, #1
 80023e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ea:	4b82      	ldr	r3, [pc, #520]	; (80025f4 <HAL_RCC_OscConfig+0x4c8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d118      	bne.n	8002428 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f6:	4b7f      	ldr	r3, [pc, #508]	; (80025f4 <HAL_RCC_OscConfig+0x4c8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a7e      	ldr	r2, [pc, #504]	; (80025f4 <HAL_RCC_OscConfig+0x4c8>)
 80023fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002402:	f7fe ff91 	bl	8001328 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240a:	f7fe ff8d 	bl	8001328 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b64      	cmp	r3, #100	; 0x64
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e103      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241c:	4b75      	ldr	r3, [pc, #468]	; (80025f4 <HAL_RCC_OscConfig+0x4c8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d106      	bne.n	800243e <HAL_RCC_OscConfig+0x312>
 8002430:	4b6f      	ldr	r3, [pc, #444]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	4a6e      	ldr	r2, [pc, #440]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6213      	str	r3, [r2, #32]
 800243c:	e02d      	b.n	800249a <HAL_RCC_OscConfig+0x36e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10c      	bne.n	8002460 <HAL_RCC_OscConfig+0x334>
 8002446:	4b6a      	ldr	r3, [pc, #424]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4a69      	ldr	r2, [pc, #420]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	f023 0301 	bic.w	r3, r3, #1
 8002450:	6213      	str	r3, [r2, #32]
 8002452:	4b67      	ldr	r3, [pc, #412]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	4a66      	ldr	r2, [pc, #408]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	f023 0304 	bic.w	r3, r3, #4
 800245c:	6213      	str	r3, [r2, #32]
 800245e:	e01c      	b.n	800249a <HAL_RCC_OscConfig+0x36e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b05      	cmp	r3, #5
 8002466:	d10c      	bne.n	8002482 <HAL_RCC_OscConfig+0x356>
 8002468:	4b61      	ldr	r3, [pc, #388]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4a60      	ldr	r2, [pc, #384]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800246e:	f043 0304 	orr.w	r3, r3, #4
 8002472:	6213      	str	r3, [r2, #32]
 8002474:	4b5e      	ldr	r3, [pc, #376]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4a5d      	ldr	r2, [pc, #372]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6213      	str	r3, [r2, #32]
 8002480:	e00b      	b.n	800249a <HAL_RCC_OscConfig+0x36e>
 8002482:	4b5b      	ldr	r3, [pc, #364]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	4a5a      	ldr	r2, [pc, #360]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	6213      	str	r3, [r2, #32]
 800248e:	4b58      	ldr	r3, [pc, #352]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	4a57      	ldr	r2, [pc, #348]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002494:	f023 0304 	bic.w	r3, r3, #4
 8002498:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d015      	beq.n	80024ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a2:	f7fe ff41 	bl	8001328 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a8:	e00a      	b.n	80024c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024aa:	f7fe ff3d 	bl	8001328 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e0b1      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c0:	4b4b      	ldr	r3, [pc, #300]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0ee      	beq.n	80024aa <HAL_RCC_OscConfig+0x37e>
 80024cc:	e014      	b.n	80024f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ce:	f7fe ff2b 	bl	8001328 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d4:	e00a      	b.n	80024ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f7fe ff27 	bl	8001328 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e09b      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ec:	4b40      	ldr	r3, [pc, #256]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1ee      	bne.n	80024d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d105      	bne.n	800250a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fe:	4b3c      	ldr	r3, [pc, #240]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	4a3b      	ldr	r2, [pc, #236]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002508:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8087 	beq.w	8002622 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002514:	4b36      	ldr	r3, [pc, #216]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b08      	cmp	r3, #8
 800251e:	d061      	beq.n	80025e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d146      	bne.n	80025b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002528:	4b33      	ldr	r3, [pc, #204]	; (80025f8 <HAL_RCC_OscConfig+0x4cc>)
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7fe fefb 	bl	8001328 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002536:	f7fe fef7 	bl	8001328 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e06d      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002548:	4b29      	ldr	r3, [pc, #164]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1f0      	bne.n	8002536 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800255c:	d108      	bne.n	8002570 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800255e:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	4921      	ldr	r1, [pc, #132]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002570:	4b1f      	ldr	r3, [pc, #124]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a19      	ldr	r1, [r3, #32]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	430b      	orrs	r3, r1
 8002582:	491b      	ldr	r1, [pc, #108]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002588:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <HAL_RCC_OscConfig+0x4cc>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258e:	f7fe fecb 	bl	8001328 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002596:	f7fe fec7 	bl	8001328 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e03d      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x46a>
 80025b4:	e035      	b.n	8002622 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <HAL_RCC_OscConfig+0x4cc>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7fe feb4 	bl	8001328 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c4:	f7fe feb0 	bl	8001328 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e026      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x498>
 80025e2:	e01e      	b.n	8002622 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e019      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40007000 	.word	0x40007000
 80025f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_RCC_OscConfig+0x500>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	429a      	cmp	r2, r3
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261a:	429a      	cmp	r2, r3
 800261c:	d001      	beq.n	8002622 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000

08002630 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0d0      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002644:	4b6a      	ldr	r3, [pc, #424]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d910      	bls.n	8002674 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002652:	4b67      	ldr	r3, [pc, #412]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 0207 	bic.w	r2, r3, #7
 800265a:	4965      	ldr	r1, [pc, #404]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002662:	4b63      	ldr	r3, [pc, #396]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0b8      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d020      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800268c:	4b59      	ldr	r3, [pc, #356]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4a58      	ldr	r2, [pc, #352]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002696:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a4:	4b53      	ldr	r3, [pc, #332]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4a52      	ldr	r2, [pc, #328]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b0:	4b50      	ldr	r3, [pc, #320]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	494d      	ldr	r1, [pc, #308]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d040      	beq.n	8002750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d107      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	4b47      	ldr	r3, [pc, #284]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d115      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e07f      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ee:	4b41      	ldr	r3, [pc, #260]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d109      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e073      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fe:	4b3d      	ldr	r3, [pc, #244]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e06b      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800270e:	4b39      	ldr	r3, [pc, #228]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f023 0203 	bic.w	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4936      	ldr	r1, [pc, #216]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002720:	f7fe fe02 	bl	8001328 <HAL_GetTick>
 8002724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002726:	e00a      	b.n	800273e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002728:	f7fe fdfe 	bl	8001328 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f241 3288 	movw	r2, #5000	; 0x1388
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e053      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273e:	4b2d      	ldr	r3, [pc, #180]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 020c 	and.w	r2, r3, #12
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	429a      	cmp	r2, r3
 800274e:	d1eb      	bne.n	8002728 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002750:	4b27      	ldr	r3, [pc, #156]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d210      	bcs.n	8002780 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275e:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 0207 	bic.w	r2, r3, #7
 8002766:	4922      	ldr	r1, [pc, #136]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e032      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800278c:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4916      	ldr	r1, [pc, #88]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	4313      	orrs	r3, r2
 800279c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027aa:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	490e      	ldr	r1, [pc, #56]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027be:	f000 f821 	bl	8002804 <HAL_RCC_GetSysClockFreq>
 80027c2:	4602      	mov	r2, r0
 80027c4:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	490a      	ldr	r1, [pc, #40]	; (80027f8 <HAL_RCC_ClockConfig+0x1c8>)
 80027d0:	5ccb      	ldrb	r3, [r1, r3]
 80027d2:	fa22 f303 	lsr.w	r3, r2, r3
 80027d6:	4a09      	ldr	r2, [pc, #36]	; (80027fc <HAL_RCC_ClockConfig+0x1cc>)
 80027d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_RCC_ClockConfig+0x1d0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe fd60 	bl	80012a4 <HAL_InitTick>

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40022000 	.word	0x40022000
 80027f4:	40021000 	.word	0x40021000
 80027f8:	08007748 	.word	0x08007748
 80027fc:	20000000 	.word	0x20000000
 8002800:	20000004 	.word	0x20000004

08002804 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002804:	b490      	push	{r4, r7}
 8002806:	b08a      	sub	sp, #40	; 0x28
 8002808:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800280a:	4b29      	ldr	r3, [pc, #164]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xac>)
 800280c:	1d3c      	adds	r4, r7, #4
 800280e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002810:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002814:	f240 2301 	movw	r3, #513	; 0x201
 8002818:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	2300      	movs	r3, #0
 8002820:	61bb      	str	r3, [r7, #24]
 8002822:	2300      	movs	r3, #0
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800282e:	4b21      	ldr	r3, [pc, #132]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b04      	cmp	r3, #4
 800283c:	d002      	beq.n	8002844 <HAL_RCC_GetSysClockFreq+0x40>
 800283e:	2b08      	cmp	r3, #8
 8002840:	d003      	beq.n	800284a <HAL_RCC_GetSysClockFreq+0x46>
 8002842:	e02b      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002844:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002846:	623b      	str	r3, [r7, #32]
      break;
 8002848:	e02b      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	0c9b      	lsrs	r3, r3, #18
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	3328      	adds	r3, #40	; 0x28
 8002854:	443b      	add	r3, r7
 8002856:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800285a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d012      	beq.n	800288c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002866:	4b13      	ldr	r3, [pc, #76]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	0c5b      	lsrs	r3, r3, #17
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	3328      	adds	r3, #40	; 0x28
 8002872:	443b      	add	r3, r7
 8002874:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002878:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	4a0e      	ldr	r2, [pc, #56]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800287e:	fb03 f202 	mul.w	r2, r3, r2
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	fbb2 f3f3 	udiv	r3, r2, r3
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
 800288a:	e004      	b.n	8002896 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	4a0b      	ldr	r2, [pc, #44]	; (80028bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002890:	fb02 f303 	mul.w	r3, r2, r3
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	623b      	str	r3, [r7, #32]
      break;
 800289a:	e002      	b.n	80028a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800289c:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800289e:	623b      	str	r3, [r7, #32]
      break;
 80028a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028a2:	6a3b      	ldr	r3, [r7, #32]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3728      	adds	r7, #40	; 0x28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc90      	pop	{r4, r7}
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	08007728 	.word	0x08007728
 80028b4:	40021000 	.word	0x40021000
 80028b8:	007a1200 	.word	0x007a1200
 80028bc:	003d0900 	.word	0x003d0900

080028c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c4:	4b02      	ldr	r3, [pc, #8]	; (80028d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80028c6:	681b      	ldr	r3, [r3, #0]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	20000000 	.word	0x20000000

080028d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028d8:	f7ff fff2 	bl	80028c0 <HAL_RCC_GetHCLKFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4903      	ldr	r1, [pc, #12]	; (80028f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000
 80028f8:	08007758 	.word	0x08007758

080028fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002900:	f7ff ffde 	bl	80028c0 <HAL_RCC_GetHCLKFreq>
 8002904:	4602      	mov	r2, r0
 8002906:	4b05      	ldr	r3, [pc, #20]	; (800291c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	0adb      	lsrs	r3, r3, #11
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	4903      	ldr	r1, [pc, #12]	; (8002920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002918:	4618      	mov	r0, r3
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40021000 	.word	0x40021000
 8002920:	08007758 	.word	0x08007758

08002924 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800292c:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <RCC_Delay+0x34>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0a      	ldr	r2, [pc, #40]	; (800295c <RCC_Delay+0x38>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	0a5b      	lsrs	r3, r3, #9
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	fb02 f303 	mul.w	r3, r2, r3
 800293e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002940:	bf00      	nop
  }
  while (Delay --);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1e5a      	subs	r2, r3, #1
 8002946:	60fa      	str	r2, [r7, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1f9      	bne.n	8002940 <RCC_Delay+0x1c>
}
 800294c:	bf00      	nop
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	20000000 	.word	0x20000000
 800295c:	10624dd3 	.word	0x10624dd3

08002960 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d07d      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800297c:	2300      	movs	r3, #0
 800297e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002980:	4b4f      	ldr	r3, [pc, #316]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10d      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298c:	4b4c      	ldr	r3, [pc, #304]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	4a4b      	ldr	r2, [pc, #300]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002996:	61d3      	str	r3, [r2, #28]
 8002998:	4b49      	ldr	r3, [pc, #292]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a4:	2301      	movs	r3, #1
 80029a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a8:	4b46      	ldr	r3, [pc, #280]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d118      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b4:	4b43      	ldr	r3, [pc, #268]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a42      	ldr	r2, [pc, #264]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c0:	f7fe fcb2 	bl	8001328 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c6:	e008      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c8:	f7fe fcae 	bl	8001328 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	; 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e06d      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029da:	4b3a      	ldr	r3, [pc, #232]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029e6:	4b36      	ldr	r3, [pc, #216]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d02e      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d027      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a04:	4b2e      	ldr	r3, [pc, #184]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a0e:	4b2e      	ldr	r3, [pc, #184]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a14:	4b2c      	ldr	r3, [pc, #176]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a1a:	4a29      	ldr	r2, [pc, #164]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d014      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7fe fc7d 	bl	8001328 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a30:	e00a      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a32:	f7fe fc79 	bl	8001328 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e036      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a48:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ee      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a54:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	4917      	ldr	r1, [pc, #92]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a66:	7dfb      	ldrb	r3, [r7, #23]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d105      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a6c:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	4a13      	ldr	r2, [pc, #76]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a84:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	490b      	ldr	r1, [pc, #44]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0310 	and.w	r3, r3, #16
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d008      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002aa2:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	4904      	ldr	r1, [pc, #16]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40007000 	.word	0x40007000
 8002ac8:	42420440 	.word	0x42420440

08002acc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002acc:	b590      	push	{r4, r7, lr}
 8002ace:	b08d      	sub	sp, #52	; 0x34
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ad4:	4b58      	ldr	r3, [pc, #352]	; (8002c38 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002ad6:	f107 040c 	add.w	r4, r7, #12
 8002ada:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002adc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ae0:	f240 2301 	movw	r3, #513	; 0x201
 8002ae4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aea:	2300      	movs	r3, #0
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aee:	2300      	movs	r3, #0
 8002af0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	2300      	movs	r3, #0
 8002af8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b10      	cmp	r3, #16
 8002afe:	d00a      	beq.n	8002b16 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b10      	cmp	r3, #16
 8002b04:	f200 808e 	bhi.w	8002c24 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d049      	beq.n	8002ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d079      	beq.n	8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002b14:	e086      	b.n	8002c24 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002b16:	4b49      	ldr	r3, [pc, #292]	; (8002c3c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002b1c:	4b47      	ldr	r3, [pc, #284]	; (8002c3c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d07f      	beq.n	8002c28 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	0c9b      	lsrs	r3, r3, #18
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	3330      	adds	r3, #48	; 0x30
 8002b32:	443b      	add	r3, r7
 8002b34:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b38:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d017      	beq.n	8002b74 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b44:	4b3d      	ldr	r3, [pc, #244]	; (8002c3c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	0c5b      	lsrs	r3, r3, #17
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	3330      	adds	r3, #48	; 0x30
 8002b50:	443b      	add	r3, r7
 8002b52:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00d      	beq.n	8002b7e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002b62:	4a37      	ldr	r2, [pc, #220]	; (8002c40 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	fb02 f303 	mul.w	r3, r2, r3
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b72:	e004      	b.n	8002b7e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	4a33      	ldr	r2, [pc, #204]	; (8002c44 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002b78:	fb02 f303 	mul.w	r3, r2, r3
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002b7e:	4b2f      	ldr	r3, [pc, #188]	; (8002c3c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b8a:	d102      	bne.n	8002b92 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b90:	e04a      	b.n	8002c28 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8002b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	4a2c      	ldr	r2, [pc, #176]	; (8002c48 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002b98:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9c:	085b      	lsrs	r3, r3, #1
 8002b9e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002ba0:	e042      	b.n	8002c28 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8002ba2:	4b26      	ldr	r3, [pc, #152]	; (8002c3c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb2:	d108      	bne.n	8002bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8002bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bc4:	e01f      	b.n	8002c06 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd0:	d109      	bne.n	8002be6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8002bd2:	4b1a      	ldr	r3, [pc, #104]	; (8002c3c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8002bde:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002be2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002be4:	e00f      	b.n	8002c06 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bf0:	d11c      	bne.n	8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002bf2:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d016      	beq.n	8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8002bfe:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002c02:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002c04:	e012      	b.n	8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002c06:	e011      	b.n	8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002c08:	f7ff fe78 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	0b9b      	lsrs	r3, r3, #14
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	3301      	adds	r3, #1
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c20:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002c22:	e004      	b.n	8002c2e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002c24:	bf00      	nop
 8002c26:	e002      	b.n	8002c2e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002c28:	bf00      	nop
 8002c2a:	e000      	b.n	8002c2e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002c2c:	bf00      	nop
    }
  }
  return (frequency);
 8002c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3734      	adds	r7, #52	; 0x34
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd90      	pop	{r4, r7, pc}
 8002c38:	08007738 	.word	0x08007738
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	007a1200 	.word	0x007a1200
 8002c44:	003d0900 	.word	0x003d0900
 8002c48:	aaaaaaab 	.word	0xaaaaaaab

08002c4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e03f      	b.n	8002cde <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fe f9a6 	bl	8000fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2224      	movs	r2, #36	; 0x24
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f829 	bl	8002ce8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ca4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d22:	f023 030c 	bic.w	r3, r3, #12
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6812      	ldr	r2, [r2, #0]
 8002d2a:	68b9      	ldr	r1, [r7, #8]
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699a      	ldr	r2, [r3, #24]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a2c      	ldr	r2, [pc, #176]	; (8002dfc <UART_SetConfig+0x114>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d103      	bne.n	8002d58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d50:	f7ff fdd4 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	e002      	b.n	8002d5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d58:	f7ff fdbc 	bl	80028d4 <HAL_RCC_GetPCLK1Freq>
 8002d5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	009a      	lsls	r2, r3, #2
 8002d68:	441a      	add	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d74:	4a22      	ldr	r2, [pc, #136]	; (8002e00 <UART_SetConfig+0x118>)
 8002d76:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	0119      	lsls	r1, r3, #4
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	009a      	lsls	r2, r3, #2
 8002d88:	441a      	add	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d94:	4b1a      	ldr	r3, [pc, #104]	; (8002e00 <UART_SetConfig+0x118>)
 8002d96:	fba3 0302 	umull	r0, r3, r3, r2
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	2064      	movs	r0, #100	; 0x64
 8002d9e:	fb00 f303 	mul.w	r3, r0, r3
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	3332      	adds	r3, #50	; 0x32
 8002da8:	4a15      	ldr	r2, [pc, #84]	; (8002e00 <UART_SetConfig+0x118>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002db4:	4419      	add	r1, r3
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009a      	lsls	r2, r3, #2
 8002dc0:	441a      	add	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <UART_SetConfig+0x118>)
 8002dce:	fba3 0302 	umull	r0, r3, r3, r2
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	2064      	movs	r0, #100	; 0x64
 8002dd6:	fb00 f303 	mul.w	r3, r0, r3
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	3332      	adds	r3, #50	; 0x32
 8002de0:	4a07      	ldr	r2, [pc, #28]	; (8002e00 <UART_SetConfig+0x118>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	f003 020f 	and.w	r2, r3, #15
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	440a      	add	r2, r1
 8002df2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002df4:	bf00      	nop
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40013800 	.word	0x40013800
 8002e00:	51eb851f 	.word	0x51eb851f

08002e04 <__errno>:
 8002e04:	4b01      	ldr	r3, [pc, #4]	; (8002e0c <__errno+0x8>)
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	2000000c 	.word	0x2000000c

08002e10 <__libc_init_array>:
 8002e10:	b570      	push	{r4, r5, r6, lr}
 8002e12:	2600      	movs	r6, #0
 8002e14:	4d0c      	ldr	r5, [pc, #48]	; (8002e48 <__libc_init_array+0x38>)
 8002e16:	4c0d      	ldr	r4, [pc, #52]	; (8002e4c <__libc_init_array+0x3c>)
 8002e18:	1b64      	subs	r4, r4, r5
 8002e1a:	10a4      	asrs	r4, r4, #2
 8002e1c:	42a6      	cmp	r6, r4
 8002e1e:	d109      	bne.n	8002e34 <__libc_init_array+0x24>
 8002e20:	f004 fc6c 	bl	80076fc <_init>
 8002e24:	2600      	movs	r6, #0
 8002e26:	4d0a      	ldr	r5, [pc, #40]	; (8002e50 <__libc_init_array+0x40>)
 8002e28:	4c0a      	ldr	r4, [pc, #40]	; (8002e54 <__libc_init_array+0x44>)
 8002e2a:	1b64      	subs	r4, r4, r5
 8002e2c:	10a4      	asrs	r4, r4, #2
 8002e2e:	42a6      	cmp	r6, r4
 8002e30:	d105      	bne.n	8002e3e <__libc_init_array+0x2e>
 8002e32:	bd70      	pop	{r4, r5, r6, pc}
 8002e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e38:	4798      	blx	r3
 8002e3a:	3601      	adds	r6, #1
 8002e3c:	e7ee      	b.n	8002e1c <__libc_init_array+0xc>
 8002e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e42:	4798      	blx	r3
 8002e44:	3601      	adds	r6, #1
 8002e46:	e7f2      	b.n	8002e2e <__libc_init_array+0x1e>
 8002e48:	08007c0c 	.word	0x08007c0c
 8002e4c:	08007c0c 	.word	0x08007c0c
 8002e50:	08007c0c 	.word	0x08007c0c
 8002e54:	08007c10 	.word	0x08007c10

08002e58 <memset>:
 8002e58:	4603      	mov	r3, r0
 8002e5a:	4402      	add	r2, r0
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d100      	bne.n	8002e62 <memset+0xa>
 8002e60:	4770      	bx	lr
 8002e62:	f803 1b01 	strb.w	r1, [r3], #1
 8002e66:	e7f9      	b.n	8002e5c <memset+0x4>

08002e68 <__cvt>:
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e6e:	461f      	mov	r7, r3
 8002e70:	bfbb      	ittet	lt
 8002e72:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002e76:	461f      	movlt	r7, r3
 8002e78:	2300      	movge	r3, #0
 8002e7a:	232d      	movlt	r3, #45	; 0x2d
 8002e7c:	b088      	sub	sp, #32
 8002e7e:	4614      	mov	r4, r2
 8002e80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002e82:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002e84:	7013      	strb	r3, [r2, #0]
 8002e86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002e88:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002e8c:	f023 0820 	bic.w	r8, r3, #32
 8002e90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002e94:	d005      	beq.n	8002ea2 <__cvt+0x3a>
 8002e96:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002e9a:	d100      	bne.n	8002e9e <__cvt+0x36>
 8002e9c:	3501      	adds	r5, #1
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e000      	b.n	8002ea4 <__cvt+0x3c>
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	aa07      	add	r2, sp, #28
 8002ea6:	9204      	str	r2, [sp, #16]
 8002ea8:	aa06      	add	r2, sp, #24
 8002eaa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002eae:	e9cd 3500 	strd	r3, r5, [sp]
 8002eb2:	4622      	mov	r2, r4
 8002eb4:	463b      	mov	r3, r7
 8002eb6:	f001 fd9b 	bl	80049f0 <_dtoa_r>
 8002eba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002ebe:	4606      	mov	r6, r0
 8002ec0:	d102      	bne.n	8002ec8 <__cvt+0x60>
 8002ec2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002ec4:	07db      	lsls	r3, r3, #31
 8002ec6:	d522      	bpl.n	8002f0e <__cvt+0xa6>
 8002ec8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002ecc:	eb06 0905 	add.w	r9, r6, r5
 8002ed0:	d110      	bne.n	8002ef4 <__cvt+0x8c>
 8002ed2:	7833      	ldrb	r3, [r6, #0]
 8002ed4:	2b30      	cmp	r3, #48	; 0x30
 8002ed6:	d10a      	bne.n	8002eee <__cvt+0x86>
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2300      	movs	r3, #0
 8002edc:	4620      	mov	r0, r4
 8002ede:	4639      	mov	r1, r7
 8002ee0:	f7fd fd62 	bl	80009a8 <__aeabi_dcmpeq>
 8002ee4:	b918      	cbnz	r0, 8002eee <__cvt+0x86>
 8002ee6:	f1c5 0501 	rsb	r5, r5, #1
 8002eea:	f8ca 5000 	str.w	r5, [sl]
 8002eee:	f8da 3000 	ldr.w	r3, [sl]
 8002ef2:	4499      	add	r9, r3
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	4620      	mov	r0, r4
 8002efa:	4639      	mov	r1, r7
 8002efc:	f7fd fd54 	bl	80009a8 <__aeabi_dcmpeq>
 8002f00:	b108      	cbz	r0, 8002f06 <__cvt+0x9e>
 8002f02:	f8cd 901c 	str.w	r9, [sp, #28]
 8002f06:	2230      	movs	r2, #48	; 0x30
 8002f08:	9b07      	ldr	r3, [sp, #28]
 8002f0a:	454b      	cmp	r3, r9
 8002f0c:	d307      	bcc.n	8002f1e <__cvt+0xb6>
 8002f0e:	4630      	mov	r0, r6
 8002f10:	9b07      	ldr	r3, [sp, #28]
 8002f12:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002f14:	1b9b      	subs	r3, r3, r6
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	b008      	add	sp, #32
 8002f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f1e:	1c59      	adds	r1, r3, #1
 8002f20:	9107      	str	r1, [sp, #28]
 8002f22:	701a      	strb	r2, [r3, #0]
 8002f24:	e7f0      	b.n	8002f08 <__cvt+0xa0>

08002f26 <__exponent>:
 8002f26:	4603      	mov	r3, r0
 8002f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f2a:	2900      	cmp	r1, #0
 8002f2c:	f803 2b02 	strb.w	r2, [r3], #2
 8002f30:	bfb6      	itet	lt
 8002f32:	222d      	movlt	r2, #45	; 0x2d
 8002f34:	222b      	movge	r2, #43	; 0x2b
 8002f36:	4249      	neglt	r1, r1
 8002f38:	2909      	cmp	r1, #9
 8002f3a:	7042      	strb	r2, [r0, #1]
 8002f3c:	dd2b      	ble.n	8002f96 <__exponent+0x70>
 8002f3e:	f10d 0407 	add.w	r4, sp, #7
 8002f42:	46a4      	mov	ip, r4
 8002f44:	270a      	movs	r7, #10
 8002f46:	fb91 f6f7 	sdiv	r6, r1, r7
 8002f4a:	460a      	mov	r2, r1
 8002f4c:	46a6      	mov	lr, r4
 8002f4e:	fb07 1516 	mls	r5, r7, r6, r1
 8002f52:	2a63      	cmp	r2, #99	; 0x63
 8002f54:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002f58:	4631      	mov	r1, r6
 8002f5a:	f104 34ff 	add.w	r4, r4, #4294967295
 8002f5e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002f62:	dcf0      	bgt.n	8002f46 <__exponent+0x20>
 8002f64:	3130      	adds	r1, #48	; 0x30
 8002f66:	f1ae 0502 	sub.w	r5, lr, #2
 8002f6a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002f6e:	4629      	mov	r1, r5
 8002f70:	1c44      	adds	r4, r0, #1
 8002f72:	4561      	cmp	r1, ip
 8002f74:	d30a      	bcc.n	8002f8c <__exponent+0x66>
 8002f76:	f10d 0209 	add.w	r2, sp, #9
 8002f7a:	eba2 020e 	sub.w	r2, r2, lr
 8002f7e:	4565      	cmp	r5, ip
 8002f80:	bf88      	it	hi
 8002f82:	2200      	movhi	r2, #0
 8002f84:	4413      	add	r3, r2
 8002f86:	1a18      	subs	r0, r3, r0
 8002f88:	b003      	add	sp, #12
 8002f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f90:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002f94:	e7ed      	b.n	8002f72 <__exponent+0x4c>
 8002f96:	2330      	movs	r3, #48	; 0x30
 8002f98:	3130      	adds	r1, #48	; 0x30
 8002f9a:	7083      	strb	r3, [r0, #2]
 8002f9c:	70c1      	strb	r1, [r0, #3]
 8002f9e:	1d03      	adds	r3, r0, #4
 8002fa0:	e7f1      	b.n	8002f86 <__exponent+0x60>
	...

08002fa4 <_printf_float>:
 8002fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fa8:	b091      	sub	sp, #68	; 0x44
 8002faa:	460c      	mov	r4, r1
 8002fac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002fb0:	4616      	mov	r6, r2
 8002fb2:	461f      	mov	r7, r3
 8002fb4:	4605      	mov	r5, r0
 8002fb6:	f002 ff65 	bl	8005e84 <_localeconv_r>
 8002fba:	6803      	ldr	r3, [r0, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8002fc0:	f7fd f8c6 	bl	8000150 <strlen>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	930e      	str	r3, [sp, #56]	; 0x38
 8002fc8:	f8d8 3000 	ldr.w	r3, [r8]
 8002fcc:	900a      	str	r0, [sp, #40]	; 0x28
 8002fce:	3307      	adds	r3, #7
 8002fd0:	f023 0307 	bic.w	r3, r3, #7
 8002fd4:	f103 0208 	add.w	r2, r3, #8
 8002fd8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002fdc:	f8d4 b000 	ldr.w	fp, [r4]
 8002fe0:	f8c8 2000 	str.w	r2, [r8]
 8002fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002fec:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002ff0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002ff4:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8002ffa:	4640      	mov	r0, r8
 8002ffc:	4b9c      	ldr	r3, [pc, #624]	; (8003270 <_printf_float+0x2cc>)
 8002ffe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003000:	f7fd fd04 	bl	8000a0c <__aeabi_dcmpun>
 8003004:	bb70      	cbnz	r0, 8003064 <_printf_float+0xc0>
 8003006:	f04f 32ff 	mov.w	r2, #4294967295
 800300a:	4640      	mov	r0, r8
 800300c:	4b98      	ldr	r3, [pc, #608]	; (8003270 <_printf_float+0x2cc>)
 800300e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003010:	f7fd fcde 	bl	80009d0 <__aeabi_dcmple>
 8003014:	bb30      	cbnz	r0, 8003064 <_printf_float+0xc0>
 8003016:	2200      	movs	r2, #0
 8003018:	2300      	movs	r3, #0
 800301a:	4640      	mov	r0, r8
 800301c:	4651      	mov	r1, sl
 800301e:	f7fd fccd 	bl	80009bc <__aeabi_dcmplt>
 8003022:	b110      	cbz	r0, 800302a <_printf_float+0x86>
 8003024:	232d      	movs	r3, #45	; 0x2d
 8003026:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800302a:	4b92      	ldr	r3, [pc, #584]	; (8003274 <_printf_float+0x2d0>)
 800302c:	4892      	ldr	r0, [pc, #584]	; (8003278 <_printf_float+0x2d4>)
 800302e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003032:	bf94      	ite	ls
 8003034:	4698      	movls	r8, r3
 8003036:	4680      	movhi	r8, r0
 8003038:	2303      	movs	r3, #3
 800303a:	f04f 0a00 	mov.w	sl, #0
 800303e:	6123      	str	r3, [r4, #16]
 8003040:	f02b 0304 	bic.w	r3, fp, #4
 8003044:	6023      	str	r3, [r4, #0]
 8003046:	4633      	mov	r3, r6
 8003048:	4621      	mov	r1, r4
 800304a:	4628      	mov	r0, r5
 800304c:	9700      	str	r7, [sp, #0]
 800304e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003050:	f000 f9d4 	bl	80033fc <_printf_common>
 8003054:	3001      	adds	r0, #1
 8003056:	f040 8090 	bne.w	800317a <_printf_float+0x1d6>
 800305a:	f04f 30ff 	mov.w	r0, #4294967295
 800305e:	b011      	add	sp, #68	; 0x44
 8003060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003064:	4642      	mov	r2, r8
 8003066:	4653      	mov	r3, sl
 8003068:	4640      	mov	r0, r8
 800306a:	4651      	mov	r1, sl
 800306c:	f7fd fcce 	bl	8000a0c <__aeabi_dcmpun>
 8003070:	b148      	cbz	r0, 8003086 <_printf_float+0xe2>
 8003072:	f1ba 0f00 	cmp.w	sl, #0
 8003076:	bfb8      	it	lt
 8003078:	232d      	movlt	r3, #45	; 0x2d
 800307a:	4880      	ldr	r0, [pc, #512]	; (800327c <_printf_float+0x2d8>)
 800307c:	bfb8      	it	lt
 800307e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003082:	4b7f      	ldr	r3, [pc, #508]	; (8003280 <_printf_float+0x2dc>)
 8003084:	e7d3      	b.n	800302e <_printf_float+0x8a>
 8003086:	6863      	ldr	r3, [r4, #4]
 8003088:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	d142      	bne.n	8003116 <_printf_float+0x172>
 8003090:	2306      	movs	r3, #6
 8003092:	6063      	str	r3, [r4, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	9206      	str	r2, [sp, #24]
 8003098:	aa0e      	add	r2, sp, #56	; 0x38
 800309a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800309e:	aa0d      	add	r2, sp, #52	; 0x34
 80030a0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80030a4:	9203      	str	r2, [sp, #12]
 80030a6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80030aa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80030ae:	6023      	str	r3, [r4, #0]
 80030b0:	6863      	ldr	r3, [r4, #4]
 80030b2:	4642      	mov	r2, r8
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	4628      	mov	r0, r5
 80030b8:	4653      	mov	r3, sl
 80030ba:	910b      	str	r1, [sp, #44]	; 0x2c
 80030bc:	f7ff fed4 	bl	8002e68 <__cvt>
 80030c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80030c2:	4680      	mov	r8, r0
 80030c4:	2947      	cmp	r1, #71	; 0x47
 80030c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80030c8:	d108      	bne.n	80030dc <_printf_float+0x138>
 80030ca:	1cc8      	adds	r0, r1, #3
 80030cc:	db02      	blt.n	80030d4 <_printf_float+0x130>
 80030ce:	6863      	ldr	r3, [r4, #4]
 80030d0:	4299      	cmp	r1, r3
 80030d2:	dd40      	ble.n	8003156 <_printf_float+0x1b2>
 80030d4:	f1a9 0902 	sub.w	r9, r9, #2
 80030d8:	fa5f f989 	uxtb.w	r9, r9
 80030dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80030e0:	d81f      	bhi.n	8003122 <_printf_float+0x17e>
 80030e2:	464a      	mov	r2, r9
 80030e4:	3901      	subs	r1, #1
 80030e6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80030ea:	910d      	str	r1, [sp, #52]	; 0x34
 80030ec:	f7ff ff1b 	bl	8002f26 <__exponent>
 80030f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80030f2:	4682      	mov	sl, r0
 80030f4:	1813      	adds	r3, r2, r0
 80030f6:	2a01      	cmp	r2, #1
 80030f8:	6123      	str	r3, [r4, #16]
 80030fa:	dc02      	bgt.n	8003102 <_printf_float+0x15e>
 80030fc:	6822      	ldr	r2, [r4, #0]
 80030fe:	07d2      	lsls	r2, r2, #31
 8003100:	d501      	bpl.n	8003106 <_printf_float+0x162>
 8003102:	3301      	adds	r3, #1
 8003104:	6123      	str	r3, [r4, #16]
 8003106:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800310a:	2b00      	cmp	r3, #0
 800310c:	d09b      	beq.n	8003046 <_printf_float+0xa2>
 800310e:	232d      	movs	r3, #45	; 0x2d
 8003110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003114:	e797      	b.n	8003046 <_printf_float+0xa2>
 8003116:	2947      	cmp	r1, #71	; 0x47
 8003118:	d1bc      	bne.n	8003094 <_printf_float+0xf0>
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1ba      	bne.n	8003094 <_printf_float+0xf0>
 800311e:	2301      	movs	r3, #1
 8003120:	e7b7      	b.n	8003092 <_printf_float+0xee>
 8003122:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003126:	d118      	bne.n	800315a <_printf_float+0x1b6>
 8003128:	2900      	cmp	r1, #0
 800312a:	6863      	ldr	r3, [r4, #4]
 800312c:	dd0b      	ble.n	8003146 <_printf_float+0x1a2>
 800312e:	6121      	str	r1, [r4, #16]
 8003130:	b913      	cbnz	r3, 8003138 <_printf_float+0x194>
 8003132:	6822      	ldr	r2, [r4, #0]
 8003134:	07d0      	lsls	r0, r2, #31
 8003136:	d502      	bpl.n	800313e <_printf_float+0x19a>
 8003138:	3301      	adds	r3, #1
 800313a:	440b      	add	r3, r1
 800313c:	6123      	str	r3, [r4, #16]
 800313e:	f04f 0a00 	mov.w	sl, #0
 8003142:	65a1      	str	r1, [r4, #88]	; 0x58
 8003144:	e7df      	b.n	8003106 <_printf_float+0x162>
 8003146:	b913      	cbnz	r3, 800314e <_printf_float+0x1aa>
 8003148:	6822      	ldr	r2, [r4, #0]
 800314a:	07d2      	lsls	r2, r2, #31
 800314c:	d501      	bpl.n	8003152 <_printf_float+0x1ae>
 800314e:	3302      	adds	r3, #2
 8003150:	e7f4      	b.n	800313c <_printf_float+0x198>
 8003152:	2301      	movs	r3, #1
 8003154:	e7f2      	b.n	800313c <_printf_float+0x198>
 8003156:	f04f 0967 	mov.w	r9, #103	; 0x67
 800315a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800315c:	4299      	cmp	r1, r3
 800315e:	db05      	blt.n	800316c <_printf_float+0x1c8>
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	6121      	str	r1, [r4, #16]
 8003164:	07d8      	lsls	r0, r3, #31
 8003166:	d5ea      	bpl.n	800313e <_printf_float+0x19a>
 8003168:	1c4b      	adds	r3, r1, #1
 800316a:	e7e7      	b.n	800313c <_printf_float+0x198>
 800316c:	2900      	cmp	r1, #0
 800316e:	bfcc      	ite	gt
 8003170:	2201      	movgt	r2, #1
 8003172:	f1c1 0202 	rsble	r2, r1, #2
 8003176:	4413      	add	r3, r2
 8003178:	e7e0      	b.n	800313c <_printf_float+0x198>
 800317a:	6823      	ldr	r3, [r4, #0]
 800317c:	055a      	lsls	r2, r3, #21
 800317e:	d407      	bmi.n	8003190 <_printf_float+0x1ec>
 8003180:	6923      	ldr	r3, [r4, #16]
 8003182:	4642      	mov	r2, r8
 8003184:	4631      	mov	r1, r6
 8003186:	4628      	mov	r0, r5
 8003188:	47b8      	blx	r7
 800318a:	3001      	adds	r0, #1
 800318c:	d12b      	bne.n	80031e6 <_printf_float+0x242>
 800318e:	e764      	b.n	800305a <_printf_float+0xb6>
 8003190:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003194:	f240 80dd 	bls.w	8003352 <_printf_float+0x3ae>
 8003198:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800319c:	2200      	movs	r2, #0
 800319e:	2300      	movs	r3, #0
 80031a0:	f7fd fc02 	bl	80009a8 <__aeabi_dcmpeq>
 80031a4:	2800      	cmp	r0, #0
 80031a6:	d033      	beq.n	8003210 <_printf_float+0x26c>
 80031a8:	2301      	movs	r3, #1
 80031aa:	4631      	mov	r1, r6
 80031ac:	4628      	mov	r0, r5
 80031ae:	4a35      	ldr	r2, [pc, #212]	; (8003284 <_printf_float+0x2e0>)
 80031b0:	47b8      	blx	r7
 80031b2:	3001      	adds	r0, #1
 80031b4:	f43f af51 	beq.w	800305a <_printf_float+0xb6>
 80031b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80031bc:	429a      	cmp	r2, r3
 80031be:	db02      	blt.n	80031c6 <_printf_float+0x222>
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	07d8      	lsls	r0, r3, #31
 80031c4:	d50f      	bpl.n	80031e6 <_printf_float+0x242>
 80031c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80031ca:	4631      	mov	r1, r6
 80031cc:	4628      	mov	r0, r5
 80031ce:	47b8      	blx	r7
 80031d0:	3001      	adds	r0, #1
 80031d2:	f43f af42 	beq.w	800305a <_printf_float+0xb6>
 80031d6:	f04f 0800 	mov.w	r8, #0
 80031da:	f104 091a 	add.w	r9, r4, #26
 80031de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80031e0:	3b01      	subs	r3, #1
 80031e2:	4543      	cmp	r3, r8
 80031e4:	dc09      	bgt.n	80031fa <_printf_float+0x256>
 80031e6:	6823      	ldr	r3, [r4, #0]
 80031e8:	079b      	lsls	r3, r3, #30
 80031ea:	f100 8102 	bmi.w	80033f2 <_printf_float+0x44e>
 80031ee:	68e0      	ldr	r0, [r4, #12]
 80031f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80031f2:	4298      	cmp	r0, r3
 80031f4:	bfb8      	it	lt
 80031f6:	4618      	movlt	r0, r3
 80031f8:	e731      	b.n	800305e <_printf_float+0xba>
 80031fa:	2301      	movs	r3, #1
 80031fc:	464a      	mov	r2, r9
 80031fe:	4631      	mov	r1, r6
 8003200:	4628      	mov	r0, r5
 8003202:	47b8      	blx	r7
 8003204:	3001      	adds	r0, #1
 8003206:	f43f af28 	beq.w	800305a <_printf_float+0xb6>
 800320a:	f108 0801 	add.w	r8, r8, #1
 800320e:	e7e6      	b.n	80031de <_printf_float+0x23a>
 8003210:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003212:	2b00      	cmp	r3, #0
 8003214:	dc38      	bgt.n	8003288 <_printf_float+0x2e4>
 8003216:	2301      	movs	r3, #1
 8003218:	4631      	mov	r1, r6
 800321a:	4628      	mov	r0, r5
 800321c:	4a19      	ldr	r2, [pc, #100]	; (8003284 <_printf_float+0x2e0>)
 800321e:	47b8      	blx	r7
 8003220:	3001      	adds	r0, #1
 8003222:	f43f af1a 	beq.w	800305a <_printf_float+0xb6>
 8003226:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800322a:	4313      	orrs	r3, r2
 800322c:	d102      	bne.n	8003234 <_printf_float+0x290>
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	07d9      	lsls	r1, r3, #31
 8003232:	d5d8      	bpl.n	80031e6 <_printf_float+0x242>
 8003234:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003238:	4631      	mov	r1, r6
 800323a:	4628      	mov	r0, r5
 800323c:	47b8      	blx	r7
 800323e:	3001      	adds	r0, #1
 8003240:	f43f af0b 	beq.w	800305a <_printf_float+0xb6>
 8003244:	f04f 0900 	mov.w	r9, #0
 8003248:	f104 0a1a 	add.w	sl, r4, #26
 800324c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800324e:	425b      	negs	r3, r3
 8003250:	454b      	cmp	r3, r9
 8003252:	dc01      	bgt.n	8003258 <_printf_float+0x2b4>
 8003254:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003256:	e794      	b.n	8003182 <_printf_float+0x1de>
 8003258:	2301      	movs	r3, #1
 800325a:	4652      	mov	r2, sl
 800325c:	4631      	mov	r1, r6
 800325e:	4628      	mov	r0, r5
 8003260:	47b8      	blx	r7
 8003262:	3001      	adds	r0, #1
 8003264:	f43f aef9 	beq.w	800305a <_printf_float+0xb6>
 8003268:	f109 0901 	add.w	r9, r9, #1
 800326c:	e7ee      	b.n	800324c <_printf_float+0x2a8>
 800326e:	bf00      	nop
 8003270:	7fefffff 	.word	0x7fefffff
 8003274:	08007764 	.word	0x08007764
 8003278:	08007768 	.word	0x08007768
 800327c:	08007770 	.word	0x08007770
 8003280:	0800776c 	.word	0x0800776c
 8003284:	08007774 	.word	0x08007774
 8003288:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800328a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800328c:	429a      	cmp	r2, r3
 800328e:	bfa8      	it	ge
 8003290:	461a      	movge	r2, r3
 8003292:	2a00      	cmp	r2, #0
 8003294:	4691      	mov	r9, r2
 8003296:	dc37      	bgt.n	8003308 <_printf_float+0x364>
 8003298:	f04f 0b00 	mov.w	fp, #0
 800329c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80032a0:	f104 021a 	add.w	r2, r4, #26
 80032a4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80032a8:	ebaa 0309 	sub.w	r3, sl, r9
 80032ac:	455b      	cmp	r3, fp
 80032ae:	dc33      	bgt.n	8003318 <_printf_float+0x374>
 80032b0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80032b4:	429a      	cmp	r2, r3
 80032b6:	db3b      	blt.n	8003330 <_printf_float+0x38c>
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	07da      	lsls	r2, r3, #31
 80032bc:	d438      	bmi.n	8003330 <_printf_float+0x38c>
 80032be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80032c2:	eba3 020a 	sub.w	r2, r3, sl
 80032c6:	eba3 0901 	sub.w	r9, r3, r1
 80032ca:	4591      	cmp	r9, r2
 80032cc:	bfa8      	it	ge
 80032ce:	4691      	movge	r9, r2
 80032d0:	f1b9 0f00 	cmp.w	r9, #0
 80032d4:	dc34      	bgt.n	8003340 <_printf_float+0x39c>
 80032d6:	f04f 0800 	mov.w	r8, #0
 80032da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80032de:	f104 0a1a 	add.w	sl, r4, #26
 80032e2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80032e6:	1a9b      	subs	r3, r3, r2
 80032e8:	eba3 0309 	sub.w	r3, r3, r9
 80032ec:	4543      	cmp	r3, r8
 80032ee:	f77f af7a 	ble.w	80031e6 <_printf_float+0x242>
 80032f2:	2301      	movs	r3, #1
 80032f4:	4652      	mov	r2, sl
 80032f6:	4631      	mov	r1, r6
 80032f8:	4628      	mov	r0, r5
 80032fa:	47b8      	blx	r7
 80032fc:	3001      	adds	r0, #1
 80032fe:	f43f aeac 	beq.w	800305a <_printf_float+0xb6>
 8003302:	f108 0801 	add.w	r8, r8, #1
 8003306:	e7ec      	b.n	80032e2 <_printf_float+0x33e>
 8003308:	4613      	mov	r3, r2
 800330a:	4631      	mov	r1, r6
 800330c:	4642      	mov	r2, r8
 800330e:	4628      	mov	r0, r5
 8003310:	47b8      	blx	r7
 8003312:	3001      	adds	r0, #1
 8003314:	d1c0      	bne.n	8003298 <_printf_float+0x2f4>
 8003316:	e6a0      	b.n	800305a <_printf_float+0xb6>
 8003318:	2301      	movs	r3, #1
 800331a:	4631      	mov	r1, r6
 800331c:	4628      	mov	r0, r5
 800331e:	920b      	str	r2, [sp, #44]	; 0x2c
 8003320:	47b8      	blx	r7
 8003322:	3001      	adds	r0, #1
 8003324:	f43f ae99 	beq.w	800305a <_printf_float+0xb6>
 8003328:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800332a:	f10b 0b01 	add.w	fp, fp, #1
 800332e:	e7b9      	b.n	80032a4 <_printf_float+0x300>
 8003330:	4631      	mov	r1, r6
 8003332:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003336:	4628      	mov	r0, r5
 8003338:	47b8      	blx	r7
 800333a:	3001      	adds	r0, #1
 800333c:	d1bf      	bne.n	80032be <_printf_float+0x31a>
 800333e:	e68c      	b.n	800305a <_printf_float+0xb6>
 8003340:	464b      	mov	r3, r9
 8003342:	4631      	mov	r1, r6
 8003344:	4628      	mov	r0, r5
 8003346:	eb08 020a 	add.w	r2, r8, sl
 800334a:	47b8      	blx	r7
 800334c:	3001      	adds	r0, #1
 800334e:	d1c2      	bne.n	80032d6 <_printf_float+0x332>
 8003350:	e683      	b.n	800305a <_printf_float+0xb6>
 8003352:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003354:	2a01      	cmp	r2, #1
 8003356:	dc01      	bgt.n	800335c <_printf_float+0x3b8>
 8003358:	07db      	lsls	r3, r3, #31
 800335a:	d537      	bpl.n	80033cc <_printf_float+0x428>
 800335c:	2301      	movs	r3, #1
 800335e:	4642      	mov	r2, r8
 8003360:	4631      	mov	r1, r6
 8003362:	4628      	mov	r0, r5
 8003364:	47b8      	blx	r7
 8003366:	3001      	adds	r0, #1
 8003368:	f43f ae77 	beq.w	800305a <_printf_float+0xb6>
 800336c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003370:	4631      	mov	r1, r6
 8003372:	4628      	mov	r0, r5
 8003374:	47b8      	blx	r7
 8003376:	3001      	adds	r0, #1
 8003378:	f43f ae6f 	beq.w	800305a <_printf_float+0xb6>
 800337c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003380:	2200      	movs	r2, #0
 8003382:	2300      	movs	r3, #0
 8003384:	f7fd fb10 	bl	80009a8 <__aeabi_dcmpeq>
 8003388:	b9d8      	cbnz	r0, 80033c2 <_printf_float+0x41e>
 800338a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800338c:	f108 0201 	add.w	r2, r8, #1
 8003390:	3b01      	subs	r3, #1
 8003392:	4631      	mov	r1, r6
 8003394:	4628      	mov	r0, r5
 8003396:	47b8      	blx	r7
 8003398:	3001      	adds	r0, #1
 800339a:	d10e      	bne.n	80033ba <_printf_float+0x416>
 800339c:	e65d      	b.n	800305a <_printf_float+0xb6>
 800339e:	2301      	movs	r3, #1
 80033a0:	464a      	mov	r2, r9
 80033a2:	4631      	mov	r1, r6
 80033a4:	4628      	mov	r0, r5
 80033a6:	47b8      	blx	r7
 80033a8:	3001      	adds	r0, #1
 80033aa:	f43f ae56 	beq.w	800305a <_printf_float+0xb6>
 80033ae:	f108 0801 	add.w	r8, r8, #1
 80033b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033b4:	3b01      	subs	r3, #1
 80033b6:	4543      	cmp	r3, r8
 80033b8:	dcf1      	bgt.n	800339e <_printf_float+0x3fa>
 80033ba:	4653      	mov	r3, sl
 80033bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80033c0:	e6e0      	b.n	8003184 <_printf_float+0x1e0>
 80033c2:	f04f 0800 	mov.w	r8, #0
 80033c6:	f104 091a 	add.w	r9, r4, #26
 80033ca:	e7f2      	b.n	80033b2 <_printf_float+0x40e>
 80033cc:	2301      	movs	r3, #1
 80033ce:	4642      	mov	r2, r8
 80033d0:	e7df      	b.n	8003392 <_printf_float+0x3ee>
 80033d2:	2301      	movs	r3, #1
 80033d4:	464a      	mov	r2, r9
 80033d6:	4631      	mov	r1, r6
 80033d8:	4628      	mov	r0, r5
 80033da:	47b8      	blx	r7
 80033dc:	3001      	adds	r0, #1
 80033de:	f43f ae3c 	beq.w	800305a <_printf_float+0xb6>
 80033e2:	f108 0801 	add.w	r8, r8, #1
 80033e6:	68e3      	ldr	r3, [r4, #12]
 80033e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80033ea:	1a5b      	subs	r3, r3, r1
 80033ec:	4543      	cmp	r3, r8
 80033ee:	dcf0      	bgt.n	80033d2 <_printf_float+0x42e>
 80033f0:	e6fd      	b.n	80031ee <_printf_float+0x24a>
 80033f2:	f04f 0800 	mov.w	r8, #0
 80033f6:	f104 0919 	add.w	r9, r4, #25
 80033fa:	e7f4      	b.n	80033e6 <_printf_float+0x442>

080033fc <_printf_common>:
 80033fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003400:	4616      	mov	r6, r2
 8003402:	4699      	mov	r9, r3
 8003404:	688a      	ldr	r2, [r1, #8]
 8003406:	690b      	ldr	r3, [r1, #16]
 8003408:	4607      	mov	r7, r0
 800340a:	4293      	cmp	r3, r2
 800340c:	bfb8      	it	lt
 800340e:	4613      	movlt	r3, r2
 8003410:	6033      	str	r3, [r6, #0]
 8003412:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003416:	460c      	mov	r4, r1
 8003418:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800341c:	b10a      	cbz	r2, 8003422 <_printf_common+0x26>
 800341e:	3301      	adds	r3, #1
 8003420:	6033      	str	r3, [r6, #0]
 8003422:	6823      	ldr	r3, [r4, #0]
 8003424:	0699      	lsls	r1, r3, #26
 8003426:	bf42      	ittt	mi
 8003428:	6833      	ldrmi	r3, [r6, #0]
 800342a:	3302      	addmi	r3, #2
 800342c:	6033      	strmi	r3, [r6, #0]
 800342e:	6825      	ldr	r5, [r4, #0]
 8003430:	f015 0506 	ands.w	r5, r5, #6
 8003434:	d106      	bne.n	8003444 <_printf_common+0x48>
 8003436:	f104 0a19 	add.w	sl, r4, #25
 800343a:	68e3      	ldr	r3, [r4, #12]
 800343c:	6832      	ldr	r2, [r6, #0]
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	42ab      	cmp	r3, r5
 8003442:	dc28      	bgt.n	8003496 <_printf_common+0x9a>
 8003444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003448:	1e13      	subs	r3, r2, #0
 800344a:	6822      	ldr	r2, [r4, #0]
 800344c:	bf18      	it	ne
 800344e:	2301      	movne	r3, #1
 8003450:	0692      	lsls	r2, r2, #26
 8003452:	d42d      	bmi.n	80034b0 <_printf_common+0xb4>
 8003454:	4649      	mov	r1, r9
 8003456:	4638      	mov	r0, r7
 8003458:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800345c:	47c0      	blx	r8
 800345e:	3001      	adds	r0, #1
 8003460:	d020      	beq.n	80034a4 <_printf_common+0xa8>
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	68e5      	ldr	r5, [r4, #12]
 8003466:	f003 0306 	and.w	r3, r3, #6
 800346a:	2b04      	cmp	r3, #4
 800346c:	bf18      	it	ne
 800346e:	2500      	movne	r5, #0
 8003470:	6832      	ldr	r2, [r6, #0]
 8003472:	f04f 0600 	mov.w	r6, #0
 8003476:	68a3      	ldr	r3, [r4, #8]
 8003478:	bf08      	it	eq
 800347a:	1aad      	subeq	r5, r5, r2
 800347c:	6922      	ldr	r2, [r4, #16]
 800347e:	bf08      	it	eq
 8003480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003484:	4293      	cmp	r3, r2
 8003486:	bfc4      	itt	gt
 8003488:	1a9b      	subgt	r3, r3, r2
 800348a:	18ed      	addgt	r5, r5, r3
 800348c:	341a      	adds	r4, #26
 800348e:	42b5      	cmp	r5, r6
 8003490:	d11a      	bne.n	80034c8 <_printf_common+0xcc>
 8003492:	2000      	movs	r0, #0
 8003494:	e008      	b.n	80034a8 <_printf_common+0xac>
 8003496:	2301      	movs	r3, #1
 8003498:	4652      	mov	r2, sl
 800349a:	4649      	mov	r1, r9
 800349c:	4638      	mov	r0, r7
 800349e:	47c0      	blx	r8
 80034a0:	3001      	adds	r0, #1
 80034a2:	d103      	bne.n	80034ac <_printf_common+0xb0>
 80034a4:	f04f 30ff 	mov.w	r0, #4294967295
 80034a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034ac:	3501      	adds	r5, #1
 80034ae:	e7c4      	b.n	800343a <_printf_common+0x3e>
 80034b0:	2030      	movs	r0, #48	; 0x30
 80034b2:	18e1      	adds	r1, r4, r3
 80034b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034b8:	1c5a      	adds	r2, r3, #1
 80034ba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034be:	4422      	add	r2, r4
 80034c0:	3302      	adds	r3, #2
 80034c2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034c6:	e7c5      	b.n	8003454 <_printf_common+0x58>
 80034c8:	2301      	movs	r3, #1
 80034ca:	4622      	mov	r2, r4
 80034cc:	4649      	mov	r1, r9
 80034ce:	4638      	mov	r0, r7
 80034d0:	47c0      	blx	r8
 80034d2:	3001      	adds	r0, #1
 80034d4:	d0e6      	beq.n	80034a4 <_printf_common+0xa8>
 80034d6:	3601      	adds	r6, #1
 80034d8:	e7d9      	b.n	800348e <_printf_common+0x92>
	...

080034dc <_printf_i>:
 80034dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034e0:	7e0f      	ldrb	r7, [r1, #24]
 80034e2:	4691      	mov	r9, r2
 80034e4:	2f78      	cmp	r7, #120	; 0x78
 80034e6:	4680      	mov	r8, r0
 80034e8:	460c      	mov	r4, r1
 80034ea:	469a      	mov	sl, r3
 80034ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80034ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80034f2:	d807      	bhi.n	8003504 <_printf_i+0x28>
 80034f4:	2f62      	cmp	r7, #98	; 0x62
 80034f6:	d80a      	bhi.n	800350e <_printf_i+0x32>
 80034f8:	2f00      	cmp	r7, #0
 80034fa:	f000 80d9 	beq.w	80036b0 <_printf_i+0x1d4>
 80034fe:	2f58      	cmp	r7, #88	; 0x58
 8003500:	f000 80a4 	beq.w	800364c <_printf_i+0x170>
 8003504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003508:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800350c:	e03a      	b.n	8003584 <_printf_i+0xa8>
 800350e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003512:	2b15      	cmp	r3, #21
 8003514:	d8f6      	bhi.n	8003504 <_printf_i+0x28>
 8003516:	a101      	add	r1, pc, #4	; (adr r1, 800351c <_printf_i+0x40>)
 8003518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800351c:	08003575 	.word	0x08003575
 8003520:	08003589 	.word	0x08003589
 8003524:	08003505 	.word	0x08003505
 8003528:	08003505 	.word	0x08003505
 800352c:	08003505 	.word	0x08003505
 8003530:	08003505 	.word	0x08003505
 8003534:	08003589 	.word	0x08003589
 8003538:	08003505 	.word	0x08003505
 800353c:	08003505 	.word	0x08003505
 8003540:	08003505 	.word	0x08003505
 8003544:	08003505 	.word	0x08003505
 8003548:	08003697 	.word	0x08003697
 800354c:	080035b9 	.word	0x080035b9
 8003550:	08003679 	.word	0x08003679
 8003554:	08003505 	.word	0x08003505
 8003558:	08003505 	.word	0x08003505
 800355c:	080036b9 	.word	0x080036b9
 8003560:	08003505 	.word	0x08003505
 8003564:	080035b9 	.word	0x080035b9
 8003568:	08003505 	.word	0x08003505
 800356c:	08003505 	.word	0x08003505
 8003570:	08003681 	.word	0x08003681
 8003574:	682b      	ldr	r3, [r5, #0]
 8003576:	1d1a      	adds	r2, r3, #4
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	602a      	str	r2, [r5, #0]
 800357c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003580:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003584:	2301      	movs	r3, #1
 8003586:	e0a4      	b.n	80036d2 <_printf_i+0x1f6>
 8003588:	6820      	ldr	r0, [r4, #0]
 800358a:	6829      	ldr	r1, [r5, #0]
 800358c:	0606      	lsls	r6, r0, #24
 800358e:	f101 0304 	add.w	r3, r1, #4
 8003592:	d50a      	bpl.n	80035aa <_printf_i+0xce>
 8003594:	680e      	ldr	r6, [r1, #0]
 8003596:	602b      	str	r3, [r5, #0]
 8003598:	2e00      	cmp	r6, #0
 800359a:	da03      	bge.n	80035a4 <_printf_i+0xc8>
 800359c:	232d      	movs	r3, #45	; 0x2d
 800359e:	4276      	negs	r6, r6
 80035a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035a4:	230a      	movs	r3, #10
 80035a6:	485e      	ldr	r0, [pc, #376]	; (8003720 <_printf_i+0x244>)
 80035a8:	e019      	b.n	80035de <_printf_i+0x102>
 80035aa:	680e      	ldr	r6, [r1, #0]
 80035ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80035b0:	602b      	str	r3, [r5, #0]
 80035b2:	bf18      	it	ne
 80035b4:	b236      	sxthne	r6, r6
 80035b6:	e7ef      	b.n	8003598 <_printf_i+0xbc>
 80035b8:	682b      	ldr	r3, [r5, #0]
 80035ba:	6820      	ldr	r0, [r4, #0]
 80035bc:	1d19      	adds	r1, r3, #4
 80035be:	6029      	str	r1, [r5, #0]
 80035c0:	0601      	lsls	r1, r0, #24
 80035c2:	d501      	bpl.n	80035c8 <_printf_i+0xec>
 80035c4:	681e      	ldr	r6, [r3, #0]
 80035c6:	e002      	b.n	80035ce <_printf_i+0xf2>
 80035c8:	0646      	lsls	r6, r0, #25
 80035ca:	d5fb      	bpl.n	80035c4 <_printf_i+0xe8>
 80035cc:	881e      	ldrh	r6, [r3, #0]
 80035ce:	2f6f      	cmp	r7, #111	; 0x6f
 80035d0:	bf0c      	ite	eq
 80035d2:	2308      	moveq	r3, #8
 80035d4:	230a      	movne	r3, #10
 80035d6:	4852      	ldr	r0, [pc, #328]	; (8003720 <_printf_i+0x244>)
 80035d8:	2100      	movs	r1, #0
 80035da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035de:	6865      	ldr	r5, [r4, #4]
 80035e0:	2d00      	cmp	r5, #0
 80035e2:	bfa8      	it	ge
 80035e4:	6821      	ldrge	r1, [r4, #0]
 80035e6:	60a5      	str	r5, [r4, #8]
 80035e8:	bfa4      	itt	ge
 80035ea:	f021 0104 	bicge.w	r1, r1, #4
 80035ee:	6021      	strge	r1, [r4, #0]
 80035f0:	b90e      	cbnz	r6, 80035f6 <_printf_i+0x11a>
 80035f2:	2d00      	cmp	r5, #0
 80035f4:	d04d      	beq.n	8003692 <_printf_i+0x1b6>
 80035f6:	4615      	mov	r5, r2
 80035f8:	fbb6 f1f3 	udiv	r1, r6, r3
 80035fc:	fb03 6711 	mls	r7, r3, r1, r6
 8003600:	5dc7      	ldrb	r7, [r0, r7]
 8003602:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003606:	4637      	mov	r7, r6
 8003608:	42bb      	cmp	r3, r7
 800360a:	460e      	mov	r6, r1
 800360c:	d9f4      	bls.n	80035f8 <_printf_i+0x11c>
 800360e:	2b08      	cmp	r3, #8
 8003610:	d10b      	bne.n	800362a <_printf_i+0x14e>
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	07de      	lsls	r6, r3, #31
 8003616:	d508      	bpl.n	800362a <_printf_i+0x14e>
 8003618:	6923      	ldr	r3, [r4, #16]
 800361a:	6861      	ldr	r1, [r4, #4]
 800361c:	4299      	cmp	r1, r3
 800361e:	bfde      	ittt	le
 8003620:	2330      	movle	r3, #48	; 0x30
 8003622:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003626:	f105 35ff 	addle.w	r5, r5, #4294967295
 800362a:	1b52      	subs	r2, r2, r5
 800362c:	6122      	str	r2, [r4, #16]
 800362e:	464b      	mov	r3, r9
 8003630:	4621      	mov	r1, r4
 8003632:	4640      	mov	r0, r8
 8003634:	f8cd a000 	str.w	sl, [sp]
 8003638:	aa03      	add	r2, sp, #12
 800363a:	f7ff fedf 	bl	80033fc <_printf_common>
 800363e:	3001      	adds	r0, #1
 8003640:	d14c      	bne.n	80036dc <_printf_i+0x200>
 8003642:	f04f 30ff 	mov.w	r0, #4294967295
 8003646:	b004      	add	sp, #16
 8003648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800364c:	4834      	ldr	r0, [pc, #208]	; (8003720 <_printf_i+0x244>)
 800364e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003652:	6829      	ldr	r1, [r5, #0]
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	f851 6b04 	ldr.w	r6, [r1], #4
 800365a:	6029      	str	r1, [r5, #0]
 800365c:	061d      	lsls	r5, r3, #24
 800365e:	d514      	bpl.n	800368a <_printf_i+0x1ae>
 8003660:	07df      	lsls	r7, r3, #31
 8003662:	bf44      	itt	mi
 8003664:	f043 0320 	orrmi.w	r3, r3, #32
 8003668:	6023      	strmi	r3, [r4, #0]
 800366a:	b91e      	cbnz	r6, 8003674 <_printf_i+0x198>
 800366c:	6823      	ldr	r3, [r4, #0]
 800366e:	f023 0320 	bic.w	r3, r3, #32
 8003672:	6023      	str	r3, [r4, #0]
 8003674:	2310      	movs	r3, #16
 8003676:	e7af      	b.n	80035d8 <_printf_i+0xfc>
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	f043 0320 	orr.w	r3, r3, #32
 800367e:	6023      	str	r3, [r4, #0]
 8003680:	2378      	movs	r3, #120	; 0x78
 8003682:	4828      	ldr	r0, [pc, #160]	; (8003724 <_printf_i+0x248>)
 8003684:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003688:	e7e3      	b.n	8003652 <_printf_i+0x176>
 800368a:	0659      	lsls	r1, r3, #25
 800368c:	bf48      	it	mi
 800368e:	b2b6      	uxthmi	r6, r6
 8003690:	e7e6      	b.n	8003660 <_printf_i+0x184>
 8003692:	4615      	mov	r5, r2
 8003694:	e7bb      	b.n	800360e <_printf_i+0x132>
 8003696:	682b      	ldr	r3, [r5, #0]
 8003698:	6826      	ldr	r6, [r4, #0]
 800369a:	1d18      	adds	r0, r3, #4
 800369c:	6961      	ldr	r1, [r4, #20]
 800369e:	6028      	str	r0, [r5, #0]
 80036a0:	0635      	lsls	r5, r6, #24
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	d501      	bpl.n	80036aa <_printf_i+0x1ce>
 80036a6:	6019      	str	r1, [r3, #0]
 80036a8:	e002      	b.n	80036b0 <_printf_i+0x1d4>
 80036aa:	0670      	lsls	r0, r6, #25
 80036ac:	d5fb      	bpl.n	80036a6 <_printf_i+0x1ca>
 80036ae:	8019      	strh	r1, [r3, #0]
 80036b0:	2300      	movs	r3, #0
 80036b2:	4615      	mov	r5, r2
 80036b4:	6123      	str	r3, [r4, #16]
 80036b6:	e7ba      	b.n	800362e <_printf_i+0x152>
 80036b8:	682b      	ldr	r3, [r5, #0]
 80036ba:	2100      	movs	r1, #0
 80036bc:	1d1a      	adds	r2, r3, #4
 80036be:	602a      	str	r2, [r5, #0]
 80036c0:	681d      	ldr	r5, [r3, #0]
 80036c2:	6862      	ldr	r2, [r4, #4]
 80036c4:	4628      	mov	r0, r5
 80036c6:	f002 fbff 	bl	8005ec8 <memchr>
 80036ca:	b108      	cbz	r0, 80036d0 <_printf_i+0x1f4>
 80036cc:	1b40      	subs	r0, r0, r5
 80036ce:	6060      	str	r0, [r4, #4]
 80036d0:	6863      	ldr	r3, [r4, #4]
 80036d2:	6123      	str	r3, [r4, #16]
 80036d4:	2300      	movs	r3, #0
 80036d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036da:	e7a8      	b.n	800362e <_printf_i+0x152>
 80036dc:	462a      	mov	r2, r5
 80036de:	4649      	mov	r1, r9
 80036e0:	4640      	mov	r0, r8
 80036e2:	6923      	ldr	r3, [r4, #16]
 80036e4:	47d0      	blx	sl
 80036e6:	3001      	adds	r0, #1
 80036e8:	d0ab      	beq.n	8003642 <_printf_i+0x166>
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	079b      	lsls	r3, r3, #30
 80036ee:	d413      	bmi.n	8003718 <_printf_i+0x23c>
 80036f0:	68e0      	ldr	r0, [r4, #12]
 80036f2:	9b03      	ldr	r3, [sp, #12]
 80036f4:	4298      	cmp	r0, r3
 80036f6:	bfb8      	it	lt
 80036f8:	4618      	movlt	r0, r3
 80036fa:	e7a4      	b.n	8003646 <_printf_i+0x16a>
 80036fc:	2301      	movs	r3, #1
 80036fe:	4632      	mov	r2, r6
 8003700:	4649      	mov	r1, r9
 8003702:	4640      	mov	r0, r8
 8003704:	47d0      	blx	sl
 8003706:	3001      	adds	r0, #1
 8003708:	d09b      	beq.n	8003642 <_printf_i+0x166>
 800370a:	3501      	adds	r5, #1
 800370c:	68e3      	ldr	r3, [r4, #12]
 800370e:	9903      	ldr	r1, [sp, #12]
 8003710:	1a5b      	subs	r3, r3, r1
 8003712:	42ab      	cmp	r3, r5
 8003714:	dcf2      	bgt.n	80036fc <_printf_i+0x220>
 8003716:	e7eb      	b.n	80036f0 <_printf_i+0x214>
 8003718:	2500      	movs	r5, #0
 800371a:	f104 0619 	add.w	r6, r4, #25
 800371e:	e7f5      	b.n	800370c <_printf_i+0x230>
 8003720:	08007776 	.word	0x08007776
 8003724:	08007787 	.word	0x08007787

08003728 <_scanf_float>:
 8003728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800372c:	b087      	sub	sp, #28
 800372e:	9303      	str	r3, [sp, #12]
 8003730:	688b      	ldr	r3, [r1, #8]
 8003732:	4617      	mov	r7, r2
 8003734:	1e5a      	subs	r2, r3, #1
 8003736:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800373a:	bf85      	ittet	hi
 800373c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003740:	195b      	addhi	r3, r3, r5
 8003742:	2300      	movls	r3, #0
 8003744:	9302      	strhi	r3, [sp, #8]
 8003746:	bf88      	it	hi
 8003748:	f240 135d 	movwhi	r3, #349	; 0x15d
 800374c:	468b      	mov	fp, r1
 800374e:	f04f 0500 	mov.w	r5, #0
 8003752:	bf8c      	ite	hi
 8003754:	608b      	strhi	r3, [r1, #8]
 8003756:	9302      	strls	r3, [sp, #8]
 8003758:	680b      	ldr	r3, [r1, #0]
 800375a:	4680      	mov	r8, r0
 800375c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003760:	f84b 3b1c 	str.w	r3, [fp], #28
 8003764:	460c      	mov	r4, r1
 8003766:	465e      	mov	r6, fp
 8003768:	46aa      	mov	sl, r5
 800376a:	46a9      	mov	r9, r5
 800376c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003770:	9501      	str	r5, [sp, #4]
 8003772:	68a2      	ldr	r2, [r4, #8]
 8003774:	b152      	cbz	r2, 800378c <_scanf_float+0x64>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b4e      	cmp	r3, #78	; 0x4e
 800377c:	d864      	bhi.n	8003848 <_scanf_float+0x120>
 800377e:	2b40      	cmp	r3, #64	; 0x40
 8003780:	d83c      	bhi.n	80037fc <_scanf_float+0xd4>
 8003782:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003786:	b2c8      	uxtb	r0, r1
 8003788:	280e      	cmp	r0, #14
 800378a:	d93a      	bls.n	8003802 <_scanf_float+0xda>
 800378c:	f1b9 0f00 	cmp.w	r9, #0
 8003790:	d003      	beq.n	800379a <_scanf_float+0x72>
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003798:	6023      	str	r3, [r4, #0]
 800379a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800379e:	f1ba 0f01 	cmp.w	sl, #1
 80037a2:	f200 8113 	bhi.w	80039cc <_scanf_float+0x2a4>
 80037a6:	455e      	cmp	r6, fp
 80037a8:	f200 8105 	bhi.w	80039b6 <_scanf_float+0x28e>
 80037ac:	2501      	movs	r5, #1
 80037ae:	4628      	mov	r0, r5
 80037b0:	b007      	add	sp, #28
 80037b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037b6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80037ba:	2a0d      	cmp	r2, #13
 80037bc:	d8e6      	bhi.n	800378c <_scanf_float+0x64>
 80037be:	a101      	add	r1, pc, #4	; (adr r1, 80037c4 <_scanf_float+0x9c>)
 80037c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80037c4:	08003903 	.word	0x08003903
 80037c8:	0800378d 	.word	0x0800378d
 80037cc:	0800378d 	.word	0x0800378d
 80037d0:	0800378d 	.word	0x0800378d
 80037d4:	08003963 	.word	0x08003963
 80037d8:	0800393b 	.word	0x0800393b
 80037dc:	0800378d 	.word	0x0800378d
 80037e0:	0800378d 	.word	0x0800378d
 80037e4:	08003911 	.word	0x08003911
 80037e8:	0800378d 	.word	0x0800378d
 80037ec:	0800378d 	.word	0x0800378d
 80037f0:	0800378d 	.word	0x0800378d
 80037f4:	0800378d 	.word	0x0800378d
 80037f8:	080038c9 	.word	0x080038c9
 80037fc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003800:	e7db      	b.n	80037ba <_scanf_float+0x92>
 8003802:	290e      	cmp	r1, #14
 8003804:	d8c2      	bhi.n	800378c <_scanf_float+0x64>
 8003806:	a001      	add	r0, pc, #4	; (adr r0, 800380c <_scanf_float+0xe4>)
 8003808:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800380c:	080038bb 	.word	0x080038bb
 8003810:	0800378d 	.word	0x0800378d
 8003814:	080038bb 	.word	0x080038bb
 8003818:	0800394f 	.word	0x0800394f
 800381c:	0800378d 	.word	0x0800378d
 8003820:	08003869 	.word	0x08003869
 8003824:	080038a5 	.word	0x080038a5
 8003828:	080038a5 	.word	0x080038a5
 800382c:	080038a5 	.word	0x080038a5
 8003830:	080038a5 	.word	0x080038a5
 8003834:	080038a5 	.word	0x080038a5
 8003838:	080038a5 	.word	0x080038a5
 800383c:	080038a5 	.word	0x080038a5
 8003840:	080038a5 	.word	0x080038a5
 8003844:	080038a5 	.word	0x080038a5
 8003848:	2b6e      	cmp	r3, #110	; 0x6e
 800384a:	d809      	bhi.n	8003860 <_scanf_float+0x138>
 800384c:	2b60      	cmp	r3, #96	; 0x60
 800384e:	d8b2      	bhi.n	80037b6 <_scanf_float+0x8e>
 8003850:	2b54      	cmp	r3, #84	; 0x54
 8003852:	d077      	beq.n	8003944 <_scanf_float+0x21c>
 8003854:	2b59      	cmp	r3, #89	; 0x59
 8003856:	d199      	bne.n	800378c <_scanf_float+0x64>
 8003858:	2d07      	cmp	r5, #7
 800385a:	d197      	bne.n	800378c <_scanf_float+0x64>
 800385c:	2508      	movs	r5, #8
 800385e:	e029      	b.n	80038b4 <_scanf_float+0x18c>
 8003860:	2b74      	cmp	r3, #116	; 0x74
 8003862:	d06f      	beq.n	8003944 <_scanf_float+0x21c>
 8003864:	2b79      	cmp	r3, #121	; 0x79
 8003866:	e7f6      	b.n	8003856 <_scanf_float+0x12e>
 8003868:	6821      	ldr	r1, [r4, #0]
 800386a:	05c8      	lsls	r0, r1, #23
 800386c:	d51a      	bpl.n	80038a4 <_scanf_float+0x17c>
 800386e:	9b02      	ldr	r3, [sp, #8]
 8003870:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003874:	6021      	str	r1, [r4, #0]
 8003876:	f109 0901 	add.w	r9, r9, #1
 800387a:	b11b      	cbz	r3, 8003884 <_scanf_float+0x15c>
 800387c:	3b01      	subs	r3, #1
 800387e:	3201      	adds	r2, #1
 8003880:	9302      	str	r3, [sp, #8]
 8003882:	60a2      	str	r2, [r4, #8]
 8003884:	68a3      	ldr	r3, [r4, #8]
 8003886:	3b01      	subs	r3, #1
 8003888:	60a3      	str	r3, [r4, #8]
 800388a:	6923      	ldr	r3, [r4, #16]
 800388c:	3301      	adds	r3, #1
 800388e:	6123      	str	r3, [r4, #16]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3b01      	subs	r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	607b      	str	r3, [r7, #4]
 8003898:	f340 8084 	ble.w	80039a4 <_scanf_float+0x27c>
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	3301      	adds	r3, #1
 80038a0:	603b      	str	r3, [r7, #0]
 80038a2:	e766      	b.n	8003772 <_scanf_float+0x4a>
 80038a4:	eb1a 0f05 	cmn.w	sl, r5
 80038a8:	f47f af70 	bne.w	800378c <_scanf_float+0x64>
 80038ac:	6822      	ldr	r2, [r4, #0]
 80038ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80038b2:	6022      	str	r2, [r4, #0]
 80038b4:	f806 3b01 	strb.w	r3, [r6], #1
 80038b8:	e7e4      	b.n	8003884 <_scanf_float+0x15c>
 80038ba:	6822      	ldr	r2, [r4, #0]
 80038bc:	0610      	lsls	r0, r2, #24
 80038be:	f57f af65 	bpl.w	800378c <_scanf_float+0x64>
 80038c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038c6:	e7f4      	b.n	80038b2 <_scanf_float+0x18a>
 80038c8:	f1ba 0f00 	cmp.w	sl, #0
 80038cc:	d10e      	bne.n	80038ec <_scanf_float+0x1c4>
 80038ce:	f1b9 0f00 	cmp.w	r9, #0
 80038d2:	d10e      	bne.n	80038f2 <_scanf_float+0x1ca>
 80038d4:	6822      	ldr	r2, [r4, #0]
 80038d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80038da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80038de:	d108      	bne.n	80038f2 <_scanf_float+0x1ca>
 80038e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80038e4:	f04f 0a01 	mov.w	sl, #1
 80038e8:	6022      	str	r2, [r4, #0]
 80038ea:	e7e3      	b.n	80038b4 <_scanf_float+0x18c>
 80038ec:	f1ba 0f02 	cmp.w	sl, #2
 80038f0:	d055      	beq.n	800399e <_scanf_float+0x276>
 80038f2:	2d01      	cmp	r5, #1
 80038f4:	d002      	beq.n	80038fc <_scanf_float+0x1d4>
 80038f6:	2d04      	cmp	r5, #4
 80038f8:	f47f af48 	bne.w	800378c <_scanf_float+0x64>
 80038fc:	3501      	adds	r5, #1
 80038fe:	b2ed      	uxtb	r5, r5
 8003900:	e7d8      	b.n	80038b4 <_scanf_float+0x18c>
 8003902:	f1ba 0f01 	cmp.w	sl, #1
 8003906:	f47f af41 	bne.w	800378c <_scanf_float+0x64>
 800390a:	f04f 0a02 	mov.w	sl, #2
 800390e:	e7d1      	b.n	80038b4 <_scanf_float+0x18c>
 8003910:	b97d      	cbnz	r5, 8003932 <_scanf_float+0x20a>
 8003912:	f1b9 0f00 	cmp.w	r9, #0
 8003916:	f47f af3c 	bne.w	8003792 <_scanf_float+0x6a>
 800391a:	6822      	ldr	r2, [r4, #0]
 800391c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003920:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003924:	f47f af39 	bne.w	800379a <_scanf_float+0x72>
 8003928:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800392c:	2501      	movs	r5, #1
 800392e:	6022      	str	r2, [r4, #0]
 8003930:	e7c0      	b.n	80038b4 <_scanf_float+0x18c>
 8003932:	2d03      	cmp	r5, #3
 8003934:	d0e2      	beq.n	80038fc <_scanf_float+0x1d4>
 8003936:	2d05      	cmp	r5, #5
 8003938:	e7de      	b.n	80038f8 <_scanf_float+0x1d0>
 800393a:	2d02      	cmp	r5, #2
 800393c:	f47f af26 	bne.w	800378c <_scanf_float+0x64>
 8003940:	2503      	movs	r5, #3
 8003942:	e7b7      	b.n	80038b4 <_scanf_float+0x18c>
 8003944:	2d06      	cmp	r5, #6
 8003946:	f47f af21 	bne.w	800378c <_scanf_float+0x64>
 800394a:	2507      	movs	r5, #7
 800394c:	e7b2      	b.n	80038b4 <_scanf_float+0x18c>
 800394e:	6822      	ldr	r2, [r4, #0]
 8003950:	0591      	lsls	r1, r2, #22
 8003952:	f57f af1b 	bpl.w	800378c <_scanf_float+0x64>
 8003956:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800395a:	6022      	str	r2, [r4, #0]
 800395c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003960:	e7a8      	b.n	80038b4 <_scanf_float+0x18c>
 8003962:	6822      	ldr	r2, [r4, #0]
 8003964:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003968:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800396c:	d006      	beq.n	800397c <_scanf_float+0x254>
 800396e:	0550      	lsls	r0, r2, #21
 8003970:	f57f af0c 	bpl.w	800378c <_scanf_float+0x64>
 8003974:	f1b9 0f00 	cmp.w	r9, #0
 8003978:	f43f af0f 	beq.w	800379a <_scanf_float+0x72>
 800397c:	0591      	lsls	r1, r2, #22
 800397e:	bf58      	it	pl
 8003980:	9901      	ldrpl	r1, [sp, #4]
 8003982:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003986:	bf58      	it	pl
 8003988:	eba9 0101 	subpl.w	r1, r9, r1
 800398c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003990:	f04f 0900 	mov.w	r9, #0
 8003994:	bf58      	it	pl
 8003996:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800399a:	6022      	str	r2, [r4, #0]
 800399c:	e78a      	b.n	80038b4 <_scanf_float+0x18c>
 800399e:	f04f 0a03 	mov.w	sl, #3
 80039a2:	e787      	b.n	80038b4 <_scanf_float+0x18c>
 80039a4:	4639      	mov	r1, r7
 80039a6:	4640      	mov	r0, r8
 80039a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80039ac:	4798      	blx	r3
 80039ae:	2800      	cmp	r0, #0
 80039b0:	f43f aedf 	beq.w	8003772 <_scanf_float+0x4a>
 80039b4:	e6ea      	b.n	800378c <_scanf_float+0x64>
 80039b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80039ba:	463a      	mov	r2, r7
 80039bc:	4640      	mov	r0, r8
 80039be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80039c2:	4798      	blx	r3
 80039c4:	6923      	ldr	r3, [r4, #16]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	6123      	str	r3, [r4, #16]
 80039ca:	e6ec      	b.n	80037a6 <_scanf_float+0x7e>
 80039cc:	1e6b      	subs	r3, r5, #1
 80039ce:	2b06      	cmp	r3, #6
 80039d0:	d825      	bhi.n	8003a1e <_scanf_float+0x2f6>
 80039d2:	2d02      	cmp	r5, #2
 80039d4:	d836      	bhi.n	8003a44 <_scanf_float+0x31c>
 80039d6:	455e      	cmp	r6, fp
 80039d8:	f67f aee8 	bls.w	80037ac <_scanf_float+0x84>
 80039dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80039e0:	463a      	mov	r2, r7
 80039e2:	4640      	mov	r0, r8
 80039e4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80039e8:	4798      	blx	r3
 80039ea:	6923      	ldr	r3, [r4, #16]
 80039ec:	3b01      	subs	r3, #1
 80039ee:	6123      	str	r3, [r4, #16]
 80039f0:	e7f1      	b.n	80039d6 <_scanf_float+0x2ae>
 80039f2:	9802      	ldr	r0, [sp, #8]
 80039f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80039f8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80039fc:	463a      	mov	r2, r7
 80039fe:	9002      	str	r0, [sp, #8]
 8003a00:	4640      	mov	r0, r8
 8003a02:	4798      	blx	r3
 8003a04:	6923      	ldr	r3, [r4, #16]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	6123      	str	r3, [r4, #16]
 8003a0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003a0e:	fa5f fa8a 	uxtb.w	sl, sl
 8003a12:	f1ba 0f02 	cmp.w	sl, #2
 8003a16:	d1ec      	bne.n	80039f2 <_scanf_float+0x2ca>
 8003a18:	3d03      	subs	r5, #3
 8003a1a:	b2ed      	uxtb	r5, r5
 8003a1c:	1b76      	subs	r6, r6, r5
 8003a1e:	6823      	ldr	r3, [r4, #0]
 8003a20:	05da      	lsls	r2, r3, #23
 8003a22:	d52f      	bpl.n	8003a84 <_scanf_float+0x35c>
 8003a24:	055b      	lsls	r3, r3, #21
 8003a26:	d510      	bpl.n	8003a4a <_scanf_float+0x322>
 8003a28:	455e      	cmp	r6, fp
 8003a2a:	f67f aebf 	bls.w	80037ac <_scanf_float+0x84>
 8003a2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003a32:	463a      	mov	r2, r7
 8003a34:	4640      	mov	r0, r8
 8003a36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003a3a:	4798      	blx	r3
 8003a3c:	6923      	ldr	r3, [r4, #16]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	6123      	str	r3, [r4, #16]
 8003a42:	e7f1      	b.n	8003a28 <_scanf_float+0x300>
 8003a44:	46aa      	mov	sl, r5
 8003a46:	9602      	str	r6, [sp, #8]
 8003a48:	e7df      	b.n	8003a0a <_scanf_float+0x2e2>
 8003a4a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003a4e:	6923      	ldr	r3, [r4, #16]
 8003a50:	2965      	cmp	r1, #101	; 0x65
 8003a52:	f103 33ff 	add.w	r3, r3, #4294967295
 8003a56:	f106 35ff 	add.w	r5, r6, #4294967295
 8003a5a:	6123      	str	r3, [r4, #16]
 8003a5c:	d00c      	beq.n	8003a78 <_scanf_float+0x350>
 8003a5e:	2945      	cmp	r1, #69	; 0x45
 8003a60:	d00a      	beq.n	8003a78 <_scanf_float+0x350>
 8003a62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003a66:	463a      	mov	r2, r7
 8003a68:	4640      	mov	r0, r8
 8003a6a:	4798      	blx	r3
 8003a6c:	6923      	ldr	r3, [r4, #16]
 8003a6e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	1eb5      	subs	r5, r6, #2
 8003a76:	6123      	str	r3, [r4, #16]
 8003a78:	463a      	mov	r2, r7
 8003a7a:	4640      	mov	r0, r8
 8003a7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003a80:	4798      	blx	r3
 8003a82:	462e      	mov	r6, r5
 8003a84:	6825      	ldr	r5, [r4, #0]
 8003a86:	f015 0510 	ands.w	r5, r5, #16
 8003a8a:	d155      	bne.n	8003b38 <_scanf_float+0x410>
 8003a8c:	7035      	strb	r5, [r6, #0]
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a98:	d11b      	bne.n	8003ad2 <_scanf_float+0x3aa>
 8003a9a:	9b01      	ldr	r3, [sp, #4]
 8003a9c:	454b      	cmp	r3, r9
 8003a9e:	eba3 0209 	sub.w	r2, r3, r9
 8003aa2:	d123      	bne.n	8003aec <_scanf_float+0x3c4>
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	4659      	mov	r1, fp
 8003aa8:	4640      	mov	r0, r8
 8003aaa:	f000 fe91 	bl	80047d0 <_strtod_r>
 8003aae:	6822      	ldr	r2, [r4, #0]
 8003ab0:	9b03      	ldr	r3, [sp, #12]
 8003ab2:	f012 0f02 	tst.w	r2, #2
 8003ab6:	4606      	mov	r6, r0
 8003ab8:	460f      	mov	r7, r1
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	d021      	beq.n	8003b02 <_scanf_float+0x3da>
 8003abe:	1d1a      	adds	r2, r3, #4
 8003ac0:	9903      	ldr	r1, [sp, #12]
 8003ac2:	600a      	str	r2, [r1, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	e9c3 6700 	strd	r6, r7, [r3]
 8003aca:	68e3      	ldr	r3, [r4, #12]
 8003acc:	3301      	adds	r3, #1
 8003ace:	60e3      	str	r3, [r4, #12]
 8003ad0:	e66d      	b.n	80037ae <_scanf_float+0x86>
 8003ad2:	9b04      	ldr	r3, [sp, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0e5      	beq.n	8003aa4 <_scanf_float+0x37c>
 8003ad8:	9905      	ldr	r1, [sp, #20]
 8003ada:	230a      	movs	r3, #10
 8003adc:	462a      	mov	r2, r5
 8003ade:	4640      	mov	r0, r8
 8003ae0:	3101      	adds	r1, #1
 8003ae2:	f000 fef7 	bl	80048d4 <_strtol_r>
 8003ae6:	9b04      	ldr	r3, [sp, #16]
 8003ae8:	9e05      	ldr	r6, [sp, #20]
 8003aea:	1ac2      	subs	r2, r0, r3
 8003aec:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003af0:	429e      	cmp	r6, r3
 8003af2:	bf28      	it	cs
 8003af4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003af8:	4630      	mov	r0, r6
 8003afa:	4910      	ldr	r1, [pc, #64]	; (8003b3c <_scanf_float+0x414>)
 8003afc:	f000 f83e 	bl	8003b7c <siprintf>
 8003b00:	e7d0      	b.n	8003aa4 <_scanf_float+0x37c>
 8003b02:	f012 0f04 	tst.w	r2, #4
 8003b06:	f103 0204 	add.w	r2, r3, #4
 8003b0a:	d1d9      	bne.n	8003ac0 <_scanf_float+0x398>
 8003b0c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003b10:	f8cc 2000 	str.w	r2, [ip]
 8003b14:	f8d3 8000 	ldr.w	r8, [r3]
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	f7fc ff76 	bl	8000a0c <__aeabi_dcmpun>
 8003b20:	b128      	cbz	r0, 8003b2e <_scanf_float+0x406>
 8003b22:	4807      	ldr	r0, [pc, #28]	; (8003b40 <_scanf_float+0x418>)
 8003b24:	f000 f826 	bl	8003b74 <nanf>
 8003b28:	f8c8 0000 	str.w	r0, [r8]
 8003b2c:	e7cd      	b.n	8003aca <_scanf_float+0x3a2>
 8003b2e:	4630      	mov	r0, r6
 8003b30:	4639      	mov	r1, r7
 8003b32:	f7fc ffc9 	bl	8000ac8 <__aeabi_d2f>
 8003b36:	e7f7      	b.n	8003b28 <_scanf_float+0x400>
 8003b38:	2500      	movs	r5, #0
 8003b3a:	e638      	b.n	80037ae <_scanf_float+0x86>
 8003b3c:	08007798 	.word	0x08007798
 8003b40:	08007c08 	.word	0x08007c08

08003b44 <iprintf>:
 8003b44:	b40f      	push	{r0, r1, r2, r3}
 8003b46:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <iprintf+0x2c>)
 8003b48:	b513      	push	{r0, r1, r4, lr}
 8003b4a:	681c      	ldr	r4, [r3, #0]
 8003b4c:	b124      	cbz	r4, 8003b58 <iprintf+0x14>
 8003b4e:	69a3      	ldr	r3, [r4, #24]
 8003b50:	b913      	cbnz	r3, 8003b58 <iprintf+0x14>
 8003b52:	4620      	mov	r0, r4
 8003b54:	f001 fd92 	bl	800567c <__sinit>
 8003b58:	ab05      	add	r3, sp, #20
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	9a04      	ldr	r2, [sp, #16]
 8003b5e:	68a1      	ldr	r1, [r4, #8]
 8003b60:	9301      	str	r3, [sp, #4]
 8003b62:	f003 f8f9 	bl	8006d58 <_vfiprintf_r>
 8003b66:	b002      	add	sp, #8
 8003b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b6c:	b004      	add	sp, #16
 8003b6e:	4770      	bx	lr
 8003b70:	2000000c 	.word	0x2000000c

08003b74 <nanf>:
 8003b74:	4800      	ldr	r0, [pc, #0]	; (8003b78 <nanf+0x4>)
 8003b76:	4770      	bx	lr
 8003b78:	7fc00000 	.word	0x7fc00000

08003b7c <siprintf>:
 8003b7c:	b40e      	push	{r1, r2, r3}
 8003b7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b82:	b500      	push	{lr}
 8003b84:	b09c      	sub	sp, #112	; 0x70
 8003b86:	ab1d      	add	r3, sp, #116	; 0x74
 8003b88:	9002      	str	r0, [sp, #8]
 8003b8a:	9006      	str	r0, [sp, #24]
 8003b8c:	9107      	str	r1, [sp, #28]
 8003b8e:	9104      	str	r1, [sp, #16]
 8003b90:	4808      	ldr	r0, [pc, #32]	; (8003bb4 <siprintf+0x38>)
 8003b92:	4909      	ldr	r1, [pc, #36]	; (8003bb8 <siprintf+0x3c>)
 8003b94:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b98:	9105      	str	r1, [sp, #20]
 8003b9a:	6800      	ldr	r0, [r0, #0]
 8003b9c:	a902      	add	r1, sp, #8
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	f002 ffb2 	bl	8006b08 <_svfiprintf_r>
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	9b02      	ldr	r3, [sp, #8]
 8003ba8:	701a      	strb	r2, [r3, #0]
 8003baa:	b01c      	add	sp, #112	; 0x70
 8003bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bb0:	b003      	add	sp, #12
 8003bb2:	4770      	bx	lr
 8003bb4:	2000000c 	.word	0x2000000c
 8003bb8:	ffff0208 	.word	0xffff0208

08003bbc <sulp>:
 8003bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bc0:	460f      	mov	r7, r1
 8003bc2:	4690      	mov	r8, r2
 8003bc4:	f002 fd0c 	bl	80065e0 <__ulp>
 8003bc8:	4604      	mov	r4, r0
 8003bca:	460d      	mov	r5, r1
 8003bcc:	f1b8 0f00 	cmp.w	r8, #0
 8003bd0:	d011      	beq.n	8003bf6 <sulp+0x3a>
 8003bd2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003bd6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	dd0b      	ble.n	8003bf6 <sulp+0x3a>
 8003bde:	2400      	movs	r4, #0
 8003be0:	051b      	lsls	r3, r3, #20
 8003be2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003be6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003bea:	4622      	mov	r2, r4
 8003bec:	462b      	mov	r3, r5
 8003bee:	f7fc fc73 	bl	80004d8 <__aeabi_dmul>
 8003bf2:	4604      	mov	r4, r0
 8003bf4:	460d      	mov	r5, r1
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003c00 <_strtod_l>:
 8003c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c04:	469b      	mov	fp, r3
 8003c06:	2300      	movs	r3, #0
 8003c08:	b09f      	sub	sp, #124	; 0x7c
 8003c0a:	931a      	str	r3, [sp, #104]	; 0x68
 8003c0c:	4b9e      	ldr	r3, [pc, #632]	; (8003e88 <_strtod_l+0x288>)
 8003c0e:	4682      	mov	sl, r0
 8003c10:	681f      	ldr	r7, [r3, #0]
 8003c12:	460e      	mov	r6, r1
 8003c14:	4638      	mov	r0, r7
 8003c16:	9215      	str	r2, [sp, #84]	; 0x54
 8003c18:	f7fc fa9a 	bl	8000150 <strlen>
 8003c1c:	f04f 0800 	mov.w	r8, #0
 8003c20:	4604      	mov	r4, r0
 8003c22:	f04f 0900 	mov.w	r9, #0
 8003c26:	9619      	str	r6, [sp, #100]	; 0x64
 8003c28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003c2a:	781a      	ldrb	r2, [r3, #0]
 8003c2c:	2a2b      	cmp	r2, #43	; 0x2b
 8003c2e:	d04c      	beq.n	8003cca <_strtod_l+0xca>
 8003c30:	d83a      	bhi.n	8003ca8 <_strtod_l+0xa8>
 8003c32:	2a0d      	cmp	r2, #13
 8003c34:	d833      	bhi.n	8003c9e <_strtod_l+0x9e>
 8003c36:	2a08      	cmp	r2, #8
 8003c38:	d833      	bhi.n	8003ca2 <_strtod_l+0xa2>
 8003c3a:	2a00      	cmp	r2, #0
 8003c3c:	d03d      	beq.n	8003cba <_strtod_l+0xba>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	930a      	str	r3, [sp, #40]	; 0x28
 8003c42:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8003c44:	782b      	ldrb	r3, [r5, #0]
 8003c46:	2b30      	cmp	r3, #48	; 0x30
 8003c48:	f040 80aa 	bne.w	8003da0 <_strtod_l+0x1a0>
 8003c4c:	786b      	ldrb	r3, [r5, #1]
 8003c4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003c52:	2b58      	cmp	r3, #88	; 0x58
 8003c54:	d166      	bne.n	8003d24 <_strtod_l+0x124>
 8003c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c58:	4650      	mov	r0, sl
 8003c5a:	9301      	str	r3, [sp, #4]
 8003c5c:	ab1a      	add	r3, sp, #104	; 0x68
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	4a8a      	ldr	r2, [pc, #552]	; (8003e8c <_strtod_l+0x28c>)
 8003c62:	f8cd b008 	str.w	fp, [sp, #8]
 8003c66:	ab1b      	add	r3, sp, #108	; 0x6c
 8003c68:	a919      	add	r1, sp, #100	; 0x64
 8003c6a:	f001 fe0d 	bl	8005888 <__gethex>
 8003c6e:	f010 0607 	ands.w	r6, r0, #7
 8003c72:	4604      	mov	r4, r0
 8003c74:	d005      	beq.n	8003c82 <_strtod_l+0x82>
 8003c76:	2e06      	cmp	r6, #6
 8003c78:	d129      	bne.n	8003cce <_strtod_l+0xce>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	3501      	adds	r5, #1
 8003c7e:	9519      	str	r5, [sp, #100]	; 0x64
 8003c80:	930a      	str	r3, [sp, #40]	; 0x28
 8003c82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f040 858a 	bne.w	800479e <_strtod_l+0xb9e>
 8003c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c8c:	b1d3      	cbz	r3, 8003cc4 <_strtod_l+0xc4>
 8003c8e:	4642      	mov	r2, r8
 8003c90:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003c94:	4610      	mov	r0, r2
 8003c96:	4619      	mov	r1, r3
 8003c98:	b01f      	add	sp, #124	; 0x7c
 8003c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c9e:	2a20      	cmp	r2, #32
 8003ca0:	d1cd      	bne.n	8003c3e <_strtod_l+0x3e>
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	9319      	str	r3, [sp, #100]	; 0x64
 8003ca6:	e7bf      	b.n	8003c28 <_strtod_l+0x28>
 8003ca8:	2a2d      	cmp	r2, #45	; 0x2d
 8003caa:	d1c8      	bne.n	8003c3e <_strtod_l+0x3e>
 8003cac:	2201      	movs	r2, #1
 8003cae:	920a      	str	r2, [sp, #40]	; 0x28
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	9219      	str	r2, [sp, #100]	; 0x64
 8003cb4:	785b      	ldrb	r3, [r3, #1]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1c3      	bne.n	8003c42 <_strtod_l+0x42>
 8003cba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003cbc:	9619      	str	r6, [sp, #100]	; 0x64
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f040 856b 	bne.w	800479a <_strtod_l+0xb9a>
 8003cc4:	4642      	mov	r2, r8
 8003cc6:	464b      	mov	r3, r9
 8003cc8:	e7e4      	b.n	8003c94 <_strtod_l+0x94>
 8003cca:	2200      	movs	r2, #0
 8003ccc:	e7ef      	b.n	8003cae <_strtod_l+0xae>
 8003cce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003cd0:	b13a      	cbz	r2, 8003ce2 <_strtod_l+0xe2>
 8003cd2:	2135      	movs	r1, #53	; 0x35
 8003cd4:	a81c      	add	r0, sp, #112	; 0x70
 8003cd6:	f002 fd87 	bl	80067e8 <__copybits>
 8003cda:	4650      	mov	r0, sl
 8003cdc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003cde:	f002 f94f 	bl	8005f80 <_Bfree>
 8003ce2:	3e01      	subs	r6, #1
 8003ce4:	2e04      	cmp	r6, #4
 8003ce6:	d806      	bhi.n	8003cf6 <_strtod_l+0xf6>
 8003ce8:	e8df f006 	tbb	[pc, r6]
 8003cec:	1714030a 	.word	0x1714030a
 8003cf0:	0a          	.byte	0x0a
 8003cf1:	00          	.byte	0x00
 8003cf2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8003cf6:	0721      	lsls	r1, r4, #28
 8003cf8:	d5c3      	bpl.n	8003c82 <_strtod_l+0x82>
 8003cfa:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8003cfe:	e7c0      	b.n	8003c82 <_strtod_l+0x82>
 8003d00:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003d02:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8003d06:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003d0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003d0e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8003d12:	e7f0      	b.n	8003cf6 <_strtod_l+0xf6>
 8003d14:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8003e90 <_strtod_l+0x290>
 8003d18:	e7ed      	b.n	8003cf6 <_strtod_l+0xf6>
 8003d1a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8003d1e:	f04f 38ff 	mov.w	r8, #4294967295
 8003d22:	e7e8      	b.n	8003cf6 <_strtod_l+0xf6>
 8003d24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	9219      	str	r2, [sp, #100]	; 0x64
 8003d2a:	785b      	ldrb	r3, [r3, #1]
 8003d2c:	2b30      	cmp	r3, #48	; 0x30
 8003d2e:	d0f9      	beq.n	8003d24 <_strtod_l+0x124>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0a6      	beq.n	8003c82 <_strtod_l+0x82>
 8003d34:	2301      	movs	r3, #1
 8003d36:	9307      	str	r3, [sp, #28]
 8003d38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003d3a:	220a      	movs	r2, #10
 8003d3c:	9308      	str	r3, [sp, #32]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	469b      	mov	fp, r3
 8003d42:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003d46:	9819      	ldr	r0, [sp, #100]	; 0x64
 8003d48:	7805      	ldrb	r5, [r0, #0]
 8003d4a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8003d4e:	b2d9      	uxtb	r1, r3
 8003d50:	2909      	cmp	r1, #9
 8003d52:	d927      	bls.n	8003da4 <_strtod_l+0x1a4>
 8003d54:	4622      	mov	r2, r4
 8003d56:	4639      	mov	r1, r7
 8003d58:	f003 f987 	bl	800706a <strncmp>
 8003d5c:	2800      	cmp	r0, #0
 8003d5e:	d033      	beq.n	8003dc8 <_strtod_l+0x1c8>
 8003d60:	2000      	movs	r0, #0
 8003d62:	462a      	mov	r2, r5
 8003d64:	465c      	mov	r4, fp
 8003d66:	4603      	mov	r3, r0
 8003d68:	9004      	str	r0, [sp, #16]
 8003d6a:	2a65      	cmp	r2, #101	; 0x65
 8003d6c:	d001      	beq.n	8003d72 <_strtod_l+0x172>
 8003d6e:	2a45      	cmp	r2, #69	; 0x45
 8003d70:	d114      	bne.n	8003d9c <_strtod_l+0x19c>
 8003d72:	b91c      	cbnz	r4, 8003d7c <_strtod_l+0x17c>
 8003d74:	9a07      	ldr	r2, [sp, #28]
 8003d76:	4302      	orrs	r2, r0
 8003d78:	d09f      	beq.n	8003cba <_strtod_l+0xba>
 8003d7a:	2400      	movs	r4, #0
 8003d7c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8003d7e:	1c72      	adds	r2, r6, #1
 8003d80:	9219      	str	r2, [sp, #100]	; 0x64
 8003d82:	7872      	ldrb	r2, [r6, #1]
 8003d84:	2a2b      	cmp	r2, #43	; 0x2b
 8003d86:	d079      	beq.n	8003e7c <_strtod_l+0x27c>
 8003d88:	2a2d      	cmp	r2, #45	; 0x2d
 8003d8a:	f000 8083 	beq.w	8003e94 <_strtod_l+0x294>
 8003d8e:	2700      	movs	r7, #0
 8003d90:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8003d94:	2909      	cmp	r1, #9
 8003d96:	f240 8083 	bls.w	8003ea0 <_strtod_l+0x2a0>
 8003d9a:	9619      	str	r6, [sp, #100]	; 0x64
 8003d9c:	2500      	movs	r5, #0
 8003d9e:	e09f      	b.n	8003ee0 <_strtod_l+0x2e0>
 8003da0:	2300      	movs	r3, #0
 8003da2:	e7c8      	b.n	8003d36 <_strtod_l+0x136>
 8003da4:	f1bb 0f08 	cmp.w	fp, #8
 8003da8:	bfd5      	itete	le
 8003daa:	9906      	ldrle	r1, [sp, #24]
 8003dac:	9905      	ldrgt	r1, [sp, #20]
 8003dae:	fb02 3301 	mlale	r3, r2, r1, r3
 8003db2:	fb02 3301 	mlagt	r3, r2, r1, r3
 8003db6:	f100 0001 	add.w	r0, r0, #1
 8003dba:	bfd4      	ite	le
 8003dbc:	9306      	strle	r3, [sp, #24]
 8003dbe:	9305      	strgt	r3, [sp, #20]
 8003dc0:	f10b 0b01 	add.w	fp, fp, #1
 8003dc4:	9019      	str	r0, [sp, #100]	; 0x64
 8003dc6:	e7be      	b.n	8003d46 <_strtod_l+0x146>
 8003dc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003dca:	191a      	adds	r2, r3, r4
 8003dcc:	9219      	str	r2, [sp, #100]	; 0x64
 8003dce:	5d1a      	ldrb	r2, [r3, r4]
 8003dd0:	f1bb 0f00 	cmp.w	fp, #0
 8003dd4:	d036      	beq.n	8003e44 <_strtod_l+0x244>
 8003dd6:	465c      	mov	r4, fp
 8003dd8:	9004      	str	r0, [sp, #16]
 8003dda:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8003dde:	2b09      	cmp	r3, #9
 8003de0:	d912      	bls.n	8003e08 <_strtod_l+0x208>
 8003de2:	2301      	movs	r3, #1
 8003de4:	e7c1      	b.n	8003d6a <_strtod_l+0x16a>
 8003de6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003de8:	3001      	adds	r0, #1
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	9219      	str	r2, [sp, #100]	; 0x64
 8003dee:	785a      	ldrb	r2, [r3, #1]
 8003df0:	2a30      	cmp	r2, #48	; 0x30
 8003df2:	d0f8      	beq.n	8003de6 <_strtod_l+0x1e6>
 8003df4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	f200 84d5 	bhi.w	80047a8 <_strtod_l+0xba8>
 8003dfe:	9004      	str	r0, [sp, #16]
 8003e00:	2000      	movs	r0, #0
 8003e02:	4604      	mov	r4, r0
 8003e04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003e06:	9308      	str	r3, [sp, #32]
 8003e08:	3a30      	subs	r2, #48	; 0x30
 8003e0a:	f100 0301 	add.w	r3, r0, #1
 8003e0e:	d013      	beq.n	8003e38 <_strtod_l+0x238>
 8003e10:	9904      	ldr	r1, [sp, #16]
 8003e12:	1905      	adds	r5, r0, r4
 8003e14:	4419      	add	r1, r3
 8003e16:	9104      	str	r1, [sp, #16]
 8003e18:	4623      	mov	r3, r4
 8003e1a:	210a      	movs	r1, #10
 8003e1c:	42ab      	cmp	r3, r5
 8003e1e:	d113      	bne.n	8003e48 <_strtod_l+0x248>
 8003e20:	1823      	adds	r3, r4, r0
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	f104 0401 	add.w	r4, r4, #1
 8003e28:	4404      	add	r4, r0
 8003e2a:	dc1b      	bgt.n	8003e64 <_strtod_l+0x264>
 8003e2c:	230a      	movs	r3, #10
 8003e2e:	9906      	ldr	r1, [sp, #24]
 8003e30:	fb03 2301 	mla	r3, r3, r1, r2
 8003e34:	9306      	str	r3, [sp, #24]
 8003e36:	2300      	movs	r3, #0
 8003e38:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	1c51      	adds	r1, r2, #1
 8003e3e:	9119      	str	r1, [sp, #100]	; 0x64
 8003e40:	7852      	ldrb	r2, [r2, #1]
 8003e42:	e7ca      	b.n	8003dda <_strtod_l+0x1da>
 8003e44:	4658      	mov	r0, fp
 8003e46:	e7d3      	b.n	8003df0 <_strtod_l+0x1f0>
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	dc04      	bgt.n	8003e56 <_strtod_l+0x256>
 8003e4c:	9f06      	ldr	r7, [sp, #24]
 8003e4e:	434f      	muls	r7, r1
 8003e50:	9706      	str	r7, [sp, #24]
 8003e52:	3301      	adds	r3, #1
 8003e54:	e7e2      	b.n	8003e1c <_strtod_l+0x21c>
 8003e56:	1c5f      	adds	r7, r3, #1
 8003e58:	2f10      	cmp	r7, #16
 8003e5a:	bfde      	ittt	le
 8003e5c:	9f05      	ldrle	r7, [sp, #20]
 8003e5e:	434f      	mulle	r7, r1
 8003e60:	9705      	strle	r7, [sp, #20]
 8003e62:	e7f6      	b.n	8003e52 <_strtod_l+0x252>
 8003e64:	2c10      	cmp	r4, #16
 8003e66:	bfdf      	itttt	le
 8003e68:	230a      	movle	r3, #10
 8003e6a:	9905      	ldrle	r1, [sp, #20]
 8003e6c:	fb03 2301 	mlale	r3, r3, r1, r2
 8003e70:	9305      	strle	r3, [sp, #20]
 8003e72:	e7e0      	b.n	8003e36 <_strtod_l+0x236>
 8003e74:	2300      	movs	r3, #0
 8003e76:	9304      	str	r3, [sp, #16]
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e77b      	b.n	8003d74 <_strtod_l+0x174>
 8003e7c:	2700      	movs	r7, #0
 8003e7e:	1cb2      	adds	r2, r6, #2
 8003e80:	9219      	str	r2, [sp, #100]	; 0x64
 8003e82:	78b2      	ldrb	r2, [r6, #2]
 8003e84:	e784      	b.n	8003d90 <_strtod_l+0x190>
 8003e86:	bf00      	nop
 8003e88:	08007a4c 	.word	0x08007a4c
 8003e8c:	080077a0 	.word	0x080077a0
 8003e90:	7ff00000 	.word	0x7ff00000
 8003e94:	2701      	movs	r7, #1
 8003e96:	e7f2      	b.n	8003e7e <_strtod_l+0x27e>
 8003e98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003e9a:	1c51      	adds	r1, r2, #1
 8003e9c:	9119      	str	r1, [sp, #100]	; 0x64
 8003e9e:	7852      	ldrb	r2, [r2, #1]
 8003ea0:	2a30      	cmp	r2, #48	; 0x30
 8003ea2:	d0f9      	beq.n	8003e98 <_strtod_l+0x298>
 8003ea4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8003ea8:	2908      	cmp	r1, #8
 8003eaa:	f63f af77 	bhi.w	8003d9c <_strtod_l+0x19c>
 8003eae:	f04f 0e0a 	mov.w	lr, #10
 8003eb2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8003eb6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003eb8:	9209      	str	r2, [sp, #36]	; 0x24
 8003eba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003ebc:	1c51      	adds	r1, r2, #1
 8003ebe:	9119      	str	r1, [sp, #100]	; 0x64
 8003ec0:	7852      	ldrb	r2, [r2, #1]
 8003ec2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8003ec6:	2d09      	cmp	r5, #9
 8003ec8:	d935      	bls.n	8003f36 <_strtod_l+0x336>
 8003eca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003ecc:	1b49      	subs	r1, r1, r5
 8003ece:	2908      	cmp	r1, #8
 8003ed0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8003ed4:	dc02      	bgt.n	8003edc <_strtod_l+0x2dc>
 8003ed6:	4565      	cmp	r5, ip
 8003ed8:	bfa8      	it	ge
 8003eda:	4665      	movge	r5, ip
 8003edc:	b107      	cbz	r7, 8003ee0 <_strtod_l+0x2e0>
 8003ede:	426d      	negs	r5, r5
 8003ee0:	2c00      	cmp	r4, #0
 8003ee2:	d14c      	bne.n	8003f7e <_strtod_l+0x37e>
 8003ee4:	9907      	ldr	r1, [sp, #28]
 8003ee6:	4301      	orrs	r1, r0
 8003ee8:	f47f aecb 	bne.w	8003c82 <_strtod_l+0x82>
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f47f aee4 	bne.w	8003cba <_strtod_l+0xba>
 8003ef2:	2a69      	cmp	r2, #105	; 0x69
 8003ef4:	d026      	beq.n	8003f44 <_strtod_l+0x344>
 8003ef6:	dc23      	bgt.n	8003f40 <_strtod_l+0x340>
 8003ef8:	2a49      	cmp	r2, #73	; 0x49
 8003efa:	d023      	beq.n	8003f44 <_strtod_l+0x344>
 8003efc:	2a4e      	cmp	r2, #78	; 0x4e
 8003efe:	f47f aedc 	bne.w	8003cba <_strtod_l+0xba>
 8003f02:	499d      	ldr	r1, [pc, #628]	; (8004178 <_strtod_l+0x578>)
 8003f04:	a819      	add	r0, sp, #100	; 0x64
 8003f06:	f001 ff0d 	bl	8005d24 <__match>
 8003f0a:	2800      	cmp	r0, #0
 8003f0c:	f43f aed5 	beq.w	8003cba <_strtod_l+0xba>
 8003f10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b28      	cmp	r3, #40	; 0x28
 8003f16:	d12c      	bne.n	8003f72 <_strtod_l+0x372>
 8003f18:	4998      	ldr	r1, [pc, #608]	; (800417c <_strtod_l+0x57c>)
 8003f1a:	aa1c      	add	r2, sp, #112	; 0x70
 8003f1c:	a819      	add	r0, sp, #100	; 0x64
 8003f1e:	f001 ff15 	bl	8005d4c <__hexnan>
 8003f22:	2805      	cmp	r0, #5
 8003f24:	d125      	bne.n	8003f72 <_strtod_l+0x372>
 8003f26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003f28:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8003f2c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8003f30:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8003f34:	e6a5      	b.n	8003c82 <_strtod_l+0x82>
 8003f36:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8003f3a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8003f3e:	e7bc      	b.n	8003eba <_strtod_l+0x2ba>
 8003f40:	2a6e      	cmp	r2, #110	; 0x6e
 8003f42:	e7dc      	b.n	8003efe <_strtod_l+0x2fe>
 8003f44:	498e      	ldr	r1, [pc, #568]	; (8004180 <_strtod_l+0x580>)
 8003f46:	a819      	add	r0, sp, #100	; 0x64
 8003f48:	f001 feec 	bl	8005d24 <__match>
 8003f4c:	2800      	cmp	r0, #0
 8003f4e:	f43f aeb4 	beq.w	8003cba <_strtod_l+0xba>
 8003f52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f54:	498b      	ldr	r1, [pc, #556]	; (8004184 <_strtod_l+0x584>)
 8003f56:	3b01      	subs	r3, #1
 8003f58:	a819      	add	r0, sp, #100	; 0x64
 8003f5a:	9319      	str	r3, [sp, #100]	; 0x64
 8003f5c:	f001 fee2 	bl	8005d24 <__match>
 8003f60:	b910      	cbnz	r0, 8003f68 <_strtod_l+0x368>
 8003f62:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003f64:	3301      	adds	r3, #1
 8003f66:	9319      	str	r3, [sp, #100]	; 0x64
 8003f68:	f04f 0800 	mov.w	r8, #0
 8003f6c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8004188 <_strtod_l+0x588>
 8003f70:	e687      	b.n	8003c82 <_strtod_l+0x82>
 8003f72:	4886      	ldr	r0, [pc, #536]	; (800418c <_strtod_l+0x58c>)
 8003f74:	f003 f820 	bl	8006fb8 <nan>
 8003f78:	4680      	mov	r8, r0
 8003f7a:	4689      	mov	r9, r1
 8003f7c:	e681      	b.n	8003c82 <_strtod_l+0x82>
 8003f7e:	9b04      	ldr	r3, [sp, #16]
 8003f80:	f1bb 0f00 	cmp.w	fp, #0
 8003f84:	bf08      	it	eq
 8003f86:	46a3      	moveq	fp, r4
 8003f88:	1aeb      	subs	r3, r5, r3
 8003f8a:	2c10      	cmp	r4, #16
 8003f8c:	9806      	ldr	r0, [sp, #24]
 8003f8e:	4626      	mov	r6, r4
 8003f90:	9307      	str	r3, [sp, #28]
 8003f92:	bfa8      	it	ge
 8003f94:	2610      	movge	r6, #16
 8003f96:	f7fc fa25 	bl	80003e4 <__aeabi_ui2d>
 8003f9a:	2c09      	cmp	r4, #9
 8003f9c:	4680      	mov	r8, r0
 8003f9e:	4689      	mov	r9, r1
 8003fa0:	dd13      	ble.n	8003fca <_strtod_l+0x3ca>
 8003fa2:	4b7b      	ldr	r3, [pc, #492]	; (8004190 <_strtod_l+0x590>)
 8003fa4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003fa8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003fac:	f7fc fa94 	bl	80004d8 <__aeabi_dmul>
 8003fb0:	4680      	mov	r8, r0
 8003fb2:	9805      	ldr	r0, [sp, #20]
 8003fb4:	4689      	mov	r9, r1
 8003fb6:	f7fc fa15 	bl	80003e4 <__aeabi_ui2d>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4640      	mov	r0, r8
 8003fc0:	4649      	mov	r1, r9
 8003fc2:	f7fc f8d3 	bl	800016c <__adddf3>
 8003fc6:	4680      	mov	r8, r0
 8003fc8:	4689      	mov	r9, r1
 8003fca:	2c0f      	cmp	r4, #15
 8003fcc:	dc36      	bgt.n	800403c <_strtod_l+0x43c>
 8003fce:	9b07      	ldr	r3, [sp, #28]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f43f ae56 	beq.w	8003c82 <_strtod_l+0x82>
 8003fd6:	dd22      	ble.n	800401e <_strtod_l+0x41e>
 8003fd8:	2b16      	cmp	r3, #22
 8003fda:	dc09      	bgt.n	8003ff0 <_strtod_l+0x3f0>
 8003fdc:	496c      	ldr	r1, [pc, #432]	; (8004190 <_strtod_l+0x590>)
 8003fde:	4642      	mov	r2, r8
 8003fe0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003fe4:	464b      	mov	r3, r9
 8003fe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fea:	f7fc fa75 	bl	80004d8 <__aeabi_dmul>
 8003fee:	e7c3      	b.n	8003f78 <_strtod_l+0x378>
 8003ff0:	9a07      	ldr	r2, [sp, #28]
 8003ff2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	db20      	blt.n	800403c <_strtod_l+0x43c>
 8003ffa:	4d65      	ldr	r5, [pc, #404]	; (8004190 <_strtod_l+0x590>)
 8003ffc:	f1c4 040f 	rsb	r4, r4, #15
 8004000:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004004:	4642      	mov	r2, r8
 8004006:	e9d1 0100 	ldrd	r0, r1, [r1]
 800400a:	464b      	mov	r3, r9
 800400c:	f7fc fa64 	bl	80004d8 <__aeabi_dmul>
 8004010:	9b07      	ldr	r3, [sp, #28]
 8004012:	1b1c      	subs	r4, r3, r4
 8004014:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004018:	e9d5 2300 	ldrd	r2, r3, [r5]
 800401c:	e7e5      	b.n	8003fea <_strtod_l+0x3ea>
 800401e:	9b07      	ldr	r3, [sp, #28]
 8004020:	3316      	adds	r3, #22
 8004022:	db0b      	blt.n	800403c <_strtod_l+0x43c>
 8004024:	9b04      	ldr	r3, [sp, #16]
 8004026:	4640      	mov	r0, r8
 8004028:	1b5d      	subs	r5, r3, r5
 800402a:	4b59      	ldr	r3, [pc, #356]	; (8004190 <_strtod_l+0x590>)
 800402c:	4649      	mov	r1, r9
 800402e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004032:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004036:	f7fc fb79 	bl	800072c <__aeabi_ddiv>
 800403a:	e79d      	b.n	8003f78 <_strtod_l+0x378>
 800403c:	9b07      	ldr	r3, [sp, #28]
 800403e:	1ba6      	subs	r6, r4, r6
 8004040:	441e      	add	r6, r3
 8004042:	2e00      	cmp	r6, #0
 8004044:	dd74      	ble.n	8004130 <_strtod_l+0x530>
 8004046:	f016 030f 	ands.w	r3, r6, #15
 800404a:	d00a      	beq.n	8004062 <_strtod_l+0x462>
 800404c:	4950      	ldr	r1, [pc, #320]	; (8004190 <_strtod_l+0x590>)
 800404e:	4642      	mov	r2, r8
 8004050:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004054:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004058:	464b      	mov	r3, r9
 800405a:	f7fc fa3d 	bl	80004d8 <__aeabi_dmul>
 800405e:	4680      	mov	r8, r0
 8004060:	4689      	mov	r9, r1
 8004062:	f036 060f 	bics.w	r6, r6, #15
 8004066:	d052      	beq.n	800410e <_strtod_l+0x50e>
 8004068:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800406c:	dd27      	ble.n	80040be <_strtod_l+0x4be>
 800406e:	f04f 0b00 	mov.w	fp, #0
 8004072:	f8cd b010 	str.w	fp, [sp, #16]
 8004076:	f8cd b020 	str.w	fp, [sp, #32]
 800407a:	f8cd b018 	str.w	fp, [sp, #24]
 800407e:	2322      	movs	r3, #34	; 0x22
 8004080:	f04f 0800 	mov.w	r8, #0
 8004084:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8004188 <_strtod_l+0x588>
 8004088:	f8ca 3000 	str.w	r3, [sl]
 800408c:	9b08      	ldr	r3, [sp, #32]
 800408e:	2b00      	cmp	r3, #0
 8004090:	f43f adf7 	beq.w	8003c82 <_strtod_l+0x82>
 8004094:	4650      	mov	r0, sl
 8004096:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004098:	f001 ff72 	bl	8005f80 <_Bfree>
 800409c:	4650      	mov	r0, sl
 800409e:	9906      	ldr	r1, [sp, #24]
 80040a0:	f001 ff6e 	bl	8005f80 <_Bfree>
 80040a4:	4650      	mov	r0, sl
 80040a6:	9904      	ldr	r1, [sp, #16]
 80040a8:	f001 ff6a 	bl	8005f80 <_Bfree>
 80040ac:	4650      	mov	r0, sl
 80040ae:	9908      	ldr	r1, [sp, #32]
 80040b0:	f001 ff66 	bl	8005f80 <_Bfree>
 80040b4:	4659      	mov	r1, fp
 80040b6:	4650      	mov	r0, sl
 80040b8:	f001 ff62 	bl	8005f80 <_Bfree>
 80040bc:	e5e1      	b.n	8003c82 <_strtod_l+0x82>
 80040be:	4b35      	ldr	r3, [pc, #212]	; (8004194 <_strtod_l+0x594>)
 80040c0:	4640      	mov	r0, r8
 80040c2:	9305      	str	r3, [sp, #20]
 80040c4:	2300      	movs	r3, #0
 80040c6:	4649      	mov	r1, r9
 80040c8:	461f      	mov	r7, r3
 80040ca:	1136      	asrs	r6, r6, #4
 80040cc:	2e01      	cmp	r6, #1
 80040ce:	dc21      	bgt.n	8004114 <_strtod_l+0x514>
 80040d0:	b10b      	cbz	r3, 80040d6 <_strtod_l+0x4d6>
 80040d2:	4680      	mov	r8, r0
 80040d4:	4689      	mov	r9, r1
 80040d6:	4b2f      	ldr	r3, [pc, #188]	; (8004194 <_strtod_l+0x594>)
 80040d8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80040dc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80040e0:	4642      	mov	r2, r8
 80040e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040e6:	464b      	mov	r3, r9
 80040e8:	f7fc f9f6 	bl	80004d8 <__aeabi_dmul>
 80040ec:	4b26      	ldr	r3, [pc, #152]	; (8004188 <_strtod_l+0x588>)
 80040ee:	460a      	mov	r2, r1
 80040f0:	400b      	ands	r3, r1
 80040f2:	4929      	ldr	r1, [pc, #164]	; (8004198 <_strtod_l+0x598>)
 80040f4:	4680      	mov	r8, r0
 80040f6:	428b      	cmp	r3, r1
 80040f8:	d8b9      	bhi.n	800406e <_strtod_l+0x46e>
 80040fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80040fe:	428b      	cmp	r3, r1
 8004100:	bf86      	itte	hi
 8004102:	f04f 38ff 	movhi.w	r8, #4294967295
 8004106:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800419c <_strtod_l+0x59c>
 800410a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800410e:	2300      	movs	r3, #0
 8004110:	9305      	str	r3, [sp, #20]
 8004112:	e07f      	b.n	8004214 <_strtod_l+0x614>
 8004114:	07f2      	lsls	r2, r6, #31
 8004116:	d505      	bpl.n	8004124 <_strtod_l+0x524>
 8004118:	9b05      	ldr	r3, [sp, #20]
 800411a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411e:	f7fc f9db 	bl	80004d8 <__aeabi_dmul>
 8004122:	2301      	movs	r3, #1
 8004124:	9a05      	ldr	r2, [sp, #20]
 8004126:	3701      	adds	r7, #1
 8004128:	3208      	adds	r2, #8
 800412a:	1076      	asrs	r6, r6, #1
 800412c:	9205      	str	r2, [sp, #20]
 800412e:	e7cd      	b.n	80040cc <_strtod_l+0x4cc>
 8004130:	d0ed      	beq.n	800410e <_strtod_l+0x50e>
 8004132:	4276      	negs	r6, r6
 8004134:	f016 020f 	ands.w	r2, r6, #15
 8004138:	d00a      	beq.n	8004150 <_strtod_l+0x550>
 800413a:	4b15      	ldr	r3, [pc, #84]	; (8004190 <_strtod_l+0x590>)
 800413c:	4640      	mov	r0, r8
 800413e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004142:	4649      	mov	r1, r9
 8004144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004148:	f7fc faf0 	bl	800072c <__aeabi_ddiv>
 800414c:	4680      	mov	r8, r0
 800414e:	4689      	mov	r9, r1
 8004150:	1136      	asrs	r6, r6, #4
 8004152:	d0dc      	beq.n	800410e <_strtod_l+0x50e>
 8004154:	2e1f      	cmp	r6, #31
 8004156:	dd23      	ble.n	80041a0 <_strtod_l+0x5a0>
 8004158:	f04f 0b00 	mov.w	fp, #0
 800415c:	f8cd b010 	str.w	fp, [sp, #16]
 8004160:	f8cd b020 	str.w	fp, [sp, #32]
 8004164:	f8cd b018 	str.w	fp, [sp, #24]
 8004168:	2322      	movs	r3, #34	; 0x22
 800416a:	f04f 0800 	mov.w	r8, #0
 800416e:	f04f 0900 	mov.w	r9, #0
 8004172:	f8ca 3000 	str.w	r3, [sl]
 8004176:	e789      	b.n	800408c <_strtod_l+0x48c>
 8004178:	08007771 	.word	0x08007771
 800417c:	080077b4 	.word	0x080077b4
 8004180:	08007769 	.word	0x08007769
 8004184:	080078f4 	.word	0x080078f4
 8004188:	7ff00000 	.word	0x7ff00000
 800418c:	08007c08 	.word	0x08007c08
 8004190:	08007ae8 	.word	0x08007ae8
 8004194:	08007ac0 	.word	0x08007ac0
 8004198:	7ca00000 	.word	0x7ca00000
 800419c:	7fefffff 	.word	0x7fefffff
 80041a0:	f016 0310 	ands.w	r3, r6, #16
 80041a4:	bf18      	it	ne
 80041a6:	236a      	movne	r3, #106	; 0x6a
 80041a8:	4640      	mov	r0, r8
 80041aa:	9305      	str	r3, [sp, #20]
 80041ac:	4649      	mov	r1, r9
 80041ae:	2300      	movs	r3, #0
 80041b0:	4fb0      	ldr	r7, [pc, #704]	; (8004474 <_strtod_l+0x874>)
 80041b2:	07f2      	lsls	r2, r6, #31
 80041b4:	d504      	bpl.n	80041c0 <_strtod_l+0x5c0>
 80041b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041ba:	f7fc f98d 	bl	80004d8 <__aeabi_dmul>
 80041be:	2301      	movs	r3, #1
 80041c0:	1076      	asrs	r6, r6, #1
 80041c2:	f107 0708 	add.w	r7, r7, #8
 80041c6:	d1f4      	bne.n	80041b2 <_strtod_l+0x5b2>
 80041c8:	b10b      	cbz	r3, 80041ce <_strtod_l+0x5ce>
 80041ca:	4680      	mov	r8, r0
 80041cc:	4689      	mov	r9, r1
 80041ce:	9b05      	ldr	r3, [sp, #20]
 80041d0:	b1c3      	cbz	r3, 8004204 <_strtod_l+0x604>
 80041d2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80041d6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80041da:	2b00      	cmp	r3, #0
 80041dc:	4649      	mov	r1, r9
 80041de:	dd11      	ble.n	8004204 <_strtod_l+0x604>
 80041e0:	2b1f      	cmp	r3, #31
 80041e2:	f340 8127 	ble.w	8004434 <_strtod_l+0x834>
 80041e6:	2b34      	cmp	r3, #52	; 0x34
 80041e8:	bfd8      	it	le
 80041ea:	f04f 33ff 	movle.w	r3, #4294967295
 80041ee:	f04f 0800 	mov.w	r8, #0
 80041f2:	bfcf      	iteee	gt
 80041f4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80041f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80041fc:	fa03 f202 	lslle.w	r2, r3, r2
 8004200:	ea02 0901 	andle.w	r9, r2, r1
 8004204:	2200      	movs	r2, #0
 8004206:	2300      	movs	r3, #0
 8004208:	4640      	mov	r0, r8
 800420a:	4649      	mov	r1, r9
 800420c:	f7fc fbcc 	bl	80009a8 <__aeabi_dcmpeq>
 8004210:	2800      	cmp	r0, #0
 8004212:	d1a1      	bne.n	8004158 <_strtod_l+0x558>
 8004214:	9b06      	ldr	r3, [sp, #24]
 8004216:	465a      	mov	r2, fp
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	4650      	mov	r0, sl
 800421c:	4623      	mov	r3, r4
 800421e:	9908      	ldr	r1, [sp, #32]
 8004220:	f001 ff16 	bl	8006050 <__s2b>
 8004224:	9008      	str	r0, [sp, #32]
 8004226:	2800      	cmp	r0, #0
 8004228:	f43f af21 	beq.w	800406e <_strtod_l+0x46e>
 800422c:	9b04      	ldr	r3, [sp, #16]
 800422e:	f04f 0b00 	mov.w	fp, #0
 8004232:	1b5d      	subs	r5, r3, r5
 8004234:	9b07      	ldr	r3, [sp, #28]
 8004236:	f8cd b010 	str.w	fp, [sp, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	bfb4      	ite	lt
 800423e:	462b      	movlt	r3, r5
 8004240:	2300      	movge	r3, #0
 8004242:	930e      	str	r3, [sp, #56]	; 0x38
 8004244:	9b07      	ldr	r3, [sp, #28]
 8004246:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800424a:	9314      	str	r3, [sp, #80]	; 0x50
 800424c:	9b08      	ldr	r3, [sp, #32]
 800424e:	4650      	mov	r0, sl
 8004250:	6859      	ldr	r1, [r3, #4]
 8004252:	f001 fe55 	bl	8005f00 <_Balloc>
 8004256:	9006      	str	r0, [sp, #24]
 8004258:	2800      	cmp	r0, #0
 800425a:	f43f af10 	beq.w	800407e <_strtod_l+0x47e>
 800425e:	9b08      	ldr	r3, [sp, #32]
 8004260:	300c      	adds	r0, #12
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	f103 010c 	add.w	r1, r3, #12
 8004268:	3202      	adds	r2, #2
 800426a:	0092      	lsls	r2, r2, #2
 800426c:	f001 fe3a 	bl	8005ee4 <memcpy>
 8004270:	ab1c      	add	r3, sp, #112	; 0x70
 8004272:	9301      	str	r3, [sp, #4]
 8004274:	ab1b      	add	r3, sp, #108	; 0x6c
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	4642      	mov	r2, r8
 800427a:	464b      	mov	r3, r9
 800427c:	4650      	mov	r0, sl
 800427e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8004282:	f002 fa27 	bl	80066d4 <__d2b>
 8004286:	901a      	str	r0, [sp, #104]	; 0x68
 8004288:	2800      	cmp	r0, #0
 800428a:	f43f aef8 	beq.w	800407e <_strtod_l+0x47e>
 800428e:	2101      	movs	r1, #1
 8004290:	4650      	mov	r0, sl
 8004292:	f001 ff75 	bl	8006180 <__i2b>
 8004296:	4603      	mov	r3, r0
 8004298:	9004      	str	r0, [sp, #16]
 800429a:	2800      	cmp	r0, #0
 800429c:	f43f aeef 	beq.w	800407e <_strtod_l+0x47e>
 80042a0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80042a2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80042a4:	2d00      	cmp	r5, #0
 80042a6:	bfab      	itete	ge
 80042a8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80042aa:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80042ac:	18ee      	addge	r6, r5, r3
 80042ae:	1b5c      	sublt	r4, r3, r5
 80042b0:	9b05      	ldr	r3, [sp, #20]
 80042b2:	bfa8      	it	ge
 80042b4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80042b6:	eba5 0503 	sub.w	r5, r5, r3
 80042ba:	4415      	add	r5, r2
 80042bc:	4b6e      	ldr	r3, [pc, #440]	; (8004478 <_strtod_l+0x878>)
 80042be:	f105 35ff 	add.w	r5, r5, #4294967295
 80042c2:	bfb8      	it	lt
 80042c4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80042c6:	429d      	cmp	r5, r3
 80042c8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80042cc:	f280 80c4 	bge.w	8004458 <_strtod_l+0x858>
 80042d0:	1b5b      	subs	r3, r3, r5
 80042d2:	2b1f      	cmp	r3, #31
 80042d4:	f04f 0701 	mov.w	r7, #1
 80042d8:	eba2 0203 	sub.w	r2, r2, r3
 80042dc:	f300 80b1 	bgt.w	8004442 <_strtod_l+0x842>
 80042e0:	2500      	movs	r5, #0
 80042e2:	fa07 f303 	lsl.w	r3, r7, r3
 80042e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80042e8:	18b7      	adds	r7, r6, r2
 80042ea:	9b05      	ldr	r3, [sp, #20]
 80042ec:	42be      	cmp	r6, r7
 80042ee:	4414      	add	r4, r2
 80042f0:	441c      	add	r4, r3
 80042f2:	4633      	mov	r3, r6
 80042f4:	bfa8      	it	ge
 80042f6:	463b      	movge	r3, r7
 80042f8:	42a3      	cmp	r3, r4
 80042fa:	bfa8      	it	ge
 80042fc:	4623      	movge	r3, r4
 80042fe:	2b00      	cmp	r3, #0
 8004300:	bfc2      	ittt	gt
 8004302:	1aff      	subgt	r7, r7, r3
 8004304:	1ae4      	subgt	r4, r4, r3
 8004306:	1af6      	subgt	r6, r6, r3
 8004308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800430a:	2b00      	cmp	r3, #0
 800430c:	dd17      	ble.n	800433e <_strtod_l+0x73e>
 800430e:	461a      	mov	r2, r3
 8004310:	4650      	mov	r0, sl
 8004312:	9904      	ldr	r1, [sp, #16]
 8004314:	f001 fff2 	bl	80062fc <__pow5mult>
 8004318:	9004      	str	r0, [sp, #16]
 800431a:	2800      	cmp	r0, #0
 800431c:	f43f aeaf 	beq.w	800407e <_strtod_l+0x47e>
 8004320:	4601      	mov	r1, r0
 8004322:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004324:	4650      	mov	r0, sl
 8004326:	f001 ff41 	bl	80061ac <__multiply>
 800432a:	9009      	str	r0, [sp, #36]	; 0x24
 800432c:	2800      	cmp	r0, #0
 800432e:	f43f aea6 	beq.w	800407e <_strtod_l+0x47e>
 8004332:	4650      	mov	r0, sl
 8004334:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004336:	f001 fe23 	bl	8005f80 <_Bfree>
 800433a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800433c:	931a      	str	r3, [sp, #104]	; 0x68
 800433e:	2f00      	cmp	r7, #0
 8004340:	f300 808e 	bgt.w	8004460 <_strtod_l+0x860>
 8004344:	9b07      	ldr	r3, [sp, #28]
 8004346:	2b00      	cmp	r3, #0
 8004348:	dd08      	ble.n	800435c <_strtod_l+0x75c>
 800434a:	4650      	mov	r0, sl
 800434c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800434e:	9906      	ldr	r1, [sp, #24]
 8004350:	f001 ffd4 	bl	80062fc <__pow5mult>
 8004354:	9006      	str	r0, [sp, #24]
 8004356:	2800      	cmp	r0, #0
 8004358:	f43f ae91 	beq.w	800407e <_strtod_l+0x47e>
 800435c:	2c00      	cmp	r4, #0
 800435e:	dd08      	ble.n	8004372 <_strtod_l+0x772>
 8004360:	4622      	mov	r2, r4
 8004362:	4650      	mov	r0, sl
 8004364:	9906      	ldr	r1, [sp, #24]
 8004366:	f002 f823 	bl	80063b0 <__lshift>
 800436a:	9006      	str	r0, [sp, #24]
 800436c:	2800      	cmp	r0, #0
 800436e:	f43f ae86 	beq.w	800407e <_strtod_l+0x47e>
 8004372:	2e00      	cmp	r6, #0
 8004374:	dd08      	ble.n	8004388 <_strtod_l+0x788>
 8004376:	4632      	mov	r2, r6
 8004378:	4650      	mov	r0, sl
 800437a:	9904      	ldr	r1, [sp, #16]
 800437c:	f002 f818 	bl	80063b0 <__lshift>
 8004380:	9004      	str	r0, [sp, #16]
 8004382:	2800      	cmp	r0, #0
 8004384:	f43f ae7b 	beq.w	800407e <_strtod_l+0x47e>
 8004388:	4650      	mov	r0, sl
 800438a:	9a06      	ldr	r2, [sp, #24]
 800438c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800438e:	f002 f89b 	bl	80064c8 <__mdiff>
 8004392:	4683      	mov	fp, r0
 8004394:	2800      	cmp	r0, #0
 8004396:	f43f ae72 	beq.w	800407e <_strtod_l+0x47e>
 800439a:	2400      	movs	r4, #0
 800439c:	68c3      	ldr	r3, [r0, #12]
 800439e:	9904      	ldr	r1, [sp, #16]
 80043a0:	60c4      	str	r4, [r0, #12]
 80043a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80043a4:	f002 f874 	bl	8006490 <__mcmp>
 80043a8:	42a0      	cmp	r0, r4
 80043aa:	da6b      	bge.n	8004484 <_strtod_l+0x884>
 80043ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043ae:	ea53 0308 	orrs.w	r3, r3, r8
 80043b2:	f040 8091 	bne.w	80044d8 <_strtod_l+0x8d8>
 80043b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f040 808c 	bne.w	80044d8 <_strtod_l+0x8d8>
 80043c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80043c4:	0d1b      	lsrs	r3, r3, #20
 80043c6:	051b      	lsls	r3, r3, #20
 80043c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80043cc:	f240 8084 	bls.w	80044d8 <_strtod_l+0x8d8>
 80043d0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80043d4:	b91b      	cbnz	r3, 80043de <_strtod_l+0x7de>
 80043d6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	dd7c      	ble.n	80044d8 <_strtod_l+0x8d8>
 80043de:	4659      	mov	r1, fp
 80043e0:	2201      	movs	r2, #1
 80043e2:	4650      	mov	r0, sl
 80043e4:	f001 ffe4 	bl	80063b0 <__lshift>
 80043e8:	9904      	ldr	r1, [sp, #16]
 80043ea:	4683      	mov	fp, r0
 80043ec:	f002 f850 	bl	8006490 <__mcmp>
 80043f0:	2800      	cmp	r0, #0
 80043f2:	dd71      	ble.n	80044d8 <_strtod_l+0x8d8>
 80043f4:	9905      	ldr	r1, [sp, #20]
 80043f6:	464b      	mov	r3, r9
 80043f8:	4a20      	ldr	r2, [pc, #128]	; (800447c <_strtod_l+0x87c>)
 80043fa:	2900      	cmp	r1, #0
 80043fc:	f000 808c 	beq.w	8004518 <_strtod_l+0x918>
 8004400:	ea02 0109 	and.w	r1, r2, r9
 8004404:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004408:	f300 8086 	bgt.w	8004518 <_strtod_l+0x918>
 800440c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004410:	f77f aeaa 	ble.w	8004168 <_strtod_l+0x568>
 8004414:	4640      	mov	r0, r8
 8004416:	4649      	mov	r1, r9
 8004418:	4b19      	ldr	r3, [pc, #100]	; (8004480 <_strtod_l+0x880>)
 800441a:	2200      	movs	r2, #0
 800441c:	f7fc f85c 	bl	80004d8 <__aeabi_dmul>
 8004420:	460b      	mov	r3, r1
 8004422:	4303      	orrs	r3, r0
 8004424:	bf08      	it	eq
 8004426:	2322      	moveq	r3, #34	; 0x22
 8004428:	4680      	mov	r8, r0
 800442a:	4689      	mov	r9, r1
 800442c:	bf08      	it	eq
 800442e:	f8ca 3000 	streq.w	r3, [sl]
 8004432:	e62f      	b.n	8004094 <_strtod_l+0x494>
 8004434:	f04f 32ff 	mov.w	r2, #4294967295
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	ea03 0808 	and.w	r8, r3, r8
 8004440:	e6e0      	b.n	8004204 <_strtod_l+0x604>
 8004442:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004446:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800444a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800444e:	35e2      	adds	r5, #226	; 0xe2
 8004450:	fa07 f505 	lsl.w	r5, r7, r5
 8004454:	970f      	str	r7, [sp, #60]	; 0x3c
 8004456:	e747      	b.n	80042e8 <_strtod_l+0x6e8>
 8004458:	2301      	movs	r3, #1
 800445a:	2500      	movs	r5, #0
 800445c:	930f      	str	r3, [sp, #60]	; 0x3c
 800445e:	e743      	b.n	80042e8 <_strtod_l+0x6e8>
 8004460:	463a      	mov	r2, r7
 8004462:	4650      	mov	r0, sl
 8004464:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004466:	f001 ffa3 	bl	80063b0 <__lshift>
 800446a:	901a      	str	r0, [sp, #104]	; 0x68
 800446c:	2800      	cmp	r0, #0
 800446e:	f47f af69 	bne.w	8004344 <_strtod_l+0x744>
 8004472:	e604      	b.n	800407e <_strtod_l+0x47e>
 8004474:	080077c8 	.word	0x080077c8
 8004478:	fffffc02 	.word	0xfffffc02
 800447c:	7ff00000 	.word	0x7ff00000
 8004480:	39500000 	.word	0x39500000
 8004484:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004488:	d165      	bne.n	8004556 <_strtod_l+0x956>
 800448a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800448c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004490:	b35a      	cbz	r2, 80044ea <_strtod_l+0x8ea>
 8004492:	4a99      	ldr	r2, [pc, #612]	; (80046f8 <_strtod_l+0xaf8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d12b      	bne.n	80044f0 <_strtod_l+0x8f0>
 8004498:	9b05      	ldr	r3, [sp, #20]
 800449a:	4641      	mov	r1, r8
 800449c:	b303      	cbz	r3, 80044e0 <_strtod_l+0x8e0>
 800449e:	464a      	mov	r2, r9
 80044a0:	4b96      	ldr	r3, [pc, #600]	; (80046fc <_strtod_l+0xafc>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80044a8:	f04f 32ff 	mov.w	r2, #4294967295
 80044ac:	d81b      	bhi.n	80044e6 <_strtod_l+0x8e6>
 80044ae:	0d1b      	lsrs	r3, r3, #20
 80044b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	4299      	cmp	r1, r3
 80044ba:	d119      	bne.n	80044f0 <_strtod_l+0x8f0>
 80044bc:	4b90      	ldr	r3, [pc, #576]	; (8004700 <_strtod_l+0xb00>)
 80044be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d102      	bne.n	80044ca <_strtod_l+0x8ca>
 80044c4:	3101      	adds	r1, #1
 80044c6:	f43f adda 	beq.w	800407e <_strtod_l+0x47e>
 80044ca:	f04f 0800 	mov.w	r8, #0
 80044ce:	4b8b      	ldr	r3, [pc, #556]	; (80046fc <_strtod_l+0xafc>)
 80044d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044d2:	401a      	ands	r2, r3
 80044d4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80044d8:	9b05      	ldr	r3, [sp, #20]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d19a      	bne.n	8004414 <_strtod_l+0x814>
 80044de:	e5d9      	b.n	8004094 <_strtod_l+0x494>
 80044e0:	f04f 33ff 	mov.w	r3, #4294967295
 80044e4:	e7e8      	b.n	80044b8 <_strtod_l+0x8b8>
 80044e6:	4613      	mov	r3, r2
 80044e8:	e7e6      	b.n	80044b8 <_strtod_l+0x8b8>
 80044ea:	ea53 0308 	orrs.w	r3, r3, r8
 80044ee:	d081      	beq.n	80043f4 <_strtod_l+0x7f4>
 80044f0:	b1e5      	cbz	r5, 800452c <_strtod_l+0x92c>
 80044f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044f4:	421d      	tst	r5, r3
 80044f6:	d0ef      	beq.n	80044d8 <_strtod_l+0x8d8>
 80044f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044fa:	4640      	mov	r0, r8
 80044fc:	4649      	mov	r1, r9
 80044fe:	9a05      	ldr	r2, [sp, #20]
 8004500:	b1c3      	cbz	r3, 8004534 <_strtod_l+0x934>
 8004502:	f7ff fb5b 	bl	8003bbc <sulp>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800450e:	f7fb fe2d 	bl	800016c <__adddf3>
 8004512:	4680      	mov	r8, r0
 8004514:	4689      	mov	r9, r1
 8004516:	e7df      	b.n	80044d8 <_strtod_l+0x8d8>
 8004518:	4013      	ands	r3, r2
 800451a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800451e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004522:	f04f 38ff 	mov.w	r8, #4294967295
 8004526:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800452a:	e7d5      	b.n	80044d8 <_strtod_l+0x8d8>
 800452c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800452e:	ea13 0f08 	tst.w	r3, r8
 8004532:	e7e0      	b.n	80044f6 <_strtod_l+0x8f6>
 8004534:	f7ff fb42 	bl	8003bbc <sulp>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004540:	f7fb fe12 	bl	8000168 <__aeabi_dsub>
 8004544:	2200      	movs	r2, #0
 8004546:	2300      	movs	r3, #0
 8004548:	4680      	mov	r8, r0
 800454a:	4689      	mov	r9, r1
 800454c:	f7fc fa2c 	bl	80009a8 <__aeabi_dcmpeq>
 8004550:	2800      	cmp	r0, #0
 8004552:	d0c1      	beq.n	80044d8 <_strtod_l+0x8d8>
 8004554:	e608      	b.n	8004168 <_strtod_l+0x568>
 8004556:	4658      	mov	r0, fp
 8004558:	9904      	ldr	r1, [sp, #16]
 800455a:	f002 f917 	bl	800678c <__ratio>
 800455e:	2200      	movs	r2, #0
 8004560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004564:	4606      	mov	r6, r0
 8004566:	460f      	mov	r7, r1
 8004568:	f7fc fa32 	bl	80009d0 <__aeabi_dcmple>
 800456c:	2800      	cmp	r0, #0
 800456e:	d070      	beq.n	8004652 <_strtod_l+0xa52>
 8004570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004572:	2b00      	cmp	r3, #0
 8004574:	d042      	beq.n	80045fc <_strtod_l+0x9fc>
 8004576:	2600      	movs	r6, #0
 8004578:	4f62      	ldr	r7, [pc, #392]	; (8004704 <_strtod_l+0xb04>)
 800457a:	4d62      	ldr	r5, [pc, #392]	; (8004704 <_strtod_l+0xb04>)
 800457c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800457e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004582:	0d1b      	lsrs	r3, r3, #20
 8004584:	051b      	lsls	r3, r3, #20
 8004586:	930f      	str	r3, [sp, #60]	; 0x3c
 8004588:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800458a:	4b5f      	ldr	r3, [pc, #380]	; (8004708 <_strtod_l+0xb08>)
 800458c:	429a      	cmp	r2, r3
 800458e:	f040 80c3 	bne.w	8004718 <_strtod_l+0xb18>
 8004592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004594:	4640      	mov	r0, r8
 8004596:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800459a:	4649      	mov	r1, r9
 800459c:	f002 f820 	bl	80065e0 <__ulp>
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4630      	mov	r0, r6
 80045a6:	4639      	mov	r1, r7
 80045a8:	f7fb ff96 	bl	80004d8 <__aeabi_dmul>
 80045ac:	4642      	mov	r2, r8
 80045ae:	464b      	mov	r3, r9
 80045b0:	f7fb fddc 	bl	800016c <__adddf3>
 80045b4:	460b      	mov	r3, r1
 80045b6:	4951      	ldr	r1, [pc, #324]	; (80046fc <_strtod_l+0xafc>)
 80045b8:	4a54      	ldr	r2, [pc, #336]	; (800470c <_strtod_l+0xb0c>)
 80045ba:	4019      	ands	r1, r3
 80045bc:	4291      	cmp	r1, r2
 80045be:	4680      	mov	r8, r0
 80045c0:	d95d      	bls.n	800467e <_strtod_l+0xa7e>
 80045c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80045c4:	4b4e      	ldr	r3, [pc, #312]	; (8004700 <_strtod_l+0xb00>)
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d103      	bne.n	80045d2 <_strtod_l+0x9d2>
 80045ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80045cc:	3301      	adds	r3, #1
 80045ce:	f43f ad56 	beq.w	800407e <_strtod_l+0x47e>
 80045d2:	f04f 38ff 	mov.w	r8, #4294967295
 80045d6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004700 <_strtod_l+0xb00>
 80045da:	4650      	mov	r0, sl
 80045dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80045de:	f001 fccf 	bl	8005f80 <_Bfree>
 80045e2:	4650      	mov	r0, sl
 80045e4:	9906      	ldr	r1, [sp, #24]
 80045e6:	f001 fccb 	bl	8005f80 <_Bfree>
 80045ea:	4650      	mov	r0, sl
 80045ec:	9904      	ldr	r1, [sp, #16]
 80045ee:	f001 fcc7 	bl	8005f80 <_Bfree>
 80045f2:	4659      	mov	r1, fp
 80045f4:	4650      	mov	r0, sl
 80045f6:	f001 fcc3 	bl	8005f80 <_Bfree>
 80045fa:	e627      	b.n	800424c <_strtod_l+0x64c>
 80045fc:	f1b8 0f00 	cmp.w	r8, #0
 8004600:	d119      	bne.n	8004636 <_strtod_l+0xa36>
 8004602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004608:	b9e3      	cbnz	r3, 8004644 <_strtod_l+0xa44>
 800460a:	2200      	movs	r2, #0
 800460c:	4630      	mov	r0, r6
 800460e:	4639      	mov	r1, r7
 8004610:	4b3c      	ldr	r3, [pc, #240]	; (8004704 <_strtod_l+0xb04>)
 8004612:	f7fc f9d3 	bl	80009bc <__aeabi_dcmplt>
 8004616:	b9c8      	cbnz	r0, 800464c <_strtod_l+0xa4c>
 8004618:	2200      	movs	r2, #0
 800461a:	4630      	mov	r0, r6
 800461c:	4639      	mov	r1, r7
 800461e:	4b3c      	ldr	r3, [pc, #240]	; (8004710 <_strtod_l+0xb10>)
 8004620:	f7fb ff5a 	bl	80004d8 <__aeabi_dmul>
 8004624:	4604      	mov	r4, r0
 8004626:	460d      	mov	r5, r1
 8004628:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800462c:	9416      	str	r4, [sp, #88]	; 0x58
 800462e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004630:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8004634:	e7a2      	b.n	800457c <_strtod_l+0x97c>
 8004636:	f1b8 0f01 	cmp.w	r8, #1
 800463a:	d103      	bne.n	8004644 <_strtod_l+0xa44>
 800463c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800463e:	2b00      	cmp	r3, #0
 8004640:	f43f ad92 	beq.w	8004168 <_strtod_l+0x568>
 8004644:	2600      	movs	r6, #0
 8004646:	2400      	movs	r4, #0
 8004648:	4f32      	ldr	r7, [pc, #200]	; (8004714 <_strtod_l+0xb14>)
 800464a:	e796      	b.n	800457a <_strtod_l+0x97a>
 800464c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800464e:	4d30      	ldr	r5, [pc, #192]	; (8004710 <_strtod_l+0xb10>)
 8004650:	e7ea      	b.n	8004628 <_strtod_l+0xa28>
 8004652:	4b2f      	ldr	r3, [pc, #188]	; (8004710 <_strtod_l+0xb10>)
 8004654:	2200      	movs	r2, #0
 8004656:	4630      	mov	r0, r6
 8004658:	4639      	mov	r1, r7
 800465a:	f7fb ff3d 	bl	80004d8 <__aeabi_dmul>
 800465e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004660:	4604      	mov	r4, r0
 8004662:	460d      	mov	r5, r1
 8004664:	b933      	cbnz	r3, 8004674 <_strtod_l+0xa74>
 8004666:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800466a:	9010      	str	r0, [sp, #64]	; 0x40
 800466c:	9311      	str	r3, [sp, #68]	; 0x44
 800466e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004672:	e783      	b.n	800457c <_strtod_l+0x97c>
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800467c:	e7f7      	b.n	800466e <_strtod_l+0xa6e>
 800467e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004682:	9b05      	ldr	r3, [sp, #20]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1a8      	bne.n	80045da <_strtod_l+0x9da>
 8004688:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800468c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800468e:	0d1b      	lsrs	r3, r3, #20
 8004690:	051b      	lsls	r3, r3, #20
 8004692:	429a      	cmp	r2, r3
 8004694:	d1a1      	bne.n	80045da <_strtod_l+0x9da>
 8004696:	4620      	mov	r0, r4
 8004698:	4629      	mov	r1, r5
 800469a:	f7fc fa65 	bl	8000b68 <__aeabi_d2lz>
 800469e:	f7fb feed 	bl	800047c <__aeabi_l2d>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	4620      	mov	r0, r4
 80046a8:	4629      	mov	r1, r5
 80046aa:	f7fb fd5d 	bl	8000168 <__aeabi_dsub>
 80046ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80046b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80046b4:	ea43 0308 	orr.w	r3, r3, r8
 80046b8:	4313      	orrs	r3, r2
 80046ba:	4604      	mov	r4, r0
 80046bc:	460d      	mov	r5, r1
 80046be:	d066      	beq.n	800478e <_strtod_l+0xb8e>
 80046c0:	a309      	add	r3, pc, #36	; (adr r3, 80046e8 <_strtod_l+0xae8>)
 80046c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c6:	f7fc f979 	bl	80009bc <__aeabi_dcmplt>
 80046ca:	2800      	cmp	r0, #0
 80046cc:	f47f ace2 	bne.w	8004094 <_strtod_l+0x494>
 80046d0:	a307      	add	r3, pc, #28	; (adr r3, 80046f0 <_strtod_l+0xaf0>)
 80046d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d6:	4620      	mov	r0, r4
 80046d8:	4629      	mov	r1, r5
 80046da:	f7fc f98d 	bl	80009f8 <__aeabi_dcmpgt>
 80046de:	2800      	cmp	r0, #0
 80046e0:	f43f af7b 	beq.w	80045da <_strtod_l+0x9da>
 80046e4:	e4d6      	b.n	8004094 <_strtod_l+0x494>
 80046e6:	bf00      	nop
 80046e8:	94a03595 	.word	0x94a03595
 80046ec:	3fdfffff 	.word	0x3fdfffff
 80046f0:	35afe535 	.word	0x35afe535
 80046f4:	3fe00000 	.word	0x3fe00000
 80046f8:	000fffff 	.word	0x000fffff
 80046fc:	7ff00000 	.word	0x7ff00000
 8004700:	7fefffff 	.word	0x7fefffff
 8004704:	3ff00000 	.word	0x3ff00000
 8004708:	7fe00000 	.word	0x7fe00000
 800470c:	7c9fffff 	.word	0x7c9fffff
 8004710:	3fe00000 	.word	0x3fe00000
 8004714:	bff00000 	.word	0xbff00000
 8004718:	9b05      	ldr	r3, [sp, #20]
 800471a:	b313      	cbz	r3, 8004762 <_strtod_l+0xb62>
 800471c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800471e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004722:	d81e      	bhi.n	8004762 <_strtod_l+0xb62>
 8004724:	a326      	add	r3, pc, #152	; (adr r3, 80047c0 <_strtod_l+0xbc0>)
 8004726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472a:	4620      	mov	r0, r4
 800472c:	4629      	mov	r1, r5
 800472e:	f7fc f94f 	bl	80009d0 <__aeabi_dcmple>
 8004732:	b190      	cbz	r0, 800475a <_strtod_l+0xb5a>
 8004734:	4629      	mov	r1, r5
 8004736:	4620      	mov	r0, r4
 8004738:	f7fc f9a6 	bl	8000a88 <__aeabi_d2uiz>
 800473c:	2801      	cmp	r0, #1
 800473e:	bf38      	it	cc
 8004740:	2001      	movcc	r0, #1
 8004742:	f7fb fe4f 	bl	80003e4 <__aeabi_ui2d>
 8004746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004748:	4604      	mov	r4, r0
 800474a:	460d      	mov	r5, r1
 800474c:	b9d3      	cbnz	r3, 8004784 <_strtod_l+0xb84>
 800474e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004752:	9012      	str	r0, [sp, #72]	; 0x48
 8004754:	9313      	str	r3, [sp, #76]	; 0x4c
 8004756:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800475a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800475c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004760:	1a9f      	subs	r7, r3, r2
 8004762:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004766:	f001 ff3b 	bl	80065e0 <__ulp>
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	4630      	mov	r0, r6
 8004770:	4639      	mov	r1, r7
 8004772:	f7fb feb1 	bl	80004d8 <__aeabi_dmul>
 8004776:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800477a:	f7fb fcf7 	bl	800016c <__adddf3>
 800477e:	4680      	mov	r8, r0
 8004780:	4689      	mov	r9, r1
 8004782:	e77e      	b.n	8004682 <_strtod_l+0xa82>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800478c:	e7e3      	b.n	8004756 <_strtod_l+0xb56>
 800478e:	a30e      	add	r3, pc, #56	; (adr r3, 80047c8 <_strtod_l+0xbc8>)
 8004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004794:	f7fc f912 	bl	80009bc <__aeabi_dcmplt>
 8004798:	e7a1      	b.n	80046de <_strtod_l+0xade>
 800479a:	2300      	movs	r3, #0
 800479c:	930a      	str	r3, [sp, #40]	; 0x28
 800479e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80047a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80047a2:	6013      	str	r3, [r2, #0]
 80047a4:	f7ff ba71 	b.w	8003c8a <_strtod_l+0x8a>
 80047a8:	2a65      	cmp	r2, #101	; 0x65
 80047aa:	f43f ab63 	beq.w	8003e74 <_strtod_l+0x274>
 80047ae:	2a45      	cmp	r2, #69	; 0x45
 80047b0:	f43f ab60 	beq.w	8003e74 <_strtod_l+0x274>
 80047b4:	2301      	movs	r3, #1
 80047b6:	f7ff bb95 	b.w	8003ee4 <_strtod_l+0x2e4>
 80047ba:	bf00      	nop
 80047bc:	f3af 8000 	nop.w
 80047c0:	ffc00000 	.word	0xffc00000
 80047c4:	41dfffff 	.word	0x41dfffff
 80047c8:	94a03595 	.word	0x94a03595
 80047cc:	3fcfffff 	.word	0x3fcfffff

080047d0 <_strtod_r>:
 80047d0:	4b01      	ldr	r3, [pc, #4]	; (80047d8 <_strtod_r+0x8>)
 80047d2:	f7ff ba15 	b.w	8003c00 <_strtod_l>
 80047d6:	bf00      	nop
 80047d8:	20000074 	.word	0x20000074

080047dc <_strtol_l.constprop.0>:
 80047dc:	2b01      	cmp	r3, #1
 80047de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e2:	4680      	mov	r8, r0
 80047e4:	d001      	beq.n	80047ea <_strtol_l.constprop.0+0xe>
 80047e6:	2b24      	cmp	r3, #36	; 0x24
 80047e8:	d906      	bls.n	80047f8 <_strtol_l.constprop.0+0x1c>
 80047ea:	f7fe fb0b 	bl	8002e04 <__errno>
 80047ee:	2316      	movs	r3, #22
 80047f0:	6003      	str	r3, [r0, #0]
 80047f2:	2000      	movs	r0, #0
 80047f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047f8:	460d      	mov	r5, r1
 80047fa:	4f35      	ldr	r7, [pc, #212]	; (80048d0 <_strtol_l.constprop.0+0xf4>)
 80047fc:	4628      	mov	r0, r5
 80047fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004802:	5de6      	ldrb	r6, [r4, r7]
 8004804:	f016 0608 	ands.w	r6, r6, #8
 8004808:	d1f8      	bne.n	80047fc <_strtol_l.constprop.0+0x20>
 800480a:	2c2d      	cmp	r4, #45	; 0x2d
 800480c:	d12f      	bne.n	800486e <_strtol_l.constprop.0+0x92>
 800480e:	2601      	movs	r6, #1
 8004810:	782c      	ldrb	r4, [r5, #0]
 8004812:	1c85      	adds	r5, r0, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d057      	beq.n	80048c8 <_strtol_l.constprop.0+0xec>
 8004818:	2b10      	cmp	r3, #16
 800481a:	d109      	bne.n	8004830 <_strtol_l.constprop.0+0x54>
 800481c:	2c30      	cmp	r4, #48	; 0x30
 800481e:	d107      	bne.n	8004830 <_strtol_l.constprop.0+0x54>
 8004820:	7828      	ldrb	r0, [r5, #0]
 8004822:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004826:	2858      	cmp	r0, #88	; 0x58
 8004828:	d149      	bne.n	80048be <_strtol_l.constprop.0+0xe2>
 800482a:	2310      	movs	r3, #16
 800482c:	786c      	ldrb	r4, [r5, #1]
 800482e:	3502      	adds	r5, #2
 8004830:	2700      	movs	r7, #0
 8004832:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8004836:	f10e 3eff 	add.w	lr, lr, #4294967295
 800483a:	fbbe f9f3 	udiv	r9, lr, r3
 800483e:	4638      	mov	r0, r7
 8004840:	fb03 ea19 	mls	sl, r3, r9, lr
 8004844:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004848:	f1bc 0f09 	cmp.w	ip, #9
 800484c:	d814      	bhi.n	8004878 <_strtol_l.constprop.0+0x9c>
 800484e:	4664      	mov	r4, ip
 8004850:	42a3      	cmp	r3, r4
 8004852:	dd22      	ble.n	800489a <_strtol_l.constprop.0+0xbe>
 8004854:	2f00      	cmp	r7, #0
 8004856:	db1d      	blt.n	8004894 <_strtol_l.constprop.0+0xb8>
 8004858:	4581      	cmp	r9, r0
 800485a:	d31b      	bcc.n	8004894 <_strtol_l.constprop.0+0xb8>
 800485c:	d101      	bne.n	8004862 <_strtol_l.constprop.0+0x86>
 800485e:	45a2      	cmp	sl, r4
 8004860:	db18      	blt.n	8004894 <_strtol_l.constprop.0+0xb8>
 8004862:	2701      	movs	r7, #1
 8004864:	fb00 4003 	mla	r0, r0, r3, r4
 8004868:	f815 4b01 	ldrb.w	r4, [r5], #1
 800486c:	e7ea      	b.n	8004844 <_strtol_l.constprop.0+0x68>
 800486e:	2c2b      	cmp	r4, #43	; 0x2b
 8004870:	bf04      	itt	eq
 8004872:	782c      	ldrbeq	r4, [r5, #0]
 8004874:	1c85      	addeq	r5, r0, #2
 8004876:	e7cd      	b.n	8004814 <_strtol_l.constprop.0+0x38>
 8004878:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800487c:	f1bc 0f19 	cmp.w	ip, #25
 8004880:	d801      	bhi.n	8004886 <_strtol_l.constprop.0+0xaa>
 8004882:	3c37      	subs	r4, #55	; 0x37
 8004884:	e7e4      	b.n	8004850 <_strtol_l.constprop.0+0x74>
 8004886:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800488a:	f1bc 0f19 	cmp.w	ip, #25
 800488e:	d804      	bhi.n	800489a <_strtol_l.constprop.0+0xbe>
 8004890:	3c57      	subs	r4, #87	; 0x57
 8004892:	e7dd      	b.n	8004850 <_strtol_l.constprop.0+0x74>
 8004894:	f04f 37ff 	mov.w	r7, #4294967295
 8004898:	e7e6      	b.n	8004868 <_strtol_l.constprop.0+0x8c>
 800489a:	2f00      	cmp	r7, #0
 800489c:	da07      	bge.n	80048ae <_strtol_l.constprop.0+0xd2>
 800489e:	2322      	movs	r3, #34	; 0x22
 80048a0:	4670      	mov	r0, lr
 80048a2:	f8c8 3000 	str.w	r3, [r8]
 80048a6:	2a00      	cmp	r2, #0
 80048a8:	d0a4      	beq.n	80047f4 <_strtol_l.constprop.0+0x18>
 80048aa:	1e69      	subs	r1, r5, #1
 80048ac:	e005      	b.n	80048ba <_strtol_l.constprop.0+0xde>
 80048ae:	b106      	cbz	r6, 80048b2 <_strtol_l.constprop.0+0xd6>
 80048b0:	4240      	negs	r0, r0
 80048b2:	2a00      	cmp	r2, #0
 80048b4:	d09e      	beq.n	80047f4 <_strtol_l.constprop.0+0x18>
 80048b6:	2f00      	cmp	r7, #0
 80048b8:	d1f7      	bne.n	80048aa <_strtol_l.constprop.0+0xce>
 80048ba:	6011      	str	r1, [r2, #0]
 80048bc:	e79a      	b.n	80047f4 <_strtol_l.constprop.0+0x18>
 80048be:	2430      	movs	r4, #48	; 0x30
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1b5      	bne.n	8004830 <_strtol_l.constprop.0+0x54>
 80048c4:	2308      	movs	r3, #8
 80048c6:	e7b3      	b.n	8004830 <_strtol_l.constprop.0+0x54>
 80048c8:	2c30      	cmp	r4, #48	; 0x30
 80048ca:	d0a9      	beq.n	8004820 <_strtol_l.constprop.0+0x44>
 80048cc:	230a      	movs	r3, #10
 80048ce:	e7af      	b.n	8004830 <_strtol_l.constprop.0+0x54>
 80048d0:	080077f1 	.word	0x080077f1

080048d4 <_strtol_r>:
 80048d4:	f7ff bf82 	b.w	80047dc <_strtol_l.constprop.0>

080048d8 <quorem>:
 80048d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048dc:	6903      	ldr	r3, [r0, #16]
 80048de:	690c      	ldr	r4, [r1, #16]
 80048e0:	4607      	mov	r7, r0
 80048e2:	42a3      	cmp	r3, r4
 80048e4:	f2c0 8082 	blt.w	80049ec <quorem+0x114>
 80048e8:	3c01      	subs	r4, #1
 80048ea:	f100 0514 	add.w	r5, r0, #20
 80048ee:	f101 0814 	add.w	r8, r1, #20
 80048f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80048f6:	9301      	str	r3, [sp, #4]
 80048f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80048fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004900:	3301      	adds	r3, #1
 8004902:	429a      	cmp	r2, r3
 8004904:	fbb2 f6f3 	udiv	r6, r2, r3
 8004908:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800490c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004910:	d331      	bcc.n	8004976 <quorem+0x9e>
 8004912:	f04f 0e00 	mov.w	lr, #0
 8004916:	4640      	mov	r0, r8
 8004918:	46ac      	mov	ip, r5
 800491a:	46f2      	mov	sl, lr
 800491c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004920:	b293      	uxth	r3, r2
 8004922:	fb06 e303 	mla	r3, r6, r3, lr
 8004926:	0c12      	lsrs	r2, r2, #16
 8004928:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800492c:	b29b      	uxth	r3, r3
 800492e:	fb06 e202 	mla	r2, r6, r2, lr
 8004932:	ebaa 0303 	sub.w	r3, sl, r3
 8004936:	f8dc a000 	ldr.w	sl, [ip]
 800493a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800493e:	fa1f fa8a 	uxth.w	sl, sl
 8004942:	4453      	add	r3, sl
 8004944:	f8dc a000 	ldr.w	sl, [ip]
 8004948:	b292      	uxth	r2, r2
 800494a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800494e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004952:	b29b      	uxth	r3, r3
 8004954:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004958:	4581      	cmp	r9, r0
 800495a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800495e:	f84c 3b04 	str.w	r3, [ip], #4
 8004962:	d2db      	bcs.n	800491c <quorem+0x44>
 8004964:	f855 300b 	ldr.w	r3, [r5, fp]
 8004968:	b92b      	cbnz	r3, 8004976 <quorem+0x9e>
 800496a:	9b01      	ldr	r3, [sp, #4]
 800496c:	3b04      	subs	r3, #4
 800496e:	429d      	cmp	r5, r3
 8004970:	461a      	mov	r2, r3
 8004972:	d32f      	bcc.n	80049d4 <quorem+0xfc>
 8004974:	613c      	str	r4, [r7, #16]
 8004976:	4638      	mov	r0, r7
 8004978:	f001 fd8a 	bl	8006490 <__mcmp>
 800497c:	2800      	cmp	r0, #0
 800497e:	db25      	blt.n	80049cc <quorem+0xf4>
 8004980:	4628      	mov	r0, r5
 8004982:	f04f 0c00 	mov.w	ip, #0
 8004986:	3601      	adds	r6, #1
 8004988:	f858 1b04 	ldr.w	r1, [r8], #4
 800498c:	f8d0 e000 	ldr.w	lr, [r0]
 8004990:	b28b      	uxth	r3, r1
 8004992:	ebac 0303 	sub.w	r3, ip, r3
 8004996:	fa1f f28e 	uxth.w	r2, lr
 800499a:	4413      	add	r3, r2
 800499c:	0c0a      	lsrs	r2, r1, #16
 800499e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80049a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049ac:	45c1      	cmp	r9, r8
 80049ae:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80049b2:	f840 3b04 	str.w	r3, [r0], #4
 80049b6:	d2e7      	bcs.n	8004988 <quorem+0xb0>
 80049b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049c0:	b922      	cbnz	r2, 80049cc <quorem+0xf4>
 80049c2:	3b04      	subs	r3, #4
 80049c4:	429d      	cmp	r5, r3
 80049c6:	461a      	mov	r2, r3
 80049c8:	d30a      	bcc.n	80049e0 <quorem+0x108>
 80049ca:	613c      	str	r4, [r7, #16]
 80049cc:	4630      	mov	r0, r6
 80049ce:	b003      	add	sp, #12
 80049d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049d4:	6812      	ldr	r2, [r2, #0]
 80049d6:	3b04      	subs	r3, #4
 80049d8:	2a00      	cmp	r2, #0
 80049da:	d1cb      	bne.n	8004974 <quorem+0x9c>
 80049dc:	3c01      	subs	r4, #1
 80049de:	e7c6      	b.n	800496e <quorem+0x96>
 80049e0:	6812      	ldr	r2, [r2, #0]
 80049e2:	3b04      	subs	r3, #4
 80049e4:	2a00      	cmp	r2, #0
 80049e6:	d1f0      	bne.n	80049ca <quorem+0xf2>
 80049e8:	3c01      	subs	r4, #1
 80049ea:	e7eb      	b.n	80049c4 <quorem+0xec>
 80049ec:	2000      	movs	r0, #0
 80049ee:	e7ee      	b.n	80049ce <quorem+0xf6>

080049f0 <_dtoa_r>:
 80049f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f4:	4616      	mov	r6, r2
 80049f6:	461f      	mov	r7, r3
 80049f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80049fa:	b099      	sub	sp, #100	; 0x64
 80049fc:	4605      	mov	r5, r0
 80049fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004a02:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004a06:	b974      	cbnz	r4, 8004a26 <_dtoa_r+0x36>
 8004a08:	2010      	movs	r0, #16
 8004a0a:	f001 fa43 	bl	8005e94 <malloc>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	6268      	str	r0, [r5, #36]	; 0x24
 8004a12:	b920      	cbnz	r0, 8004a1e <_dtoa_r+0x2e>
 8004a14:	21ea      	movs	r1, #234	; 0xea
 8004a16:	4ba8      	ldr	r3, [pc, #672]	; (8004cb8 <_dtoa_r+0x2c8>)
 8004a18:	48a8      	ldr	r0, [pc, #672]	; (8004cbc <_dtoa_r+0x2cc>)
 8004a1a:	f002 fc1b 	bl	8007254 <__assert_func>
 8004a1e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004a22:	6004      	str	r4, [r0, #0]
 8004a24:	60c4      	str	r4, [r0, #12]
 8004a26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004a28:	6819      	ldr	r1, [r3, #0]
 8004a2a:	b151      	cbz	r1, 8004a42 <_dtoa_r+0x52>
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	2301      	movs	r3, #1
 8004a30:	4093      	lsls	r3, r2
 8004a32:	604a      	str	r2, [r1, #4]
 8004a34:	608b      	str	r3, [r1, #8]
 8004a36:	4628      	mov	r0, r5
 8004a38:	f001 faa2 	bl	8005f80 <_Bfree>
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	1e3b      	subs	r3, r7, #0
 8004a44:	bfaf      	iteee	ge
 8004a46:	2300      	movge	r3, #0
 8004a48:	2201      	movlt	r2, #1
 8004a4a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004a4e:	9305      	strlt	r3, [sp, #20]
 8004a50:	bfa8      	it	ge
 8004a52:	f8c8 3000 	strge.w	r3, [r8]
 8004a56:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004a5a:	4b99      	ldr	r3, [pc, #612]	; (8004cc0 <_dtoa_r+0x2d0>)
 8004a5c:	bfb8      	it	lt
 8004a5e:	f8c8 2000 	strlt.w	r2, [r8]
 8004a62:	ea33 0309 	bics.w	r3, r3, r9
 8004a66:	d119      	bne.n	8004a9c <_dtoa_r+0xac>
 8004a68:	f242 730f 	movw	r3, #9999	; 0x270f
 8004a6c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004a74:	4333      	orrs	r3, r6
 8004a76:	f000 857f 	beq.w	8005578 <_dtoa_r+0xb88>
 8004a7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004a7c:	b953      	cbnz	r3, 8004a94 <_dtoa_r+0xa4>
 8004a7e:	4b91      	ldr	r3, [pc, #580]	; (8004cc4 <_dtoa_r+0x2d4>)
 8004a80:	e022      	b.n	8004ac8 <_dtoa_r+0xd8>
 8004a82:	4b91      	ldr	r3, [pc, #580]	; (8004cc8 <_dtoa_r+0x2d8>)
 8004a84:	9303      	str	r3, [sp, #12]
 8004a86:	3308      	adds	r3, #8
 8004a88:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	9803      	ldr	r0, [sp, #12]
 8004a8e:	b019      	add	sp, #100	; 0x64
 8004a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a94:	4b8b      	ldr	r3, [pc, #556]	; (8004cc4 <_dtoa_r+0x2d4>)
 8004a96:	9303      	str	r3, [sp, #12]
 8004a98:	3303      	adds	r3, #3
 8004a9a:	e7f5      	b.n	8004a88 <_dtoa_r+0x98>
 8004a9c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004aa0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004aa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	2300      	movs	r3, #0
 8004aac:	f7fb ff7c 	bl	80009a8 <__aeabi_dcmpeq>
 8004ab0:	4680      	mov	r8, r0
 8004ab2:	b158      	cbz	r0, 8004acc <_dtoa_r+0xdc>
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8558 	beq.w	8005572 <_dtoa_r+0xb82>
 8004ac2:	4882      	ldr	r0, [pc, #520]	; (8004ccc <_dtoa_r+0x2dc>)
 8004ac4:	6018      	str	r0, [r3, #0]
 8004ac6:	1e43      	subs	r3, r0, #1
 8004ac8:	9303      	str	r3, [sp, #12]
 8004aca:	e7df      	b.n	8004a8c <_dtoa_r+0x9c>
 8004acc:	ab16      	add	r3, sp, #88	; 0x58
 8004ace:	9301      	str	r3, [sp, #4]
 8004ad0:	ab17      	add	r3, sp, #92	; 0x5c
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004ada:	f001 fdfb 	bl	80066d4 <__d2b>
 8004ade:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004ae2:	4683      	mov	fp, r0
 8004ae4:	2c00      	cmp	r4, #0
 8004ae6:	d07f      	beq.n	8004be8 <_dtoa_r+0x1f8>
 8004ae8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004aec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004aee:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004af2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004af6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004afa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004afe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004b02:	2200      	movs	r2, #0
 8004b04:	4b72      	ldr	r3, [pc, #456]	; (8004cd0 <_dtoa_r+0x2e0>)
 8004b06:	f7fb fb2f 	bl	8000168 <__aeabi_dsub>
 8004b0a:	a365      	add	r3, pc, #404	; (adr r3, 8004ca0 <_dtoa_r+0x2b0>)
 8004b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b10:	f7fb fce2 	bl	80004d8 <__aeabi_dmul>
 8004b14:	a364      	add	r3, pc, #400	; (adr r3, 8004ca8 <_dtoa_r+0x2b8>)
 8004b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1a:	f7fb fb27 	bl	800016c <__adddf3>
 8004b1e:	4606      	mov	r6, r0
 8004b20:	4620      	mov	r0, r4
 8004b22:	460f      	mov	r7, r1
 8004b24:	f7fb fc6e 	bl	8000404 <__aeabi_i2d>
 8004b28:	a361      	add	r3, pc, #388	; (adr r3, 8004cb0 <_dtoa_r+0x2c0>)
 8004b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2e:	f7fb fcd3 	bl	80004d8 <__aeabi_dmul>
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	4630      	mov	r0, r6
 8004b38:	4639      	mov	r1, r7
 8004b3a:	f7fb fb17 	bl	800016c <__adddf3>
 8004b3e:	4606      	mov	r6, r0
 8004b40:	460f      	mov	r7, r1
 8004b42:	f7fb ff79 	bl	8000a38 <__aeabi_d2iz>
 8004b46:	2200      	movs	r2, #0
 8004b48:	4682      	mov	sl, r0
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	4630      	mov	r0, r6
 8004b4e:	4639      	mov	r1, r7
 8004b50:	f7fb ff34 	bl	80009bc <__aeabi_dcmplt>
 8004b54:	b148      	cbz	r0, 8004b6a <_dtoa_r+0x17a>
 8004b56:	4650      	mov	r0, sl
 8004b58:	f7fb fc54 	bl	8000404 <__aeabi_i2d>
 8004b5c:	4632      	mov	r2, r6
 8004b5e:	463b      	mov	r3, r7
 8004b60:	f7fb ff22 	bl	80009a8 <__aeabi_dcmpeq>
 8004b64:	b908      	cbnz	r0, 8004b6a <_dtoa_r+0x17a>
 8004b66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b6a:	f1ba 0f16 	cmp.w	sl, #22
 8004b6e:	d858      	bhi.n	8004c22 <_dtoa_r+0x232>
 8004b70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b74:	4b57      	ldr	r3, [pc, #348]	; (8004cd4 <_dtoa_r+0x2e4>)
 8004b76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7e:	f7fb ff1d 	bl	80009bc <__aeabi_dcmplt>
 8004b82:	2800      	cmp	r0, #0
 8004b84:	d04f      	beq.n	8004c26 <_dtoa_r+0x236>
 8004b86:	2300      	movs	r3, #0
 8004b88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004b90:	1b1c      	subs	r4, r3, r4
 8004b92:	1e63      	subs	r3, r4, #1
 8004b94:	9309      	str	r3, [sp, #36]	; 0x24
 8004b96:	bf49      	itett	mi
 8004b98:	f1c4 0301 	rsbmi	r3, r4, #1
 8004b9c:	2300      	movpl	r3, #0
 8004b9e:	9306      	strmi	r3, [sp, #24]
 8004ba0:	2300      	movmi	r3, #0
 8004ba2:	bf54      	ite	pl
 8004ba4:	9306      	strpl	r3, [sp, #24]
 8004ba6:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004ba8:	f1ba 0f00 	cmp.w	sl, #0
 8004bac:	db3d      	blt.n	8004c2a <_dtoa_r+0x23a>
 8004bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bb0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004bb4:	4453      	add	r3, sl
 8004bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8004bb8:	2300      	movs	r3, #0
 8004bba:	930a      	str	r3, [sp, #40]	; 0x28
 8004bbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bbe:	2b09      	cmp	r3, #9
 8004bc0:	f200 808c 	bhi.w	8004cdc <_dtoa_r+0x2ec>
 8004bc4:	2b05      	cmp	r3, #5
 8004bc6:	bfc4      	itt	gt
 8004bc8:	3b04      	subgt	r3, #4
 8004bca:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004bcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bce:	bfc8      	it	gt
 8004bd0:	2400      	movgt	r4, #0
 8004bd2:	f1a3 0302 	sub.w	r3, r3, #2
 8004bd6:	bfd8      	it	le
 8004bd8:	2401      	movle	r4, #1
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	f200 808a 	bhi.w	8004cf4 <_dtoa_r+0x304>
 8004be0:	e8df f003 	tbb	[pc, r3]
 8004be4:	5b4d4f2d 	.word	0x5b4d4f2d
 8004be8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004bec:	441c      	add	r4, r3
 8004bee:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	bfc3      	ittte	gt
 8004bf6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004bfa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004bfe:	fa09 f303 	lslgt.w	r3, r9, r3
 8004c02:	f1c3 0320 	rsble	r3, r3, #32
 8004c06:	bfc6      	itte	gt
 8004c08:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004c0c:	4318      	orrgt	r0, r3
 8004c0e:	fa06 f003 	lslle.w	r0, r6, r3
 8004c12:	f7fb fbe7 	bl	80003e4 <__aeabi_ui2d>
 8004c16:	2301      	movs	r3, #1
 8004c18:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004c1c:	3c01      	subs	r4, #1
 8004c1e:	9313      	str	r3, [sp, #76]	; 0x4c
 8004c20:	e76f      	b.n	8004b02 <_dtoa_r+0x112>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e7b2      	b.n	8004b8c <_dtoa_r+0x19c>
 8004c26:	900f      	str	r0, [sp, #60]	; 0x3c
 8004c28:	e7b1      	b.n	8004b8e <_dtoa_r+0x19e>
 8004c2a:	9b06      	ldr	r3, [sp, #24]
 8004c2c:	eba3 030a 	sub.w	r3, r3, sl
 8004c30:	9306      	str	r3, [sp, #24]
 8004c32:	f1ca 0300 	rsb	r3, sl, #0
 8004c36:	930a      	str	r3, [sp, #40]	; 0x28
 8004c38:	2300      	movs	r3, #0
 8004c3a:	930e      	str	r3, [sp, #56]	; 0x38
 8004c3c:	e7be      	b.n	8004bbc <_dtoa_r+0x1cc>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	dc58      	bgt.n	8004cfa <_dtoa_r+0x30a>
 8004c48:	f04f 0901 	mov.w	r9, #1
 8004c4c:	464b      	mov	r3, r9
 8004c4e:	f8cd 9020 	str.w	r9, [sp, #32]
 8004c52:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004c56:	2200      	movs	r2, #0
 8004c58:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004c5a:	6042      	str	r2, [r0, #4]
 8004c5c:	2204      	movs	r2, #4
 8004c5e:	f102 0614 	add.w	r6, r2, #20
 8004c62:	429e      	cmp	r6, r3
 8004c64:	6841      	ldr	r1, [r0, #4]
 8004c66:	d94e      	bls.n	8004d06 <_dtoa_r+0x316>
 8004c68:	4628      	mov	r0, r5
 8004c6a:	f001 f949 	bl	8005f00 <_Balloc>
 8004c6e:	9003      	str	r0, [sp, #12]
 8004c70:	2800      	cmp	r0, #0
 8004c72:	d14c      	bne.n	8004d0e <_dtoa_r+0x31e>
 8004c74:	4602      	mov	r2, r0
 8004c76:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004c7a:	4b17      	ldr	r3, [pc, #92]	; (8004cd8 <_dtoa_r+0x2e8>)
 8004c7c:	e6cc      	b.n	8004a18 <_dtoa_r+0x28>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e7de      	b.n	8004c40 <_dtoa_r+0x250>
 8004c82:	2300      	movs	r3, #0
 8004c84:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004c88:	eb0a 0903 	add.w	r9, sl, r3
 8004c8c:	f109 0301 	add.w	r3, r9, #1
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	9308      	str	r3, [sp, #32]
 8004c94:	bfb8      	it	lt
 8004c96:	2301      	movlt	r3, #1
 8004c98:	e7dd      	b.n	8004c56 <_dtoa_r+0x266>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e7f2      	b.n	8004c84 <_dtoa_r+0x294>
 8004c9e:	bf00      	nop
 8004ca0:	636f4361 	.word	0x636f4361
 8004ca4:	3fd287a7 	.word	0x3fd287a7
 8004ca8:	8b60c8b3 	.word	0x8b60c8b3
 8004cac:	3fc68a28 	.word	0x3fc68a28
 8004cb0:	509f79fb 	.word	0x509f79fb
 8004cb4:	3fd34413 	.word	0x3fd34413
 8004cb8:	080078fe 	.word	0x080078fe
 8004cbc:	08007915 	.word	0x08007915
 8004cc0:	7ff00000 	.word	0x7ff00000
 8004cc4:	080078fa 	.word	0x080078fa
 8004cc8:	080078f1 	.word	0x080078f1
 8004ccc:	08007775 	.word	0x08007775
 8004cd0:	3ff80000 	.word	0x3ff80000
 8004cd4:	08007ae8 	.word	0x08007ae8
 8004cd8:	08007970 	.word	0x08007970
 8004cdc:	2401      	movs	r4, #1
 8004cde:	2300      	movs	r3, #0
 8004ce0:	940b      	str	r4, [sp, #44]	; 0x2c
 8004ce2:	9322      	str	r3, [sp, #136]	; 0x88
 8004ce4:	f04f 39ff 	mov.w	r9, #4294967295
 8004ce8:	2200      	movs	r2, #0
 8004cea:	2312      	movs	r3, #18
 8004cec:	f8cd 9020 	str.w	r9, [sp, #32]
 8004cf0:	9223      	str	r2, [sp, #140]	; 0x8c
 8004cf2:	e7b0      	b.n	8004c56 <_dtoa_r+0x266>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cf8:	e7f4      	b.n	8004ce4 <_dtoa_r+0x2f4>
 8004cfa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004cfe:	464b      	mov	r3, r9
 8004d00:	f8cd 9020 	str.w	r9, [sp, #32]
 8004d04:	e7a7      	b.n	8004c56 <_dtoa_r+0x266>
 8004d06:	3101      	adds	r1, #1
 8004d08:	6041      	str	r1, [r0, #4]
 8004d0a:	0052      	lsls	r2, r2, #1
 8004d0c:	e7a7      	b.n	8004c5e <_dtoa_r+0x26e>
 8004d0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d10:	9a03      	ldr	r2, [sp, #12]
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	9b08      	ldr	r3, [sp, #32]
 8004d16:	2b0e      	cmp	r3, #14
 8004d18:	f200 80a8 	bhi.w	8004e6c <_dtoa_r+0x47c>
 8004d1c:	2c00      	cmp	r4, #0
 8004d1e:	f000 80a5 	beq.w	8004e6c <_dtoa_r+0x47c>
 8004d22:	f1ba 0f00 	cmp.w	sl, #0
 8004d26:	dd34      	ble.n	8004d92 <_dtoa_r+0x3a2>
 8004d28:	4a9a      	ldr	r2, [pc, #616]	; (8004f94 <_dtoa_r+0x5a4>)
 8004d2a:	f00a 030f 	and.w	r3, sl, #15
 8004d2e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004d32:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004d36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d3a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004d3e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004d42:	d016      	beq.n	8004d72 <_dtoa_r+0x382>
 8004d44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d48:	4b93      	ldr	r3, [pc, #588]	; (8004f98 <_dtoa_r+0x5a8>)
 8004d4a:	2703      	movs	r7, #3
 8004d4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d50:	f7fb fcec 	bl	800072c <__aeabi_ddiv>
 8004d54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d58:	f004 040f 	and.w	r4, r4, #15
 8004d5c:	4e8e      	ldr	r6, [pc, #568]	; (8004f98 <_dtoa_r+0x5a8>)
 8004d5e:	b954      	cbnz	r4, 8004d76 <_dtoa_r+0x386>
 8004d60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d68:	f7fb fce0 	bl	800072c <__aeabi_ddiv>
 8004d6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d70:	e029      	b.n	8004dc6 <_dtoa_r+0x3d6>
 8004d72:	2702      	movs	r7, #2
 8004d74:	e7f2      	b.n	8004d5c <_dtoa_r+0x36c>
 8004d76:	07e1      	lsls	r1, r4, #31
 8004d78:	d508      	bpl.n	8004d8c <_dtoa_r+0x39c>
 8004d7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d7e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004d82:	f7fb fba9 	bl	80004d8 <__aeabi_dmul>
 8004d86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d8a:	3701      	adds	r7, #1
 8004d8c:	1064      	asrs	r4, r4, #1
 8004d8e:	3608      	adds	r6, #8
 8004d90:	e7e5      	b.n	8004d5e <_dtoa_r+0x36e>
 8004d92:	f000 80a5 	beq.w	8004ee0 <_dtoa_r+0x4f0>
 8004d96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d9a:	f1ca 0400 	rsb	r4, sl, #0
 8004d9e:	4b7d      	ldr	r3, [pc, #500]	; (8004f94 <_dtoa_r+0x5a4>)
 8004da0:	f004 020f 	and.w	r2, r4, #15
 8004da4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dac:	f7fb fb94 	bl	80004d8 <__aeabi_dmul>
 8004db0:	2702      	movs	r7, #2
 8004db2:	2300      	movs	r3, #0
 8004db4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004db8:	4e77      	ldr	r6, [pc, #476]	; (8004f98 <_dtoa_r+0x5a8>)
 8004dba:	1124      	asrs	r4, r4, #4
 8004dbc:	2c00      	cmp	r4, #0
 8004dbe:	f040 8084 	bne.w	8004eca <_dtoa_r+0x4da>
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1d2      	bne.n	8004d6c <_dtoa_r+0x37c>
 8004dc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 808b 	beq.w	8004ee4 <_dtoa_r+0x4f4>
 8004dce:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004dd2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004dd6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004dda:	2200      	movs	r2, #0
 8004ddc:	4b6f      	ldr	r3, [pc, #444]	; (8004f9c <_dtoa_r+0x5ac>)
 8004dde:	f7fb fded 	bl	80009bc <__aeabi_dcmplt>
 8004de2:	2800      	cmp	r0, #0
 8004de4:	d07e      	beq.n	8004ee4 <_dtoa_r+0x4f4>
 8004de6:	9b08      	ldr	r3, [sp, #32]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d07b      	beq.n	8004ee4 <_dtoa_r+0x4f4>
 8004dec:	f1b9 0f00 	cmp.w	r9, #0
 8004df0:	dd38      	ble.n	8004e64 <_dtoa_r+0x474>
 8004df2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004df6:	2200      	movs	r2, #0
 8004df8:	4b69      	ldr	r3, [pc, #420]	; (8004fa0 <_dtoa_r+0x5b0>)
 8004dfa:	f7fb fb6d 	bl	80004d8 <__aeabi_dmul>
 8004dfe:	464c      	mov	r4, r9
 8004e00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e04:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004e08:	3701      	adds	r7, #1
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	f7fb fafa 	bl	8000404 <__aeabi_i2d>
 8004e10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e14:	f7fb fb60 	bl	80004d8 <__aeabi_dmul>
 8004e18:	2200      	movs	r2, #0
 8004e1a:	4b62      	ldr	r3, [pc, #392]	; (8004fa4 <_dtoa_r+0x5b4>)
 8004e1c:	f7fb f9a6 	bl	800016c <__adddf3>
 8004e20:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004e24:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e28:	9611      	str	r6, [sp, #68]	; 0x44
 8004e2a:	2c00      	cmp	r4, #0
 8004e2c:	d15d      	bne.n	8004eea <_dtoa_r+0x4fa>
 8004e2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e32:	2200      	movs	r2, #0
 8004e34:	4b5c      	ldr	r3, [pc, #368]	; (8004fa8 <_dtoa_r+0x5b8>)
 8004e36:	f7fb f997 	bl	8000168 <__aeabi_dsub>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004e42:	4633      	mov	r3, r6
 8004e44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004e46:	f7fb fdd7 	bl	80009f8 <__aeabi_dcmpgt>
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	f040 829c 	bne.w	8005388 <_dtoa_r+0x998>
 8004e50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004e56:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004e5a:	f7fb fdaf 	bl	80009bc <__aeabi_dcmplt>
 8004e5e:	2800      	cmp	r0, #0
 8004e60:	f040 8290 	bne.w	8005384 <_dtoa_r+0x994>
 8004e64:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004e68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004e6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f2c0 8152 	blt.w	8005118 <_dtoa_r+0x728>
 8004e74:	f1ba 0f0e 	cmp.w	sl, #14
 8004e78:	f300 814e 	bgt.w	8005118 <_dtoa_r+0x728>
 8004e7c:	4b45      	ldr	r3, [pc, #276]	; (8004f94 <_dtoa_r+0x5a4>)
 8004e7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004e82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004e86:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004e8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f280 80db 	bge.w	8005048 <_dtoa_r+0x658>
 8004e92:	9b08      	ldr	r3, [sp, #32]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f300 80d7 	bgt.w	8005048 <_dtoa_r+0x658>
 8004e9a:	f040 8272 	bne.w	8005382 <_dtoa_r+0x992>
 8004e9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	4b40      	ldr	r3, [pc, #256]	; (8004fa8 <_dtoa_r+0x5b8>)
 8004ea6:	f7fb fb17 	bl	80004d8 <__aeabi_dmul>
 8004eaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004eae:	f7fb fd99 	bl	80009e4 <__aeabi_dcmpge>
 8004eb2:	9c08      	ldr	r4, [sp, #32]
 8004eb4:	4626      	mov	r6, r4
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	f040 8248 	bne.w	800534c <_dtoa_r+0x95c>
 8004ebc:	2331      	movs	r3, #49	; 0x31
 8004ebe:	9f03      	ldr	r7, [sp, #12]
 8004ec0:	f10a 0a01 	add.w	sl, sl, #1
 8004ec4:	f807 3b01 	strb.w	r3, [r7], #1
 8004ec8:	e244      	b.n	8005354 <_dtoa_r+0x964>
 8004eca:	07e2      	lsls	r2, r4, #31
 8004ecc:	d505      	bpl.n	8004eda <_dtoa_r+0x4ea>
 8004ece:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ed2:	f7fb fb01 	bl	80004d8 <__aeabi_dmul>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	3701      	adds	r7, #1
 8004eda:	1064      	asrs	r4, r4, #1
 8004edc:	3608      	adds	r6, #8
 8004ede:	e76d      	b.n	8004dbc <_dtoa_r+0x3cc>
 8004ee0:	2702      	movs	r7, #2
 8004ee2:	e770      	b.n	8004dc6 <_dtoa_r+0x3d6>
 8004ee4:	46d0      	mov	r8, sl
 8004ee6:	9c08      	ldr	r4, [sp, #32]
 8004ee8:	e78f      	b.n	8004e0a <_dtoa_r+0x41a>
 8004eea:	9903      	ldr	r1, [sp, #12]
 8004eec:	4b29      	ldr	r3, [pc, #164]	; (8004f94 <_dtoa_r+0x5a4>)
 8004eee:	4421      	add	r1, r4
 8004ef0:	9112      	str	r1, [sp, #72]	; 0x48
 8004ef2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ef4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004ef8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004efc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004f00:	2900      	cmp	r1, #0
 8004f02:	d055      	beq.n	8004fb0 <_dtoa_r+0x5c0>
 8004f04:	2000      	movs	r0, #0
 8004f06:	4929      	ldr	r1, [pc, #164]	; (8004fac <_dtoa_r+0x5bc>)
 8004f08:	f7fb fc10 	bl	800072c <__aeabi_ddiv>
 8004f0c:	463b      	mov	r3, r7
 8004f0e:	4632      	mov	r2, r6
 8004f10:	f7fb f92a 	bl	8000168 <__aeabi_dsub>
 8004f14:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f18:	9f03      	ldr	r7, [sp, #12]
 8004f1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f1e:	f7fb fd8b 	bl	8000a38 <__aeabi_d2iz>
 8004f22:	4604      	mov	r4, r0
 8004f24:	f7fb fa6e 	bl	8000404 <__aeabi_i2d>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f30:	f7fb f91a 	bl	8000168 <__aeabi_dsub>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	3430      	adds	r4, #48	; 0x30
 8004f3a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f42:	f807 4b01 	strb.w	r4, [r7], #1
 8004f46:	f7fb fd39 	bl	80009bc <__aeabi_dcmplt>
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	d174      	bne.n	8005038 <_dtoa_r+0x648>
 8004f4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f52:	2000      	movs	r0, #0
 8004f54:	4911      	ldr	r1, [pc, #68]	; (8004f9c <_dtoa_r+0x5ac>)
 8004f56:	f7fb f907 	bl	8000168 <__aeabi_dsub>
 8004f5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f5e:	f7fb fd2d 	bl	80009bc <__aeabi_dcmplt>
 8004f62:	2800      	cmp	r0, #0
 8004f64:	f040 80b7 	bne.w	80050d6 <_dtoa_r+0x6e6>
 8004f68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f6a:	429f      	cmp	r7, r3
 8004f6c:	f43f af7a 	beq.w	8004e64 <_dtoa_r+0x474>
 8004f70:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f74:	2200      	movs	r2, #0
 8004f76:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <_dtoa_r+0x5b0>)
 8004f78:	f7fb faae 	bl	80004d8 <__aeabi_dmul>
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f86:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <_dtoa_r+0x5b0>)
 8004f88:	f7fb faa6 	bl	80004d8 <__aeabi_dmul>
 8004f8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f90:	e7c3      	b.n	8004f1a <_dtoa_r+0x52a>
 8004f92:	bf00      	nop
 8004f94:	08007ae8 	.word	0x08007ae8
 8004f98:	08007ac0 	.word	0x08007ac0
 8004f9c:	3ff00000 	.word	0x3ff00000
 8004fa0:	40240000 	.word	0x40240000
 8004fa4:	401c0000 	.word	0x401c0000
 8004fa8:	40140000 	.word	0x40140000
 8004fac:	3fe00000 	.word	0x3fe00000
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	4639      	mov	r1, r7
 8004fb4:	f7fb fa90 	bl	80004d8 <__aeabi_dmul>
 8004fb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004fba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004fbe:	9c03      	ldr	r4, [sp, #12]
 8004fc0:	9314      	str	r3, [sp, #80]	; 0x50
 8004fc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fc6:	f7fb fd37 	bl	8000a38 <__aeabi_d2iz>
 8004fca:	9015      	str	r0, [sp, #84]	; 0x54
 8004fcc:	f7fb fa1a 	bl	8000404 <__aeabi_i2d>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fd8:	f7fb f8c6 	bl	8000168 <__aeabi_dsub>
 8004fdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004fde:	4606      	mov	r6, r0
 8004fe0:	3330      	adds	r3, #48	; 0x30
 8004fe2:	f804 3b01 	strb.w	r3, [r4], #1
 8004fe6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004fe8:	460f      	mov	r7, r1
 8004fea:	429c      	cmp	r4, r3
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	d124      	bne.n	800503c <_dtoa_r+0x64c>
 8004ff2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ff6:	4bb0      	ldr	r3, [pc, #704]	; (80052b8 <_dtoa_r+0x8c8>)
 8004ff8:	f7fb f8b8 	bl	800016c <__adddf3>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4630      	mov	r0, r6
 8005002:	4639      	mov	r1, r7
 8005004:	f7fb fcf8 	bl	80009f8 <__aeabi_dcmpgt>
 8005008:	2800      	cmp	r0, #0
 800500a:	d163      	bne.n	80050d4 <_dtoa_r+0x6e4>
 800500c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005010:	2000      	movs	r0, #0
 8005012:	49a9      	ldr	r1, [pc, #676]	; (80052b8 <_dtoa_r+0x8c8>)
 8005014:	f7fb f8a8 	bl	8000168 <__aeabi_dsub>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4630      	mov	r0, r6
 800501e:	4639      	mov	r1, r7
 8005020:	f7fb fccc 	bl	80009bc <__aeabi_dcmplt>
 8005024:	2800      	cmp	r0, #0
 8005026:	f43f af1d 	beq.w	8004e64 <_dtoa_r+0x474>
 800502a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800502c:	1e7b      	subs	r3, r7, #1
 800502e:	9314      	str	r3, [sp, #80]	; 0x50
 8005030:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005034:	2b30      	cmp	r3, #48	; 0x30
 8005036:	d0f8      	beq.n	800502a <_dtoa_r+0x63a>
 8005038:	46c2      	mov	sl, r8
 800503a:	e03b      	b.n	80050b4 <_dtoa_r+0x6c4>
 800503c:	4b9f      	ldr	r3, [pc, #636]	; (80052bc <_dtoa_r+0x8cc>)
 800503e:	f7fb fa4b 	bl	80004d8 <__aeabi_dmul>
 8005042:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005046:	e7bc      	b.n	8004fc2 <_dtoa_r+0x5d2>
 8005048:	9f03      	ldr	r7, [sp, #12]
 800504a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800504e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005052:	4640      	mov	r0, r8
 8005054:	4649      	mov	r1, r9
 8005056:	f7fb fb69 	bl	800072c <__aeabi_ddiv>
 800505a:	f7fb fced 	bl	8000a38 <__aeabi_d2iz>
 800505e:	4604      	mov	r4, r0
 8005060:	f7fb f9d0 	bl	8000404 <__aeabi_i2d>
 8005064:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005068:	f7fb fa36 	bl	80004d8 <__aeabi_dmul>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4640      	mov	r0, r8
 8005072:	4649      	mov	r1, r9
 8005074:	f7fb f878 	bl	8000168 <__aeabi_dsub>
 8005078:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800507c:	f807 6b01 	strb.w	r6, [r7], #1
 8005080:	9e03      	ldr	r6, [sp, #12]
 8005082:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005086:	1bbe      	subs	r6, r7, r6
 8005088:	45b4      	cmp	ip, r6
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	d136      	bne.n	80050fe <_dtoa_r+0x70e>
 8005090:	f7fb f86c 	bl	800016c <__adddf3>
 8005094:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005098:	4680      	mov	r8, r0
 800509a:	4689      	mov	r9, r1
 800509c:	f7fb fcac 	bl	80009f8 <__aeabi_dcmpgt>
 80050a0:	bb58      	cbnz	r0, 80050fa <_dtoa_r+0x70a>
 80050a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050a6:	4640      	mov	r0, r8
 80050a8:	4649      	mov	r1, r9
 80050aa:	f7fb fc7d 	bl	80009a8 <__aeabi_dcmpeq>
 80050ae:	b108      	cbz	r0, 80050b4 <_dtoa_r+0x6c4>
 80050b0:	07e1      	lsls	r1, r4, #31
 80050b2:	d422      	bmi.n	80050fa <_dtoa_r+0x70a>
 80050b4:	4628      	mov	r0, r5
 80050b6:	4659      	mov	r1, fp
 80050b8:	f000 ff62 	bl	8005f80 <_Bfree>
 80050bc:	2300      	movs	r3, #0
 80050be:	703b      	strb	r3, [r7, #0]
 80050c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80050c2:	f10a 0001 	add.w	r0, sl, #1
 80050c6:	6018      	str	r0, [r3, #0]
 80050c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f43f acde 	beq.w	8004a8c <_dtoa_r+0x9c>
 80050d0:	601f      	str	r7, [r3, #0]
 80050d2:	e4db      	b.n	8004a8c <_dtoa_r+0x9c>
 80050d4:	4627      	mov	r7, r4
 80050d6:	463b      	mov	r3, r7
 80050d8:	461f      	mov	r7, r3
 80050da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80050de:	2a39      	cmp	r2, #57	; 0x39
 80050e0:	d107      	bne.n	80050f2 <_dtoa_r+0x702>
 80050e2:	9a03      	ldr	r2, [sp, #12]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d1f7      	bne.n	80050d8 <_dtoa_r+0x6e8>
 80050e8:	2230      	movs	r2, #48	; 0x30
 80050ea:	9903      	ldr	r1, [sp, #12]
 80050ec:	f108 0801 	add.w	r8, r8, #1
 80050f0:	700a      	strb	r2, [r1, #0]
 80050f2:	781a      	ldrb	r2, [r3, #0]
 80050f4:	3201      	adds	r2, #1
 80050f6:	701a      	strb	r2, [r3, #0]
 80050f8:	e79e      	b.n	8005038 <_dtoa_r+0x648>
 80050fa:	46d0      	mov	r8, sl
 80050fc:	e7eb      	b.n	80050d6 <_dtoa_r+0x6e6>
 80050fe:	2200      	movs	r2, #0
 8005100:	4b6e      	ldr	r3, [pc, #440]	; (80052bc <_dtoa_r+0x8cc>)
 8005102:	f7fb f9e9 	bl	80004d8 <__aeabi_dmul>
 8005106:	2200      	movs	r2, #0
 8005108:	2300      	movs	r3, #0
 800510a:	4680      	mov	r8, r0
 800510c:	4689      	mov	r9, r1
 800510e:	f7fb fc4b 	bl	80009a8 <__aeabi_dcmpeq>
 8005112:	2800      	cmp	r0, #0
 8005114:	d09b      	beq.n	800504e <_dtoa_r+0x65e>
 8005116:	e7cd      	b.n	80050b4 <_dtoa_r+0x6c4>
 8005118:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800511a:	2a00      	cmp	r2, #0
 800511c:	f000 80d0 	beq.w	80052c0 <_dtoa_r+0x8d0>
 8005120:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005122:	2a01      	cmp	r2, #1
 8005124:	f300 80ae 	bgt.w	8005284 <_dtoa_r+0x894>
 8005128:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800512a:	2a00      	cmp	r2, #0
 800512c:	f000 80a6 	beq.w	800527c <_dtoa_r+0x88c>
 8005130:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005134:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005136:	9f06      	ldr	r7, [sp, #24]
 8005138:	9a06      	ldr	r2, [sp, #24]
 800513a:	2101      	movs	r1, #1
 800513c:	441a      	add	r2, r3
 800513e:	9206      	str	r2, [sp, #24]
 8005140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005142:	4628      	mov	r0, r5
 8005144:	441a      	add	r2, r3
 8005146:	9209      	str	r2, [sp, #36]	; 0x24
 8005148:	f001 f81a 	bl	8006180 <__i2b>
 800514c:	4606      	mov	r6, r0
 800514e:	2f00      	cmp	r7, #0
 8005150:	dd0c      	ble.n	800516c <_dtoa_r+0x77c>
 8005152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005154:	2b00      	cmp	r3, #0
 8005156:	dd09      	ble.n	800516c <_dtoa_r+0x77c>
 8005158:	42bb      	cmp	r3, r7
 800515a:	bfa8      	it	ge
 800515c:	463b      	movge	r3, r7
 800515e:	9a06      	ldr	r2, [sp, #24]
 8005160:	1aff      	subs	r7, r7, r3
 8005162:	1ad2      	subs	r2, r2, r3
 8005164:	9206      	str	r2, [sp, #24]
 8005166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	9309      	str	r3, [sp, #36]	; 0x24
 800516c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800516e:	b1f3      	cbz	r3, 80051ae <_dtoa_r+0x7be>
 8005170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 80a8 	beq.w	80052c8 <_dtoa_r+0x8d8>
 8005178:	2c00      	cmp	r4, #0
 800517a:	dd10      	ble.n	800519e <_dtoa_r+0x7ae>
 800517c:	4631      	mov	r1, r6
 800517e:	4622      	mov	r2, r4
 8005180:	4628      	mov	r0, r5
 8005182:	f001 f8bb 	bl	80062fc <__pow5mult>
 8005186:	465a      	mov	r2, fp
 8005188:	4601      	mov	r1, r0
 800518a:	4606      	mov	r6, r0
 800518c:	4628      	mov	r0, r5
 800518e:	f001 f80d 	bl	80061ac <__multiply>
 8005192:	4680      	mov	r8, r0
 8005194:	4659      	mov	r1, fp
 8005196:	4628      	mov	r0, r5
 8005198:	f000 fef2 	bl	8005f80 <_Bfree>
 800519c:	46c3      	mov	fp, r8
 800519e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051a0:	1b1a      	subs	r2, r3, r4
 80051a2:	d004      	beq.n	80051ae <_dtoa_r+0x7be>
 80051a4:	4659      	mov	r1, fp
 80051a6:	4628      	mov	r0, r5
 80051a8:	f001 f8a8 	bl	80062fc <__pow5mult>
 80051ac:	4683      	mov	fp, r0
 80051ae:	2101      	movs	r1, #1
 80051b0:	4628      	mov	r0, r5
 80051b2:	f000 ffe5 	bl	8006180 <__i2b>
 80051b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051b8:	4604      	mov	r4, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f340 8086 	ble.w	80052cc <_dtoa_r+0x8dc>
 80051c0:	461a      	mov	r2, r3
 80051c2:	4601      	mov	r1, r0
 80051c4:	4628      	mov	r0, r5
 80051c6:	f001 f899 	bl	80062fc <__pow5mult>
 80051ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051cc:	4604      	mov	r4, r0
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	dd7f      	ble.n	80052d2 <_dtoa_r+0x8e2>
 80051d2:	f04f 0800 	mov.w	r8, #0
 80051d6:	6923      	ldr	r3, [r4, #16]
 80051d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80051dc:	6918      	ldr	r0, [r3, #16]
 80051de:	f000 ff81 	bl	80060e4 <__hi0bits>
 80051e2:	f1c0 0020 	rsb	r0, r0, #32
 80051e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051e8:	4418      	add	r0, r3
 80051ea:	f010 001f 	ands.w	r0, r0, #31
 80051ee:	f000 8092 	beq.w	8005316 <_dtoa_r+0x926>
 80051f2:	f1c0 0320 	rsb	r3, r0, #32
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	f340 808a 	ble.w	8005310 <_dtoa_r+0x920>
 80051fc:	f1c0 001c 	rsb	r0, r0, #28
 8005200:	9b06      	ldr	r3, [sp, #24]
 8005202:	4407      	add	r7, r0
 8005204:	4403      	add	r3, r0
 8005206:	9306      	str	r3, [sp, #24]
 8005208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800520a:	4403      	add	r3, r0
 800520c:	9309      	str	r3, [sp, #36]	; 0x24
 800520e:	9b06      	ldr	r3, [sp, #24]
 8005210:	2b00      	cmp	r3, #0
 8005212:	dd05      	ble.n	8005220 <_dtoa_r+0x830>
 8005214:	4659      	mov	r1, fp
 8005216:	461a      	mov	r2, r3
 8005218:	4628      	mov	r0, r5
 800521a:	f001 f8c9 	bl	80063b0 <__lshift>
 800521e:	4683      	mov	fp, r0
 8005220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005222:	2b00      	cmp	r3, #0
 8005224:	dd05      	ble.n	8005232 <_dtoa_r+0x842>
 8005226:	4621      	mov	r1, r4
 8005228:	461a      	mov	r2, r3
 800522a:	4628      	mov	r0, r5
 800522c:	f001 f8c0 	bl	80063b0 <__lshift>
 8005230:	4604      	mov	r4, r0
 8005232:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005234:	2b00      	cmp	r3, #0
 8005236:	d070      	beq.n	800531a <_dtoa_r+0x92a>
 8005238:	4621      	mov	r1, r4
 800523a:	4658      	mov	r0, fp
 800523c:	f001 f928 	bl	8006490 <__mcmp>
 8005240:	2800      	cmp	r0, #0
 8005242:	da6a      	bge.n	800531a <_dtoa_r+0x92a>
 8005244:	2300      	movs	r3, #0
 8005246:	4659      	mov	r1, fp
 8005248:	220a      	movs	r2, #10
 800524a:	4628      	mov	r0, r5
 800524c:	f000 feba 	bl	8005fc4 <__multadd>
 8005250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005252:	4683      	mov	fp, r0
 8005254:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 8194 	beq.w	8005586 <_dtoa_r+0xb96>
 800525e:	4631      	mov	r1, r6
 8005260:	2300      	movs	r3, #0
 8005262:	220a      	movs	r2, #10
 8005264:	4628      	mov	r0, r5
 8005266:	f000 fead 	bl	8005fc4 <__multadd>
 800526a:	f1b9 0f00 	cmp.w	r9, #0
 800526e:	4606      	mov	r6, r0
 8005270:	f300 8093 	bgt.w	800539a <_dtoa_r+0x9aa>
 8005274:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005276:	2b02      	cmp	r3, #2
 8005278:	dc57      	bgt.n	800532a <_dtoa_r+0x93a>
 800527a:	e08e      	b.n	800539a <_dtoa_r+0x9aa>
 800527c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800527e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005282:	e757      	b.n	8005134 <_dtoa_r+0x744>
 8005284:	9b08      	ldr	r3, [sp, #32]
 8005286:	1e5c      	subs	r4, r3, #1
 8005288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800528a:	42a3      	cmp	r3, r4
 800528c:	bfb7      	itett	lt
 800528e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005290:	1b1c      	subge	r4, r3, r4
 8005292:	1ae2      	sublt	r2, r4, r3
 8005294:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005296:	bfbe      	ittt	lt
 8005298:	940a      	strlt	r4, [sp, #40]	; 0x28
 800529a:	189b      	addlt	r3, r3, r2
 800529c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800529e:	9b08      	ldr	r3, [sp, #32]
 80052a0:	bfb8      	it	lt
 80052a2:	2400      	movlt	r4, #0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	bfbb      	ittet	lt
 80052a8:	9b06      	ldrlt	r3, [sp, #24]
 80052aa:	9a08      	ldrlt	r2, [sp, #32]
 80052ac:	9f06      	ldrge	r7, [sp, #24]
 80052ae:	1a9f      	sublt	r7, r3, r2
 80052b0:	bfac      	ite	ge
 80052b2:	9b08      	ldrge	r3, [sp, #32]
 80052b4:	2300      	movlt	r3, #0
 80052b6:	e73f      	b.n	8005138 <_dtoa_r+0x748>
 80052b8:	3fe00000 	.word	0x3fe00000
 80052bc:	40240000 	.word	0x40240000
 80052c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80052c2:	9f06      	ldr	r7, [sp, #24]
 80052c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80052c6:	e742      	b.n	800514e <_dtoa_r+0x75e>
 80052c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052ca:	e76b      	b.n	80051a4 <_dtoa_r+0x7b4>
 80052cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	dc19      	bgt.n	8005306 <_dtoa_r+0x916>
 80052d2:	9b04      	ldr	r3, [sp, #16]
 80052d4:	b9bb      	cbnz	r3, 8005306 <_dtoa_r+0x916>
 80052d6:	9b05      	ldr	r3, [sp, #20]
 80052d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052dc:	b99b      	cbnz	r3, 8005306 <_dtoa_r+0x916>
 80052de:	9b05      	ldr	r3, [sp, #20]
 80052e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052e4:	0d1b      	lsrs	r3, r3, #20
 80052e6:	051b      	lsls	r3, r3, #20
 80052e8:	b183      	cbz	r3, 800530c <_dtoa_r+0x91c>
 80052ea:	f04f 0801 	mov.w	r8, #1
 80052ee:	9b06      	ldr	r3, [sp, #24]
 80052f0:	3301      	adds	r3, #1
 80052f2:	9306      	str	r3, [sp, #24]
 80052f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052f6:	3301      	adds	r3, #1
 80052f8:	9309      	str	r3, [sp, #36]	; 0x24
 80052fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f47f af6a 	bne.w	80051d6 <_dtoa_r+0x7e6>
 8005302:	2001      	movs	r0, #1
 8005304:	e76f      	b.n	80051e6 <_dtoa_r+0x7f6>
 8005306:	f04f 0800 	mov.w	r8, #0
 800530a:	e7f6      	b.n	80052fa <_dtoa_r+0x90a>
 800530c:	4698      	mov	r8, r3
 800530e:	e7f4      	b.n	80052fa <_dtoa_r+0x90a>
 8005310:	f43f af7d 	beq.w	800520e <_dtoa_r+0x81e>
 8005314:	4618      	mov	r0, r3
 8005316:	301c      	adds	r0, #28
 8005318:	e772      	b.n	8005200 <_dtoa_r+0x810>
 800531a:	9b08      	ldr	r3, [sp, #32]
 800531c:	2b00      	cmp	r3, #0
 800531e:	dc36      	bgt.n	800538e <_dtoa_r+0x99e>
 8005320:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005322:	2b02      	cmp	r3, #2
 8005324:	dd33      	ble.n	800538e <_dtoa_r+0x99e>
 8005326:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800532a:	f1b9 0f00 	cmp.w	r9, #0
 800532e:	d10d      	bne.n	800534c <_dtoa_r+0x95c>
 8005330:	4621      	mov	r1, r4
 8005332:	464b      	mov	r3, r9
 8005334:	2205      	movs	r2, #5
 8005336:	4628      	mov	r0, r5
 8005338:	f000 fe44 	bl	8005fc4 <__multadd>
 800533c:	4601      	mov	r1, r0
 800533e:	4604      	mov	r4, r0
 8005340:	4658      	mov	r0, fp
 8005342:	f001 f8a5 	bl	8006490 <__mcmp>
 8005346:	2800      	cmp	r0, #0
 8005348:	f73f adb8 	bgt.w	8004ebc <_dtoa_r+0x4cc>
 800534c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800534e:	9f03      	ldr	r7, [sp, #12]
 8005350:	ea6f 0a03 	mvn.w	sl, r3
 8005354:	f04f 0800 	mov.w	r8, #0
 8005358:	4621      	mov	r1, r4
 800535a:	4628      	mov	r0, r5
 800535c:	f000 fe10 	bl	8005f80 <_Bfree>
 8005360:	2e00      	cmp	r6, #0
 8005362:	f43f aea7 	beq.w	80050b4 <_dtoa_r+0x6c4>
 8005366:	f1b8 0f00 	cmp.w	r8, #0
 800536a:	d005      	beq.n	8005378 <_dtoa_r+0x988>
 800536c:	45b0      	cmp	r8, r6
 800536e:	d003      	beq.n	8005378 <_dtoa_r+0x988>
 8005370:	4641      	mov	r1, r8
 8005372:	4628      	mov	r0, r5
 8005374:	f000 fe04 	bl	8005f80 <_Bfree>
 8005378:	4631      	mov	r1, r6
 800537a:	4628      	mov	r0, r5
 800537c:	f000 fe00 	bl	8005f80 <_Bfree>
 8005380:	e698      	b.n	80050b4 <_dtoa_r+0x6c4>
 8005382:	2400      	movs	r4, #0
 8005384:	4626      	mov	r6, r4
 8005386:	e7e1      	b.n	800534c <_dtoa_r+0x95c>
 8005388:	46c2      	mov	sl, r8
 800538a:	4626      	mov	r6, r4
 800538c:	e596      	b.n	8004ebc <_dtoa_r+0x4cc>
 800538e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005390:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 80fd 	beq.w	8005594 <_dtoa_r+0xba4>
 800539a:	2f00      	cmp	r7, #0
 800539c:	dd05      	ble.n	80053aa <_dtoa_r+0x9ba>
 800539e:	4631      	mov	r1, r6
 80053a0:	463a      	mov	r2, r7
 80053a2:	4628      	mov	r0, r5
 80053a4:	f001 f804 	bl	80063b0 <__lshift>
 80053a8:	4606      	mov	r6, r0
 80053aa:	f1b8 0f00 	cmp.w	r8, #0
 80053ae:	d05c      	beq.n	800546a <_dtoa_r+0xa7a>
 80053b0:	4628      	mov	r0, r5
 80053b2:	6871      	ldr	r1, [r6, #4]
 80053b4:	f000 fda4 	bl	8005f00 <_Balloc>
 80053b8:	4607      	mov	r7, r0
 80053ba:	b928      	cbnz	r0, 80053c8 <_dtoa_r+0x9d8>
 80053bc:	4602      	mov	r2, r0
 80053be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80053c2:	4b7f      	ldr	r3, [pc, #508]	; (80055c0 <_dtoa_r+0xbd0>)
 80053c4:	f7ff bb28 	b.w	8004a18 <_dtoa_r+0x28>
 80053c8:	6932      	ldr	r2, [r6, #16]
 80053ca:	f106 010c 	add.w	r1, r6, #12
 80053ce:	3202      	adds	r2, #2
 80053d0:	0092      	lsls	r2, r2, #2
 80053d2:	300c      	adds	r0, #12
 80053d4:	f000 fd86 	bl	8005ee4 <memcpy>
 80053d8:	2201      	movs	r2, #1
 80053da:	4639      	mov	r1, r7
 80053dc:	4628      	mov	r0, r5
 80053de:	f000 ffe7 	bl	80063b0 <__lshift>
 80053e2:	46b0      	mov	r8, r6
 80053e4:	4606      	mov	r6, r0
 80053e6:	9b03      	ldr	r3, [sp, #12]
 80053e8:	3301      	adds	r3, #1
 80053ea:	9308      	str	r3, [sp, #32]
 80053ec:	9b03      	ldr	r3, [sp, #12]
 80053ee:	444b      	add	r3, r9
 80053f0:	930a      	str	r3, [sp, #40]	; 0x28
 80053f2:	9b04      	ldr	r3, [sp, #16]
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	9309      	str	r3, [sp, #36]	; 0x24
 80053fa:	9b08      	ldr	r3, [sp, #32]
 80053fc:	4621      	mov	r1, r4
 80053fe:	3b01      	subs	r3, #1
 8005400:	4658      	mov	r0, fp
 8005402:	9304      	str	r3, [sp, #16]
 8005404:	f7ff fa68 	bl	80048d8 <quorem>
 8005408:	4603      	mov	r3, r0
 800540a:	4641      	mov	r1, r8
 800540c:	3330      	adds	r3, #48	; 0x30
 800540e:	9006      	str	r0, [sp, #24]
 8005410:	4658      	mov	r0, fp
 8005412:	930b      	str	r3, [sp, #44]	; 0x2c
 8005414:	f001 f83c 	bl	8006490 <__mcmp>
 8005418:	4632      	mov	r2, r6
 800541a:	4681      	mov	r9, r0
 800541c:	4621      	mov	r1, r4
 800541e:	4628      	mov	r0, r5
 8005420:	f001 f852 	bl	80064c8 <__mdiff>
 8005424:	68c2      	ldr	r2, [r0, #12]
 8005426:	4607      	mov	r7, r0
 8005428:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800542a:	bb02      	cbnz	r2, 800546e <_dtoa_r+0xa7e>
 800542c:	4601      	mov	r1, r0
 800542e:	4658      	mov	r0, fp
 8005430:	f001 f82e 	bl	8006490 <__mcmp>
 8005434:	4602      	mov	r2, r0
 8005436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005438:	4639      	mov	r1, r7
 800543a:	4628      	mov	r0, r5
 800543c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005440:	f000 fd9e 	bl	8005f80 <_Bfree>
 8005444:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005446:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005448:	9f08      	ldr	r7, [sp, #32]
 800544a:	ea43 0102 	orr.w	r1, r3, r2
 800544e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005450:	430b      	orrs	r3, r1
 8005452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005454:	d10d      	bne.n	8005472 <_dtoa_r+0xa82>
 8005456:	2b39      	cmp	r3, #57	; 0x39
 8005458:	d029      	beq.n	80054ae <_dtoa_r+0xabe>
 800545a:	f1b9 0f00 	cmp.w	r9, #0
 800545e:	dd01      	ble.n	8005464 <_dtoa_r+0xa74>
 8005460:	9b06      	ldr	r3, [sp, #24]
 8005462:	3331      	adds	r3, #49	; 0x31
 8005464:	9a04      	ldr	r2, [sp, #16]
 8005466:	7013      	strb	r3, [r2, #0]
 8005468:	e776      	b.n	8005358 <_dtoa_r+0x968>
 800546a:	4630      	mov	r0, r6
 800546c:	e7b9      	b.n	80053e2 <_dtoa_r+0x9f2>
 800546e:	2201      	movs	r2, #1
 8005470:	e7e2      	b.n	8005438 <_dtoa_r+0xa48>
 8005472:	f1b9 0f00 	cmp.w	r9, #0
 8005476:	db06      	blt.n	8005486 <_dtoa_r+0xa96>
 8005478:	9922      	ldr	r1, [sp, #136]	; 0x88
 800547a:	ea41 0909 	orr.w	r9, r1, r9
 800547e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005480:	ea59 0101 	orrs.w	r1, r9, r1
 8005484:	d120      	bne.n	80054c8 <_dtoa_r+0xad8>
 8005486:	2a00      	cmp	r2, #0
 8005488:	ddec      	ble.n	8005464 <_dtoa_r+0xa74>
 800548a:	4659      	mov	r1, fp
 800548c:	2201      	movs	r2, #1
 800548e:	4628      	mov	r0, r5
 8005490:	9308      	str	r3, [sp, #32]
 8005492:	f000 ff8d 	bl	80063b0 <__lshift>
 8005496:	4621      	mov	r1, r4
 8005498:	4683      	mov	fp, r0
 800549a:	f000 fff9 	bl	8006490 <__mcmp>
 800549e:	2800      	cmp	r0, #0
 80054a0:	9b08      	ldr	r3, [sp, #32]
 80054a2:	dc02      	bgt.n	80054aa <_dtoa_r+0xaba>
 80054a4:	d1de      	bne.n	8005464 <_dtoa_r+0xa74>
 80054a6:	07da      	lsls	r2, r3, #31
 80054a8:	d5dc      	bpl.n	8005464 <_dtoa_r+0xa74>
 80054aa:	2b39      	cmp	r3, #57	; 0x39
 80054ac:	d1d8      	bne.n	8005460 <_dtoa_r+0xa70>
 80054ae:	2339      	movs	r3, #57	; 0x39
 80054b0:	9a04      	ldr	r2, [sp, #16]
 80054b2:	7013      	strb	r3, [r2, #0]
 80054b4:	463b      	mov	r3, r7
 80054b6:	461f      	mov	r7, r3
 80054b8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80054bc:	3b01      	subs	r3, #1
 80054be:	2a39      	cmp	r2, #57	; 0x39
 80054c0:	d050      	beq.n	8005564 <_dtoa_r+0xb74>
 80054c2:	3201      	adds	r2, #1
 80054c4:	701a      	strb	r2, [r3, #0]
 80054c6:	e747      	b.n	8005358 <_dtoa_r+0x968>
 80054c8:	2a00      	cmp	r2, #0
 80054ca:	dd03      	ble.n	80054d4 <_dtoa_r+0xae4>
 80054cc:	2b39      	cmp	r3, #57	; 0x39
 80054ce:	d0ee      	beq.n	80054ae <_dtoa_r+0xabe>
 80054d0:	3301      	adds	r3, #1
 80054d2:	e7c7      	b.n	8005464 <_dtoa_r+0xa74>
 80054d4:	9a08      	ldr	r2, [sp, #32]
 80054d6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80054d8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80054dc:	428a      	cmp	r2, r1
 80054de:	d02a      	beq.n	8005536 <_dtoa_r+0xb46>
 80054e0:	4659      	mov	r1, fp
 80054e2:	2300      	movs	r3, #0
 80054e4:	220a      	movs	r2, #10
 80054e6:	4628      	mov	r0, r5
 80054e8:	f000 fd6c 	bl	8005fc4 <__multadd>
 80054ec:	45b0      	cmp	r8, r6
 80054ee:	4683      	mov	fp, r0
 80054f0:	f04f 0300 	mov.w	r3, #0
 80054f4:	f04f 020a 	mov.w	r2, #10
 80054f8:	4641      	mov	r1, r8
 80054fa:	4628      	mov	r0, r5
 80054fc:	d107      	bne.n	800550e <_dtoa_r+0xb1e>
 80054fe:	f000 fd61 	bl	8005fc4 <__multadd>
 8005502:	4680      	mov	r8, r0
 8005504:	4606      	mov	r6, r0
 8005506:	9b08      	ldr	r3, [sp, #32]
 8005508:	3301      	adds	r3, #1
 800550a:	9308      	str	r3, [sp, #32]
 800550c:	e775      	b.n	80053fa <_dtoa_r+0xa0a>
 800550e:	f000 fd59 	bl	8005fc4 <__multadd>
 8005512:	4631      	mov	r1, r6
 8005514:	4680      	mov	r8, r0
 8005516:	2300      	movs	r3, #0
 8005518:	220a      	movs	r2, #10
 800551a:	4628      	mov	r0, r5
 800551c:	f000 fd52 	bl	8005fc4 <__multadd>
 8005520:	4606      	mov	r6, r0
 8005522:	e7f0      	b.n	8005506 <_dtoa_r+0xb16>
 8005524:	f1b9 0f00 	cmp.w	r9, #0
 8005528:	bfcc      	ite	gt
 800552a:	464f      	movgt	r7, r9
 800552c:	2701      	movle	r7, #1
 800552e:	f04f 0800 	mov.w	r8, #0
 8005532:	9a03      	ldr	r2, [sp, #12]
 8005534:	4417      	add	r7, r2
 8005536:	4659      	mov	r1, fp
 8005538:	2201      	movs	r2, #1
 800553a:	4628      	mov	r0, r5
 800553c:	9308      	str	r3, [sp, #32]
 800553e:	f000 ff37 	bl	80063b0 <__lshift>
 8005542:	4621      	mov	r1, r4
 8005544:	4683      	mov	fp, r0
 8005546:	f000 ffa3 	bl	8006490 <__mcmp>
 800554a:	2800      	cmp	r0, #0
 800554c:	dcb2      	bgt.n	80054b4 <_dtoa_r+0xac4>
 800554e:	d102      	bne.n	8005556 <_dtoa_r+0xb66>
 8005550:	9b08      	ldr	r3, [sp, #32]
 8005552:	07db      	lsls	r3, r3, #31
 8005554:	d4ae      	bmi.n	80054b4 <_dtoa_r+0xac4>
 8005556:	463b      	mov	r3, r7
 8005558:	461f      	mov	r7, r3
 800555a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800555e:	2a30      	cmp	r2, #48	; 0x30
 8005560:	d0fa      	beq.n	8005558 <_dtoa_r+0xb68>
 8005562:	e6f9      	b.n	8005358 <_dtoa_r+0x968>
 8005564:	9a03      	ldr	r2, [sp, #12]
 8005566:	429a      	cmp	r2, r3
 8005568:	d1a5      	bne.n	80054b6 <_dtoa_r+0xac6>
 800556a:	2331      	movs	r3, #49	; 0x31
 800556c:	f10a 0a01 	add.w	sl, sl, #1
 8005570:	e779      	b.n	8005466 <_dtoa_r+0xa76>
 8005572:	4b14      	ldr	r3, [pc, #80]	; (80055c4 <_dtoa_r+0xbd4>)
 8005574:	f7ff baa8 	b.w	8004ac8 <_dtoa_r+0xd8>
 8005578:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800557a:	2b00      	cmp	r3, #0
 800557c:	f47f aa81 	bne.w	8004a82 <_dtoa_r+0x92>
 8005580:	4b11      	ldr	r3, [pc, #68]	; (80055c8 <_dtoa_r+0xbd8>)
 8005582:	f7ff baa1 	b.w	8004ac8 <_dtoa_r+0xd8>
 8005586:	f1b9 0f00 	cmp.w	r9, #0
 800558a:	dc03      	bgt.n	8005594 <_dtoa_r+0xba4>
 800558c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800558e:	2b02      	cmp	r3, #2
 8005590:	f73f aecb 	bgt.w	800532a <_dtoa_r+0x93a>
 8005594:	9f03      	ldr	r7, [sp, #12]
 8005596:	4621      	mov	r1, r4
 8005598:	4658      	mov	r0, fp
 800559a:	f7ff f99d 	bl	80048d8 <quorem>
 800559e:	9a03      	ldr	r2, [sp, #12]
 80055a0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80055a4:	f807 3b01 	strb.w	r3, [r7], #1
 80055a8:	1aba      	subs	r2, r7, r2
 80055aa:	4591      	cmp	r9, r2
 80055ac:	ddba      	ble.n	8005524 <_dtoa_r+0xb34>
 80055ae:	4659      	mov	r1, fp
 80055b0:	2300      	movs	r3, #0
 80055b2:	220a      	movs	r2, #10
 80055b4:	4628      	mov	r0, r5
 80055b6:	f000 fd05 	bl	8005fc4 <__multadd>
 80055ba:	4683      	mov	fp, r0
 80055bc:	e7eb      	b.n	8005596 <_dtoa_r+0xba6>
 80055be:	bf00      	nop
 80055c0:	08007970 	.word	0x08007970
 80055c4:	08007774 	.word	0x08007774
 80055c8:	080078f1 	.word	0x080078f1

080055cc <std>:
 80055cc:	2300      	movs	r3, #0
 80055ce:	b510      	push	{r4, lr}
 80055d0:	4604      	mov	r4, r0
 80055d2:	e9c0 3300 	strd	r3, r3, [r0]
 80055d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055da:	6083      	str	r3, [r0, #8]
 80055dc:	8181      	strh	r1, [r0, #12]
 80055de:	6643      	str	r3, [r0, #100]	; 0x64
 80055e0:	81c2      	strh	r2, [r0, #14]
 80055e2:	6183      	str	r3, [r0, #24]
 80055e4:	4619      	mov	r1, r3
 80055e6:	2208      	movs	r2, #8
 80055e8:	305c      	adds	r0, #92	; 0x5c
 80055ea:	f7fd fc35 	bl	8002e58 <memset>
 80055ee:	4b05      	ldr	r3, [pc, #20]	; (8005604 <std+0x38>)
 80055f0:	6224      	str	r4, [r4, #32]
 80055f2:	6263      	str	r3, [r4, #36]	; 0x24
 80055f4:	4b04      	ldr	r3, [pc, #16]	; (8005608 <std+0x3c>)
 80055f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80055f8:	4b04      	ldr	r3, [pc, #16]	; (800560c <std+0x40>)
 80055fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055fc:	4b04      	ldr	r3, [pc, #16]	; (8005610 <std+0x44>)
 80055fe:	6323      	str	r3, [r4, #48]	; 0x30
 8005600:	bd10      	pop	{r4, pc}
 8005602:	bf00      	nop
 8005604:	08006fe5 	.word	0x08006fe5
 8005608:	08007007 	.word	0x08007007
 800560c:	0800703f 	.word	0x0800703f
 8005610:	08007063 	.word	0x08007063

08005614 <_cleanup_r>:
 8005614:	4901      	ldr	r1, [pc, #4]	; (800561c <_cleanup_r+0x8>)
 8005616:	f000 b8af 	b.w	8005778 <_fwalk_reent>
 800561a:	bf00      	nop
 800561c:	080073b5 	.word	0x080073b5

08005620 <__sfmoreglue>:
 8005620:	2268      	movs	r2, #104	; 0x68
 8005622:	b570      	push	{r4, r5, r6, lr}
 8005624:	1e4d      	subs	r5, r1, #1
 8005626:	4355      	muls	r5, r2
 8005628:	460e      	mov	r6, r1
 800562a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800562e:	f001 f99b 	bl	8006968 <_malloc_r>
 8005632:	4604      	mov	r4, r0
 8005634:	b140      	cbz	r0, 8005648 <__sfmoreglue+0x28>
 8005636:	2100      	movs	r1, #0
 8005638:	e9c0 1600 	strd	r1, r6, [r0]
 800563c:	300c      	adds	r0, #12
 800563e:	60a0      	str	r0, [r4, #8]
 8005640:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005644:	f7fd fc08 	bl	8002e58 <memset>
 8005648:	4620      	mov	r0, r4
 800564a:	bd70      	pop	{r4, r5, r6, pc}

0800564c <__sfp_lock_acquire>:
 800564c:	4801      	ldr	r0, [pc, #4]	; (8005654 <__sfp_lock_acquire+0x8>)
 800564e:	f000 bc1e 	b.w	8005e8e <__retarget_lock_acquire_recursive>
 8005652:	bf00      	nop
 8005654:	20000281 	.word	0x20000281

08005658 <__sfp_lock_release>:
 8005658:	4801      	ldr	r0, [pc, #4]	; (8005660 <__sfp_lock_release+0x8>)
 800565a:	f000 bc19 	b.w	8005e90 <__retarget_lock_release_recursive>
 800565e:	bf00      	nop
 8005660:	20000281 	.word	0x20000281

08005664 <__sinit_lock_acquire>:
 8005664:	4801      	ldr	r0, [pc, #4]	; (800566c <__sinit_lock_acquire+0x8>)
 8005666:	f000 bc12 	b.w	8005e8e <__retarget_lock_acquire_recursive>
 800566a:	bf00      	nop
 800566c:	20000282 	.word	0x20000282

08005670 <__sinit_lock_release>:
 8005670:	4801      	ldr	r0, [pc, #4]	; (8005678 <__sinit_lock_release+0x8>)
 8005672:	f000 bc0d 	b.w	8005e90 <__retarget_lock_release_recursive>
 8005676:	bf00      	nop
 8005678:	20000282 	.word	0x20000282

0800567c <__sinit>:
 800567c:	b510      	push	{r4, lr}
 800567e:	4604      	mov	r4, r0
 8005680:	f7ff fff0 	bl	8005664 <__sinit_lock_acquire>
 8005684:	69a3      	ldr	r3, [r4, #24]
 8005686:	b11b      	cbz	r3, 8005690 <__sinit+0x14>
 8005688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800568c:	f7ff bff0 	b.w	8005670 <__sinit_lock_release>
 8005690:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005694:	6523      	str	r3, [r4, #80]	; 0x50
 8005696:	4b13      	ldr	r3, [pc, #76]	; (80056e4 <__sinit+0x68>)
 8005698:	4a13      	ldr	r2, [pc, #76]	; (80056e8 <__sinit+0x6c>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	62a2      	str	r2, [r4, #40]	; 0x28
 800569e:	42a3      	cmp	r3, r4
 80056a0:	bf08      	it	eq
 80056a2:	2301      	moveq	r3, #1
 80056a4:	4620      	mov	r0, r4
 80056a6:	bf08      	it	eq
 80056a8:	61a3      	streq	r3, [r4, #24]
 80056aa:	f000 f81f 	bl	80056ec <__sfp>
 80056ae:	6060      	str	r0, [r4, #4]
 80056b0:	4620      	mov	r0, r4
 80056b2:	f000 f81b 	bl	80056ec <__sfp>
 80056b6:	60a0      	str	r0, [r4, #8]
 80056b8:	4620      	mov	r0, r4
 80056ba:	f000 f817 	bl	80056ec <__sfp>
 80056be:	2200      	movs	r2, #0
 80056c0:	2104      	movs	r1, #4
 80056c2:	60e0      	str	r0, [r4, #12]
 80056c4:	6860      	ldr	r0, [r4, #4]
 80056c6:	f7ff ff81 	bl	80055cc <std>
 80056ca:	2201      	movs	r2, #1
 80056cc:	2109      	movs	r1, #9
 80056ce:	68a0      	ldr	r0, [r4, #8]
 80056d0:	f7ff ff7c 	bl	80055cc <std>
 80056d4:	2202      	movs	r2, #2
 80056d6:	2112      	movs	r1, #18
 80056d8:	68e0      	ldr	r0, [r4, #12]
 80056da:	f7ff ff77 	bl	80055cc <std>
 80056de:	2301      	movs	r3, #1
 80056e0:	61a3      	str	r3, [r4, #24]
 80056e2:	e7d1      	b.n	8005688 <__sinit+0xc>
 80056e4:	08007760 	.word	0x08007760
 80056e8:	08005615 	.word	0x08005615

080056ec <__sfp>:
 80056ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ee:	4607      	mov	r7, r0
 80056f0:	f7ff ffac 	bl	800564c <__sfp_lock_acquire>
 80056f4:	4b1e      	ldr	r3, [pc, #120]	; (8005770 <__sfp+0x84>)
 80056f6:	681e      	ldr	r6, [r3, #0]
 80056f8:	69b3      	ldr	r3, [r6, #24]
 80056fa:	b913      	cbnz	r3, 8005702 <__sfp+0x16>
 80056fc:	4630      	mov	r0, r6
 80056fe:	f7ff ffbd 	bl	800567c <__sinit>
 8005702:	3648      	adds	r6, #72	; 0x48
 8005704:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005708:	3b01      	subs	r3, #1
 800570a:	d503      	bpl.n	8005714 <__sfp+0x28>
 800570c:	6833      	ldr	r3, [r6, #0]
 800570e:	b30b      	cbz	r3, 8005754 <__sfp+0x68>
 8005710:	6836      	ldr	r6, [r6, #0]
 8005712:	e7f7      	b.n	8005704 <__sfp+0x18>
 8005714:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005718:	b9d5      	cbnz	r5, 8005750 <__sfp+0x64>
 800571a:	4b16      	ldr	r3, [pc, #88]	; (8005774 <__sfp+0x88>)
 800571c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005720:	60e3      	str	r3, [r4, #12]
 8005722:	6665      	str	r5, [r4, #100]	; 0x64
 8005724:	f000 fbb2 	bl	8005e8c <__retarget_lock_init_recursive>
 8005728:	f7ff ff96 	bl	8005658 <__sfp_lock_release>
 800572c:	2208      	movs	r2, #8
 800572e:	4629      	mov	r1, r5
 8005730:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005734:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005738:	6025      	str	r5, [r4, #0]
 800573a:	61a5      	str	r5, [r4, #24]
 800573c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005740:	f7fd fb8a 	bl	8002e58 <memset>
 8005744:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005748:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800574c:	4620      	mov	r0, r4
 800574e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005750:	3468      	adds	r4, #104	; 0x68
 8005752:	e7d9      	b.n	8005708 <__sfp+0x1c>
 8005754:	2104      	movs	r1, #4
 8005756:	4638      	mov	r0, r7
 8005758:	f7ff ff62 	bl	8005620 <__sfmoreglue>
 800575c:	4604      	mov	r4, r0
 800575e:	6030      	str	r0, [r6, #0]
 8005760:	2800      	cmp	r0, #0
 8005762:	d1d5      	bne.n	8005710 <__sfp+0x24>
 8005764:	f7ff ff78 	bl	8005658 <__sfp_lock_release>
 8005768:	230c      	movs	r3, #12
 800576a:	603b      	str	r3, [r7, #0]
 800576c:	e7ee      	b.n	800574c <__sfp+0x60>
 800576e:	bf00      	nop
 8005770:	08007760 	.word	0x08007760
 8005774:	ffff0001 	.word	0xffff0001

08005778 <_fwalk_reent>:
 8005778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800577c:	4606      	mov	r6, r0
 800577e:	4688      	mov	r8, r1
 8005780:	2700      	movs	r7, #0
 8005782:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005786:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800578a:	f1b9 0901 	subs.w	r9, r9, #1
 800578e:	d505      	bpl.n	800579c <_fwalk_reent+0x24>
 8005790:	6824      	ldr	r4, [r4, #0]
 8005792:	2c00      	cmp	r4, #0
 8005794:	d1f7      	bne.n	8005786 <_fwalk_reent+0xe>
 8005796:	4638      	mov	r0, r7
 8005798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800579c:	89ab      	ldrh	r3, [r5, #12]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d907      	bls.n	80057b2 <_fwalk_reent+0x3a>
 80057a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057a6:	3301      	adds	r3, #1
 80057a8:	d003      	beq.n	80057b2 <_fwalk_reent+0x3a>
 80057aa:	4629      	mov	r1, r5
 80057ac:	4630      	mov	r0, r6
 80057ae:	47c0      	blx	r8
 80057b0:	4307      	orrs	r7, r0
 80057b2:	3568      	adds	r5, #104	; 0x68
 80057b4:	e7e9      	b.n	800578a <_fwalk_reent+0x12>

080057b6 <rshift>:
 80057b6:	6903      	ldr	r3, [r0, #16]
 80057b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057bc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80057c0:	f100 0414 	add.w	r4, r0, #20
 80057c4:	ea4f 1261 	mov.w	r2, r1, asr #5
 80057c8:	dd46      	ble.n	8005858 <rshift+0xa2>
 80057ca:	f011 011f 	ands.w	r1, r1, #31
 80057ce:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80057d2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80057d6:	d10c      	bne.n	80057f2 <rshift+0x3c>
 80057d8:	4629      	mov	r1, r5
 80057da:	f100 0710 	add.w	r7, r0, #16
 80057de:	42b1      	cmp	r1, r6
 80057e0:	d335      	bcc.n	800584e <rshift+0x98>
 80057e2:	1a9b      	subs	r3, r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	1eea      	subs	r2, r5, #3
 80057e8:	4296      	cmp	r6, r2
 80057ea:	bf38      	it	cc
 80057ec:	2300      	movcc	r3, #0
 80057ee:	4423      	add	r3, r4
 80057f0:	e015      	b.n	800581e <rshift+0x68>
 80057f2:	46a1      	mov	r9, r4
 80057f4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80057f8:	f1c1 0820 	rsb	r8, r1, #32
 80057fc:	40cf      	lsrs	r7, r1
 80057fe:	f105 0e04 	add.w	lr, r5, #4
 8005802:	4576      	cmp	r6, lr
 8005804:	46f4      	mov	ip, lr
 8005806:	d816      	bhi.n	8005836 <rshift+0x80>
 8005808:	1a9a      	subs	r2, r3, r2
 800580a:	0092      	lsls	r2, r2, #2
 800580c:	3a04      	subs	r2, #4
 800580e:	3501      	adds	r5, #1
 8005810:	42ae      	cmp	r6, r5
 8005812:	bf38      	it	cc
 8005814:	2200      	movcc	r2, #0
 8005816:	18a3      	adds	r3, r4, r2
 8005818:	50a7      	str	r7, [r4, r2]
 800581a:	b107      	cbz	r7, 800581e <rshift+0x68>
 800581c:	3304      	adds	r3, #4
 800581e:	42a3      	cmp	r3, r4
 8005820:	eba3 0204 	sub.w	r2, r3, r4
 8005824:	bf08      	it	eq
 8005826:	2300      	moveq	r3, #0
 8005828:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800582c:	6102      	str	r2, [r0, #16]
 800582e:	bf08      	it	eq
 8005830:	6143      	streq	r3, [r0, #20]
 8005832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005836:	f8dc c000 	ldr.w	ip, [ip]
 800583a:	fa0c fc08 	lsl.w	ip, ip, r8
 800583e:	ea4c 0707 	orr.w	r7, ip, r7
 8005842:	f849 7b04 	str.w	r7, [r9], #4
 8005846:	f85e 7b04 	ldr.w	r7, [lr], #4
 800584a:	40cf      	lsrs	r7, r1
 800584c:	e7d9      	b.n	8005802 <rshift+0x4c>
 800584e:	f851 cb04 	ldr.w	ip, [r1], #4
 8005852:	f847 cf04 	str.w	ip, [r7, #4]!
 8005856:	e7c2      	b.n	80057de <rshift+0x28>
 8005858:	4623      	mov	r3, r4
 800585a:	e7e0      	b.n	800581e <rshift+0x68>

0800585c <__hexdig_fun>:
 800585c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005860:	2b09      	cmp	r3, #9
 8005862:	d802      	bhi.n	800586a <__hexdig_fun+0xe>
 8005864:	3820      	subs	r0, #32
 8005866:	b2c0      	uxtb	r0, r0
 8005868:	4770      	bx	lr
 800586a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800586e:	2b05      	cmp	r3, #5
 8005870:	d801      	bhi.n	8005876 <__hexdig_fun+0x1a>
 8005872:	3847      	subs	r0, #71	; 0x47
 8005874:	e7f7      	b.n	8005866 <__hexdig_fun+0xa>
 8005876:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800587a:	2b05      	cmp	r3, #5
 800587c:	d801      	bhi.n	8005882 <__hexdig_fun+0x26>
 800587e:	3827      	subs	r0, #39	; 0x27
 8005880:	e7f1      	b.n	8005866 <__hexdig_fun+0xa>
 8005882:	2000      	movs	r0, #0
 8005884:	4770      	bx	lr
	...

08005888 <__gethex>:
 8005888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588c:	b08b      	sub	sp, #44	; 0x2c
 800588e:	9305      	str	r3, [sp, #20]
 8005890:	4bb2      	ldr	r3, [pc, #712]	; (8005b5c <__gethex+0x2d4>)
 8005892:	9002      	str	r0, [sp, #8]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	468b      	mov	fp, r1
 8005898:	4618      	mov	r0, r3
 800589a:	4690      	mov	r8, r2
 800589c:	9303      	str	r3, [sp, #12]
 800589e:	f7fa fc57 	bl	8000150 <strlen>
 80058a2:	4682      	mov	sl, r0
 80058a4:	9b03      	ldr	r3, [sp, #12]
 80058a6:	f8db 2000 	ldr.w	r2, [fp]
 80058aa:	4403      	add	r3, r0
 80058ac:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80058b0:	9306      	str	r3, [sp, #24]
 80058b2:	1c93      	adds	r3, r2, #2
 80058b4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80058b8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80058bc:	32fe      	adds	r2, #254	; 0xfe
 80058be:	18d1      	adds	r1, r2, r3
 80058c0:	461f      	mov	r7, r3
 80058c2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80058c6:	9101      	str	r1, [sp, #4]
 80058c8:	2830      	cmp	r0, #48	; 0x30
 80058ca:	d0f8      	beq.n	80058be <__gethex+0x36>
 80058cc:	f7ff ffc6 	bl	800585c <__hexdig_fun>
 80058d0:	4604      	mov	r4, r0
 80058d2:	2800      	cmp	r0, #0
 80058d4:	d13a      	bne.n	800594c <__gethex+0xc4>
 80058d6:	4652      	mov	r2, sl
 80058d8:	4638      	mov	r0, r7
 80058da:	9903      	ldr	r1, [sp, #12]
 80058dc:	f001 fbc5 	bl	800706a <strncmp>
 80058e0:	4605      	mov	r5, r0
 80058e2:	2800      	cmp	r0, #0
 80058e4:	d166      	bne.n	80059b4 <__gethex+0x12c>
 80058e6:	f817 000a 	ldrb.w	r0, [r7, sl]
 80058ea:	eb07 060a 	add.w	r6, r7, sl
 80058ee:	f7ff ffb5 	bl	800585c <__hexdig_fun>
 80058f2:	2800      	cmp	r0, #0
 80058f4:	d060      	beq.n	80059b8 <__gethex+0x130>
 80058f6:	4633      	mov	r3, r6
 80058f8:	7818      	ldrb	r0, [r3, #0]
 80058fa:	461f      	mov	r7, r3
 80058fc:	2830      	cmp	r0, #48	; 0x30
 80058fe:	f103 0301 	add.w	r3, r3, #1
 8005902:	d0f9      	beq.n	80058f8 <__gethex+0x70>
 8005904:	f7ff ffaa 	bl	800585c <__hexdig_fun>
 8005908:	2301      	movs	r3, #1
 800590a:	fab0 f480 	clz	r4, r0
 800590e:	4635      	mov	r5, r6
 8005910:	0964      	lsrs	r4, r4, #5
 8005912:	9301      	str	r3, [sp, #4]
 8005914:	463a      	mov	r2, r7
 8005916:	4616      	mov	r6, r2
 8005918:	7830      	ldrb	r0, [r6, #0]
 800591a:	3201      	adds	r2, #1
 800591c:	f7ff ff9e 	bl	800585c <__hexdig_fun>
 8005920:	2800      	cmp	r0, #0
 8005922:	d1f8      	bne.n	8005916 <__gethex+0x8e>
 8005924:	4652      	mov	r2, sl
 8005926:	4630      	mov	r0, r6
 8005928:	9903      	ldr	r1, [sp, #12]
 800592a:	f001 fb9e 	bl	800706a <strncmp>
 800592e:	b980      	cbnz	r0, 8005952 <__gethex+0xca>
 8005930:	b94d      	cbnz	r5, 8005946 <__gethex+0xbe>
 8005932:	eb06 050a 	add.w	r5, r6, sl
 8005936:	462a      	mov	r2, r5
 8005938:	4616      	mov	r6, r2
 800593a:	7830      	ldrb	r0, [r6, #0]
 800593c:	3201      	adds	r2, #1
 800593e:	f7ff ff8d 	bl	800585c <__hexdig_fun>
 8005942:	2800      	cmp	r0, #0
 8005944:	d1f8      	bne.n	8005938 <__gethex+0xb0>
 8005946:	1bad      	subs	r5, r5, r6
 8005948:	00ad      	lsls	r5, r5, #2
 800594a:	e004      	b.n	8005956 <__gethex+0xce>
 800594c:	2400      	movs	r4, #0
 800594e:	4625      	mov	r5, r4
 8005950:	e7e0      	b.n	8005914 <__gethex+0x8c>
 8005952:	2d00      	cmp	r5, #0
 8005954:	d1f7      	bne.n	8005946 <__gethex+0xbe>
 8005956:	7833      	ldrb	r3, [r6, #0]
 8005958:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800595c:	2b50      	cmp	r3, #80	; 0x50
 800595e:	d139      	bne.n	80059d4 <__gethex+0x14c>
 8005960:	7873      	ldrb	r3, [r6, #1]
 8005962:	2b2b      	cmp	r3, #43	; 0x2b
 8005964:	d02a      	beq.n	80059bc <__gethex+0x134>
 8005966:	2b2d      	cmp	r3, #45	; 0x2d
 8005968:	d02c      	beq.n	80059c4 <__gethex+0x13c>
 800596a:	f04f 0900 	mov.w	r9, #0
 800596e:	1c71      	adds	r1, r6, #1
 8005970:	7808      	ldrb	r0, [r1, #0]
 8005972:	f7ff ff73 	bl	800585c <__hexdig_fun>
 8005976:	1e43      	subs	r3, r0, #1
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b18      	cmp	r3, #24
 800597c:	d82a      	bhi.n	80059d4 <__gethex+0x14c>
 800597e:	f1a0 0210 	sub.w	r2, r0, #16
 8005982:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005986:	f7ff ff69 	bl	800585c <__hexdig_fun>
 800598a:	1e43      	subs	r3, r0, #1
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b18      	cmp	r3, #24
 8005990:	d91b      	bls.n	80059ca <__gethex+0x142>
 8005992:	f1b9 0f00 	cmp.w	r9, #0
 8005996:	d000      	beq.n	800599a <__gethex+0x112>
 8005998:	4252      	negs	r2, r2
 800599a:	4415      	add	r5, r2
 800599c:	f8cb 1000 	str.w	r1, [fp]
 80059a0:	b1d4      	cbz	r4, 80059d8 <__gethex+0x150>
 80059a2:	9b01      	ldr	r3, [sp, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	bf14      	ite	ne
 80059a8:	2700      	movne	r7, #0
 80059aa:	2706      	moveq	r7, #6
 80059ac:	4638      	mov	r0, r7
 80059ae:	b00b      	add	sp, #44	; 0x2c
 80059b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059b4:	463e      	mov	r6, r7
 80059b6:	4625      	mov	r5, r4
 80059b8:	2401      	movs	r4, #1
 80059ba:	e7cc      	b.n	8005956 <__gethex+0xce>
 80059bc:	f04f 0900 	mov.w	r9, #0
 80059c0:	1cb1      	adds	r1, r6, #2
 80059c2:	e7d5      	b.n	8005970 <__gethex+0xe8>
 80059c4:	f04f 0901 	mov.w	r9, #1
 80059c8:	e7fa      	b.n	80059c0 <__gethex+0x138>
 80059ca:	230a      	movs	r3, #10
 80059cc:	fb03 0202 	mla	r2, r3, r2, r0
 80059d0:	3a10      	subs	r2, #16
 80059d2:	e7d6      	b.n	8005982 <__gethex+0xfa>
 80059d4:	4631      	mov	r1, r6
 80059d6:	e7e1      	b.n	800599c <__gethex+0x114>
 80059d8:	4621      	mov	r1, r4
 80059da:	1bf3      	subs	r3, r6, r7
 80059dc:	3b01      	subs	r3, #1
 80059de:	2b07      	cmp	r3, #7
 80059e0:	dc0a      	bgt.n	80059f8 <__gethex+0x170>
 80059e2:	9802      	ldr	r0, [sp, #8]
 80059e4:	f000 fa8c 	bl	8005f00 <_Balloc>
 80059e8:	4604      	mov	r4, r0
 80059ea:	b940      	cbnz	r0, 80059fe <__gethex+0x176>
 80059ec:	4602      	mov	r2, r0
 80059ee:	21de      	movs	r1, #222	; 0xde
 80059f0:	4b5b      	ldr	r3, [pc, #364]	; (8005b60 <__gethex+0x2d8>)
 80059f2:	485c      	ldr	r0, [pc, #368]	; (8005b64 <__gethex+0x2dc>)
 80059f4:	f001 fc2e 	bl	8007254 <__assert_func>
 80059f8:	3101      	adds	r1, #1
 80059fa:	105b      	asrs	r3, r3, #1
 80059fc:	e7ef      	b.n	80059de <__gethex+0x156>
 80059fe:	f04f 0b00 	mov.w	fp, #0
 8005a02:	f100 0914 	add.w	r9, r0, #20
 8005a06:	f1ca 0301 	rsb	r3, sl, #1
 8005a0a:	f8cd 9010 	str.w	r9, [sp, #16]
 8005a0e:	f8cd b004 	str.w	fp, [sp, #4]
 8005a12:	9308      	str	r3, [sp, #32]
 8005a14:	42b7      	cmp	r7, r6
 8005a16:	d33f      	bcc.n	8005a98 <__gethex+0x210>
 8005a18:	9f04      	ldr	r7, [sp, #16]
 8005a1a:	9b01      	ldr	r3, [sp, #4]
 8005a1c:	f847 3b04 	str.w	r3, [r7], #4
 8005a20:	eba7 0709 	sub.w	r7, r7, r9
 8005a24:	10bf      	asrs	r7, r7, #2
 8005a26:	6127      	str	r7, [r4, #16]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 fb5b 	bl	80060e4 <__hi0bits>
 8005a2e:	017f      	lsls	r7, r7, #5
 8005a30:	f8d8 6000 	ldr.w	r6, [r8]
 8005a34:	1a3f      	subs	r7, r7, r0
 8005a36:	42b7      	cmp	r7, r6
 8005a38:	dd62      	ble.n	8005b00 <__gethex+0x278>
 8005a3a:	1bbf      	subs	r7, r7, r6
 8005a3c:	4639      	mov	r1, r7
 8005a3e:	4620      	mov	r0, r4
 8005a40:	f000 fef5 	bl	800682e <__any_on>
 8005a44:	4682      	mov	sl, r0
 8005a46:	b1a8      	cbz	r0, 8005a74 <__gethex+0x1ec>
 8005a48:	f04f 0a01 	mov.w	sl, #1
 8005a4c:	1e7b      	subs	r3, r7, #1
 8005a4e:	1159      	asrs	r1, r3, #5
 8005a50:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005a54:	f003 021f 	and.w	r2, r3, #31
 8005a58:	fa0a f202 	lsl.w	r2, sl, r2
 8005a5c:	420a      	tst	r2, r1
 8005a5e:	d009      	beq.n	8005a74 <__gethex+0x1ec>
 8005a60:	4553      	cmp	r3, sl
 8005a62:	dd05      	ble.n	8005a70 <__gethex+0x1e8>
 8005a64:	4620      	mov	r0, r4
 8005a66:	1eb9      	subs	r1, r7, #2
 8005a68:	f000 fee1 	bl	800682e <__any_on>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d144      	bne.n	8005afa <__gethex+0x272>
 8005a70:	f04f 0a02 	mov.w	sl, #2
 8005a74:	4639      	mov	r1, r7
 8005a76:	4620      	mov	r0, r4
 8005a78:	f7ff fe9d 	bl	80057b6 <rshift>
 8005a7c:	443d      	add	r5, r7
 8005a7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005a82:	42ab      	cmp	r3, r5
 8005a84:	da4a      	bge.n	8005b1c <__gethex+0x294>
 8005a86:	4621      	mov	r1, r4
 8005a88:	9802      	ldr	r0, [sp, #8]
 8005a8a:	f000 fa79 	bl	8005f80 <_Bfree>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005a92:	27a3      	movs	r7, #163	; 0xa3
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	e789      	b.n	80059ac <__gethex+0x124>
 8005a98:	1e73      	subs	r3, r6, #1
 8005a9a:	9a06      	ldr	r2, [sp, #24]
 8005a9c:	9307      	str	r3, [sp, #28]
 8005a9e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d019      	beq.n	8005ada <__gethex+0x252>
 8005aa6:	f1bb 0f20 	cmp.w	fp, #32
 8005aaa:	d107      	bne.n	8005abc <__gethex+0x234>
 8005aac:	9b04      	ldr	r3, [sp, #16]
 8005aae:	9a01      	ldr	r2, [sp, #4]
 8005ab0:	f843 2b04 	str.w	r2, [r3], #4
 8005ab4:	9304      	str	r3, [sp, #16]
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	469b      	mov	fp, r3
 8005aba:	9301      	str	r3, [sp, #4]
 8005abc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005ac0:	f7ff fecc 	bl	800585c <__hexdig_fun>
 8005ac4:	9b01      	ldr	r3, [sp, #4]
 8005ac6:	f000 000f 	and.w	r0, r0, #15
 8005aca:	fa00 f00b 	lsl.w	r0, r0, fp
 8005ace:	4303      	orrs	r3, r0
 8005ad0:	9301      	str	r3, [sp, #4]
 8005ad2:	f10b 0b04 	add.w	fp, fp, #4
 8005ad6:	9b07      	ldr	r3, [sp, #28]
 8005ad8:	e00d      	b.n	8005af6 <__gethex+0x26e>
 8005ada:	9a08      	ldr	r2, [sp, #32]
 8005adc:	1e73      	subs	r3, r6, #1
 8005ade:	4413      	add	r3, r2
 8005ae0:	42bb      	cmp	r3, r7
 8005ae2:	d3e0      	bcc.n	8005aa6 <__gethex+0x21e>
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	4652      	mov	r2, sl
 8005ae8:	9903      	ldr	r1, [sp, #12]
 8005aea:	9309      	str	r3, [sp, #36]	; 0x24
 8005aec:	f001 fabd 	bl	800706a <strncmp>
 8005af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005af2:	2800      	cmp	r0, #0
 8005af4:	d1d7      	bne.n	8005aa6 <__gethex+0x21e>
 8005af6:	461e      	mov	r6, r3
 8005af8:	e78c      	b.n	8005a14 <__gethex+0x18c>
 8005afa:	f04f 0a03 	mov.w	sl, #3
 8005afe:	e7b9      	b.n	8005a74 <__gethex+0x1ec>
 8005b00:	da09      	bge.n	8005b16 <__gethex+0x28e>
 8005b02:	1bf7      	subs	r7, r6, r7
 8005b04:	4621      	mov	r1, r4
 8005b06:	463a      	mov	r2, r7
 8005b08:	9802      	ldr	r0, [sp, #8]
 8005b0a:	f000 fc51 	bl	80063b0 <__lshift>
 8005b0e:	4604      	mov	r4, r0
 8005b10:	1bed      	subs	r5, r5, r7
 8005b12:	f100 0914 	add.w	r9, r0, #20
 8005b16:	f04f 0a00 	mov.w	sl, #0
 8005b1a:	e7b0      	b.n	8005a7e <__gethex+0x1f6>
 8005b1c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005b20:	42a8      	cmp	r0, r5
 8005b22:	dd72      	ble.n	8005c0a <__gethex+0x382>
 8005b24:	1b45      	subs	r5, r0, r5
 8005b26:	42ae      	cmp	r6, r5
 8005b28:	dc35      	bgt.n	8005b96 <__gethex+0x30e>
 8005b2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d029      	beq.n	8005b86 <__gethex+0x2fe>
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	d02b      	beq.n	8005b8e <__gethex+0x306>
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d11c      	bne.n	8005b74 <__gethex+0x2ec>
 8005b3a:	42ae      	cmp	r6, r5
 8005b3c:	d11a      	bne.n	8005b74 <__gethex+0x2ec>
 8005b3e:	2e01      	cmp	r6, #1
 8005b40:	d112      	bne.n	8005b68 <__gethex+0x2e0>
 8005b42:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005b46:	9a05      	ldr	r2, [sp, #20]
 8005b48:	2762      	movs	r7, #98	; 0x62
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	6123      	str	r3, [r4, #16]
 8005b50:	f8c9 3000 	str.w	r3, [r9]
 8005b54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b56:	601c      	str	r4, [r3, #0]
 8005b58:	e728      	b.n	80059ac <__gethex+0x124>
 8005b5a:	bf00      	nop
 8005b5c:	08007a4c 	.word	0x08007a4c
 8005b60:	08007970 	.word	0x08007970
 8005b64:	080079e4 	.word	0x080079e4
 8005b68:	4620      	mov	r0, r4
 8005b6a:	1e71      	subs	r1, r6, #1
 8005b6c:	f000 fe5f 	bl	800682e <__any_on>
 8005b70:	2800      	cmp	r0, #0
 8005b72:	d1e6      	bne.n	8005b42 <__gethex+0x2ba>
 8005b74:	4621      	mov	r1, r4
 8005b76:	9802      	ldr	r0, [sp, #8]
 8005b78:	f000 fa02 	bl	8005f80 <_Bfree>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005b80:	2750      	movs	r7, #80	; 0x50
 8005b82:	6013      	str	r3, [r2, #0]
 8005b84:	e712      	b.n	80059ac <__gethex+0x124>
 8005b86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1f3      	bne.n	8005b74 <__gethex+0x2ec>
 8005b8c:	e7d9      	b.n	8005b42 <__gethex+0x2ba>
 8005b8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1d6      	bne.n	8005b42 <__gethex+0x2ba>
 8005b94:	e7ee      	b.n	8005b74 <__gethex+0x2ec>
 8005b96:	1e6f      	subs	r7, r5, #1
 8005b98:	f1ba 0f00 	cmp.w	sl, #0
 8005b9c:	d132      	bne.n	8005c04 <__gethex+0x37c>
 8005b9e:	b127      	cbz	r7, 8005baa <__gethex+0x322>
 8005ba0:	4639      	mov	r1, r7
 8005ba2:	4620      	mov	r0, r4
 8005ba4:	f000 fe43 	bl	800682e <__any_on>
 8005ba8:	4682      	mov	sl, r0
 8005baa:	2101      	movs	r1, #1
 8005bac:	117b      	asrs	r3, r7, #5
 8005bae:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005bb2:	f007 071f 	and.w	r7, r7, #31
 8005bb6:	fa01 f707 	lsl.w	r7, r1, r7
 8005bba:	421f      	tst	r7, r3
 8005bbc:	f04f 0702 	mov.w	r7, #2
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	4620      	mov	r0, r4
 8005bc4:	bf18      	it	ne
 8005bc6:	f04a 0a02 	orrne.w	sl, sl, #2
 8005bca:	1b76      	subs	r6, r6, r5
 8005bcc:	f7ff fdf3 	bl	80057b6 <rshift>
 8005bd0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005bd4:	f1ba 0f00 	cmp.w	sl, #0
 8005bd8:	d048      	beq.n	8005c6c <__gethex+0x3e4>
 8005bda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d015      	beq.n	8005c0e <__gethex+0x386>
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d017      	beq.n	8005c16 <__gethex+0x38e>
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d109      	bne.n	8005bfe <__gethex+0x376>
 8005bea:	f01a 0f02 	tst.w	sl, #2
 8005bee:	d006      	beq.n	8005bfe <__gethex+0x376>
 8005bf0:	f8d9 0000 	ldr.w	r0, [r9]
 8005bf4:	ea4a 0a00 	orr.w	sl, sl, r0
 8005bf8:	f01a 0f01 	tst.w	sl, #1
 8005bfc:	d10e      	bne.n	8005c1c <__gethex+0x394>
 8005bfe:	f047 0710 	orr.w	r7, r7, #16
 8005c02:	e033      	b.n	8005c6c <__gethex+0x3e4>
 8005c04:	f04f 0a01 	mov.w	sl, #1
 8005c08:	e7cf      	b.n	8005baa <__gethex+0x322>
 8005c0a:	2701      	movs	r7, #1
 8005c0c:	e7e2      	b.n	8005bd4 <__gethex+0x34c>
 8005c0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c10:	f1c3 0301 	rsb	r3, r3, #1
 8005c14:	9315      	str	r3, [sp, #84]	; 0x54
 8005c16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d0f0      	beq.n	8005bfe <__gethex+0x376>
 8005c1c:	f04f 0c00 	mov.w	ip, #0
 8005c20:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005c24:	f104 0314 	add.w	r3, r4, #20
 8005c28:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005c2c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005c30:	4618      	mov	r0, r3
 8005c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c36:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005c3a:	d01c      	beq.n	8005c76 <__gethex+0x3ee>
 8005c3c:	3201      	adds	r2, #1
 8005c3e:	6002      	str	r2, [r0, #0]
 8005c40:	2f02      	cmp	r7, #2
 8005c42:	f104 0314 	add.w	r3, r4, #20
 8005c46:	d13d      	bne.n	8005cc4 <__gethex+0x43c>
 8005c48:	f8d8 2000 	ldr.w	r2, [r8]
 8005c4c:	3a01      	subs	r2, #1
 8005c4e:	42b2      	cmp	r2, r6
 8005c50:	d10a      	bne.n	8005c68 <__gethex+0x3e0>
 8005c52:	2201      	movs	r2, #1
 8005c54:	1171      	asrs	r1, r6, #5
 8005c56:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005c5a:	f006 061f 	and.w	r6, r6, #31
 8005c5e:	fa02 f606 	lsl.w	r6, r2, r6
 8005c62:	421e      	tst	r6, r3
 8005c64:	bf18      	it	ne
 8005c66:	4617      	movne	r7, r2
 8005c68:	f047 0720 	orr.w	r7, r7, #32
 8005c6c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c6e:	601c      	str	r4, [r3, #0]
 8005c70:	9b05      	ldr	r3, [sp, #20]
 8005c72:	601d      	str	r5, [r3, #0]
 8005c74:	e69a      	b.n	80059ac <__gethex+0x124>
 8005c76:	4299      	cmp	r1, r3
 8005c78:	f843 cc04 	str.w	ip, [r3, #-4]
 8005c7c:	d8d8      	bhi.n	8005c30 <__gethex+0x3a8>
 8005c7e:	68a3      	ldr	r3, [r4, #8]
 8005c80:	459b      	cmp	fp, r3
 8005c82:	db17      	blt.n	8005cb4 <__gethex+0x42c>
 8005c84:	6861      	ldr	r1, [r4, #4]
 8005c86:	9802      	ldr	r0, [sp, #8]
 8005c88:	3101      	adds	r1, #1
 8005c8a:	f000 f939 	bl	8005f00 <_Balloc>
 8005c8e:	4681      	mov	r9, r0
 8005c90:	b918      	cbnz	r0, 8005c9a <__gethex+0x412>
 8005c92:	4602      	mov	r2, r0
 8005c94:	2184      	movs	r1, #132	; 0x84
 8005c96:	4b19      	ldr	r3, [pc, #100]	; (8005cfc <__gethex+0x474>)
 8005c98:	e6ab      	b.n	80059f2 <__gethex+0x16a>
 8005c9a:	6922      	ldr	r2, [r4, #16]
 8005c9c:	f104 010c 	add.w	r1, r4, #12
 8005ca0:	3202      	adds	r2, #2
 8005ca2:	0092      	lsls	r2, r2, #2
 8005ca4:	300c      	adds	r0, #12
 8005ca6:	f000 f91d 	bl	8005ee4 <memcpy>
 8005caa:	4621      	mov	r1, r4
 8005cac:	9802      	ldr	r0, [sp, #8]
 8005cae:	f000 f967 	bl	8005f80 <_Bfree>
 8005cb2:	464c      	mov	r4, r9
 8005cb4:	6923      	ldr	r3, [r4, #16]
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	6122      	str	r2, [r4, #16]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005cc0:	615a      	str	r2, [r3, #20]
 8005cc2:	e7bd      	b.n	8005c40 <__gethex+0x3b8>
 8005cc4:	6922      	ldr	r2, [r4, #16]
 8005cc6:	455a      	cmp	r2, fp
 8005cc8:	dd0b      	ble.n	8005ce2 <__gethex+0x45a>
 8005cca:	2101      	movs	r1, #1
 8005ccc:	4620      	mov	r0, r4
 8005cce:	f7ff fd72 	bl	80057b6 <rshift>
 8005cd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005cd6:	3501      	adds	r5, #1
 8005cd8:	42ab      	cmp	r3, r5
 8005cda:	f6ff aed4 	blt.w	8005a86 <__gethex+0x1fe>
 8005cde:	2701      	movs	r7, #1
 8005ce0:	e7c2      	b.n	8005c68 <__gethex+0x3e0>
 8005ce2:	f016 061f 	ands.w	r6, r6, #31
 8005ce6:	d0fa      	beq.n	8005cde <__gethex+0x456>
 8005ce8:	4453      	add	r3, sl
 8005cea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005cee:	f000 f9f9 	bl	80060e4 <__hi0bits>
 8005cf2:	f1c6 0620 	rsb	r6, r6, #32
 8005cf6:	42b0      	cmp	r0, r6
 8005cf8:	dbe7      	blt.n	8005cca <__gethex+0x442>
 8005cfa:	e7f0      	b.n	8005cde <__gethex+0x456>
 8005cfc:	08007970 	.word	0x08007970

08005d00 <L_shift>:
 8005d00:	f1c2 0208 	rsb	r2, r2, #8
 8005d04:	0092      	lsls	r2, r2, #2
 8005d06:	b570      	push	{r4, r5, r6, lr}
 8005d08:	f1c2 0620 	rsb	r6, r2, #32
 8005d0c:	6843      	ldr	r3, [r0, #4]
 8005d0e:	6804      	ldr	r4, [r0, #0]
 8005d10:	fa03 f506 	lsl.w	r5, r3, r6
 8005d14:	432c      	orrs	r4, r5
 8005d16:	40d3      	lsrs	r3, r2
 8005d18:	6004      	str	r4, [r0, #0]
 8005d1a:	f840 3f04 	str.w	r3, [r0, #4]!
 8005d1e:	4288      	cmp	r0, r1
 8005d20:	d3f4      	bcc.n	8005d0c <L_shift+0xc>
 8005d22:	bd70      	pop	{r4, r5, r6, pc}

08005d24 <__match>:
 8005d24:	b530      	push	{r4, r5, lr}
 8005d26:	6803      	ldr	r3, [r0, #0]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d2e:	b914      	cbnz	r4, 8005d36 <__match+0x12>
 8005d30:	6003      	str	r3, [r0, #0]
 8005d32:	2001      	movs	r0, #1
 8005d34:	bd30      	pop	{r4, r5, pc}
 8005d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d3a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005d3e:	2d19      	cmp	r5, #25
 8005d40:	bf98      	it	ls
 8005d42:	3220      	addls	r2, #32
 8005d44:	42a2      	cmp	r2, r4
 8005d46:	d0f0      	beq.n	8005d2a <__match+0x6>
 8005d48:	2000      	movs	r0, #0
 8005d4a:	e7f3      	b.n	8005d34 <__match+0x10>

08005d4c <__hexnan>:
 8005d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d50:	2500      	movs	r5, #0
 8005d52:	680b      	ldr	r3, [r1, #0]
 8005d54:	4682      	mov	sl, r0
 8005d56:	115e      	asrs	r6, r3, #5
 8005d58:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005d5c:	f013 031f 	ands.w	r3, r3, #31
 8005d60:	bf18      	it	ne
 8005d62:	3604      	addne	r6, #4
 8005d64:	1f37      	subs	r7, r6, #4
 8005d66:	46b9      	mov	r9, r7
 8005d68:	463c      	mov	r4, r7
 8005d6a:	46ab      	mov	fp, r5
 8005d6c:	b087      	sub	sp, #28
 8005d6e:	4690      	mov	r8, r2
 8005d70:	6802      	ldr	r2, [r0, #0]
 8005d72:	9301      	str	r3, [sp, #4]
 8005d74:	f846 5c04 	str.w	r5, [r6, #-4]
 8005d78:	9502      	str	r5, [sp, #8]
 8005d7a:	7851      	ldrb	r1, [r2, #1]
 8005d7c:	1c53      	adds	r3, r2, #1
 8005d7e:	9303      	str	r3, [sp, #12]
 8005d80:	b341      	cbz	r1, 8005dd4 <__hexnan+0x88>
 8005d82:	4608      	mov	r0, r1
 8005d84:	9205      	str	r2, [sp, #20]
 8005d86:	9104      	str	r1, [sp, #16]
 8005d88:	f7ff fd68 	bl	800585c <__hexdig_fun>
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d14f      	bne.n	8005e30 <__hexnan+0xe4>
 8005d90:	9904      	ldr	r1, [sp, #16]
 8005d92:	9a05      	ldr	r2, [sp, #20]
 8005d94:	2920      	cmp	r1, #32
 8005d96:	d818      	bhi.n	8005dca <__hexnan+0x7e>
 8005d98:	9b02      	ldr	r3, [sp, #8]
 8005d9a:	459b      	cmp	fp, r3
 8005d9c:	dd13      	ble.n	8005dc6 <__hexnan+0x7a>
 8005d9e:	454c      	cmp	r4, r9
 8005da0:	d206      	bcs.n	8005db0 <__hexnan+0x64>
 8005da2:	2d07      	cmp	r5, #7
 8005da4:	dc04      	bgt.n	8005db0 <__hexnan+0x64>
 8005da6:	462a      	mov	r2, r5
 8005da8:	4649      	mov	r1, r9
 8005daa:	4620      	mov	r0, r4
 8005dac:	f7ff ffa8 	bl	8005d00 <L_shift>
 8005db0:	4544      	cmp	r4, r8
 8005db2:	d950      	bls.n	8005e56 <__hexnan+0x10a>
 8005db4:	2300      	movs	r3, #0
 8005db6:	f1a4 0904 	sub.w	r9, r4, #4
 8005dba:	f844 3c04 	str.w	r3, [r4, #-4]
 8005dbe:	461d      	mov	r5, r3
 8005dc0:	464c      	mov	r4, r9
 8005dc2:	f8cd b008 	str.w	fp, [sp, #8]
 8005dc6:	9a03      	ldr	r2, [sp, #12]
 8005dc8:	e7d7      	b.n	8005d7a <__hexnan+0x2e>
 8005dca:	2929      	cmp	r1, #41	; 0x29
 8005dcc:	d156      	bne.n	8005e7c <__hexnan+0x130>
 8005dce:	3202      	adds	r2, #2
 8005dd0:	f8ca 2000 	str.w	r2, [sl]
 8005dd4:	f1bb 0f00 	cmp.w	fp, #0
 8005dd8:	d050      	beq.n	8005e7c <__hexnan+0x130>
 8005dda:	454c      	cmp	r4, r9
 8005ddc:	d206      	bcs.n	8005dec <__hexnan+0xa0>
 8005dde:	2d07      	cmp	r5, #7
 8005de0:	dc04      	bgt.n	8005dec <__hexnan+0xa0>
 8005de2:	462a      	mov	r2, r5
 8005de4:	4649      	mov	r1, r9
 8005de6:	4620      	mov	r0, r4
 8005de8:	f7ff ff8a 	bl	8005d00 <L_shift>
 8005dec:	4544      	cmp	r4, r8
 8005dee:	d934      	bls.n	8005e5a <__hexnan+0x10e>
 8005df0:	4623      	mov	r3, r4
 8005df2:	f1a8 0204 	sub.w	r2, r8, #4
 8005df6:	f853 1b04 	ldr.w	r1, [r3], #4
 8005dfa:	429f      	cmp	r7, r3
 8005dfc:	f842 1f04 	str.w	r1, [r2, #4]!
 8005e00:	d2f9      	bcs.n	8005df6 <__hexnan+0xaa>
 8005e02:	1b3b      	subs	r3, r7, r4
 8005e04:	f023 0303 	bic.w	r3, r3, #3
 8005e08:	3304      	adds	r3, #4
 8005e0a:	3401      	adds	r4, #1
 8005e0c:	3e03      	subs	r6, #3
 8005e0e:	42b4      	cmp	r4, r6
 8005e10:	bf88      	it	hi
 8005e12:	2304      	movhi	r3, #4
 8005e14:	2200      	movs	r2, #0
 8005e16:	4443      	add	r3, r8
 8005e18:	f843 2b04 	str.w	r2, [r3], #4
 8005e1c:	429f      	cmp	r7, r3
 8005e1e:	d2fb      	bcs.n	8005e18 <__hexnan+0xcc>
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	b91b      	cbnz	r3, 8005e2c <__hexnan+0xe0>
 8005e24:	4547      	cmp	r7, r8
 8005e26:	d127      	bne.n	8005e78 <__hexnan+0x12c>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	603b      	str	r3, [r7, #0]
 8005e2c:	2005      	movs	r0, #5
 8005e2e:	e026      	b.n	8005e7e <__hexnan+0x132>
 8005e30:	3501      	adds	r5, #1
 8005e32:	2d08      	cmp	r5, #8
 8005e34:	f10b 0b01 	add.w	fp, fp, #1
 8005e38:	dd06      	ble.n	8005e48 <__hexnan+0xfc>
 8005e3a:	4544      	cmp	r4, r8
 8005e3c:	d9c3      	bls.n	8005dc6 <__hexnan+0x7a>
 8005e3e:	2300      	movs	r3, #0
 8005e40:	2501      	movs	r5, #1
 8005e42:	f844 3c04 	str.w	r3, [r4, #-4]
 8005e46:	3c04      	subs	r4, #4
 8005e48:	6822      	ldr	r2, [r4, #0]
 8005e4a:	f000 000f 	and.w	r0, r0, #15
 8005e4e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8005e52:	6022      	str	r2, [r4, #0]
 8005e54:	e7b7      	b.n	8005dc6 <__hexnan+0x7a>
 8005e56:	2508      	movs	r5, #8
 8005e58:	e7b5      	b.n	8005dc6 <__hexnan+0x7a>
 8005e5a:	9b01      	ldr	r3, [sp, #4]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d0df      	beq.n	8005e20 <__hexnan+0xd4>
 8005e60:	f04f 32ff 	mov.w	r2, #4294967295
 8005e64:	f1c3 0320 	rsb	r3, r3, #32
 8005e68:	fa22 f303 	lsr.w	r3, r2, r3
 8005e6c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8005e70:	401a      	ands	r2, r3
 8005e72:	f846 2c04 	str.w	r2, [r6, #-4]
 8005e76:	e7d3      	b.n	8005e20 <__hexnan+0xd4>
 8005e78:	3f04      	subs	r7, #4
 8005e7a:	e7d1      	b.n	8005e20 <__hexnan+0xd4>
 8005e7c:	2004      	movs	r0, #4
 8005e7e:	b007      	add	sp, #28
 8005e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005e84 <_localeconv_r>:
 8005e84:	4800      	ldr	r0, [pc, #0]	; (8005e88 <_localeconv_r+0x4>)
 8005e86:	4770      	bx	lr
 8005e88:	20000164 	.word	0x20000164

08005e8c <__retarget_lock_init_recursive>:
 8005e8c:	4770      	bx	lr

08005e8e <__retarget_lock_acquire_recursive>:
 8005e8e:	4770      	bx	lr

08005e90 <__retarget_lock_release_recursive>:
 8005e90:	4770      	bx	lr
	...

08005e94 <malloc>:
 8005e94:	4b02      	ldr	r3, [pc, #8]	; (8005ea0 <malloc+0xc>)
 8005e96:	4601      	mov	r1, r0
 8005e98:	6818      	ldr	r0, [r3, #0]
 8005e9a:	f000 bd65 	b.w	8006968 <_malloc_r>
 8005e9e:	bf00      	nop
 8005ea0:	2000000c 	.word	0x2000000c

08005ea4 <__ascii_mbtowc>:
 8005ea4:	b082      	sub	sp, #8
 8005ea6:	b901      	cbnz	r1, 8005eaa <__ascii_mbtowc+0x6>
 8005ea8:	a901      	add	r1, sp, #4
 8005eaa:	b142      	cbz	r2, 8005ebe <__ascii_mbtowc+0x1a>
 8005eac:	b14b      	cbz	r3, 8005ec2 <__ascii_mbtowc+0x1e>
 8005eae:	7813      	ldrb	r3, [r2, #0]
 8005eb0:	600b      	str	r3, [r1, #0]
 8005eb2:	7812      	ldrb	r2, [r2, #0]
 8005eb4:	1e10      	subs	r0, r2, #0
 8005eb6:	bf18      	it	ne
 8005eb8:	2001      	movne	r0, #1
 8005eba:	b002      	add	sp, #8
 8005ebc:	4770      	bx	lr
 8005ebe:	4610      	mov	r0, r2
 8005ec0:	e7fb      	b.n	8005eba <__ascii_mbtowc+0x16>
 8005ec2:	f06f 0001 	mvn.w	r0, #1
 8005ec6:	e7f8      	b.n	8005eba <__ascii_mbtowc+0x16>

08005ec8 <memchr>:
 8005ec8:	4603      	mov	r3, r0
 8005eca:	b510      	push	{r4, lr}
 8005ecc:	b2c9      	uxtb	r1, r1
 8005ece:	4402      	add	r2, r0
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	d101      	bne.n	8005eda <memchr+0x12>
 8005ed6:	2000      	movs	r0, #0
 8005ed8:	e003      	b.n	8005ee2 <memchr+0x1a>
 8005eda:	7804      	ldrb	r4, [r0, #0]
 8005edc:	3301      	adds	r3, #1
 8005ede:	428c      	cmp	r4, r1
 8005ee0:	d1f6      	bne.n	8005ed0 <memchr+0x8>
 8005ee2:	bd10      	pop	{r4, pc}

08005ee4 <memcpy>:
 8005ee4:	440a      	add	r2, r1
 8005ee6:	4291      	cmp	r1, r2
 8005ee8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005eec:	d100      	bne.n	8005ef0 <memcpy+0xc>
 8005eee:	4770      	bx	lr
 8005ef0:	b510      	push	{r4, lr}
 8005ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ef6:	4291      	cmp	r1, r2
 8005ef8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005efc:	d1f9      	bne.n	8005ef2 <memcpy+0xe>
 8005efe:	bd10      	pop	{r4, pc}

08005f00 <_Balloc>:
 8005f00:	b570      	push	{r4, r5, r6, lr}
 8005f02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f04:	4604      	mov	r4, r0
 8005f06:	460d      	mov	r5, r1
 8005f08:	b976      	cbnz	r6, 8005f28 <_Balloc+0x28>
 8005f0a:	2010      	movs	r0, #16
 8005f0c:	f7ff ffc2 	bl	8005e94 <malloc>
 8005f10:	4602      	mov	r2, r0
 8005f12:	6260      	str	r0, [r4, #36]	; 0x24
 8005f14:	b920      	cbnz	r0, 8005f20 <_Balloc+0x20>
 8005f16:	2166      	movs	r1, #102	; 0x66
 8005f18:	4b17      	ldr	r3, [pc, #92]	; (8005f78 <_Balloc+0x78>)
 8005f1a:	4818      	ldr	r0, [pc, #96]	; (8005f7c <_Balloc+0x7c>)
 8005f1c:	f001 f99a 	bl	8007254 <__assert_func>
 8005f20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f24:	6006      	str	r6, [r0, #0]
 8005f26:	60c6      	str	r6, [r0, #12]
 8005f28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005f2a:	68f3      	ldr	r3, [r6, #12]
 8005f2c:	b183      	cbz	r3, 8005f50 <_Balloc+0x50>
 8005f2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f36:	b9b8      	cbnz	r0, 8005f68 <_Balloc+0x68>
 8005f38:	2101      	movs	r1, #1
 8005f3a:	fa01 f605 	lsl.w	r6, r1, r5
 8005f3e:	1d72      	adds	r2, r6, #5
 8005f40:	4620      	mov	r0, r4
 8005f42:	0092      	lsls	r2, r2, #2
 8005f44:	f000 fc94 	bl	8006870 <_calloc_r>
 8005f48:	b160      	cbz	r0, 8005f64 <_Balloc+0x64>
 8005f4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f4e:	e00e      	b.n	8005f6e <_Balloc+0x6e>
 8005f50:	2221      	movs	r2, #33	; 0x21
 8005f52:	2104      	movs	r1, #4
 8005f54:	4620      	mov	r0, r4
 8005f56:	f000 fc8b 	bl	8006870 <_calloc_r>
 8005f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f5c:	60f0      	str	r0, [r6, #12]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1e4      	bne.n	8005f2e <_Balloc+0x2e>
 8005f64:	2000      	movs	r0, #0
 8005f66:	bd70      	pop	{r4, r5, r6, pc}
 8005f68:	6802      	ldr	r2, [r0, #0]
 8005f6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f74:	e7f7      	b.n	8005f66 <_Balloc+0x66>
 8005f76:	bf00      	nop
 8005f78:	080078fe 	.word	0x080078fe
 8005f7c:	08007a60 	.word	0x08007a60

08005f80 <_Bfree>:
 8005f80:	b570      	push	{r4, r5, r6, lr}
 8005f82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f84:	4605      	mov	r5, r0
 8005f86:	460c      	mov	r4, r1
 8005f88:	b976      	cbnz	r6, 8005fa8 <_Bfree+0x28>
 8005f8a:	2010      	movs	r0, #16
 8005f8c:	f7ff ff82 	bl	8005e94 <malloc>
 8005f90:	4602      	mov	r2, r0
 8005f92:	6268      	str	r0, [r5, #36]	; 0x24
 8005f94:	b920      	cbnz	r0, 8005fa0 <_Bfree+0x20>
 8005f96:	218a      	movs	r1, #138	; 0x8a
 8005f98:	4b08      	ldr	r3, [pc, #32]	; (8005fbc <_Bfree+0x3c>)
 8005f9a:	4809      	ldr	r0, [pc, #36]	; (8005fc0 <_Bfree+0x40>)
 8005f9c:	f001 f95a 	bl	8007254 <__assert_func>
 8005fa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fa4:	6006      	str	r6, [r0, #0]
 8005fa6:	60c6      	str	r6, [r0, #12]
 8005fa8:	b13c      	cbz	r4, 8005fba <_Bfree+0x3a>
 8005faa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005fac:	6862      	ldr	r2, [r4, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fb4:	6021      	str	r1, [r4, #0]
 8005fb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005fba:	bd70      	pop	{r4, r5, r6, pc}
 8005fbc:	080078fe 	.word	0x080078fe
 8005fc0:	08007a60 	.word	0x08007a60

08005fc4 <__multadd>:
 8005fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fc8:	4607      	mov	r7, r0
 8005fca:	460c      	mov	r4, r1
 8005fcc:	461e      	mov	r6, r3
 8005fce:	2000      	movs	r0, #0
 8005fd0:	690d      	ldr	r5, [r1, #16]
 8005fd2:	f101 0c14 	add.w	ip, r1, #20
 8005fd6:	f8dc 3000 	ldr.w	r3, [ip]
 8005fda:	3001      	adds	r0, #1
 8005fdc:	b299      	uxth	r1, r3
 8005fde:	fb02 6101 	mla	r1, r2, r1, r6
 8005fe2:	0c1e      	lsrs	r6, r3, #16
 8005fe4:	0c0b      	lsrs	r3, r1, #16
 8005fe6:	fb02 3306 	mla	r3, r2, r6, r3
 8005fea:	b289      	uxth	r1, r1
 8005fec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ff0:	4285      	cmp	r5, r0
 8005ff2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005ff6:	f84c 1b04 	str.w	r1, [ip], #4
 8005ffa:	dcec      	bgt.n	8005fd6 <__multadd+0x12>
 8005ffc:	b30e      	cbz	r6, 8006042 <__multadd+0x7e>
 8005ffe:	68a3      	ldr	r3, [r4, #8]
 8006000:	42ab      	cmp	r3, r5
 8006002:	dc19      	bgt.n	8006038 <__multadd+0x74>
 8006004:	6861      	ldr	r1, [r4, #4]
 8006006:	4638      	mov	r0, r7
 8006008:	3101      	adds	r1, #1
 800600a:	f7ff ff79 	bl	8005f00 <_Balloc>
 800600e:	4680      	mov	r8, r0
 8006010:	b928      	cbnz	r0, 800601e <__multadd+0x5a>
 8006012:	4602      	mov	r2, r0
 8006014:	21b5      	movs	r1, #181	; 0xb5
 8006016:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <__multadd+0x84>)
 8006018:	480c      	ldr	r0, [pc, #48]	; (800604c <__multadd+0x88>)
 800601a:	f001 f91b 	bl	8007254 <__assert_func>
 800601e:	6922      	ldr	r2, [r4, #16]
 8006020:	f104 010c 	add.w	r1, r4, #12
 8006024:	3202      	adds	r2, #2
 8006026:	0092      	lsls	r2, r2, #2
 8006028:	300c      	adds	r0, #12
 800602a:	f7ff ff5b 	bl	8005ee4 <memcpy>
 800602e:	4621      	mov	r1, r4
 8006030:	4638      	mov	r0, r7
 8006032:	f7ff ffa5 	bl	8005f80 <_Bfree>
 8006036:	4644      	mov	r4, r8
 8006038:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800603c:	3501      	adds	r5, #1
 800603e:	615e      	str	r6, [r3, #20]
 8006040:	6125      	str	r5, [r4, #16]
 8006042:	4620      	mov	r0, r4
 8006044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006048:	08007970 	.word	0x08007970
 800604c:	08007a60 	.word	0x08007a60

08006050 <__s2b>:
 8006050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006054:	4615      	mov	r5, r2
 8006056:	2209      	movs	r2, #9
 8006058:	461f      	mov	r7, r3
 800605a:	3308      	adds	r3, #8
 800605c:	460c      	mov	r4, r1
 800605e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006062:	4606      	mov	r6, r0
 8006064:	2201      	movs	r2, #1
 8006066:	2100      	movs	r1, #0
 8006068:	429a      	cmp	r2, r3
 800606a:	db09      	blt.n	8006080 <__s2b+0x30>
 800606c:	4630      	mov	r0, r6
 800606e:	f7ff ff47 	bl	8005f00 <_Balloc>
 8006072:	b940      	cbnz	r0, 8006086 <__s2b+0x36>
 8006074:	4602      	mov	r2, r0
 8006076:	21ce      	movs	r1, #206	; 0xce
 8006078:	4b18      	ldr	r3, [pc, #96]	; (80060dc <__s2b+0x8c>)
 800607a:	4819      	ldr	r0, [pc, #100]	; (80060e0 <__s2b+0x90>)
 800607c:	f001 f8ea 	bl	8007254 <__assert_func>
 8006080:	0052      	lsls	r2, r2, #1
 8006082:	3101      	adds	r1, #1
 8006084:	e7f0      	b.n	8006068 <__s2b+0x18>
 8006086:	9b08      	ldr	r3, [sp, #32]
 8006088:	2d09      	cmp	r5, #9
 800608a:	6143      	str	r3, [r0, #20]
 800608c:	f04f 0301 	mov.w	r3, #1
 8006090:	6103      	str	r3, [r0, #16]
 8006092:	dd16      	ble.n	80060c2 <__s2b+0x72>
 8006094:	f104 0909 	add.w	r9, r4, #9
 8006098:	46c8      	mov	r8, r9
 800609a:	442c      	add	r4, r5
 800609c:	f818 3b01 	ldrb.w	r3, [r8], #1
 80060a0:	4601      	mov	r1, r0
 80060a2:	220a      	movs	r2, #10
 80060a4:	4630      	mov	r0, r6
 80060a6:	3b30      	subs	r3, #48	; 0x30
 80060a8:	f7ff ff8c 	bl	8005fc4 <__multadd>
 80060ac:	45a0      	cmp	r8, r4
 80060ae:	d1f5      	bne.n	800609c <__s2b+0x4c>
 80060b0:	f1a5 0408 	sub.w	r4, r5, #8
 80060b4:	444c      	add	r4, r9
 80060b6:	1b2d      	subs	r5, r5, r4
 80060b8:	1963      	adds	r3, r4, r5
 80060ba:	42bb      	cmp	r3, r7
 80060bc:	db04      	blt.n	80060c8 <__s2b+0x78>
 80060be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060c2:	2509      	movs	r5, #9
 80060c4:	340a      	adds	r4, #10
 80060c6:	e7f6      	b.n	80060b6 <__s2b+0x66>
 80060c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80060cc:	4601      	mov	r1, r0
 80060ce:	220a      	movs	r2, #10
 80060d0:	4630      	mov	r0, r6
 80060d2:	3b30      	subs	r3, #48	; 0x30
 80060d4:	f7ff ff76 	bl	8005fc4 <__multadd>
 80060d8:	e7ee      	b.n	80060b8 <__s2b+0x68>
 80060da:	bf00      	nop
 80060dc:	08007970 	.word	0x08007970
 80060e0:	08007a60 	.word	0x08007a60

080060e4 <__hi0bits>:
 80060e4:	0c02      	lsrs	r2, r0, #16
 80060e6:	0412      	lsls	r2, r2, #16
 80060e8:	4603      	mov	r3, r0
 80060ea:	b9ca      	cbnz	r2, 8006120 <__hi0bits+0x3c>
 80060ec:	0403      	lsls	r3, r0, #16
 80060ee:	2010      	movs	r0, #16
 80060f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80060f4:	bf04      	itt	eq
 80060f6:	021b      	lsleq	r3, r3, #8
 80060f8:	3008      	addeq	r0, #8
 80060fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80060fe:	bf04      	itt	eq
 8006100:	011b      	lsleq	r3, r3, #4
 8006102:	3004      	addeq	r0, #4
 8006104:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006108:	bf04      	itt	eq
 800610a:	009b      	lsleq	r3, r3, #2
 800610c:	3002      	addeq	r0, #2
 800610e:	2b00      	cmp	r3, #0
 8006110:	db05      	blt.n	800611e <__hi0bits+0x3a>
 8006112:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006116:	f100 0001 	add.w	r0, r0, #1
 800611a:	bf08      	it	eq
 800611c:	2020      	moveq	r0, #32
 800611e:	4770      	bx	lr
 8006120:	2000      	movs	r0, #0
 8006122:	e7e5      	b.n	80060f0 <__hi0bits+0xc>

08006124 <__lo0bits>:
 8006124:	6803      	ldr	r3, [r0, #0]
 8006126:	4602      	mov	r2, r0
 8006128:	f013 0007 	ands.w	r0, r3, #7
 800612c:	d00b      	beq.n	8006146 <__lo0bits+0x22>
 800612e:	07d9      	lsls	r1, r3, #31
 8006130:	d421      	bmi.n	8006176 <__lo0bits+0x52>
 8006132:	0798      	lsls	r0, r3, #30
 8006134:	bf49      	itett	mi
 8006136:	085b      	lsrmi	r3, r3, #1
 8006138:	089b      	lsrpl	r3, r3, #2
 800613a:	2001      	movmi	r0, #1
 800613c:	6013      	strmi	r3, [r2, #0]
 800613e:	bf5c      	itt	pl
 8006140:	2002      	movpl	r0, #2
 8006142:	6013      	strpl	r3, [r2, #0]
 8006144:	4770      	bx	lr
 8006146:	b299      	uxth	r1, r3
 8006148:	b909      	cbnz	r1, 800614e <__lo0bits+0x2a>
 800614a:	2010      	movs	r0, #16
 800614c:	0c1b      	lsrs	r3, r3, #16
 800614e:	b2d9      	uxtb	r1, r3
 8006150:	b909      	cbnz	r1, 8006156 <__lo0bits+0x32>
 8006152:	3008      	adds	r0, #8
 8006154:	0a1b      	lsrs	r3, r3, #8
 8006156:	0719      	lsls	r1, r3, #28
 8006158:	bf04      	itt	eq
 800615a:	091b      	lsreq	r3, r3, #4
 800615c:	3004      	addeq	r0, #4
 800615e:	0799      	lsls	r1, r3, #30
 8006160:	bf04      	itt	eq
 8006162:	089b      	lsreq	r3, r3, #2
 8006164:	3002      	addeq	r0, #2
 8006166:	07d9      	lsls	r1, r3, #31
 8006168:	d403      	bmi.n	8006172 <__lo0bits+0x4e>
 800616a:	085b      	lsrs	r3, r3, #1
 800616c:	f100 0001 	add.w	r0, r0, #1
 8006170:	d003      	beq.n	800617a <__lo0bits+0x56>
 8006172:	6013      	str	r3, [r2, #0]
 8006174:	4770      	bx	lr
 8006176:	2000      	movs	r0, #0
 8006178:	4770      	bx	lr
 800617a:	2020      	movs	r0, #32
 800617c:	4770      	bx	lr
	...

08006180 <__i2b>:
 8006180:	b510      	push	{r4, lr}
 8006182:	460c      	mov	r4, r1
 8006184:	2101      	movs	r1, #1
 8006186:	f7ff febb 	bl	8005f00 <_Balloc>
 800618a:	4602      	mov	r2, r0
 800618c:	b928      	cbnz	r0, 800619a <__i2b+0x1a>
 800618e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006192:	4b04      	ldr	r3, [pc, #16]	; (80061a4 <__i2b+0x24>)
 8006194:	4804      	ldr	r0, [pc, #16]	; (80061a8 <__i2b+0x28>)
 8006196:	f001 f85d 	bl	8007254 <__assert_func>
 800619a:	2301      	movs	r3, #1
 800619c:	6144      	str	r4, [r0, #20]
 800619e:	6103      	str	r3, [r0, #16]
 80061a0:	bd10      	pop	{r4, pc}
 80061a2:	bf00      	nop
 80061a4:	08007970 	.word	0x08007970
 80061a8:	08007a60 	.word	0x08007a60

080061ac <__multiply>:
 80061ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b0:	4691      	mov	r9, r2
 80061b2:	690a      	ldr	r2, [r1, #16]
 80061b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80061b8:	460c      	mov	r4, r1
 80061ba:	429a      	cmp	r2, r3
 80061bc:	bfbe      	ittt	lt
 80061be:	460b      	movlt	r3, r1
 80061c0:	464c      	movlt	r4, r9
 80061c2:	4699      	movlt	r9, r3
 80061c4:	6927      	ldr	r7, [r4, #16]
 80061c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80061ca:	68a3      	ldr	r3, [r4, #8]
 80061cc:	6861      	ldr	r1, [r4, #4]
 80061ce:	eb07 060a 	add.w	r6, r7, sl
 80061d2:	42b3      	cmp	r3, r6
 80061d4:	b085      	sub	sp, #20
 80061d6:	bfb8      	it	lt
 80061d8:	3101      	addlt	r1, #1
 80061da:	f7ff fe91 	bl	8005f00 <_Balloc>
 80061de:	b930      	cbnz	r0, 80061ee <__multiply+0x42>
 80061e0:	4602      	mov	r2, r0
 80061e2:	f240 115d 	movw	r1, #349	; 0x15d
 80061e6:	4b43      	ldr	r3, [pc, #268]	; (80062f4 <__multiply+0x148>)
 80061e8:	4843      	ldr	r0, [pc, #268]	; (80062f8 <__multiply+0x14c>)
 80061ea:	f001 f833 	bl	8007254 <__assert_func>
 80061ee:	f100 0514 	add.w	r5, r0, #20
 80061f2:	462b      	mov	r3, r5
 80061f4:	2200      	movs	r2, #0
 80061f6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80061fa:	4543      	cmp	r3, r8
 80061fc:	d321      	bcc.n	8006242 <__multiply+0x96>
 80061fe:	f104 0314 	add.w	r3, r4, #20
 8006202:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006206:	f109 0314 	add.w	r3, r9, #20
 800620a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800620e:	9202      	str	r2, [sp, #8]
 8006210:	1b3a      	subs	r2, r7, r4
 8006212:	3a15      	subs	r2, #21
 8006214:	f022 0203 	bic.w	r2, r2, #3
 8006218:	3204      	adds	r2, #4
 800621a:	f104 0115 	add.w	r1, r4, #21
 800621e:	428f      	cmp	r7, r1
 8006220:	bf38      	it	cc
 8006222:	2204      	movcc	r2, #4
 8006224:	9201      	str	r2, [sp, #4]
 8006226:	9a02      	ldr	r2, [sp, #8]
 8006228:	9303      	str	r3, [sp, #12]
 800622a:	429a      	cmp	r2, r3
 800622c:	d80c      	bhi.n	8006248 <__multiply+0x9c>
 800622e:	2e00      	cmp	r6, #0
 8006230:	dd03      	ble.n	800623a <__multiply+0x8e>
 8006232:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006236:	2b00      	cmp	r3, #0
 8006238:	d059      	beq.n	80062ee <__multiply+0x142>
 800623a:	6106      	str	r6, [r0, #16]
 800623c:	b005      	add	sp, #20
 800623e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006242:	f843 2b04 	str.w	r2, [r3], #4
 8006246:	e7d8      	b.n	80061fa <__multiply+0x4e>
 8006248:	f8b3 a000 	ldrh.w	sl, [r3]
 800624c:	f1ba 0f00 	cmp.w	sl, #0
 8006250:	d023      	beq.n	800629a <__multiply+0xee>
 8006252:	46a9      	mov	r9, r5
 8006254:	f04f 0c00 	mov.w	ip, #0
 8006258:	f104 0e14 	add.w	lr, r4, #20
 800625c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006260:	f8d9 1000 	ldr.w	r1, [r9]
 8006264:	fa1f fb82 	uxth.w	fp, r2
 8006268:	b289      	uxth	r1, r1
 800626a:	fb0a 110b 	mla	r1, sl, fp, r1
 800626e:	4461      	add	r1, ip
 8006270:	f8d9 c000 	ldr.w	ip, [r9]
 8006274:	0c12      	lsrs	r2, r2, #16
 8006276:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800627a:	fb0a c202 	mla	r2, sl, r2, ip
 800627e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006282:	b289      	uxth	r1, r1
 8006284:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006288:	4577      	cmp	r7, lr
 800628a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800628e:	f849 1b04 	str.w	r1, [r9], #4
 8006292:	d8e3      	bhi.n	800625c <__multiply+0xb0>
 8006294:	9a01      	ldr	r2, [sp, #4]
 8006296:	f845 c002 	str.w	ip, [r5, r2]
 800629a:	9a03      	ldr	r2, [sp, #12]
 800629c:	3304      	adds	r3, #4
 800629e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80062a2:	f1b9 0f00 	cmp.w	r9, #0
 80062a6:	d020      	beq.n	80062ea <__multiply+0x13e>
 80062a8:	46ae      	mov	lr, r5
 80062aa:	f04f 0a00 	mov.w	sl, #0
 80062ae:	6829      	ldr	r1, [r5, #0]
 80062b0:	f104 0c14 	add.w	ip, r4, #20
 80062b4:	f8bc b000 	ldrh.w	fp, [ip]
 80062b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80062bc:	b289      	uxth	r1, r1
 80062be:	fb09 220b 	mla	r2, r9, fp, r2
 80062c2:	4492      	add	sl, r2
 80062c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80062c8:	f84e 1b04 	str.w	r1, [lr], #4
 80062cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80062d0:	f8be 1000 	ldrh.w	r1, [lr]
 80062d4:	0c12      	lsrs	r2, r2, #16
 80062d6:	fb09 1102 	mla	r1, r9, r2, r1
 80062da:	4567      	cmp	r7, ip
 80062dc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80062e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80062e4:	d8e6      	bhi.n	80062b4 <__multiply+0x108>
 80062e6:	9a01      	ldr	r2, [sp, #4]
 80062e8:	50a9      	str	r1, [r5, r2]
 80062ea:	3504      	adds	r5, #4
 80062ec:	e79b      	b.n	8006226 <__multiply+0x7a>
 80062ee:	3e01      	subs	r6, #1
 80062f0:	e79d      	b.n	800622e <__multiply+0x82>
 80062f2:	bf00      	nop
 80062f4:	08007970 	.word	0x08007970
 80062f8:	08007a60 	.word	0x08007a60

080062fc <__pow5mult>:
 80062fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006300:	4615      	mov	r5, r2
 8006302:	f012 0203 	ands.w	r2, r2, #3
 8006306:	4606      	mov	r6, r0
 8006308:	460f      	mov	r7, r1
 800630a:	d007      	beq.n	800631c <__pow5mult+0x20>
 800630c:	4c25      	ldr	r4, [pc, #148]	; (80063a4 <__pow5mult+0xa8>)
 800630e:	3a01      	subs	r2, #1
 8006310:	2300      	movs	r3, #0
 8006312:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006316:	f7ff fe55 	bl	8005fc4 <__multadd>
 800631a:	4607      	mov	r7, r0
 800631c:	10ad      	asrs	r5, r5, #2
 800631e:	d03d      	beq.n	800639c <__pow5mult+0xa0>
 8006320:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006322:	b97c      	cbnz	r4, 8006344 <__pow5mult+0x48>
 8006324:	2010      	movs	r0, #16
 8006326:	f7ff fdb5 	bl	8005e94 <malloc>
 800632a:	4602      	mov	r2, r0
 800632c:	6270      	str	r0, [r6, #36]	; 0x24
 800632e:	b928      	cbnz	r0, 800633c <__pow5mult+0x40>
 8006330:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006334:	4b1c      	ldr	r3, [pc, #112]	; (80063a8 <__pow5mult+0xac>)
 8006336:	481d      	ldr	r0, [pc, #116]	; (80063ac <__pow5mult+0xb0>)
 8006338:	f000 ff8c 	bl	8007254 <__assert_func>
 800633c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006340:	6004      	str	r4, [r0, #0]
 8006342:	60c4      	str	r4, [r0, #12]
 8006344:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006348:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800634c:	b94c      	cbnz	r4, 8006362 <__pow5mult+0x66>
 800634e:	f240 2171 	movw	r1, #625	; 0x271
 8006352:	4630      	mov	r0, r6
 8006354:	f7ff ff14 	bl	8006180 <__i2b>
 8006358:	2300      	movs	r3, #0
 800635a:	4604      	mov	r4, r0
 800635c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006360:	6003      	str	r3, [r0, #0]
 8006362:	f04f 0900 	mov.w	r9, #0
 8006366:	07eb      	lsls	r3, r5, #31
 8006368:	d50a      	bpl.n	8006380 <__pow5mult+0x84>
 800636a:	4639      	mov	r1, r7
 800636c:	4622      	mov	r2, r4
 800636e:	4630      	mov	r0, r6
 8006370:	f7ff ff1c 	bl	80061ac <__multiply>
 8006374:	4680      	mov	r8, r0
 8006376:	4639      	mov	r1, r7
 8006378:	4630      	mov	r0, r6
 800637a:	f7ff fe01 	bl	8005f80 <_Bfree>
 800637e:	4647      	mov	r7, r8
 8006380:	106d      	asrs	r5, r5, #1
 8006382:	d00b      	beq.n	800639c <__pow5mult+0xa0>
 8006384:	6820      	ldr	r0, [r4, #0]
 8006386:	b938      	cbnz	r0, 8006398 <__pow5mult+0x9c>
 8006388:	4622      	mov	r2, r4
 800638a:	4621      	mov	r1, r4
 800638c:	4630      	mov	r0, r6
 800638e:	f7ff ff0d 	bl	80061ac <__multiply>
 8006392:	6020      	str	r0, [r4, #0]
 8006394:	f8c0 9000 	str.w	r9, [r0]
 8006398:	4604      	mov	r4, r0
 800639a:	e7e4      	b.n	8006366 <__pow5mult+0x6a>
 800639c:	4638      	mov	r0, r7
 800639e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063a2:	bf00      	nop
 80063a4:	08007bb0 	.word	0x08007bb0
 80063a8:	080078fe 	.word	0x080078fe
 80063ac:	08007a60 	.word	0x08007a60

080063b0 <__lshift>:
 80063b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b4:	460c      	mov	r4, r1
 80063b6:	4607      	mov	r7, r0
 80063b8:	4691      	mov	r9, r2
 80063ba:	6923      	ldr	r3, [r4, #16]
 80063bc:	6849      	ldr	r1, [r1, #4]
 80063be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80063c2:	68a3      	ldr	r3, [r4, #8]
 80063c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80063c8:	f108 0601 	add.w	r6, r8, #1
 80063cc:	42b3      	cmp	r3, r6
 80063ce:	db0b      	blt.n	80063e8 <__lshift+0x38>
 80063d0:	4638      	mov	r0, r7
 80063d2:	f7ff fd95 	bl	8005f00 <_Balloc>
 80063d6:	4605      	mov	r5, r0
 80063d8:	b948      	cbnz	r0, 80063ee <__lshift+0x3e>
 80063da:	4602      	mov	r2, r0
 80063dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80063e0:	4b29      	ldr	r3, [pc, #164]	; (8006488 <__lshift+0xd8>)
 80063e2:	482a      	ldr	r0, [pc, #168]	; (800648c <__lshift+0xdc>)
 80063e4:	f000 ff36 	bl	8007254 <__assert_func>
 80063e8:	3101      	adds	r1, #1
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	e7ee      	b.n	80063cc <__lshift+0x1c>
 80063ee:	2300      	movs	r3, #0
 80063f0:	f100 0114 	add.w	r1, r0, #20
 80063f4:	f100 0210 	add.w	r2, r0, #16
 80063f8:	4618      	mov	r0, r3
 80063fa:	4553      	cmp	r3, sl
 80063fc:	db37      	blt.n	800646e <__lshift+0xbe>
 80063fe:	6920      	ldr	r0, [r4, #16]
 8006400:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006404:	f104 0314 	add.w	r3, r4, #20
 8006408:	f019 091f 	ands.w	r9, r9, #31
 800640c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006410:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006414:	d02f      	beq.n	8006476 <__lshift+0xc6>
 8006416:	468a      	mov	sl, r1
 8006418:	f04f 0c00 	mov.w	ip, #0
 800641c:	f1c9 0e20 	rsb	lr, r9, #32
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	fa02 f209 	lsl.w	r2, r2, r9
 8006426:	ea42 020c 	orr.w	r2, r2, ip
 800642a:	f84a 2b04 	str.w	r2, [sl], #4
 800642e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006432:	4298      	cmp	r0, r3
 8006434:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006438:	d8f2      	bhi.n	8006420 <__lshift+0x70>
 800643a:	1b03      	subs	r3, r0, r4
 800643c:	3b15      	subs	r3, #21
 800643e:	f023 0303 	bic.w	r3, r3, #3
 8006442:	3304      	adds	r3, #4
 8006444:	f104 0215 	add.w	r2, r4, #21
 8006448:	4290      	cmp	r0, r2
 800644a:	bf38      	it	cc
 800644c:	2304      	movcc	r3, #4
 800644e:	f841 c003 	str.w	ip, [r1, r3]
 8006452:	f1bc 0f00 	cmp.w	ip, #0
 8006456:	d001      	beq.n	800645c <__lshift+0xac>
 8006458:	f108 0602 	add.w	r6, r8, #2
 800645c:	3e01      	subs	r6, #1
 800645e:	4638      	mov	r0, r7
 8006460:	4621      	mov	r1, r4
 8006462:	612e      	str	r6, [r5, #16]
 8006464:	f7ff fd8c 	bl	8005f80 <_Bfree>
 8006468:	4628      	mov	r0, r5
 800646a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800646e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006472:	3301      	adds	r3, #1
 8006474:	e7c1      	b.n	80063fa <__lshift+0x4a>
 8006476:	3904      	subs	r1, #4
 8006478:	f853 2b04 	ldr.w	r2, [r3], #4
 800647c:	4298      	cmp	r0, r3
 800647e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006482:	d8f9      	bhi.n	8006478 <__lshift+0xc8>
 8006484:	e7ea      	b.n	800645c <__lshift+0xac>
 8006486:	bf00      	nop
 8006488:	08007970 	.word	0x08007970
 800648c:	08007a60 	.word	0x08007a60

08006490 <__mcmp>:
 8006490:	4603      	mov	r3, r0
 8006492:	690a      	ldr	r2, [r1, #16]
 8006494:	6900      	ldr	r0, [r0, #16]
 8006496:	b530      	push	{r4, r5, lr}
 8006498:	1a80      	subs	r0, r0, r2
 800649a:	d10d      	bne.n	80064b8 <__mcmp+0x28>
 800649c:	3314      	adds	r3, #20
 800649e:	3114      	adds	r1, #20
 80064a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80064a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80064a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80064ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80064b0:	4295      	cmp	r5, r2
 80064b2:	d002      	beq.n	80064ba <__mcmp+0x2a>
 80064b4:	d304      	bcc.n	80064c0 <__mcmp+0x30>
 80064b6:	2001      	movs	r0, #1
 80064b8:	bd30      	pop	{r4, r5, pc}
 80064ba:	42a3      	cmp	r3, r4
 80064bc:	d3f4      	bcc.n	80064a8 <__mcmp+0x18>
 80064be:	e7fb      	b.n	80064b8 <__mcmp+0x28>
 80064c0:	f04f 30ff 	mov.w	r0, #4294967295
 80064c4:	e7f8      	b.n	80064b8 <__mcmp+0x28>
	...

080064c8 <__mdiff>:
 80064c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064cc:	460d      	mov	r5, r1
 80064ce:	4607      	mov	r7, r0
 80064d0:	4611      	mov	r1, r2
 80064d2:	4628      	mov	r0, r5
 80064d4:	4614      	mov	r4, r2
 80064d6:	f7ff ffdb 	bl	8006490 <__mcmp>
 80064da:	1e06      	subs	r6, r0, #0
 80064dc:	d111      	bne.n	8006502 <__mdiff+0x3a>
 80064de:	4631      	mov	r1, r6
 80064e0:	4638      	mov	r0, r7
 80064e2:	f7ff fd0d 	bl	8005f00 <_Balloc>
 80064e6:	4602      	mov	r2, r0
 80064e8:	b928      	cbnz	r0, 80064f6 <__mdiff+0x2e>
 80064ea:	f240 2132 	movw	r1, #562	; 0x232
 80064ee:	4b3a      	ldr	r3, [pc, #232]	; (80065d8 <__mdiff+0x110>)
 80064f0:	483a      	ldr	r0, [pc, #232]	; (80065dc <__mdiff+0x114>)
 80064f2:	f000 feaf 	bl	8007254 <__assert_func>
 80064f6:	2301      	movs	r3, #1
 80064f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80064fc:	4610      	mov	r0, r2
 80064fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006502:	bfa4      	itt	ge
 8006504:	4623      	movge	r3, r4
 8006506:	462c      	movge	r4, r5
 8006508:	4638      	mov	r0, r7
 800650a:	6861      	ldr	r1, [r4, #4]
 800650c:	bfa6      	itte	ge
 800650e:	461d      	movge	r5, r3
 8006510:	2600      	movge	r6, #0
 8006512:	2601      	movlt	r6, #1
 8006514:	f7ff fcf4 	bl	8005f00 <_Balloc>
 8006518:	4602      	mov	r2, r0
 800651a:	b918      	cbnz	r0, 8006524 <__mdiff+0x5c>
 800651c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006520:	4b2d      	ldr	r3, [pc, #180]	; (80065d8 <__mdiff+0x110>)
 8006522:	e7e5      	b.n	80064f0 <__mdiff+0x28>
 8006524:	f102 0814 	add.w	r8, r2, #20
 8006528:	46c2      	mov	sl, r8
 800652a:	f04f 0c00 	mov.w	ip, #0
 800652e:	6927      	ldr	r7, [r4, #16]
 8006530:	60c6      	str	r6, [r0, #12]
 8006532:	692e      	ldr	r6, [r5, #16]
 8006534:	f104 0014 	add.w	r0, r4, #20
 8006538:	f105 0914 	add.w	r9, r5, #20
 800653c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006540:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006544:	3410      	adds	r4, #16
 8006546:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800654a:	f859 3b04 	ldr.w	r3, [r9], #4
 800654e:	fa1f f18b 	uxth.w	r1, fp
 8006552:	448c      	add	ip, r1
 8006554:	b299      	uxth	r1, r3
 8006556:	0c1b      	lsrs	r3, r3, #16
 8006558:	ebac 0101 	sub.w	r1, ip, r1
 800655c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006560:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006564:	b289      	uxth	r1, r1
 8006566:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800656a:	454e      	cmp	r6, r9
 800656c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006570:	f84a 3b04 	str.w	r3, [sl], #4
 8006574:	d8e7      	bhi.n	8006546 <__mdiff+0x7e>
 8006576:	1b73      	subs	r3, r6, r5
 8006578:	3b15      	subs	r3, #21
 800657a:	f023 0303 	bic.w	r3, r3, #3
 800657e:	3515      	adds	r5, #21
 8006580:	3304      	adds	r3, #4
 8006582:	42ae      	cmp	r6, r5
 8006584:	bf38      	it	cc
 8006586:	2304      	movcc	r3, #4
 8006588:	4418      	add	r0, r3
 800658a:	4443      	add	r3, r8
 800658c:	461e      	mov	r6, r3
 800658e:	4605      	mov	r5, r0
 8006590:	4575      	cmp	r5, lr
 8006592:	d30e      	bcc.n	80065b2 <__mdiff+0xea>
 8006594:	f10e 0103 	add.w	r1, lr, #3
 8006598:	1a09      	subs	r1, r1, r0
 800659a:	f021 0103 	bic.w	r1, r1, #3
 800659e:	3803      	subs	r0, #3
 80065a0:	4586      	cmp	lr, r0
 80065a2:	bf38      	it	cc
 80065a4:	2100      	movcc	r1, #0
 80065a6:	4419      	add	r1, r3
 80065a8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80065ac:	b18b      	cbz	r3, 80065d2 <__mdiff+0x10a>
 80065ae:	6117      	str	r7, [r2, #16]
 80065b0:	e7a4      	b.n	80064fc <__mdiff+0x34>
 80065b2:	f855 8b04 	ldr.w	r8, [r5], #4
 80065b6:	fa1f f188 	uxth.w	r1, r8
 80065ba:	4461      	add	r1, ip
 80065bc:	140c      	asrs	r4, r1, #16
 80065be:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80065c2:	b289      	uxth	r1, r1
 80065c4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80065c8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80065cc:	f846 1b04 	str.w	r1, [r6], #4
 80065d0:	e7de      	b.n	8006590 <__mdiff+0xc8>
 80065d2:	3f01      	subs	r7, #1
 80065d4:	e7e8      	b.n	80065a8 <__mdiff+0xe0>
 80065d6:	bf00      	nop
 80065d8:	08007970 	.word	0x08007970
 80065dc:	08007a60 	.word	0x08007a60

080065e0 <__ulp>:
 80065e0:	4b11      	ldr	r3, [pc, #68]	; (8006628 <__ulp+0x48>)
 80065e2:	400b      	ands	r3, r1
 80065e4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	dd02      	ble.n	80065f2 <__ulp+0x12>
 80065ec:	2000      	movs	r0, #0
 80065ee:	4619      	mov	r1, r3
 80065f0:	4770      	bx	lr
 80065f2:	425b      	negs	r3, r3
 80065f4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80065f8:	f04f 0000 	mov.w	r0, #0
 80065fc:	f04f 0100 	mov.w	r1, #0
 8006600:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006604:	da04      	bge.n	8006610 <__ulp+0x30>
 8006606:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800660a:	fa43 f102 	asr.w	r1, r3, r2
 800660e:	4770      	bx	lr
 8006610:	f1a2 0314 	sub.w	r3, r2, #20
 8006614:	2b1e      	cmp	r3, #30
 8006616:	bfd6      	itet	le
 8006618:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800661c:	2301      	movgt	r3, #1
 800661e:	fa22 f303 	lsrle.w	r3, r2, r3
 8006622:	4618      	mov	r0, r3
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	7ff00000 	.word	0x7ff00000

0800662c <__b2d>:
 800662c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006630:	6907      	ldr	r7, [r0, #16]
 8006632:	f100 0914 	add.w	r9, r0, #20
 8006636:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800663a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800663e:	f1a7 0804 	sub.w	r8, r7, #4
 8006642:	4630      	mov	r0, r6
 8006644:	f7ff fd4e 	bl	80060e4 <__hi0bits>
 8006648:	f1c0 0320 	rsb	r3, r0, #32
 800664c:	280a      	cmp	r0, #10
 800664e:	600b      	str	r3, [r1, #0]
 8006650:	491f      	ldr	r1, [pc, #124]	; (80066d0 <__b2d+0xa4>)
 8006652:	dc17      	bgt.n	8006684 <__b2d+0x58>
 8006654:	45c1      	cmp	r9, r8
 8006656:	bf28      	it	cs
 8006658:	2200      	movcs	r2, #0
 800665a:	f1c0 0c0b 	rsb	ip, r0, #11
 800665e:	fa26 f30c 	lsr.w	r3, r6, ip
 8006662:	bf38      	it	cc
 8006664:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006668:	ea43 0501 	orr.w	r5, r3, r1
 800666c:	f100 0315 	add.w	r3, r0, #21
 8006670:	fa06 f303 	lsl.w	r3, r6, r3
 8006674:	fa22 f20c 	lsr.w	r2, r2, ip
 8006678:	ea43 0402 	orr.w	r4, r3, r2
 800667c:	4620      	mov	r0, r4
 800667e:	4629      	mov	r1, r5
 8006680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006684:	45c1      	cmp	r9, r8
 8006686:	bf2e      	itee	cs
 8006688:	2200      	movcs	r2, #0
 800668a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800668e:	f1a7 0808 	subcc.w	r8, r7, #8
 8006692:	f1b0 030b 	subs.w	r3, r0, #11
 8006696:	d016      	beq.n	80066c6 <__b2d+0x9a>
 8006698:	f1c3 0720 	rsb	r7, r3, #32
 800669c:	fa22 f107 	lsr.w	r1, r2, r7
 80066a0:	45c8      	cmp	r8, r9
 80066a2:	fa06 f603 	lsl.w	r6, r6, r3
 80066a6:	ea46 0601 	orr.w	r6, r6, r1
 80066aa:	bf94      	ite	ls
 80066ac:	2100      	movls	r1, #0
 80066ae:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80066b2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80066b6:	fa02 f003 	lsl.w	r0, r2, r3
 80066ba:	40f9      	lsrs	r1, r7
 80066bc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80066c0:	ea40 0401 	orr.w	r4, r0, r1
 80066c4:	e7da      	b.n	800667c <__b2d+0x50>
 80066c6:	4614      	mov	r4, r2
 80066c8:	ea46 0501 	orr.w	r5, r6, r1
 80066cc:	e7d6      	b.n	800667c <__b2d+0x50>
 80066ce:	bf00      	nop
 80066d0:	3ff00000 	.word	0x3ff00000

080066d4 <__d2b>:
 80066d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80066d8:	2101      	movs	r1, #1
 80066da:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80066de:	4690      	mov	r8, r2
 80066e0:	461d      	mov	r5, r3
 80066e2:	f7ff fc0d 	bl	8005f00 <_Balloc>
 80066e6:	4604      	mov	r4, r0
 80066e8:	b930      	cbnz	r0, 80066f8 <__d2b+0x24>
 80066ea:	4602      	mov	r2, r0
 80066ec:	f240 310a 	movw	r1, #778	; 0x30a
 80066f0:	4b24      	ldr	r3, [pc, #144]	; (8006784 <__d2b+0xb0>)
 80066f2:	4825      	ldr	r0, [pc, #148]	; (8006788 <__d2b+0xb4>)
 80066f4:	f000 fdae 	bl	8007254 <__assert_func>
 80066f8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80066fc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006700:	bb2d      	cbnz	r5, 800674e <__d2b+0x7a>
 8006702:	9301      	str	r3, [sp, #4]
 8006704:	f1b8 0300 	subs.w	r3, r8, #0
 8006708:	d026      	beq.n	8006758 <__d2b+0x84>
 800670a:	4668      	mov	r0, sp
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	f7ff fd09 	bl	8006124 <__lo0bits>
 8006712:	9900      	ldr	r1, [sp, #0]
 8006714:	b1f0      	cbz	r0, 8006754 <__d2b+0x80>
 8006716:	9a01      	ldr	r2, [sp, #4]
 8006718:	f1c0 0320 	rsb	r3, r0, #32
 800671c:	fa02 f303 	lsl.w	r3, r2, r3
 8006720:	430b      	orrs	r3, r1
 8006722:	40c2      	lsrs	r2, r0
 8006724:	6163      	str	r3, [r4, #20]
 8006726:	9201      	str	r2, [sp, #4]
 8006728:	9b01      	ldr	r3, [sp, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	bf14      	ite	ne
 800672e:	2102      	movne	r1, #2
 8006730:	2101      	moveq	r1, #1
 8006732:	61a3      	str	r3, [r4, #24]
 8006734:	6121      	str	r1, [r4, #16]
 8006736:	b1c5      	cbz	r5, 800676a <__d2b+0x96>
 8006738:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800673c:	4405      	add	r5, r0
 800673e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006742:	603d      	str	r5, [r7, #0]
 8006744:	6030      	str	r0, [r6, #0]
 8006746:	4620      	mov	r0, r4
 8006748:	b002      	add	sp, #8
 800674a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800674e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006752:	e7d6      	b.n	8006702 <__d2b+0x2e>
 8006754:	6161      	str	r1, [r4, #20]
 8006756:	e7e7      	b.n	8006728 <__d2b+0x54>
 8006758:	a801      	add	r0, sp, #4
 800675a:	f7ff fce3 	bl	8006124 <__lo0bits>
 800675e:	2101      	movs	r1, #1
 8006760:	9b01      	ldr	r3, [sp, #4]
 8006762:	6121      	str	r1, [r4, #16]
 8006764:	6163      	str	r3, [r4, #20]
 8006766:	3020      	adds	r0, #32
 8006768:	e7e5      	b.n	8006736 <__d2b+0x62>
 800676a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800676e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006772:	6038      	str	r0, [r7, #0]
 8006774:	6918      	ldr	r0, [r3, #16]
 8006776:	f7ff fcb5 	bl	80060e4 <__hi0bits>
 800677a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800677e:	6031      	str	r1, [r6, #0]
 8006780:	e7e1      	b.n	8006746 <__d2b+0x72>
 8006782:	bf00      	nop
 8006784:	08007970 	.word	0x08007970
 8006788:	08007a60 	.word	0x08007a60

0800678c <__ratio>:
 800678c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006790:	4688      	mov	r8, r1
 8006792:	4669      	mov	r1, sp
 8006794:	4681      	mov	r9, r0
 8006796:	f7ff ff49 	bl	800662c <__b2d>
 800679a:	460f      	mov	r7, r1
 800679c:	4604      	mov	r4, r0
 800679e:	460d      	mov	r5, r1
 80067a0:	4640      	mov	r0, r8
 80067a2:	a901      	add	r1, sp, #4
 80067a4:	f7ff ff42 	bl	800662c <__b2d>
 80067a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80067ac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80067b0:	468b      	mov	fp, r1
 80067b2:	eba3 0c02 	sub.w	ip, r3, r2
 80067b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80067ba:	1a9b      	subs	r3, r3, r2
 80067bc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	bfd5      	itete	le
 80067c4:	460a      	movle	r2, r1
 80067c6:	462a      	movgt	r2, r5
 80067c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80067cc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80067d0:	bfd8      	it	le
 80067d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80067d6:	465b      	mov	r3, fp
 80067d8:	4602      	mov	r2, r0
 80067da:	4639      	mov	r1, r7
 80067dc:	4620      	mov	r0, r4
 80067de:	f7f9 ffa5 	bl	800072c <__aeabi_ddiv>
 80067e2:	b003      	add	sp, #12
 80067e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080067e8 <__copybits>:
 80067e8:	3901      	subs	r1, #1
 80067ea:	b570      	push	{r4, r5, r6, lr}
 80067ec:	1149      	asrs	r1, r1, #5
 80067ee:	6914      	ldr	r4, [r2, #16]
 80067f0:	3101      	adds	r1, #1
 80067f2:	f102 0314 	add.w	r3, r2, #20
 80067f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80067fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80067fe:	1f05      	subs	r5, r0, #4
 8006800:	42a3      	cmp	r3, r4
 8006802:	d30c      	bcc.n	800681e <__copybits+0x36>
 8006804:	1aa3      	subs	r3, r4, r2
 8006806:	3b11      	subs	r3, #17
 8006808:	f023 0303 	bic.w	r3, r3, #3
 800680c:	3211      	adds	r2, #17
 800680e:	42a2      	cmp	r2, r4
 8006810:	bf88      	it	hi
 8006812:	2300      	movhi	r3, #0
 8006814:	4418      	add	r0, r3
 8006816:	2300      	movs	r3, #0
 8006818:	4288      	cmp	r0, r1
 800681a:	d305      	bcc.n	8006828 <__copybits+0x40>
 800681c:	bd70      	pop	{r4, r5, r6, pc}
 800681e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006822:	f845 6f04 	str.w	r6, [r5, #4]!
 8006826:	e7eb      	b.n	8006800 <__copybits+0x18>
 8006828:	f840 3b04 	str.w	r3, [r0], #4
 800682c:	e7f4      	b.n	8006818 <__copybits+0x30>

0800682e <__any_on>:
 800682e:	f100 0214 	add.w	r2, r0, #20
 8006832:	6900      	ldr	r0, [r0, #16]
 8006834:	114b      	asrs	r3, r1, #5
 8006836:	4298      	cmp	r0, r3
 8006838:	b510      	push	{r4, lr}
 800683a:	db11      	blt.n	8006860 <__any_on+0x32>
 800683c:	dd0a      	ble.n	8006854 <__any_on+0x26>
 800683e:	f011 011f 	ands.w	r1, r1, #31
 8006842:	d007      	beq.n	8006854 <__any_on+0x26>
 8006844:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006848:	fa24 f001 	lsr.w	r0, r4, r1
 800684c:	fa00 f101 	lsl.w	r1, r0, r1
 8006850:	428c      	cmp	r4, r1
 8006852:	d10b      	bne.n	800686c <__any_on+0x3e>
 8006854:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006858:	4293      	cmp	r3, r2
 800685a:	d803      	bhi.n	8006864 <__any_on+0x36>
 800685c:	2000      	movs	r0, #0
 800685e:	bd10      	pop	{r4, pc}
 8006860:	4603      	mov	r3, r0
 8006862:	e7f7      	b.n	8006854 <__any_on+0x26>
 8006864:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006868:	2900      	cmp	r1, #0
 800686a:	d0f5      	beq.n	8006858 <__any_on+0x2a>
 800686c:	2001      	movs	r0, #1
 800686e:	e7f6      	b.n	800685e <__any_on+0x30>

08006870 <_calloc_r>:
 8006870:	b570      	push	{r4, r5, r6, lr}
 8006872:	fba1 5402 	umull	r5, r4, r1, r2
 8006876:	b934      	cbnz	r4, 8006886 <_calloc_r+0x16>
 8006878:	4629      	mov	r1, r5
 800687a:	f000 f875 	bl	8006968 <_malloc_r>
 800687e:	4606      	mov	r6, r0
 8006880:	b928      	cbnz	r0, 800688e <_calloc_r+0x1e>
 8006882:	4630      	mov	r0, r6
 8006884:	bd70      	pop	{r4, r5, r6, pc}
 8006886:	220c      	movs	r2, #12
 8006888:	2600      	movs	r6, #0
 800688a:	6002      	str	r2, [r0, #0]
 800688c:	e7f9      	b.n	8006882 <_calloc_r+0x12>
 800688e:	462a      	mov	r2, r5
 8006890:	4621      	mov	r1, r4
 8006892:	f7fc fae1 	bl	8002e58 <memset>
 8006896:	e7f4      	b.n	8006882 <_calloc_r+0x12>

08006898 <_free_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	4605      	mov	r5, r0
 800689c:	2900      	cmp	r1, #0
 800689e:	d040      	beq.n	8006922 <_free_r+0x8a>
 80068a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068a4:	1f0c      	subs	r4, r1, #4
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	bfb8      	it	lt
 80068aa:	18e4      	addlt	r4, r4, r3
 80068ac:	f000 fe62 	bl	8007574 <__malloc_lock>
 80068b0:	4a1c      	ldr	r2, [pc, #112]	; (8006924 <_free_r+0x8c>)
 80068b2:	6813      	ldr	r3, [r2, #0]
 80068b4:	b933      	cbnz	r3, 80068c4 <_free_r+0x2c>
 80068b6:	6063      	str	r3, [r4, #4]
 80068b8:	6014      	str	r4, [r2, #0]
 80068ba:	4628      	mov	r0, r5
 80068bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068c0:	f000 be5e 	b.w	8007580 <__malloc_unlock>
 80068c4:	42a3      	cmp	r3, r4
 80068c6:	d908      	bls.n	80068da <_free_r+0x42>
 80068c8:	6820      	ldr	r0, [r4, #0]
 80068ca:	1821      	adds	r1, r4, r0
 80068cc:	428b      	cmp	r3, r1
 80068ce:	bf01      	itttt	eq
 80068d0:	6819      	ldreq	r1, [r3, #0]
 80068d2:	685b      	ldreq	r3, [r3, #4]
 80068d4:	1809      	addeq	r1, r1, r0
 80068d6:	6021      	streq	r1, [r4, #0]
 80068d8:	e7ed      	b.n	80068b6 <_free_r+0x1e>
 80068da:	461a      	mov	r2, r3
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	b10b      	cbz	r3, 80068e4 <_free_r+0x4c>
 80068e0:	42a3      	cmp	r3, r4
 80068e2:	d9fa      	bls.n	80068da <_free_r+0x42>
 80068e4:	6811      	ldr	r1, [r2, #0]
 80068e6:	1850      	adds	r0, r2, r1
 80068e8:	42a0      	cmp	r0, r4
 80068ea:	d10b      	bne.n	8006904 <_free_r+0x6c>
 80068ec:	6820      	ldr	r0, [r4, #0]
 80068ee:	4401      	add	r1, r0
 80068f0:	1850      	adds	r0, r2, r1
 80068f2:	4283      	cmp	r3, r0
 80068f4:	6011      	str	r1, [r2, #0]
 80068f6:	d1e0      	bne.n	80068ba <_free_r+0x22>
 80068f8:	6818      	ldr	r0, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	4401      	add	r1, r0
 80068fe:	6011      	str	r1, [r2, #0]
 8006900:	6053      	str	r3, [r2, #4]
 8006902:	e7da      	b.n	80068ba <_free_r+0x22>
 8006904:	d902      	bls.n	800690c <_free_r+0x74>
 8006906:	230c      	movs	r3, #12
 8006908:	602b      	str	r3, [r5, #0]
 800690a:	e7d6      	b.n	80068ba <_free_r+0x22>
 800690c:	6820      	ldr	r0, [r4, #0]
 800690e:	1821      	adds	r1, r4, r0
 8006910:	428b      	cmp	r3, r1
 8006912:	bf01      	itttt	eq
 8006914:	6819      	ldreq	r1, [r3, #0]
 8006916:	685b      	ldreq	r3, [r3, #4]
 8006918:	1809      	addeq	r1, r1, r0
 800691a:	6021      	streq	r1, [r4, #0]
 800691c:	6063      	str	r3, [r4, #4]
 800691e:	6054      	str	r4, [r2, #4]
 8006920:	e7cb      	b.n	80068ba <_free_r+0x22>
 8006922:	bd38      	pop	{r3, r4, r5, pc}
 8006924:	20000284 	.word	0x20000284

08006928 <sbrk_aligned>:
 8006928:	b570      	push	{r4, r5, r6, lr}
 800692a:	4e0e      	ldr	r6, [pc, #56]	; (8006964 <sbrk_aligned+0x3c>)
 800692c:	460c      	mov	r4, r1
 800692e:	6831      	ldr	r1, [r6, #0]
 8006930:	4605      	mov	r5, r0
 8006932:	b911      	cbnz	r1, 800693a <sbrk_aligned+0x12>
 8006934:	f000 fb46 	bl	8006fc4 <_sbrk_r>
 8006938:	6030      	str	r0, [r6, #0]
 800693a:	4621      	mov	r1, r4
 800693c:	4628      	mov	r0, r5
 800693e:	f000 fb41 	bl	8006fc4 <_sbrk_r>
 8006942:	1c43      	adds	r3, r0, #1
 8006944:	d00a      	beq.n	800695c <sbrk_aligned+0x34>
 8006946:	1cc4      	adds	r4, r0, #3
 8006948:	f024 0403 	bic.w	r4, r4, #3
 800694c:	42a0      	cmp	r0, r4
 800694e:	d007      	beq.n	8006960 <sbrk_aligned+0x38>
 8006950:	1a21      	subs	r1, r4, r0
 8006952:	4628      	mov	r0, r5
 8006954:	f000 fb36 	bl	8006fc4 <_sbrk_r>
 8006958:	3001      	adds	r0, #1
 800695a:	d101      	bne.n	8006960 <sbrk_aligned+0x38>
 800695c:	f04f 34ff 	mov.w	r4, #4294967295
 8006960:	4620      	mov	r0, r4
 8006962:	bd70      	pop	{r4, r5, r6, pc}
 8006964:	20000288 	.word	0x20000288

08006968 <_malloc_r>:
 8006968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800696c:	1ccd      	adds	r5, r1, #3
 800696e:	f025 0503 	bic.w	r5, r5, #3
 8006972:	3508      	adds	r5, #8
 8006974:	2d0c      	cmp	r5, #12
 8006976:	bf38      	it	cc
 8006978:	250c      	movcc	r5, #12
 800697a:	2d00      	cmp	r5, #0
 800697c:	4607      	mov	r7, r0
 800697e:	db01      	blt.n	8006984 <_malloc_r+0x1c>
 8006980:	42a9      	cmp	r1, r5
 8006982:	d905      	bls.n	8006990 <_malloc_r+0x28>
 8006984:	230c      	movs	r3, #12
 8006986:	2600      	movs	r6, #0
 8006988:	603b      	str	r3, [r7, #0]
 800698a:	4630      	mov	r0, r6
 800698c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006990:	4e2e      	ldr	r6, [pc, #184]	; (8006a4c <_malloc_r+0xe4>)
 8006992:	f000 fdef 	bl	8007574 <__malloc_lock>
 8006996:	6833      	ldr	r3, [r6, #0]
 8006998:	461c      	mov	r4, r3
 800699a:	bb34      	cbnz	r4, 80069ea <_malloc_r+0x82>
 800699c:	4629      	mov	r1, r5
 800699e:	4638      	mov	r0, r7
 80069a0:	f7ff ffc2 	bl	8006928 <sbrk_aligned>
 80069a4:	1c43      	adds	r3, r0, #1
 80069a6:	4604      	mov	r4, r0
 80069a8:	d14d      	bne.n	8006a46 <_malloc_r+0xde>
 80069aa:	6834      	ldr	r4, [r6, #0]
 80069ac:	4626      	mov	r6, r4
 80069ae:	2e00      	cmp	r6, #0
 80069b0:	d140      	bne.n	8006a34 <_malloc_r+0xcc>
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	4631      	mov	r1, r6
 80069b6:	4638      	mov	r0, r7
 80069b8:	eb04 0803 	add.w	r8, r4, r3
 80069bc:	f000 fb02 	bl	8006fc4 <_sbrk_r>
 80069c0:	4580      	cmp	r8, r0
 80069c2:	d13a      	bne.n	8006a3a <_malloc_r+0xd2>
 80069c4:	6821      	ldr	r1, [r4, #0]
 80069c6:	3503      	adds	r5, #3
 80069c8:	1a6d      	subs	r5, r5, r1
 80069ca:	f025 0503 	bic.w	r5, r5, #3
 80069ce:	3508      	adds	r5, #8
 80069d0:	2d0c      	cmp	r5, #12
 80069d2:	bf38      	it	cc
 80069d4:	250c      	movcc	r5, #12
 80069d6:	4638      	mov	r0, r7
 80069d8:	4629      	mov	r1, r5
 80069da:	f7ff ffa5 	bl	8006928 <sbrk_aligned>
 80069de:	3001      	adds	r0, #1
 80069e0:	d02b      	beq.n	8006a3a <_malloc_r+0xd2>
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	442b      	add	r3, r5
 80069e6:	6023      	str	r3, [r4, #0]
 80069e8:	e00e      	b.n	8006a08 <_malloc_r+0xa0>
 80069ea:	6822      	ldr	r2, [r4, #0]
 80069ec:	1b52      	subs	r2, r2, r5
 80069ee:	d41e      	bmi.n	8006a2e <_malloc_r+0xc6>
 80069f0:	2a0b      	cmp	r2, #11
 80069f2:	d916      	bls.n	8006a22 <_malloc_r+0xba>
 80069f4:	1961      	adds	r1, r4, r5
 80069f6:	42a3      	cmp	r3, r4
 80069f8:	6025      	str	r5, [r4, #0]
 80069fa:	bf18      	it	ne
 80069fc:	6059      	strne	r1, [r3, #4]
 80069fe:	6863      	ldr	r3, [r4, #4]
 8006a00:	bf08      	it	eq
 8006a02:	6031      	streq	r1, [r6, #0]
 8006a04:	5162      	str	r2, [r4, r5]
 8006a06:	604b      	str	r3, [r1, #4]
 8006a08:	4638      	mov	r0, r7
 8006a0a:	f104 060b 	add.w	r6, r4, #11
 8006a0e:	f000 fdb7 	bl	8007580 <__malloc_unlock>
 8006a12:	f026 0607 	bic.w	r6, r6, #7
 8006a16:	1d23      	adds	r3, r4, #4
 8006a18:	1af2      	subs	r2, r6, r3
 8006a1a:	d0b6      	beq.n	800698a <_malloc_r+0x22>
 8006a1c:	1b9b      	subs	r3, r3, r6
 8006a1e:	50a3      	str	r3, [r4, r2]
 8006a20:	e7b3      	b.n	800698a <_malloc_r+0x22>
 8006a22:	6862      	ldr	r2, [r4, #4]
 8006a24:	42a3      	cmp	r3, r4
 8006a26:	bf0c      	ite	eq
 8006a28:	6032      	streq	r2, [r6, #0]
 8006a2a:	605a      	strne	r2, [r3, #4]
 8006a2c:	e7ec      	b.n	8006a08 <_malloc_r+0xa0>
 8006a2e:	4623      	mov	r3, r4
 8006a30:	6864      	ldr	r4, [r4, #4]
 8006a32:	e7b2      	b.n	800699a <_malloc_r+0x32>
 8006a34:	4634      	mov	r4, r6
 8006a36:	6876      	ldr	r6, [r6, #4]
 8006a38:	e7b9      	b.n	80069ae <_malloc_r+0x46>
 8006a3a:	230c      	movs	r3, #12
 8006a3c:	4638      	mov	r0, r7
 8006a3e:	603b      	str	r3, [r7, #0]
 8006a40:	f000 fd9e 	bl	8007580 <__malloc_unlock>
 8006a44:	e7a1      	b.n	800698a <_malloc_r+0x22>
 8006a46:	6025      	str	r5, [r4, #0]
 8006a48:	e7de      	b.n	8006a08 <_malloc_r+0xa0>
 8006a4a:	bf00      	nop
 8006a4c:	20000284 	.word	0x20000284

08006a50 <__ssputs_r>:
 8006a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a54:	688e      	ldr	r6, [r1, #8]
 8006a56:	4682      	mov	sl, r0
 8006a58:	429e      	cmp	r6, r3
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	4690      	mov	r8, r2
 8006a5e:	461f      	mov	r7, r3
 8006a60:	d838      	bhi.n	8006ad4 <__ssputs_r+0x84>
 8006a62:	898a      	ldrh	r2, [r1, #12]
 8006a64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a68:	d032      	beq.n	8006ad0 <__ssputs_r+0x80>
 8006a6a:	6825      	ldr	r5, [r4, #0]
 8006a6c:	6909      	ldr	r1, [r1, #16]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	eba5 0901 	sub.w	r9, r5, r1
 8006a74:	6965      	ldr	r5, [r4, #20]
 8006a76:	444b      	add	r3, r9
 8006a78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a80:	106d      	asrs	r5, r5, #1
 8006a82:	429d      	cmp	r5, r3
 8006a84:	bf38      	it	cc
 8006a86:	461d      	movcc	r5, r3
 8006a88:	0553      	lsls	r3, r2, #21
 8006a8a:	d531      	bpl.n	8006af0 <__ssputs_r+0xa0>
 8006a8c:	4629      	mov	r1, r5
 8006a8e:	f7ff ff6b 	bl	8006968 <_malloc_r>
 8006a92:	4606      	mov	r6, r0
 8006a94:	b950      	cbnz	r0, 8006aac <__ssputs_r+0x5c>
 8006a96:	230c      	movs	r3, #12
 8006a98:	f04f 30ff 	mov.w	r0, #4294967295
 8006a9c:	f8ca 3000 	str.w	r3, [sl]
 8006aa0:	89a3      	ldrh	r3, [r4, #12]
 8006aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aa6:	81a3      	strh	r3, [r4, #12]
 8006aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aac:	464a      	mov	r2, r9
 8006aae:	6921      	ldr	r1, [r4, #16]
 8006ab0:	f7ff fa18 	bl	8005ee4 <memcpy>
 8006ab4:	89a3      	ldrh	r3, [r4, #12]
 8006ab6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006abe:	81a3      	strh	r3, [r4, #12]
 8006ac0:	6126      	str	r6, [r4, #16]
 8006ac2:	444e      	add	r6, r9
 8006ac4:	6026      	str	r6, [r4, #0]
 8006ac6:	463e      	mov	r6, r7
 8006ac8:	6165      	str	r5, [r4, #20]
 8006aca:	eba5 0509 	sub.w	r5, r5, r9
 8006ace:	60a5      	str	r5, [r4, #8]
 8006ad0:	42be      	cmp	r6, r7
 8006ad2:	d900      	bls.n	8006ad6 <__ssputs_r+0x86>
 8006ad4:	463e      	mov	r6, r7
 8006ad6:	4632      	mov	r2, r6
 8006ad8:	4641      	mov	r1, r8
 8006ada:	6820      	ldr	r0, [r4, #0]
 8006adc:	f000 fd30 	bl	8007540 <memmove>
 8006ae0:	68a3      	ldr	r3, [r4, #8]
 8006ae2:	2000      	movs	r0, #0
 8006ae4:	1b9b      	subs	r3, r3, r6
 8006ae6:	60a3      	str	r3, [r4, #8]
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	4433      	add	r3, r6
 8006aec:	6023      	str	r3, [r4, #0]
 8006aee:	e7db      	b.n	8006aa8 <__ssputs_r+0x58>
 8006af0:	462a      	mov	r2, r5
 8006af2:	f000 fd4b 	bl	800758c <_realloc_r>
 8006af6:	4606      	mov	r6, r0
 8006af8:	2800      	cmp	r0, #0
 8006afa:	d1e1      	bne.n	8006ac0 <__ssputs_r+0x70>
 8006afc:	4650      	mov	r0, sl
 8006afe:	6921      	ldr	r1, [r4, #16]
 8006b00:	f7ff feca 	bl	8006898 <_free_r>
 8006b04:	e7c7      	b.n	8006a96 <__ssputs_r+0x46>
	...

08006b08 <_svfiprintf_r>:
 8006b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0c:	4698      	mov	r8, r3
 8006b0e:	898b      	ldrh	r3, [r1, #12]
 8006b10:	4607      	mov	r7, r0
 8006b12:	061b      	lsls	r3, r3, #24
 8006b14:	460d      	mov	r5, r1
 8006b16:	4614      	mov	r4, r2
 8006b18:	b09d      	sub	sp, #116	; 0x74
 8006b1a:	d50e      	bpl.n	8006b3a <_svfiprintf_r+0x32>
 8006b1c:	690b      	ldr	r3, [r1, #16]
 8006b1e:	b963      	cbnz	r3, 8006b3a <_svfiprintf_r+0x32>
 8006b20:	2140      	movs	r1, #64	; 0x40
 8006b22:	f7ff ff21 	bl	8006968 <_malloc_r>
 8006b26:	6028      	str	r0, [r5, #0]
 8006b28:	6128      	str	r0, [r5, #16]
 8006b2a:	b920      	cbnz	r0, 8006b36 <_svfiprintf_r+0x2e>
 8006b2c:	230c      	movs	r3, #12
 8006b2e:	603b      	str	r3, [r7, #0]
 8006b30:	f04f 30ff 	mov.w	r0, #4294967295
 8006b34:	e0d1      	b.n	8006cda <_svfiprintf_r+0x1d2>
 8006b36:	2340      	movs	r3, #64	; 0x40
 8006b38:	616b      	str	r3, [r5, #20]
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b3e:	2320      	movs	r3, #32
 8006b40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b44:	2330      	movs	r3, #48	; 0x30
 8006b46:	f04f 0901 	mov.w	r9, #1
 8006b4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b4e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006cf4 <_svfiprintf_r+0x1ec>
 8006b52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b56:	4623      	mov	r3, r4
 8006b58:	469a      	mov	sl, r3
 8006b5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b5e:	b10a      	cbz	r2, 8006b64 <_svfiprintf_r+0x5c>
 8006b60:	2a25      	cmp	r2, #37	; 0x25
 8006b62:	d1f9      	bne.n	8006b58 <_svfiprintf_r+0x50>
 8006b64:	ebba 0b04 	subs.w	fp, sl, r4
 8006b68:	d00b      	beq.n	8006b82 <_svfiprintf_r+0x7a>
 8006b6a:	465b      	mov	r3, fp
 8006b6c:	4622      	mov	r2, r4
 8006b6e:	4629      	mov	r1, r5
 8006b70:	4638      	mov	r0, r7
 8006b72:	f7ff ff6d 	bl	8006a50 <__ssputs_r>
 8006b76:	3001      	adds	r0, #1
 8006b78:	f000 80aa 	beq.w	8006cd0 <_svfiprintf_r+0x1c8>
 8006b7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b7e:	445a      	add	r2, fp
 8006b80:	9209      	str	r2, [sp, #36]	; 0x24
 8006b82:	f89a 3000 	ldrb.w	r3, [sl]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f000 80a2 	beq.w	8006cd0 <_svfiprintf_r+0x1c8>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b96:	f10a 0a01 	add.w	sl, sl, #1
 8006b9a:	9304      	str	r3, [sp, #16]
 8006b9c:	9307      	str	r3, [sp, #28]
 8006b9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ba2:	931a      	str	r3, [sp, #104]	; 0x68
 8006ba4:	4654      	mov	r4, sl
 8006ba6:	2205      	movs	r2, #5
 8006ba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bac:	4851      	ldr	r0, [pc, #324]	; (8006cf4 <_svfiprintf_r+0x1ec>)
 8006bae:	f7ff f98b 	bl	8005ec8 <memchr>
 8006bb2:	9a04      	ldr	r2, [sp, #16]
 8006bb4:	b9d8      	cbnz	r0, 8006bee <_svfiprintf_r+0xe6>
 8006bb6:	06d0      	lsls	r0, r2, #27
 8006bb8:	bf44      	itt	mi
 8006bba:	2320      	movmi	r3, #32
 8006bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bc0:	0711      	lsls	r1, r2, #28
 8006bc2:	bf44      	itt	mi
 8006bc4:	232b      	movmi	r3, #43	; 0x2b
 8006bc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bca:	f89a 3000 	ldrb.w	r3, [sl]
 8006bce:	2b2a      	cmp	r3, #42	; 0x2a
 8006bd0:	d015      	beq.n	8006bfe <_svfiprintf_r+0xf6>
 8006bd2:	4654      	mov	r4, sl
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	f04f 0c0a 	mov.w	ip, #10
 8006bda:	9a07      	ldr	r2, [sp, #28]
 8006bdc:	4621      	mov	r1, r4
 8006bde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006be2:	3b30      	subs	r3, #48	; 0x30
 8006be4:	2b09      	cmp	r3, #9
 8006be6:	d94e      	bls.n	8006c86 <_svfiprintf_r+0x17e>
 8006be8:	b1b0      	cbz	r0, 8006c18 <_svfiprintf_r+0x110>
 8006bea:	9207      	str	r2, [sp, #28]
 8006bec:	e014      	b.n	8006c18 <_svfiprintf_r+0x110>
 8006bee:	eba0 0308 	sub.w	r3, r0, r8
 8006bf2:	fa09 f303 	lsl.w	r3, r9, r3
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	46a2      	mov	sl, r4
 8006bfa:	9304      	str	r3, [sp, #16]
 8006bfc:	e7d2      	b.n	8006ba4 <_svfiprintf_r+0x9c>
 8006bfe:	9b03      	ldr	r3, [sp, #12]
 8006c00:	1d19      	adds	r1, r3, #4
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	9103      	str	r1, [sp, #12]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	bfbb      	ittet	lt
 8006c0a:	425b      	neglt	r3, r3
 8006c0c:	f042 0202 	orrlt.w	r2, r2, #2
 8006c10:	9307      	strge	r3, [sp, #28]
 8006c12:	9307      	strlt	r3, [sp, #28]
 8006c14:	bfb8      	it	lt
 8006c16:	9204      	strlt	r2, [sp, #16]
 8006c18:	7823      	ldrb	r3, [r4, #0]
 8006c1a:	2b2e      	cmp	r3, #46	; 0x2e
 8006c1c:	d10c      	bne.n	8006c38 <_svfiprintf_r+0x130>
 8006c1e:	7863      	ldrb	r3, [r4, #1]
 8006c20:	2b2a      	cmp	r3, #42	; 0x2a
 8006c22:	d135      	bne.n	8006c90 <_svfiprintf_r+0x188>
 8006c24:	9b03      	ldr	r3, [sp, #12]
 8006c26:	3402      	adds	r4, #2
 8006c28:	1d1a      	adds	r2, r3, #4
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	9203      	str	r2, [sp, #12]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	bfb8      	it	lt
 8006c32:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c36:	9305      	str	r3, [sp, #20]
 8006c38:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006cf8 <_svfiprintf_r+0x1f0>
 8006c3c:	2203      	movs	r2, #3
 8006c3e:	4650      	mov	r0, sl
 8006c40:	7821      	ldrb	r1, [r4, #0]
 8006c42:	f7ff f941 	bl	8005ec8 <memchr>
 8006c46:	b140      	cbz	r0, 8006c5a <_svfiprintf_r+0x152>
 8006c48:	2340      	movs	r3, #64	; 0x40
 8006c4a:	eba0 000a 	sub.w	r0, r0, sl
 8006c4e:	fa03 f000 	lsl.w	r0, r3, r0
 8006c52:	9b04      	ldr	r3, [sp, #16]
 8006c54:	3401      	adds	r4, #1
 8006c56:	4303      	orrs	r3, r0
 8006c58:	9304      	str	r3, [sp, #16]
 8006c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c5e:	2206      	movs	r2, #6
 8006c60:	4826      	ldr	r0, [pc, #152]	; (8006cfc <_svfiprintf_r+0x1f4>)
 8006c62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c66:	f7ff f92f 	bl	8005ec8 <memchr>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	d038      	beq.n	8006ce0 <_svfiprintf_r+0x1d8>
 8006c6e:	4b24      	ldr	r3, [pc, #144]	; (8006d00 <_svfiprintf_r+0x1f8>)
 8006c70:	bb1b      	cbnz	r3, 8006cba <_svfiprintf_r+0x1b2>
 8006c72:	9b03      	ldr	r3, [sp, #12]
 8006c74:	3307      	adds	r3, #7
 8006c76:	f023 0307 	bic.w	r3, r3, #7
 8006c7a:	3308      	adds	r3, #8
 8006c7c:	9303      	str	r3, [sp, #12]
 8006c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c80:	4433      	add	r3, r6
 8006c82:	9309      	str	r3, [sp, #36]	; 0x24
 8006c84:	e767      	b.n	8006b56 <_svfiprintf_r+0x4e>
 8006c86:	460c      	mov	r4, r1
 8006c88:	2001      	movs	r0, #1
 8006c8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c8e:	e7a5      	b.n	8006bdc <_svfiprintf_r+0xd4>
 8006c90:	2300      	movs	r3, #0
 8006c92:	f04f 0c0a 	mov.w	ip, #10
 8006c96:	4619      	mov	r1, r3
 8006c98:	3401      	adds	r4, #1
 8006c9a:	9305      	str	r3, [sp, #20]
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ca2:	3a30      	subs	r2, #48	; 0x30
 8006ca4:	2a09      	cmp	r2, #9
 8006ca6:	d903      	bls.n	8006cb0 <_svfiprintf_r+0x1a8>
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d0c5      	beq.n	8006c38 <_svfiprintf_r+0x130>
 8006cac:	9105      	str	r1, [sp, #20]
 8006cae:	e7c3      	b.n	8006c38 <_svfiprintf_r+0x130>
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cb8:	e7f0      	b.n	8006c9c <_svfiprintf_r+0x194>
 8006cba:	ab03      	add	r3, sp, #12
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	462a      	mov	r2, r5
 8006cc0:	4638      	mov	r0, r7
 8006cc2:	4b10      	ldr	r3, [pc, #64]	; (8006d04 <_svfiprintf_r+0x1fc>)
 8006cc4:	a904      	add	r1, sp, #16
 8006cc6:	f7fc f96d 	bl	8002fa4 <_printf_float>
 8006cca:	1c42      	adds	r2, r0, #1
 8006ccc:	4606      	mov	r6, r0
 8006cce:	d1d6      	bne.n	8006c7e <_svfiprintf_r+0x176>
 8006cd0:	89ab      	ldrh	r3, [r5, #12]
 8006cd2:	065b      	lsls	r3, r3, #25
 8006cd4:	f53f af2c 	bmi.w	8006b30 <_svfiprintf_r+0x28>
 8006cd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cda:	b01d      	add	sp, #116	; 0x74
 8006cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce0:	ab03      	add	r3, sp, #12
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	462a      	mov	r2, r5
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	4b06      	ldr	r3, [pc, #24]	; (8006d04 <_svfiprintf_r+0x1fc>)
 8006cea:	a904      	add	r1, sp, #16
 8006cec:	f7fc fbf6 	bl	80034dc <_printf_i>
 8006cf0:	e7eb      	b.n	8006cca <_svfiprintf_r+0x1c2>
 8006cf2:	bf00      	nop
 8006cf4:	08007bbc 	.word	0x08007bbc
 8006cf8:	08007bc2 	.word	0x08007bc2
 8006cfc:	08007bc6 	.word	0x08007bc6
 8006d00:	08002fa5 	.word	0x08002fa5
 8006d04:	08006a51 	.word	0x08006a51

08006d08 <__sfputc_r>:
 8006d08:	6893      	ldr	r3, [r2, #8]
 8006d0a:	b410      	push	{r4}
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	6093      	str	r3, [r2, #8]
 8006d12:	da07      	bge.n	8006d24 <__sfputc_r+0x1c>
 8006d14:	6994      	ldr	r4, [r2, #24]
 8006d16:	42a3      	cmp	r3, r4
 8006d18:	db01      	blt.n	8006d1e <__sfputc_r+0x16>
 8006d1a:	290a      	cmp	r1, #10
 8006d1c:	d102      	bne.n	8006d24 <__sfputc_r+0x1c>
 8006d1e:	bc10      	pop	{r4}
 8006d20:	f000 b9b8 	b.w	8007094 <__swbuf_r>
 8006d24:	6813      	ldr	r3, [r2, #0]
 8006d26:	1c58      	adds	r0, r3, #1
 8006d28:	6010      	str	r0, [r2, #0]
 8006d2a:	7019      	strb	r1, [r3, #0]
 8006d2c:	4608      	mov	r0, r1
 8006d2e:	bc10      	pop	{r4}
 8006d30:	4770      	bx	lr

08006d32 <__sfputs_r>:
 8006d32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d34:	4606      	mov	r6, r0
 8006d36:	460f      	mov	r7, r1
 8006d38:	4614      	mov	r4, r2
 8006d3a:	18d5      	adds	r5, r2, r3
 8006d3c:	42ac      	cmp	r4, r5
 8006d3e:	d101      	bne.n	8006d44 <__sfputs_r+0x12>
 8006d40:	2000      	movs	r0, #0
 8006d42:	e007      	b.n	8006d54 <__sfputs_r+0x22>
 8006d44:	463a      	mov	r2, r7
 8006d46:	4630      	mov	r0, r6
 8006d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d4c:	f7ff ffdc 	bl	8006d08 <__sfputc_r>
 8006d50:	1c43      	adds	r3, r0, #1
 8006d52:	d1f3      	bne.n	8006d3c <__sfputs_r+0xa>
 8006d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d58 <_vfiprintf_r>:
 8006d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d5c:	460d      	mov	r5, r1
 8006d5e:	4614      	mov	r4, r2
 8006d60:	4698      	mov	r8, r3
 8006d62:	4606      	mov	r6, r0
 8006d64:	b09d      	sub	sp, #116	; 0x74
 8006d66:	b118      	cbz	r0, 8006d70 <_vfiprintf_r+0x18>
 8006d68:	6983      	ldr	r3, [r0, #24]
 8006d6a:	b90b      	cbnz	r3, 8006d70 <_vfiprintf_r+0x18>
 8006d6c:	f7fe fc86 	bl	800567c <__sinit>
 8006d70:	4b89      	ldr	r3, [pc, #548]	; (8006f98 <_vfiprintf_r+0x240>)
 8006d72:	429d      	cmp	r5, r3
 8006d74:	d11b      	bne.n	8006dae <_vfiprintf_r+0x56>
 8006d76:	6875      	ldr	r5, [r6, #4]
 8006d78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d7a:	07d9      	lsls	r1, r3, #31
 8006d7c:	d405      	bmi.n	8006d8a <_vfiprintf_r+0x32>
 8006d7e:	89ab      	ldrh	r3, [r5, #12]
 8006d80:	059a      	lsls	r2, r3, #22
 8006d82:	d402      	bmi.n	8006d8a <_vfiprintf_r+0x32>
 8006d84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d86:	f7ff f882 	bl	8005e8e <__retarget_lock_acquire_recursive>
 8006d8a:	89ab      	ldrh	r3, [r5, #12]
 8006d8c:	071b      	lsls	r3, r3, #28
 8006d8e:	d501      	bpl.n	8006d94 <_vfiprintf_r+0x3c>
 8006d90:	692b      	ldr	r3, [r5, #16]
 8006d92:	b9eb      	cbnz	r3, 8006dd0 <_vfiprintf_r+0x78>
 8006d94:	4629      	mov	r1, r5
 8006d96:	4630      	mov	r0, r6
 8006d98:	f000 f9ee 	bl	8007178 <__swsetup_r>
 8006d9c:	b1c0      	cbz	r0, 8006dd0 <_vfiprintf_r+0x78>
 8006d9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006da0:	07dc      	lsls	r4, r3, #31
 8006da2:	d50e      	bpl.n	8006dc2 <_vfiprintf_r+0x6a>
 8006da4:	f04f 30ff 	mov.w	r0, #4294967295
 8006da8:	b01d      	add	sp, #116	; 0x74
 8006daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dae:	4b7b      	ldr	r3, [pc, #492]	; (8006f9c <_vfiprintf_r+0x244>)
 8006db0:	429d      	cmp	r5, r3
 8006db2:	d101      	bne.n	8006db8 <_vfiprintf_r+0x60>
 8006db4:	68b5      	ldr	r5, [r6, #8]
 8006db6:	e7df      	b.n	8006d78 <_vfiprintf_r+0x20>
 8006db8:	4b79      	ldr	r3, [pc, #484]	; (8006fa0 <_vfiprintf_r+0x248>)
 8006dba:	429d      	cmp	r5, r3
 8006dbc:	bf08      	it	eq
 8006dbe:	68f5      	ldreq	r5, [r6, #12]
 8006dc0:	e7da      	b.n	8006d78 <_vfiprintf_r+0x20>
 8006dc2:	89ab      	ldrh	r3, [r5, #12]
 8006dc4:	0598      	lsls	r0, r3, #22
 8006dc6:	d4ed      	bmi.n	8006da4 <_vfiprintf_r+0x4c>
 8006dc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dca:	f7ff f861 	bl	8005e90 <__retarget_lock_release_recursive>
 8006dce:	e7e9      	b.n	8006da4 <_vfiprintf_r+0x4c>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd4:	2320      	movs	r3, #32
 8006dd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006dda:	2330      	movs	r3, #48	; 0x30
 8006ddc:	f04f 0901 	mov.w	r9, #1
 8006de0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006de4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006fa4 <_vfiprintf_r+0x24c>
 8006de8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dec:	4623      	mov	r3, r4
 8006dee:	469a      	mov	sl, r3
 8006df0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006df4:	b10a      	cbz	r2, 8006dfa <_vfiprintf_r+0xa2>
 8006df6:	2a25      	cmp	r2, #37	; 0x25
 8006df8:	d1f9      	bne.n	8006dee <_vfiprintf_r+0x96>
 8006dfa:	ebba 0b04 	subs.w	fp, sl, r4
 8006dfe:	d00b      	beq.n	8006e18 <_vfiprintf_r+0xc0>
 8006e00:	465b      	mov	r3, fp
 8006e02:	4622      	mov	r2, r4
 8006e04:	4629      	mov	r1, r5
 8006e06:	4630      	mov	r0, r6
 8006e08:	f7ff ff93 	bl	8006d32 <__sfputs_r>
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	f000 80aa 	beq.w	8006f66 <_vfiprintf_r+0x20e>
 8006e12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e14:	445a      	add	r2, fp
 8006e16:	9209      	str	r2, [sp, #36]	; 0x24
 8006e18:	f89a 3000 	ldrb.w	r3, [sl]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f000 80a2 	beq.w	8006f66 <_vfiprintf_r+0x20e>
 8006e22:	2300      	movs	r3, #0
 8006e24:	f04f 32ff 	mov.w	r2, #4294967295
 8006e28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e2c:	f10a 0a01 	add.w	sl, sl, #1
 8006e30:	9304      	str	r3, [sp, #16]
 8006e32:	9307      	str	r3, [sp, #28]
 8006e34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e38:	931a      	str	r3, [sp, #104]	; 0x68
 8006e3a:	4654      	mov	r4, sl
 8006e3c:	2205      	movs	r2, #5
 8006e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e42:	4858      	ldr	r0, [pc, #352]	; (8006fa4 <_vfiprintf_r+0x24c>)
 8006e44:	f7ff f840 	bl	8005ec8 <memchr>
 8006e48:	9a04      	ldr	r2, [sp, #16]
 8006e4a:	b9d8      	cbnz	r0, 8006e84 <_vfiprintf_r+0x12c>
 8006e4c:	06d1      	lsls	r1, r2, #27
 8006e4e:	bf44      	itt	mi
 8006e50:	2320      	movmi	r3, #32
 8006e52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e56:	0713      	lsls	r3, r2, #28
 8006e58:	bf44      	itt	mi
 8006e5a:	232b      	movmi	r3, #43	; 0x2b
 8006e5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e60:	f89a 3000 	ldrb.w	r3, [sl]
 8006e64:	2b2a      	cmp	r3, #42	; 0x2a
 8006e66:	d015      	beq.n	8006e94 <_vfiprintf_r+0x13c>
 8006e68:	4654      	mov	r4, sl
 8006e6a:	2000      	movs	r0, #0
 8006e6c:	f04f 0c0a 	mov.w	ip, #10
 8006e70:	9a07      	ldr	r2, [sp, #28]
 8006e72:	4621      	mov	r1, r4
 8006e74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e78:	3b30      	subs	r3, #48	; 0x30
 8006e7a:	2b09      	cmp	r3, #9
 8006e7c:	d94e      	bls.n	8006f1c <_vfiprintf_r+0x1c4>
 8006e7e:	b1b0      	cbz	r0, 8006eae <_vfiprintf_r+0x156>
 8006e80:	9207      	str	r2, [sp, #28]
 8006e82:	e014      	b.n	8006eae <_vfiprintf_r+0x156>
 8006e84:	eba0 0308 	sub.w	r3, r0, r8
 8006e88:	fa09 f303 	lsl.w	r3, r9, r3
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	46a2      	mov	sl, r4
 8006e90:	9304      	str	r3, [sp, #16]
 8006e92:	e7d2      	b.n	8006e3a <_vfiprintf_r+0xe2>
 8006e94:	9b03      	ldr	r3, [sp, #12]
 8006e96:	1d19      	adds	r1, r3, #4
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	9103      	str	r1, [sp, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	bfbb      	ittet	lt
 8006ea0:	425b      	neglt	r3, r3
 8006ea2:	f042 0202 	orrlt.w	r2, r2, #2
 8006ea6:	9307      	strge	r3, [sp, #28]
 8006ea8:	9307      	strlt	r3, [sp, #28]
 8006eaa:	bfb8      	it	lt
 8006eac:	9204      	strlt	r2, [sp, #16]
 8006eae:	7823      	ldrb	r3, [r4, #0]
 8006eb0:	2b2e      	cmp	r3, #46	; 0x2e
 8006eb2:	d10c      	bne.n	8006ece <_vfiprintf_r+0x176>
 8006eb4:	7863      	ldrb	r3, [r4, #1]
 8006eb6:	2b2a      	cmp	r3, #42	; 0x2a
 8006eb8:	d135      	bne.n	8006f26 <_vfiprintf_r+0x1ce>
 8006eba:	9b03      	ldr	r3, [sp, #12]
 8006ebc:	3402      	adds	r4, #2
 8006ebe:	1d1a      	adds	r2, r3, #4
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	9203      	str	r2, [sp, #12]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	bfb8      	it	lt
 8006ec8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ecc:	9305      	str	r3, [sp, #20]
 8006ece:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006fa8 <_vfiprintf_r+0x250>
 8006ed2:	2203      	movs	r2, #3
 8006ed4:	4650      	mov	r0, sl
 8006ed6:	7821      	ldrb	r1, [r4, #0]
 8006ed8:	f7fe fff6 	bl	8005ec8 <memchr>
 8006edc:	b140      	cbz	r0, 8006ef0 <_vfiprintf_r+0x198>
 8006ede:	2340      	movs	r3, #64	; 0x40
 8006ee0:	eba0 000a 	sub.w	r0, r0, sl
 8006ee4:	fa03 f000 	lsl.w	r0, r3, r0
 8006ee8:	9b04      	ldr	r3, [sp, #16]
 8006eea:	3401      	adds	r4, #1
 8006eec:	4303      	orrs	r3, r0
 8006eee:	9304      	str	r3, [sp, #16]
 8006ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ef4:	2206      	movs	r2, #6
 8006ef6:	482d      	ldr	r0, [pc, #180]	; (8006fac <_vfiprintf_r+0x254>)
 8006ef8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006efc:	f7fe ffe4 	bl	8005ec8 <memchr>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	d03f      	beq.n	8006f84 <_vfiprintf_r+0x22c>
 8006f04:	4b2a      	ldr	r3, [pc, #168]	; (8006fb0 <_vfiprintf_r+0x258>)
 8006f06:	bb1b      	cbnz	r3, 8006f50 <_vfiprintf_r+0x1f8>
 8006f08:	9b03      	ldr	r3, [sp, #12]
 8006f0a:	3307      	adds	r3, #7
 8006f0c:	f023 0307 	bic.w	r3, r3, #7
 8006f10:	3308      	adds	r3, #8
 8006f12:	9303      	str	r3, [sp, #12]
 8006f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f16:	443b      	add	r3, r7
 8006f18:	9309      	str	r3, [sp, #36]	; 0x24
 8006f1a:	e767      	b.n	8006dec <_vfiprintf_r+0x94>
 8006f1c:	460c      	mov	r4, r1
 8006f1e:	2001      	movs	r0, #1
 8006f20:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f24:	e7a5      	b.n	8006e72 <_vfiprintf_r+0x11a>
 8006f26:	2300      	movs	r3, #0
 8006f28:	f04f 0c0a 	mov.w	ip, #10
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	3401      	adds	r4, #1
 8006f30:	9305      	str	r3, [sp, #20]
 8006f32:	4620      	mov	r0, r4
 8006f34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f38:	3a30      	subs	r2, #48	; 0x30
 8006f3a:	2a09      	cmp	r2, #9
 8006f3c:	d903      	bls.n	8006f46 <_vfiprintf_r+0x1ee>
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d0c5      	beq.n	8006ece <_vfiprintf_r+0x176>
 8006f42:	9105      	str	r1, [sp, #20]
 8006f44:	e7c3      	b.n	8006ece <_vfiprintf_r+0x176>
 8006f46:	4604      	mov	r4, r0
 8006f48:	2301      	movs	r3, #1
 8006f4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f4e:	e7f0      	b.n	8006f32 <_vfiprintf_r+0x1da>
 8006f50:	ab03      	add	r3, sp, #12
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	462a      	mov	r2, r5
 8006f56:	4630      	mov	r0, r6
 8006f58:	4b16      	ldr	r3, [pc, #88]	; (8006fb4 <_vfiprintf_r+0x25c>)
 8006f5a:	a904      	add	r1, sp, #16
 8006f5c:	f7fc f822 	bl	8002fa4 <_printf_float>
 8006f60:	4607      	mov	r7, r0
 8006f62:	1c78      	adds	r0, r7, #1
 8006f64:	d1d6      	bne.n	8006f14 <_vfiprintf_r+0x1bc>
 8006f66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f68:	07d9      	lsls	r1, r3, #31
 8006f6a:	d405      	bmi.n	8006f78 <_vfiprintf_r+0x220>
 8006f6c:	89ab      	ldrh	r3, [r5, #12]
 8006f6e:	059a      	lsls	r2, r3, #22
 8006f70:	d402      	bmi.n	8006f78 <_vfiprintf_r+0x220>
 8006f72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f74:	f7fe ff8c 	bl	8005e90 <__retarget_lock_release_recursive>
 8006f78:	89ab      	ldrh	r3, [r5, #12]
 8006f7a:	065b      	lsls	r3, r3, #25
 8006f7c:	f53f af12 	bmi.w	8006da4 <_vfiprintf_r+0x4c>
 8006f80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f82:	e711      	b.n	8006da8 <_vfiprintf_r+0x50>
 8006f84:	ab03      	add	r3, sp, #12
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	462a      	mov	r2, r5
 8006f8a:	4630      	mov	r0, r6
 8006f8c:	4b09      	ldr	r3, [pc, #36]	; (8006fb4 <_vfiprintf_r+0x25c>)
 8006f8e:	a904      	add	r1, sp, #16
 8006f90:	f7fc faa4 	bl	80034dc <_printf_i>
 8006f94:	e7e4      	b.n	8006f60 <_vfiprintf_r+0x208>
 8006f96:	bf00      	nop
 8006f98:	080079a4 	.word	0x080079a4
 8006f9c:	080079c4 	.word	0x080079c4
 8006fa0:	08007984 	.word	0x08007984
 8006fa4:	08007bbc 	.word	0x08007bbc
 8006fa8:	08007bc2 	.word	0x08007bc2
 8006fac:	08007bc6 	.word	0x08007bc6
 8006fb0:	08002fa5 	.word	0x08002fa5
 8006fb4:	08006d33 	.word	0x08006d33

08006fb8 <nan>:
 8006fb8:	2000      	movs	r0, #0
 8006fba:	4901      	ldr	r1, [pc, #4]	; (8006fc0 <nan+0x8>)
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	7ff80000 	.word	0x7ff80000

08006fc4 <_sbrk_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	4d05      	ldr	r5, [pc, #20]	; (8006fe0 <_sbrk_r+0x1c>)
 8006fca:	4604      	mov	r4, r0
 8006fcc:	4608      	mov	r0, r1
 8006fce:	602b      	str	r3, [r5, #0]
 8006fd0:	f7fa f8f0 	bl	80011b4 <_sbrk>
 8006fd4:	1c43      	adds	r3, r0, #1
 8006fd6:	d102      	bne.n	8006fde <_sbrk_r+0x1a>
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	b103      	cbz	r3, 8006fde <_sbrk_r+0x1a>
 8006fdc:	6023      	str	r3, [r4, #0]
 8006fde:	bd38      	pop	{r3, r4, r5, pc}
 8006fe0:	2000028c 	.word	0x2000028c

08006fe4 <__sread>:
 8006fe4:	b510      	push	{r4, lr}
 8006fe6:	460c      	mov	r4, r1
 8006fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fec:	f000 fafe 	bl	80075ec <_read_r>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	bfab      	itete	ge
 8006ff4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ff6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ff8:	181b      	addge	r3, r3, r0
 8006ffa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ffe:	bfac      	ite	ge
 8007000:	6563      	strge	r3, [r4, #84]	; 0x54
 8007002:	81a3      	strhlt	r3, [r4, #12]
 8007004:	bd10      	pop	{r4, pc}

08007006 <__swrite>:
 8007006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800700a:	461f      	mov	r7, r3
 800700c:	898b      	ldrh	r3, [r1, #12]
 800700e:	4605      	mov	r5, r0
 8007010:	05db      	lsls	r3, r3, #23
 8007012:	460c      	mov	r4, r1
 8007014:	4616      	mov	r6, r2
 8007016:	d505      	bpl.n	8007024 <__swrite+0x1e>
 8007018:	2302      	movs	r3, #2
 800701a:	2200      	movs	r2, #0
 800701c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007020:	f000 fa16 	bl	8007450 <_lseek_r>
 8007024:	89a3      	ldrh	r3, [r4, #12]
 8007026:	4632      	mov	r2, r6
 8007028:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800702c:	81a3      	strh	r3, [r4, #12]
 800702e:	4628      	mov	r0, r5
 8007030:	463b      	mov	r3, r7
 8007032:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800703a:	f000 b88b 	b.w	8007154 <_write_r>

0800703e <__sseek>:
 800703e:	b510      	push	{r4, lr}
 8007040:	460c      	mov	r4, r1
 8007042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007046:	f000 fa03 	bl	8007450 <_lseek_r>
 800704a:	1c43      	adds	r3, r0, #1
 800704c:	89a3      	ldrh	r3, [r4, #12]
 800704e:	bf15      	itete	ne
 8007050:	6560      	strne	r0, [r4, #84]	; 0x54
 8007052:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007056:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800705a:	81a3      	strheq	r3, [r4, #12]
 800705c:	bf18      	it	ne
 800705e:	81a3      	strhne	r3, [r4, #12]
 8007060:	bd10      	pop	{r4, pc}

08007062 <__sclose>:
 8007062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007066:	f000 b913 	b.w	8007290 <_close_r>

0800706a <strncmp>:
 800706a:	4603      	mov	r3, r0
 800706c:	b510      	push	{r4, lr}
 800706e:	b172      	cbz	r2, 800708e <strncmp+0x24>
 8007070:	3901      	subs	r1, #1
 8007072:	1884      	adds	r4, r0, r2
 8007074:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007078:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800707c:	4290      	cmp	r0, r2
 800707e:	d101      	bne.n	8007084 <strncmp+0x1a>
 8007080:	42a3      	cmp	r3, r4
 8007082:	d101      	bne.n	8007088 <strncmp+0x1e>
 8007084:	1a80      	subs	r0, r0, r2
 8007086:	bd10      	pop	{r4, pc}
 8007088:	2800      	cmp	r0, #0
 800708a:	d1f3      	bne.n	8007074 <strncmp+0xa>
 800708c:	e7fa      	b.n	8007084 <strncmp+0x1a>
 800708e:	4610      	mov	r0, r2
 8007090:	e7f9      	b.n	8007086 <strncmp+0x1c>
	...

08007094 <__swbuf_r>:
 8007094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007096:	460e      	mov	r6, r1
 8007098:	4614      	mov	r4, r2
 800709a:	4605      	mov	r5, r0
 800709c:	b118      	cbz	r0, 80070a6 <__swbuf_r+0x12>
 800709e:	6983      	ldr	r3, [r0, #24]
 80070a0:	b90b      	cbnz	r3, 80070a6 <__swbuf_r+0x12>
 80070a2:	f7fe faeb 	bl	800567c <__sinit>
 80070a6:	4b21      	ldr	r3, [pc, #132]	; (800712c <__swbuf_r+0x98>)
 80070a8:	429c      	cmp	r4, r3
 80070aa:	d12b      	bne.n	8007104 <__swbuf_r+0x70>
 80070ac:	686c      	ldr	r4, [r5, #4]
 80070ae:	69a3      	ldr	r3, [r4, #24]
 80070b0:	60a3      	str	r3, [r4, #8]
 80070b2:	89a3      	ldrh	r3, [r4, #12]
 80070b4:	071a      	lsls	r2, r3, #28
 80070b6:	d52f      	bpl.n	8007118 <__swbuf_r+0x84>
 80070b8:	6923      	ldr	r3, [r4, #16]
 80070ba:	b36b      	cbz	r3, 8007118 <__swbuf_r+0x84>
 80070bc:	6923      	ldr	r3, [r4, #16]
 80070be:	6820      	ldr	r0, [r4, #0]
 80070c0:	b2f6      	uxtb	r6, r6
 80070c2:	1ac0      	subs	r0, r0, r3
 80070c4:	6963      	ldr	r3, [r4, #20]
 80070c6:	4637      	mov	r7, r6
 80070c8:	4283      	cmp	r3, r0
 80070ca:	dc04      	bgt.n	80070d6 <__swbuf_r+0x42>
 80070cc:	4621      	mov	r1, r4
 80070ce:	4628      	mov	r0, r5
 80070d0:	f000 f970 	bl	80073b4 <_fflush_r>
 80070d4:	bb30      	cbnz	r0, 8007124 <__swbuf_r+0x90>
 80070d6:	68a3      	ldr	r3, [r4, #8]
 80070d8:	3001      	adds	r0, #1
 80070da:	3b01      	subs	r3, #1
 80070dc:	60a3      	str	r3, [r4, #8]
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	1c5a      	adds	r2, r3, #1
 80070e2:	6022      	str	r2, [r4, #0]
 80070e4:	701e      	strb	r6, [r3, #0]
 80070e6:	6963      	ldr	r3, [r4, #20]
 80070e8:	4283      	cmp	r3, r0
 80070ea:	d004      	beq.n	80070f6 <__swbuf_r+0x62>
 80070ec:	89a3      	ldrh	r3, [r4, #12]
 80070ee:	07db      	lsls	r3, r3, #31
 80070f0:	d506      	bpl.n	8007100 <__swbuf_r+0x6c>
 80070f2:	2e0a      	cmp	r6, #10
 80070f4:	d104      	bne.n	8007100 <__swbuf_r+0x6c>
 80070f6:	4621      	mov	r1, r4
 80070f8:	4628      	mov	r0, r5
 80070fa:	f000 f95b 	bl	80073b4 <_fflush_r>
 80070fe:	b988      	cbnz	r0, 8007124 <__swbuf_r+0x90>
 8007100:	4638      	mov	r0, r7
 8007102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007104:	4b0a      	ldr	r3, [pc, #40]	; (8007130 <__swbuf_r+0x9c>)
 8007106:	429c      	cmp	r4, r3
 8007108:	d101      	bne.n	800710e <__swbuf_r+0x7a>
 800710a:	68ac      	ldr	r4, [r5, #8]
 800710c:	e7cf      	b.n	80070ae <__swbuf_r+0x1a>
 800710e:	4b09      	ldr	r3, [pc, #36]	; (8007134 <__swbuf_r+0xa0>)
 8007110:	429c      	cmp	r4, r3
 8007112:	bf08      	it	eq
 8007114:	68ec      	ldreq	r4, [r5, #12]
 8007116:	e7ca      	b.n	80070ae <__swbuf_r+0x1a>
 8007118:	4621      	mov	r1, r4
 800711a:	4628      	mov	r0, r5
 800711c:	f000 f82c 	bl	8007178 <__swsetup_r>
 8007120:	2800      	cmp	r0, #0
 8007122:	d0cb      	beq.n	80070bc <__swbuf_r+0x28>
 8007124:	f04f 37ff 	mov.w	r7, #4294967295
 8007128:	e7ea      	b.n	8007100 <__swbuf_r+0x6c>
 800712a:	bf00      	nop
 800712c:	080079a4 	.word	0x080079a4
 8007130:	080079c4 	.word	0x080079c4
 8007134:	08007984 	.word	0x08007984

08007138 <__ascii_wctomb>:
 8007138:	4603      	mov	r3, r0
 800713a:	4608      	mov	r0, r1
 800713c:	b141      	cbz	r1, 8007150 <__ascii_wctomb+0x18>
 800713e:	2aff      	cmp	r2, #255	; 0xff
 8007140:	d904      	bls.n	800714c <__ascii_wctomb+0x14>
 8007142:	228a      	movs	r2, #138	; 0x8a
 8007144:	f04f 30ff 	mov.w	r0, #4294967295
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	4770      	bx	lr
 800714c:	2001      	movs	r0, #1
 800714e:	700a      	strb	r2, [r1, #0]
 8007150:	4770      	bx	lr
	...

08007154 <_write_r>:
 8007154:	b538      	push	{r3, r4, r5, lr}
 8007156:	4604      	mov	r4, r0
 8007158:	4608      	mov	r0, r1
 800715a:	4611      	mov	r1, r2
 800715c:	2200      	movs	r2, #0
 800715e:	4d05      	ldr	r5, [pc, #20]	; (8007174 <_write_r+0x20>)
 8007160:	602a      	str	r2, [r5, #0]
 8007162:	461a      	mov	r2, r3
 8007164:	f7f9 ffd9 	bl	800111a <_write>
 8007168:	1c43      	adds	r3, r0, #1
 800716a:	d102      	bne.n	8007172 <_write_r+0x1e>
 800716c:	682b      	ldr	r3, [r5, #0]
 800716e:	b103      	cbz	r3, 8007172 <_write_r+0x1e>
 8007170:	6023      	str	r3, [r4, #0]
 8007172:	bd38      	pop	{r3, r4, r5, pc}
 8007174:	2000028c 	.word	0x2000028c

08007178 <__swsetup_r>:
 8007178:	4b32      	ldr	r3, [pc, #200]	; (8007244 <__swsetup_r+0xcc>)
 800717a:	b570      	push	{r4, r5, r6, lr}
 800717c:	681d      	ldr	r5, [r3, #0]
 800717e:	4606      	mov	r6, r0
 8007180:	460c      	mov	r4, r1
 8007182:	b125      	cbz	r5, 800718e <__swsetup_r+0x16>
 8007184:	69ab      	ldr	r3, [r5, #24]
 8007186:	b913      	cbnz	r3, 800718e <__swsetup_r+0x16>
 8007188:	4628      	mov	r0, r5
 800718a:	f7fe fa77 	bl	800567c <__sinit>
 800718e:	4b2e      	ldr	r3, [pc, #184]	; (8007248 <__swsetup_r+0xd0>)
 8007190:	429c      	cmp	r4, r3
 8007192:	d10f      	bne.n	80071b4 <__swsetup_r+0x3c>
 8007194:	686c      	ldr	r4, [r5, #4]
 8007196:	89a3      	ldrh	r3, [r4, #12]
 8007198:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800719c:	0719      	lsls	r1, r3, #28
 800719e:	d42c      	bmi.n	80071fa <__swsetup_r+0x82>
 80071a0:	06dd      	lsls	r5, r3, #27
 80071a2:	d411      	bmi.n	80071c8 <__swsetup_r+0x50>
 80071a4:	2309      	movs	r3, #9
 80071a6:	6033      	str	r3, [r6, #0]
 80071a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80071ac:	f04f 30ff 	mov.w	r0, #4294967295
 80071b0:	81a3      	strh	r3, [r4, #12]
 80071b2:	e03e      	b.n	8007232 <__swsetup_r+0xba>
 80071b4:	4b25      	ldr	r3, [pc, #148]	; (800724c <__swsetup_r+0xd4>)
 80071b6:	429c      	cmp	r4, r3
 80071b8:	d101      	bne.n	80071be <__swsetup_r+0x46>
 80071ba:	68ac      	ldr	r4, [r5, #8]
 80071bc:	e7eb      	b.n	8007196 <__swsetup_r+0x1e>
 80071be:	4b24      	ldr	r3, [pc, #144]	; (8007250 <__swsetup_r+0xd8>)
 80071c0:	429c      	cmp	r4, r3
 80071c2:	bf08      	it	eq
 80071c4:	68ec      	ldreq	r4, [r5, #12]
 80071c6:	e7e6      	b.n	8007196 <__swsetup_r+0x1e>
 80071c8:	0758      	lsls	r0, r3, #29
 80071ca:	d512      	bpl.n	80071f2 <__swsetup_r+0x7a>
 80071cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071ce:	b141      	cbz	r1, 80071e2 <__swsetup_r+0x6a>
 80071d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071d4:	4299      	cmp	r1, r3
 80071d6:	d002      	beq.n	80071de <__swsetup_r+0x66>
 80071d8:	4630      	mov	r0, r6
 80071da:	f7ff fb5d 	bl	8006898 <_free_r>
 80071de:	2300      	movs	r3, #0
 80071e0:	6363      	str	r3, [r4, #52]	; 0x34
 80071e2:	89a3      	ldrh	r3, [r4, #12]
 80071e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80071e8:	81a3      	strh	r3, [r4, #12]
 80071ea:	2300      	movs	r3, #0
 80071ec:	6063      	str	r3, [r4, #4]
 80071ee:	6923      	ldr	r3, [r4, #16]
 80071f0:	6023      	str	r3, [r4, #0]
 80071f2:	89a3      	ldrh	r3, [r4, #12]
 80071f4:	f043 0308 	orr.w	r3, r3, #8
 80071f8:	81a3      	strh	r3, [r4, #12]
 80071fa:	6923      	ldr	r3, [r4, #16]
 80071fc:	b94b      	cbnz	r3, 8007212 <__swsetup_r+0x9a>
 80071fe:	89a3      	ldrh	r3, [r4, #12]
 8007200:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007208:	d003      	beq.n	8007212 <__swsetup_r+0x9a>
 800720a:	4621      	mov	r1, r4
 800720c:	4630      	mov	r0, r6
 800720e:	f000 f957 	bl	80074c0 <__smakebuf_r>
 8007212:	89a0      	ldrh	r0, [r4, #12]
 8007214:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007218:	f010 0301 	ands.w	r3, r0, #1
 800721c:	d00a      	beq.n	8007234 <__swsetup_r+0xbc>
 800721e:	2300      	movs	r3, #0
 8007220:	60a3      	str	r3, [r4, #8]
 8007222:	6963      	ldr	r3, [r4, #20]
 8007224:	425b      	negs	r3, r3
 8007226:	61a3      	str	r3, [r4, #24]
 8007228:	6923      	ldr	r3, [r4, #16]
 800722a:	b943      	cbnz	r3, 800723e <__swsetup_r+0xc6>
 800722c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007230:	d1ba      	bne.n	80071a8 <__swsetup_r+0x30>
 8007232:	bd70      	pop	{r4, r5, r6, pc}
 8007234:	0781      	lsls	r1, r0, #30
 8007236:	bf58      	it	pl
 8007238:	6963      	ldrpl	r3, [r4, #20]
 800723a:	60a3      	str	r3, [r4, #8]
 800723c:	e7f4      	b.n	8007228 <__swsetup_r+0xb0>
 800723e:	2000      	movs	r0, #0
 8007240:	e7f7      	b.n	8007232 <__swsetup_r+0xba>
 8007242:	bf00      	nop
 8007244:	2000000c 	.word	0x2000000c
 8007248:	080079a4 	.word	0x080079a4
 800724c:	080079c4 	.word	0x080079c4
 8007250:	08007984 	.word	0x08007984

08007254 <__assert_func>:
 8007254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007256:	4614      	mov	r4, r2
 8007258:	461a      	mov	r2, r3
 800725a:	4b09      	ldr	r3, [pc, #36]	; (8007280 <__assert_func+0x2c>)
 800725c:	4605      	mov	r5, r0
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68d8      	ldr	r0, [r3, #12]
 8007262:	b14c      	cbz	r4, 8007278 <__assert_func+0x24>
 8007264:	4b07      	ldr	r3, [pc, #28]	; (8007284 <__assert_func+0x30>)
 8007266:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800726a:	9100      	str	r1, [sp, #0]
 800726c:	462b      	mov	r3, r5
 800726e:	4906      	ldr	r1, [pc, #24]	; (8007288 <__assert_func+0x34>)
 8007270:	f000 f8dc 	bl	800742c <fiprintf>
 8007274:	f000 f9cc 	bl	8007610 <abort>
 8007278:	4b04      	ldr	r3, [pc, #16]	; (800728c <__assert_func+0x38>)
 800727a:	461c      	mov	r4, r3
 800727c:	e7f3      	b.n	8007266 <__assert_func+0x12>
 800727e:	bf00      	nop
 8007280:	2000000c 	.word	0x2000000c
 8007284:	08007bcd 	.word	0x08007bcd
 8007288:	08007bda 	.word	0x08007bda
 800728c:	08007c08 	.word	0x08007c08

08007290 <_close_r>:
 8007290:	b538      	push	{r3, r4, r5, lr}
 8007292:	2300      	movs	r3, #0
 8007294:	4d05      	ldr	r5, [pc, #20]	; (80072ac <_close_r+0x1c>)
 8007296:	4604      	mov	r4, r0
 8007298:	4608      	mov	r0, r1
 800729a:	602b      	str	r3, [r5, #0]
 800729c:	f7f9 ff59 	bl	8001152 <_close>
 80072a0:	1c43      	adds	r3, r0, #1
 80072a2:	d102      	bne.n	80072aa <_close_r+0x1a>
 80072a4:	682b      	ldr	r3, [r5, #0]
 80072a6:	b103      	cbz	r3, 80072aa <_close_r+0x1a>
 80072a8:	6023      	str	r3, [r4, #0]
 80072aa:	bd38      	pop	{r3, r4, r5, pc}
 80072ac:	2000028c 	.word	0x2000028c

080072b0 <__sflush_r>:
 80072b0:	898a      	ldrh	r2, [r1, #12]
 80072b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b4:	4605      	mov	r5, r0
 80072b6:	0710      	lsls	r0, r2, #28
 80072b8:	460c      	mov	r4, r1
 80072ba:	d457      	bmi.n	800736c <__sflush_r+0xbc>
 80072bc:	684b      	ldr	r3, [r1, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	dc04      	bgt.n	80072cc <__sflush_r+0x1c>
 80072c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	dc01      	bgt.n	80072cc <__sflush_r+0x1c>
 80072c8:	2000      	movs	r0, #0
 80072ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072ce:	2e00      	cmp	r6, #0
 80072d0:	d0fa      	beq.n	80072c8 <__sflush_r+0x18>
 80072d2:	2300      	movs	r3, #0
 80072d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072d8:	682f      	ldr	r7, [r5, #0]
 80072da:	602b      	str	r3, [r5, #0]
 80072dc:	d032      	beq.n	8007344 <__sflush_r+0x94>
 80072de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072e0:	89a3      	ldrh	r3, [r4, #12]
 80072e2:	075a      	lsls	r2, r3, #29
 80072e4:	d505      	bpl.n	80072f2 <__sflush_r+0x42>
 80072e6:	6863      	ldr	r3, [r4, #4]
 80072e8:	1ac0      	subs	r0, r0, r3
 80072ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072ec:	b10b      	cbz	r3, 80072f2 <__sflush_r+0x42>
 80072ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072f0:	1ac0      	subs	r0, r0, r3
 80072f2:	2300      	movs	r3, #0
 80072f4:	4602      	mov	r2, r0
 80072f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072f8:	4628      	mov	r0, r5
 80072fa:	6a21      	ldr	r1, [r4, #32]
 80072fc:	47b0      	blx	r6
 80072fe:	1c43      	adds	r3, r0, #1
 8007300:	89a3      	ldrh	r3, [r4, #12]
 8007302:	d106      	bne.n	8007312 <__sflush_r+0x62>
 8007304:	6829      	ldr	r1, [r5, #0]
 8007306:	291d      	cmp	r1, #29
 8007308:	d82c      	bhi.n	8007364 <__sflush_r+0xb4>
 800730a:	4a29      	ldr	r2, [pc, #164]	; (80073b0 <__sflush_r+0x100>)
 800730c:	40ca      	lsrs	r2, r1
 800730e:	07d6      	lsls	r6, r2, #31
 8007310:	d528      	bpl.n	8007364 <__sflush_r+0xb4>
 8007312:	2200      	movs	r2, #0
 8007314:	6062      	str	r2, [r4, #4]
 8007316:	6922      	ldr	r2, [r4, #16]
 8007318:	04d9      	lsls	r1, r3, #19
 800731a:	6022      	str	r2, [r4, #0]
 800731c:	d504      	bpl.n	8007328 <__sflush_r+0x78>
 800731e:	1c42      	adds	r2, r0, #1
 8007320:	d101      	bne.n	8007326 <__sflush_r+0x76>
 8007322:	682b      	ldr	r3, [r5, #0]
 8007324:	b903      	cbnz	r3, 8007328 <__sflush_r+0x78>
 8007326:	6560      	str	r0, [r4, #84]	; 0x54
 8007328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800732a:	602f      	str	r7, [r5, #0]
 800732c:	2900      	cmp	r1, #0
 800732e:	d0cb      	beq.n	80072c8 <__sflush_r+0x18>
 8007330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007334:	4299      	cmp	r1, r3
 8007336:	d002      	beq.n	800733e <__sflush_r+0x8e>
 8007338:	4628      	mov	r0, r5
 800733a:	f7ff faad 	bl	8006898 <_free_r>
 800733e:	2000      	movs	r0, #0
 8007340:	6360      	str	r0, [r4, #52]	; 0x34
 8007342:	e7c2      	b.n	80072ca <__sflush_r+0x1a>
 8007344:	6a21      	ldr	r1, [r4, #32]
 8007346:	2301      	movs	r3, #1
 8007348:	4628      	mov	r0, r5
 800734a:	47b0      	blx	r6
 800734c:	1c41      	adds	r1, r0, #1
 800734e:	d1c7      	bne.n	80072e0 <__sflush_r+0x30>
 8007350:	682b      	ldr	r3, [r5, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d0c4      	beq.n	80072e0 <__sflush_r+0x30>
 8007356:	2b1d      	cmp	r3, #29
 8007358:	d001      	beq.n	800735e <__sflush_r+0xae>
 800735a:	2b16      	cmp	r3, #22
 800735c:	d101      	bne.n	8007362 <__sflush_r+0xb2>
 800735e:	602f      	str	r7, [r5, #0]
 8007360:	e7b2      	b.n	80072c8 <__sflush_r+0x18>
 8007362:	89a3      	ldrh	r3, [r4, #12]
 8007364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007368:	81a3      	strh	r3, [r4, #12]
 800736a:	e7ae      	b.n	80072ca <__sflush_r+0x1a>
 800736c:	690f      	ldr	r7, [r1, #16]
 800736e:	2f00      	cmp	r7, #0
 8007370:	d0aa      	beq.n	80072c8 <__sflush_r+0x18>
 8007372:	0793      	lsls	r3, r2, #30
 8007374:	bf18      	it	ne
 8007376:	2300      	movne	r3, #0
 8007378:	680e      	ldr	r6, [r1, #0]
 800737a:	bf08      	it	eq
 800737c:	694b      	ldreq	r3, [r1, #20]
 800737e:	1bf6      	subs	r6, r6, r7
 8007380:	600f      	str	r7, [r1, #0]
 8007382:	608b      	str	r3, [r1, #8]
 8007384:	2e00      	cmp	r6, #0
 8007386:	dd9f      	ble.n	80072c8 <__sflush_r+0x18>
 8007388:	4633      	mov	r3, r6
 800738a:	463a      	mov	r2, r7
 800738c:	4628      	mov	r0, r5
 800738e:	6a21      	ldr	r1, [r4, #32]
 8007390:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007394:	47e0      	blx	ip
 8007396:	2800      	cmp	r0, #0
 8007398:	dc06      	bgt.n	80073a8 <__sflush_r+0xf8>
 800739a:	89a3      	ldrh	r3, [r4, #12]
 800739c:	f04f 30ff 	mov.w	r0, #4294967295
 80073a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073a4:	81a3      	strh	r3, [r4, #12]
 80073a6:	e790      	b.n	80072ca <__sflush_r+0x1a>
 80073a8:	4407      	add	r7, r0
 80073aa:	1a36      	subs	r6, r6, r0
 80073ac:	e7ea      	b.n	8007384 <__sflush_r+0xd4>
 80073ae:	bf00      	nop
 80073b0:	20400001 	.word	0x20400001

080073b4 <_fflush_r>:
 80073b4:	b538      	push	{r3, r4, r5, lr}
 80073b6:	690b      	ldr	r3, [r1, #16]
 80073b8:	4605      	mov	r5, r0
 80073ba:	460c      	mov	r4, r1
 80073bc:	b913      	cbnz	r3, 80073c4 <_fflush_r+0x10>
 80073be:	2500      	movs	r5, #0
 80073c0:	4628      	mov	r0, r5
 80073c2:	bd38      	pop	{r3, r4, r5, pc}
 80073c4:	b118      	cbz	r0, 80073ce <_fflush_r+0x1a>
 80073c6:	6983      	ldr	r3, [r0, #24]
 80073c8:	b90b      	cbnz	r3, 80073ce <_fflush_r+0x1a>
 80073ca:	f7fe f957 	bl	800567c <__sinit>
 80073ce:	4b14      	ldr	r3, [pc, #80]	; (8007420 <_fflush_r+0x6c>)
 80073d0:	429c      	cmp	r4, r3
 80073d2:	d11b      	bne.n	800740c <_fflush_r+0x58>
 80073d4:	686c      	ldr	r4, [r5, #4]
 80073d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d0ef      	beq.n	80073be <_fflush_r+0xa>
 80073de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073e0:	07d0      	lsls	r0, r2, #31
 80073e2:	d404      	bmi.n	80073ee <_fflush_r+0x3a>
 80073e4:	0599      	lsls	r1, r3, #22
 80073e6:	d402      	bmi.n	80073ee <_fflush_r+0x3a>
 80073e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073ea:	f7fe fd50 	bl	8005e8e <__retarget_lock_acquire_recursive>
 80073ee:	4628      	mov	r0, r5
 80073f0:	4621      	mov	r1, r4
 80073f2:	f7ff ff5d 	bl	80072b0 <__sflush_r>
 80073f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073f8:	4605      	mov	r5, r0
 80073fa:	07da      	lsls	r2, r3, #31
 80073fc:	d4e0      	bmi.n	80073c0 <_fflush_r+0xc>
 80073fe:	89a3      	ldrh	r3, [r4, #12]
 8007400:	059b      	lsls	r3, r3, #22
 8007402:	d4dd      	bmi.n	80073c0 <_fflush_r+0xc>
 8007404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007406:	f7fe fd43 	bl	8005e90 <__retarget_lock_release_recursive>
 800740a:	e7d9      	b.n	80073c0 <_fflush_r+0xc>
 800740c:	4b05      	ldr	r3, [pc, #20]	; (8007424 <_fflush_r+0x70>)
 800740e:	429c      	cmp	r4, r3
 8007410:	d101      	bne.n	8007416 <_fflush_r+0x62>
 8007412:	68ac      	ldr	r4, [r5, #8]
 8007414:	e7df      	b.n	80073d6 <_fflush_r+0x22>
 8007416:	4b04      	ldr	r3, [pc, #16]	; (8007428 <_fflush_r+0x74>)
 8007418:	429c      	cmp	r4, r3
 800741a:	bf08      	it	eq
 800741c:	68ec      	ldreq	r4, [r5, #12]
 800741e:	e7da      	b.n	80073d6 <_fflush_r+0x22>
 8007420:	080079a4 	.word	0x080079a4
 8007424:	080079c4 	.word	0x080079c4
 8007428:	08007984 	.word	0x08007984

0800742c <fiprintf>:
 800742c:	b40e      	push	{r1, r2, r3}
 800742e:	b503      	push	{r0, r1, lr}
 8007430:	4601      	mov	r1, r0
 8007432:	ab03      	add	r3, sp, #12
 8007434:	4805      	ldr	r0, [pc, #20]	; (800744c <fiprintf+0x20>)
 8007436:	f853 2b04 	ldr.w	r2, [r3], #4
 800743a:	6800      	ldr	r0, [r0, #0]
 800743c:	9301      	str	r3, [sp, #4]
 800743e:	f7ff fc8b 	bl	8006d58 <_vfiprintf_r>
 8007442:	b002      	add	sp, #8
 8007444:	f85d eb04 	ldr.w	lr, [sp], #4
 8007448:	b003      	add	sp, #12
 800744a:	4770      	bx	lr
 800744c:	2000000c 	.word	0x2000000c

08007450 <_lseek_r>:
 8007450:	b538      	push	{r3, r4, r5, lr}
 8007452:	4604      	mov	r4, r0
 8007454:	4608      	mov	r0, r1
 8007456:	4611      	mov	r1, r2
 8007458:	2200      	movs	r2, #0
 800745a:	4d05      	ldr	r5, [pc, #20]	; (8007470 <_lseek_r+0x20>)
 800745c:	602a      	str	r2, [r5, #0]
 800745e:	461a      	mov	r2, r3
 8007460:	f7f9 fe9b 	bl	800119a <_lseek>
 8007464:	1c43      	adds	r3, r0, #1
 8007466:	d102      	bne.n	800746e <_lseek_r+0x1e>
 8007468:	682b      	ldr	r3, [r5, #0]
 800746a:	b103      	cbz	r3, 800746e <_lseek_r+0x1e>
 800746c:	6023      	str	r3, [r4, #0]
 800746e:	bd38      	pop	{r3, r4, r5, pc}
 8007470:	2000028c 	.word	0x2000028c

08007474 <__swhatbuf_r>:
 8007474:	b570      	push	{r4, r5, r6, lr}
 8007476:	460e      	mov	r6, r1
 8007478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800747c:	4614      	mov	r4, r2
 800747e:	2900      	cmp	r1, #0
 8007480:	461d      	mov	r5, r3
 8007482:	b096      	sub	sp, #88	; 0x58
 8007484:	da08      	bge.n	8007498 <__swhatbuf_r+0x24>
 8007486:	2200      	movs	r2, #0
 8007488:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800748c:	602a      	str	r2, [r5, #0]
 800748e:	061a      	lsls	r2, r3, #24
 8007490:	d410      	bmi.n	80074b4 <__swhatbuf_r+0x40>
 8007492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007496:	e00e      	b.n	80074b6 <__swhatbuf_r+0x42>
 8007498:	466a      	mov	r2, sp
 800749a:	f000 f8c1 	bl	8007620 <_fstat_r>
 800749e:	2800      	cmp	r0, #0
 80074a0:	dbf1      	blt.n	8007486 <__swhatbuf_r+0x12>
 80074a2:	9a01      	ldr	r2, [sp, #4]
 80074a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80074a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80074ac:	425a      	negs	r2, r3
 80074ae:	415a      	adcs	r2, r3
 80074b0:	602a      	str	r2, [r5, #0]
 80074b2:	e7ee      	b.n	8007492 <__swhatbuf_r+0x1e>
 80074b4:	2340      	movs	r3, #64	; 0x40
 80074b6:	2000      	movs	r0, #0
 80074b8:	6023      	str	r3, [r4, #0]
 80074ba:	b016      	add	sp, #88	; 0x58
 80074bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080074c0 <__smakebuf_r>:
 80074c0:	898b      	ldrh	r3, [r1, #12]
 80074c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074c4:	079d      	lsls	r5, r3, #30
 80074c6:	4606      	mov	r6, r0
 80074c8:	460c      	mov	r4, r1
 80074ca:	d507      	bpl.n	80074dc <__smakebuf_r+0x1c>
 80074cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80074d0:	6023      	str	r3, [r4, #0]
 80074d2:	6123      	str	r3, [r4, #16]
 80074d4:	2301      	movs	r3, #1
 80074d6:	6163      	str	r3, [r4, #20]
 80074d8:	b002      	add	sp, #8
 80074da:	bd70      	pop	{r4, r5, r6, pc}
 80074dc:	466a      	mov	r2, sp
 80074de:	ab01      	add	r3, sp, #4
 80074e0:	f7ff ffc8 	bl	8007474 <__swhatbuf_r>
 80074e4:	9900      	ldr	r1, [sp, #0]
 80074e6:	4605      	mov	r5, r0
 80074e8:	4630      	mov	r0, r6
 80074ea:	f7ff fa3d 	bl	8006968 <_malloc_r>
 80074ee:	b948      	cbnz	r0, 8007504 <__smakebuf_r+0x44>
 80074f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074f4:	059a      	lsls	r2, r3, #22
 80074f6:	d4ef      	bmi.n	80074d8 <__smakebuf_r+0x18>
 80074f8:	f023 0303 	bic.w	r3, r3, #3
 80074fc:	f043 0302 	orr.w	r3, r3, #2
 8007500:	81a3      	strh	r3, [r4, #12]
 8007502:	e7e3      	b.n	80074cc <__smakebuf_r+0xc>
 8007504:	4b0d      	ldr	r3, [pc, #52]	; (800753c <__smakebuf_r+0x7c>)
 8007506:	62b3      	str	r3, [r6, #40]	; 0x28
 8007508:	89a3      	ldrh	r3, [r4, #12]
 800750a:	6020      	str	r0, [r4, #0]
 800750c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007510:	81a3      	strh	r3, [r4, #12]
 8007512:	9b00      	ldr	r3, [sp, #0]
 8007514:	6120      	str	r0, [r4, #16]
 8007516:	6163      	str	r3, [r4, #20]
 8007518:	9b01      	ldr	r3, [sp, #4]
 800751a:	b15b      	cbz	r3, 8007534 <__smakebuf_r+0x74>
 800751c:	4630      	mov	r0, r6
 800751e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007522:	f000 f88f 	bl	8007644 <_isatty_r>
 8007526:	b128      	cbz	r0, 8007534 <__smakebuf_r+0x74>
 8007528:	89a3      	ldrh	r3, [r4, #12]
 800752a:	f023 0303 	bic.w	r3, r3, #3
 800752e:	f043 0301 	orr.w	r3, r3, #1
 8007532:	81a3      	strh	r3, [r4, #12]
 8007534:	89a0      	ldrh	r0, [r4, #12]
 8007536:	4305      	orrs	r5, r0
 8007538:	81a5      	strh	r5, [r4, #12]
 800753a:	e7cd      	b.n	80074d8 <__smakebuf_r+0x18>
 800753c:	08005615 	.word	0x08005615

08007540 <memmove>:
 8007540:	4288      	cmp	r0, r1
 8007542:	b510      	push	{r4, lr}
 8007544:	eb01 0402 	add.w	r4, r1, r2
 8007548:	d902      	bls.n	8007550 <memmove+0x10>
 800754a:	4284      	cmp	r4, r0
 800754c:	4623      	mov	r3, r4
 800754e:	d807      	bhi.n	8007560 <memmove+0x20>
 8007550:	1e43      	subs	r3, r0, #1
 8007552:	42a1      	cmp	r1, r4
 8007554:	d008      	beq.n	8007568 <memmove+0x28>
 8007556:	f811 2b01 	ldrb.w	r2, [r1], #1
 800755a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800755e:	e7f8      	b.n	8007552 <memmove+0x12>
 8007560:	4601      	mov	r1, r0
 8007562:	4402      	add	r2, r0
 8007564:	428a      	cmp	r2, r1
 8007566:	d100      	bne.n	800756a <memmove+0x2a>
 8007568:	bd10      	pop	{r4, pc}
 800756a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800756e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007572:	e7f7      	b.n	8007564 <memmove+0x24>

08007574 <__malloc_lock>:
 8007574:	4801      	ldr	r0, [pc, #4]	; (800757c <__malloc_lock+0x8>)
 8007576:	f7fe bc8a 	b.w	8005e8e <__retarget_lock_acquire_recursive>
 800757a:	bf00      	nop
 800757c:	20000280 	.word	0x20000280

08007580 <__malloc_unlock>:
 8007580:	4801      	ldr	r0, [pc, #4]	; (8007588 <__malloc_unlock+0x8>)
 8007582:	f7fe bc85 	b.w	8005e90 <__retarget_lock_release_recursive>
 8007586:	bf00      	nop
 8007588:	20000280 	.word	0x20000280

0800758c <_realloc_r>:
 800758c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007590:	4680      	mov	r8, r0
 8007592:	4614      	mov	r4, r2
 8007594:	460e      	mov	r6, r1
 8007596:	b921      	cbnz	r1, 80075a2 <_realloc_r+0x16>
 8007598:	4611      	mov	r1, r2
 800759a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800759e:	f7ff b9e3 	b.w	8006968 <_malloc_r>
 80075a2:	b92a      	cbnz	r2, 80075b0 <_realloc_r+0x24>
 80075a4:	f7ff f978 	bl	8006898 <_free_r>
 80075a8:	4625      	mov	r5, r4
 80075aa:	4628      	mov	r0, r5
 80075ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075b0:	f000 f858 	bl	8007664 <_malloc_usable_size_r>
 80075b4:	4284      	cmp	r4, r0
 80075b6:	4607      	mov	r7, r0
 80075b8:	d802      	bhi.n	80075c0 <_realloc_r+0x34>
 80075ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075be:	d812      	bhi.n	80075e6 <_realloc_r+0x5a>
 80075c0:	4621      	mov	r1, r4
 80075c2:	4640      	mov	r0, r8
 80075c4:	f7ff f9d0 	bl	8006968 <_malloc_r>
 80075c8:	4605      	mov	r5, r0
 80075ca:	2800      	cmp	r0, #0
 80075cc:	d0ed      	beq.n	80075aa <_realloc_r+0x1e>
 80075ce:	42bc      	cmp	r4, r7
 80075d0:	4622      	mov	r2, r4
 80075d2:	4631      	mov	r1, r6
 80075d4:	bf28      	it	cs
 80075d6:	463a      	movcs	r2, r7
 80075d8:	f7fe fc84 	bl	8005ee4 <memcpy>
 80075dc:	4631      	mov	r1, r6
 80075de:	4640      	mov	r0, r8
 80075e0:	f7ff f95a 	bl	8006898 <_free_r>
 80075e4:	e7e1      	b.n	80075aa <_realloc_r+0x1e>
 80075e6:	4635      	mov	r5, r6
 80075e8:	e7df      	b.n	80075aa <_realloc_r+0x1e>
	...

080075ec <_read_r>:
 80075ec:	b538      	push	{r3, r4, r5, lr}
 80075ee:	4604      	mov	r4, r0
 80075f0:	4608      	mov	r0, r1
 80075f2:	4611      	mov	r1, r2
 80075f4:	2200      	movs	r2, #0
 80075f6:	4d05      	ldr	r5, [pc, #20]	; (800760c <_read_r+0x20>)
 80075f8:	602a      	str	r2, [r5, #0]
 80075fa:	461a      	mov	r2, r3
 80075fc:	f7f9 fd70 	bl	80010e0 <_read>
 8007600:	1c43      	adds	r3, r0, #1
 8007602:	d102      	bne.n	800760a <_read_r+0x1e>
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	b103      	cbz	r3, 800760a <_read_r+0x1e>
 8007608:	6023      	str	r3, [r4, #0]
 800760a:	bd38      	pop	{r3, r4, r5, pc}
 800760c:	2000028c 	.word	0x2000028c

08007610 <abort>:
 8007610:	2006      	movs	r0, #6
 8007612:	b508      	push	{r3, lr}
 8007614:	f000 f856 	bl	80076c4 <raise>
 8007618:	2001      	movs	r0, #1
 800761a:	f7f9 fd57 	bl	80010cc <_exit>
	...

08007620 <_fstat_r>:
 8007620:	b538      	push	{r3, r4, r5, lr}
 8007622:	2300      	movs	r3, #0
 8007624:	4d06      	ldr	r5, [pc, #24]	; (8007640 <_fstat_r+0x20>)
 8007626:	4604      	mov	r4, r0
 8007628:	4608      	mov	r0, r1
 800762a:	4611      	mov	r1, r2
 800762c:	602b      	str	r3, [r5, #0]
 800762e:	f7f9 fd9b 	bl	8001168 <_fstat>
 8007632:	1c43      	adds	r3, r0, #1
 8007634:	d102      	bne.n	800763c <_fstat_r+0x1c>
 8007636:	682b      	ldr	r3, [r5, #0]
 8007638:	b103      	cbz	r3, 800763c <_fstat_r+0x1c>
 800763a:	6023      	str	r3, [r4, #0]
 800763c:	bd38      	pop	{r3, r4, r5, pc}
 800763e:	bf00      	nop
 8007640:	2000028c 	.word	0x2000028c

08007644 <_isatty_r>:
 8007644:	b538      	push	{r3, r4, r5, lr}
 8007646:	2300      	movs	r3, #0
 8007648:	4d05      	ldr	r5, [pc, #20]	; (8007660 <_isatty_r+0x1c>)
 800764a:	4604      	mov	r4, r0
 800764c:	4608      	mov	r0, r1
 800764e:	602b      	str	r3, [r5, #0]
 8007650:	f7f9 fd99 	bl	8001186 <_isatty>
 8007654:	1c43      	adds	r3, r0, #1
 8007656:	d102      	bne.n	800765e <_isatty_r+0x1a>
 8007658:	682b      	ldr	r3, [r5, #0]
 800765a:	b103      	cbz	r3, 800765e <_isatty_r+0x1a>
 800765c:	6023      	str	r3, [r4, #0]
 800765e:	bd38      	pop	{r3, r4, r5, pc}
 8007660:	2000028c 	.word	0x2000028c

08007664 <_malloc_usable_size_r>:
 8007664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007668:	1f18      	subs	r0, r3, #4
 800766a:	2b00      	cmp	r3, #0
 800766c:	bfbc      	itt	lt
 800766e:	580b      	ldrlt	r3, [r1, r0]
 8007670:	18c0      	addlt	r0, r0, r3
 8007672:	4770      	bx	lr

08007674 <_raise_r>:
 8007674:	291f      	cmp	r1, #31
 8007676:	b538      	push	{r3, r4, r5, lr}
 8007678:	4604      	mov	r4, r0
 800767a:	460d      	mov	r5, r1
 800767c:	d904      	bls.n	8007688 <_raise_r+0x14>
 800767e:	2316      	movs	r3, #22
 8007680:	6003      	str	r3, [r0, #0]
 8007682:	f04f 30ff 	mov.w	r0, #4294967295
 8007686:	bd38      	pop	{r3, r4, r5, pc}
 8007688:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800768a:	b112      	cbz	r2, 8007692 <_raise_r+0x1e>
 800768c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007690:	b94b      	cbnz	r3, 80076a6 <_raise_r+0x32>
 8007692:	4620      	mov	r0, r4
 8007694:	f000 f830 	bl	80076f8 <_getpid_r>
 8007698:	462a      	mov	r2, r5
 800769a:	4601      	mov	r1, r0
 800769c:	4620      	mov	r0, r4
 800769e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076a2:	f000 b817 	b.w	80076d4 <_kill_r>
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d00a      	beq.n	80076c0 <_raise_r+0x4c>
 80076aa:	1c59      	adds	r1, r3, #1
 80076ac:	d103      	bne.n	80076b6 <_raise_r+0x42>
 80076ae:	2316      	movs	r3, #22
 80076b0:	6003      	str	r3, [r0, #0]
 80076b2:	2001      	movs	r0, #1
 80076b4:	e7e7      	b.n	8007686 <_raise_r+0x12>
 80076b6:	2400      	movs	r4, #0
 80076b8:	4628      	mov	r0, r5
 80076ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80076be:	4798      	blx	r3
 80076c0:	2000      	movs	r0, #0
 80076c2:	e7e0      	b.n	8007686 <_raise_r+0x12>

080076c4 <raise>:
 80076c4:	4b02      	ldr	r3, [pc, #8]	; (80076d0 <raise+0xc>)
 80076c6:	4601      	mov	r1, r0
 80076c8:	6818      	ldr	r0, [r3, #0]
 80076ca:	f7ff bfd3 	b.w	8007674 <_raise_r>
 80076ce:	bf00      	nop
 80076d0:	2000000c 	.word	0x2000000c

080076d4 <_kill_r>:
 80076d4:	b538      	push	{r3, r4, r5, lr}
 80076d6:	2300      	movs	r3, #0
 80076d8:	4d06      	ldr	r5, [pc, #24]	; (80076f4 <_kill_r+0x20>)
 80076da:	4604      	mov	r4, r0
 80076dc:	4608      	mov	r0, r1
 80076de:	4611      	mov	r1, r2
 80076e0:	602b      	str	r3, [r5, #0]
 80076e2:	f7f9 fce3 	bl	80010ac <_kill>
 80076e6:	1c43      	adds	r3, r0, #1
 80076e8:	d102      	bne.n	80076f0 <_kill_r+0x1c>
 80076ea:	682b      	ldr	r3, [r5, #0]
 80076ec:	b103      	cbz	r3, 80076f0 <_kill_r+0x1c>
 80076ee:	6023      	str	r3, [r4, #0]
 80076f0:	bd38      	pop	{r3, r4, r5, pc}
 80076f2:	bf00      	nop
 80076f4:	2000028c 	.word	0x2000028c

080076f8 <_getpid_r>:
 80076f8:	f7f9 bcd1 	b.w	800109e <_getpid>

080076fc <_init>:
 80076fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fe:	bf00      	nop
 8007700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007702:	bc08      	pop	{r3}
 8007704:	469e      	mov	lr, r3
 8007706:	4770      	bx	lr

08007708 <_fini>:
 8007708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800770a:	bf00      	nop
 800770c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800770e:	bc08      	pop	{r3}
 8007710:	469e      	mov	lr, r3
 8007712:	4770      	bx	lr
