
220425ADC_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003718  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08003824  08003824  00013824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003904  08003904  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003904  08003904  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003904  08003904  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003904  08003904  00013904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003908  08003908  00013908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800390c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000070  0800397c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  0800397c  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000785f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b22  00000000  00000000  000278f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  00029420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d0  00000000  00000000  00029ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182f3  00000000  00000000  0002a478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096f2  00000000  00000000  0004276b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088784  00000000  00000000  0004be5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d45e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000294c  00000000  00000000  000d4634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800380c 	.word	0x0800380c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800380c 	.word	0x0800380c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb8c 	bl	800086c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f824 	bl	80001a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f910 	bl	800037c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800015c:	f000 f8c6 	bl	80002ec <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000160:	f000 f8ee 	bl	8000340 <MX_DMA_Init>
  MX_ADC1_Init();
 8000164:	f000 f874 	bl	8000250 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  printf("adc_test\r\n");
 8000168:	4809      	ldr	r0, [pc, #36]	; (8000190 <main+0x44>)
 800016a:	f002 fbcb 	bl	8002904 <puts>
  HAL_ADC_Start_DMA(&hadc1, adc_value,2);
 800016e:	2202      	movs	r2, #2
 8000170:	4908      	ldr	r1, [pc, #32]	; (8000194 <main+0x48>)
 8000172:	4809      	ldr	r0, [pc, #36]	; (8000198 <main+0x4c>)
 8000174:	f000 fcd8 	bl	8000b28 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_Delay(10);
 8000178:	200a      	movs	r0, #10
 800017a:	f000 fbd9 	bl	8000930 <HAL_Delay>
		printf("Vx : %d   Vy : %d\r\n", adc_value[0], adc_value[1]);
 800017e:	4b05      	ldr	r3, [pc, #20]	; (8000194 <main+0x48>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	4a04      	ldr	r2, [pc, #16]	; (8000194 <main+0x48>)
 8000184:	6852      	ldr	r2, [r2, #4]
 8000186:	4619      	mov	r1, r3
 8000188:	4804      	ldr	r0, [pc, #16]	; (800019c <main+0x50>)
 800018a:	f002 fb35 	bl	80027f8 <iprintf>
		HAL_Delay(10);
 800018e:	e7f3      	b.n	8000178 <main+0x2c>
 8000190:	08003824 	.word	0x08003824
 8000194:	20000144 	.word	0x20000144
 8000198:	2000008c 	.word	0x2000008c
 800019c:	08003830 	.word	0x08003830

080001a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b094      	sub	sp, #80	; 0x50
 80001a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001aa:	2228      	movs	r2, #40	; 0x28
 80001ac:	2100      	movs	r1, #0
 80001ae:	4618      	mov	r0, r3
 80001b0:	f002 fb1a 	bl	80027e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b4:	f107 0314 	add.w	r3, r7, #20
 80001b8:	2200      	movs	r2, #0
 80001ba:	601a      	str	r2, [r3, #0]
 80001bc:	605a      	str	r2, [r3, #4]
 80001be:	609a      	str	r2, [r3, #8]
 80001c0:	60da      	str	r2, [r3, #12]
 80001c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
 80001ca:	605a      	str	r2, [r3, #4]
 80001cc:	609a      	str	r2, [r3, #8]
 80001ce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001d0:	2302      	movs	r3, #2
 80001d2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d4:	2301      	movs	r3, #1
 80001d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001d8:	2310      	movs	r3, #16
 80001da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001dc:	2302      	movs	r3, #2
 80001de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001e0:	2300      	movs	r3, #0
 80001e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001e4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ee:	4618      	mov	r0, r3
 80001f0:	f001 fc48 	bl	8001a84 <HAL_RCC_OscConfig>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d001      	beq.n	80001fe <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80001fa:	f000 f953 	bl	80004a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fe:	230f      	movs	r3, #15
 8000200:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000202:	2302      	movs	r3, #2
 8000204:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800020a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800020e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000210:	2300      	movs	r3, #0
 8000212:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000214:	f107 0314 	add.w	r3, r7, #20
 8000218:	2102      	movs	r1, #2
 800021a:	4618      	mov	r0, r3
 800021c:	f001 feb4 	bl	8001f88 <HAL_RCC_ClockConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000226:	f000 f93d 	bl	80004a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800022a:	2302      	movs	r3, #2
 800022c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800022e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000232:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	4618      	mov	r0, r3
 8000238:	f002 f83e 	bl	80022b8 <HAL_RCCEx_PeriphCLKConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000242:	f000 f92f 	bl	80004a4 <Error_Handler>
  }
}
 8000246:	bf00      	nop
 8000248:	3750      	adds	r7, #80	; 0x50
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
	...

08000250 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	605a      	str	r2, [r3, #4]
 800025e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000260:	4b20      	ldr	r3, [pc, #128]	; (80002e4 <MX_ADC1_Init+0x94>)
 8000262:	4a21      	ldr	r2, [pc, #132]	; (80002e8 <MX_ADC1_Init+0x98>)
 8000264:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000266:	4b1f      	ldr	r3, [pc, #124]	; (80002e4 <MX_ADC1_Init+0x94>)
 8000268:	f44f 7280 	mov.w	r2, #256	; 0x100
 800026c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800026e:	4b1d      	ldr	r3, [pc, #116]	; (80002e4 <MX_ADC1_Init+0x94>)
 8000270:	2201      	movs	r2, #1
 8000272:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000274:	4b1b      	ldr	r3, [pc, #108]	; (80002e4 <MX_ADC1_Init+0x94>)
 8000276:	2200      	movs	r2, #0
 8000278:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800027a:	4b1a      	ldr	r3, [pc, #104]	; (80002e4 <MX_ADC1_Init+0x94>)
 800027c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000280:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000282:	4b18      	ldr	r3, [pc, #96]	; (80002e4 <MX_ADC1_Init+0x94>)
 8000284:	2200      	movs	r2, #0
 8000286:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000288:	4b16      	ldr	r3, [pc, #88]	; (80002e4 <MX_ADC1_Init+0x94>)
 800028a:	2202      	movs	r2, #2
 800028c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800028e:	4815      	ldr	r0, [pc, #84]	; (80002e4 <MX_ADC1_Init+0x94>)
 8000290:	f000 fb72 	bl	8000978 <HAL_ADC_Init>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800029a:	f000 f903 	bl	80004a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800029e:	2306      	movs	r3, #6
 80002a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002a2:	2301      	movs	r3, #1
 80002a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80002a6:	2307      	movs	r3, #7
 80002a8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4619      	mov	r1, r3
 80002ae:	480d      	ldr	r0, [pc, #52]	; (80002e4 <MX_ADC1_Init+0x94>)
 80002b0:	f000 fd34 	bl	8000d1c <HAL_ADC_ConfigChannel>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80002ba:	f000 f8f3 	bl	80004a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80002be:	2307      	movs	r3, #7
 80002c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002c2:	2302      	movs	r3, #2
 80002c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	4619      	mov	r1, r3
 80002ca:	4806      	ldr	r0, [pc, #24]	; (80002e4 <MX_ADC1_Init+0x94>)
 80002cc:	f000 fd26 	bl	8000d1c <HAL_ADC_ConfigChannel>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80002d6:	f000 f8e5 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002da:	bf00      	nop
 80002dc:	3710      	adds	r7, #16
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	2000008c 	.word	0x2000008c
 80002e8:	40012400 	.word	0x40012400

080002ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002f0:	4b11      	ldr	r3, [pc, #68]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 80002f2:	4a12      	ldr	r2, [pc, #72]	; (800033c <MX_USART2_UART_Init+0x50>)
 80002f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002f6:	4b10      	ldr	r3, [pc, #64]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 80002f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002fe:	4b0e      	ldr	r3, [pc, #56]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000304:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800030a:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000310:	4b09      	ldr	r3, [pc, #36]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 8000312:	220c      	movs	r2, #12
 8000314:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000316:	4b08      	ldr	r3, [pc, #32]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800031c:	4b06      	ldr	r3, [pc, #24]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 800031e:	2200      	movs	r2, #0
 8000320:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000322:	4805      	ldr	r0, [pc, #20]	; (8000338 <MX_USART2_UART_Init+0x4c>)
 8000324:	f002 f87e 	bl	8002424 <HAL_UART_Init>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800032e:	f000 f8b9 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000100 	.word	0x20000100
 800033c:	40004400 	.word	0x40004400

08000340 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000346:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <MX_DMA_Init+0x38>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	4a0b      	ldr	r2, [pc, #44]	; (8000378 <MX_DMA_Init+0x38>)
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	6153      	str	r3, [r2, #20]
 8000352:	4b09      	ldr	r3, [pc, #36]	; (8000378 <MX_DMA_Init+0x38>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800035e:	2200      	movs	r2, #0
 8000360:	2100      	movs	r1, #0
 8000362:	200b      	movs	r0, #11
 8000364:	f000 ffab 	bl	80012be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000368:	200b      	movs	r0, #11
 800036a:	f000 ffc4 	bl	80012f6 <HAL_NVIC_EnableIRQ>

}
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000

0800037c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b088      	sub	sp, #32
 8000380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000382:	f107 0310 	add.w	r3, r7, #16
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000390:	4b37      	ldr	r3, [pc, #220]	; (8000470 <MX_GPIO_Init+0xf4>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a36      	ldr	r2, [pc, #216]	; (8000470 <MX_GPIO_Init+0xf4>)
 8000396:	f043 0310 	orr.w	r3, r3, #16
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b34      	ldr	r3, [pc, #208]	; (8000470 <MX_GPIO_Init+0xf4>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0310 	and.w	r3, r3, #16
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a8:	4b31      	ldr	r3, [pc, #196]	; (8000470 <MX_GPIO_Init+0xf4>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a30      	ldr	r2, [pc, #192]	; (8000470 <MX_GPIO_Init+0xf4>)
 80003ae:	f043 0320 	orr.w	r3, r3, #32
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b2e      	ldr	r3, [pc, #184]	; (8000470 <MX_GPIO_Init+0xf4>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0320 	and.w	r3, r3, #32
 80003bc:	60bb      	str	r3, [r7, #8]
 80003be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c0:	4b2b      	ldr	r3, [pc, #172]	; (8000470 <MX_GPIO_Init+0xf4>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a2a      	ldr	r2, [pc, #168]	; (8000470 <MX_GPIO_Init+0xf4>)
 80003c6:	f043 0304 	orr.w	r3, r3, #4
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b28      	ldr	r3, [pc, #160]	; (8000470 <MX_GPIO_Init+0xf4>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0304 	and.w	r3, r3, #4
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d8:	4b25      	ldr	r3, [pc, #148]	; (8000470 <MX_GPIO_Init+0xf4>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a24      	ldr	r2, [pc, #144]	; (8000470 <MX_GPIO_Init+0xf4>)
 80003de:	f043 0308 	orr.w	r3, r3, #8
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b22      	ldr	r3, [pc, #136]	; (8000470 <MX_GPIO_Init+0xf4>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0308 	and.w	r3, r3, #8
 80003ec:	603b      	str	r3, [r7, #0]
 80003ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80003f0:	2200      	movs	r2, #0
 80003f2:	21ff      	movs	r1, #255	; 0xff
 80003f4:	481f      	ldr	r0, [pc, #124]	; (8000474 <MX_GPIO_Init+0xf8>)
 80003f6:	f001 fb0b 	bl	8001a10 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2120      	movs	r1, #32
 80003fe:	481e      	ldr	r0, [pc, #120]	; (8000478 <MX_GPIO_Init+0xfc>)
 8000400:	f001 fb06 	bl	8001a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800040a:	4b1c      	ldr	r3, [pc, #112]	; (800047c <MX_GPIO_Init+0x100>)
 800040c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040e:	2300      	movs	r3, #0
 8000410:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000412:	f107 0310 	add.w	r3, r7, #16
 8000416:	4619      	mov	r1, r3
 8000418:	4816      	ldr	r0, [pc, #88]	; (8000474 <MX_GPIO_Init+0xf8>)
 800041a:	f001 f975 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800041e:	23ff      	movs	r3, #255	; 0xff
 8000420:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000422:	2301      	movs	r3, #1
 8000424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000426:	2300      	movs	r3, #0
 8000428:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042a:	2302      	movs	r3, #2
 800042c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800042e:	f107 0310 	add.w	r3, r7, #16
 8000432:	4619      	mov	r1, r3
 8000434:	480f      	ldr	r0, [pc, #60]	; (8000474 <MX_GPIO_Init+0xf8>)
 8000436:	f001 f967 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800043a:	2320      	movs	r3, #32
 800043c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043e:	2301      	movs	r3, #1
 8000440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000442:	2300      	movs	r3, #0
 8000444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000446:	2302      	movs	r3, #2
 8000448:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800044a:	f107 0310 	add.w	r3, r7, #16
 800044e:	4619      	mov	r1, r3
 8000450:	4809      	ldr	r0, [pc, #36]	; (8000478 <MX_GPIO_Init+0xfc>)
 8000452:	f001 f959 	bl	8001708 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000456:	2200      	movs	r2, #0
 8000458:	2100      	movs	r1, #0
 800045a:	2028      	movs	r0, #40	; 0x28
 800045c:	f000 ff2f 	bl	80012be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000460:	2028      	movs	r0, #40	; 0x28
 8000462:	f000 ff48 	bl	80012f6 <HAL_NVIC_EnableIRQ>

}
 8000466:	bf00      	nop
 8000468:	3720      	adds	r7, #32
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40021000 	.word	0x40021000
 8000474:	40011000 	.word	0x40011000
 8000478:	40010800 	.word	0x40010800
 800047c:	10110000 	.word	0x10110000

08000480 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000488:	1d39      	adds	r1, r7, #4
 800048a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800048e:	2201      	movs	r2, #1
 8000490:	4803      	ldr	r0, [pc, #12]	; (80004a0 <__io_putchar+0x20>)
 8000492:	f002 f814 	bl	80024be <HAL_UART_Transmit>

  return ch;
 8000496:	687b      	ldr	r3, [r7, #4]
}
 8000498:	4618      	mov	r0, r3
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20000100 	.word	0x20000100

080004a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a8:	b672      	cpsid	i
}
 80004aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ac:	e7fe      	b.n	80004ac <Error_Handler+0x8>
	...

080004b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004b6:	4b15      	ldr	r3, [pc, #84]	; (800050c <HAL_MspInit+0x5c>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	4a14      	ldr	r2, [pc, #80]	; (800050c <HAL_MspInit+0x5c>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6193      	str	r3, [r2, #24]
 80004c2:	4b12      	ldr	r3, [pc, #72]	; (800050c <HAL_MspInit+0x5c>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	60bb      	str	r3, [r7, #8]
 80004cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <HAL_MspInit+0x5c>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	4a0e      	ldr	r2, [pc, #56]	; (800050c <HAL_MspInit+0x5c>)
 80004d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d8:	61d3      	str	r3, [r2, #28]
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <HAL_MspInit+0x5c>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004e6:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <HAL_MspInit+0x60>)
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	4a04      	ldr	r2, [pc, #16]	; (8000510 <HAL_MspInit+0x60>)
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000502:	bf00      	nop
 8000504:	3714      	adds	r7, #20
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	40021000 	.word	0x40021000
 8000510:	40010000 	.word	0x40010000

08000514 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051c:	f107 0310 	add.w	r3, r7, #16
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a28      	ldr	r2, [pc, #160]	; (80005d0 <HAL_ADC_MspInit+0xbc>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d149      	bne.n	80005c8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000534:	4b27      	ldr	r3, [pc, #156]	; (80005d4 <HAL_ADC_MspInit+0xc0>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a26      	ldr	r2, [pc, #152]	; (80005d4 <HAL_ADC_MspInit+0xc0>)
 800053a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800053e:	6193      	str	r3, [r2, #24]
 8000540:	4b24      	ldr	r3, [pc, #144]	; (80005d4 <HAL_ADC_MspInit+0xc0>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800054c:	4b21      	ldr	r3, [pc, #132]	; (80005d4 <HAL_ADC_MspInit+0xc0>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a20      	ldr	r2, [pc, #128]	; (80005d4 <HAL_ADC_MspInit+0xc0>)
 8000552:	f043 0304 	orr.w	r3, r3, #4
 8000556:	6193      	str	r3, [r2, #24]
 8000558:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <HAL_ADC_MspInit+0xc0>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	f003 0304 	and.w	r3, r3, #4
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7;
 8000564:	23c1      	movs	r3, #193	; 0xc1
 8000566:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000568:	2303      	movs	r3, #3
 800056a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	f107 0310 	add.w	r3, r7, #16
 8000570:	4619      	mov	r1, r3
 8000572:	4819      	ldr	r0, [pc, #100]	; (80005d8 <HAL_ADC_MspInit+0xc4>)
 8000574:	f001 f8c8 	bl	8001708 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000578:	4b18      	ldr	r3, [pc, #96]	; (80005dc <HAL_ADC_MspInit+0xc8>)
 800057a:	4a19      	ldr	r2, [pc, #100]	; (80005e0 <HAL_ADC_MspInit+0xcc>)
 800057c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800057e:	4b17      	ldr	r3, [pc, #92]	; (80005dc <HAL_ADC_MspInit+0xc8>)
 8000580:	2200      	movs	r2, #0
 8000582:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000584:	4b15      	ldr	r3, [pc, #84]	; (80005dc <HAL_ADC_MspInit+0xc8>)
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800058a:	4b14      	ldr	r3, [pc, #80]	; (80005dc <HAL_ADC_MspInit+0xc8>)
 800058c:	2280      	movs	r2, #128	; 0x80
 800058e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000590:	4b12      	ldr	r3, [pc, #72]	; (80005dc <HAL_ADC_MspInit+0xc8>)
 8000592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000596:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000598:	4b10      	ldr	r3, [pc, #64]	; (80005dc <HAL_ADC_MspInit+0xc8>)
 800059a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800059e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005a0:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <HAL_ADC_MspInit+0xc8>)
 80005a2:	2220      	movs	r2, #32
 80005a4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80005a6:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <HAL_ADC_MspInit+0xc8>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005ac:	480b      	ldr	r0, [pc, #44]	; (80005dc <HAL_ADC_MspInit+0xc8>)
 80005ae:	f000 febd 	bl	800132c <HAL_DMA_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80005b8:	f7ff ff74 	bl	80004a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a07      	ldr	r2, [pc, #28]	; (80005dc <HAL_ADC_MspInit+0xc8>)
 80005c0:	621a      	str	r2, [r3, #32]
 80005c2:	4a06      	ldr	r2, [pc, #24]	; (80005dc <HAL_ADC_MspInit+0xc8>)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005c8:	bf00      	nop
 80005ca:	3720      	adds	r7, #32
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40012400 	.word	0x40012400
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40010800 	.word	0x40010800
 80005dc:	200000bc 	.word	0x200000bc
 80005e0:	40020008 	.word	0x40020008

080005e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ec:	f107 0310 	add.w	r3, r7, #16
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a15      	ldr	r2, [pc, #84]	; (8000654 <HAL_UART_MspInit+0x70>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d123      	bne.n	800064c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <HAL_UART_MspInit+0x74>)
 8000606:	69db      	ldr	r3, [r3, #28]
 8000608:	4a13      	ldr	r2, [pc, #76]	; (8000658 <HAL_UART_MspInit+0x74>)
 800060a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060e:	61d3      	str	r3, [r2, #28]
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <HAL_UART_MspInit+0x74>)
 8000612:	69db      	ldr	r3, [r3, #28]
 8000614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <HAL_UART_MspInit+0x74>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a0d      	ldr	r2, [pc, #52]	; (8000658 <HAL_UART_MspInit+0x74>)
 8000622:	f043 0304 	orr.w	r3, r3, #4
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <HAL_UART_MspInit+0x74>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0304 	and.w	r3, r3, #4
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000634:	230c      	movs	r3, #12
 8000636:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000638:	2302      	movs	r3, #2
 800063a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2302      	movs	r3, #2
 800063e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	4619      	mov	r1, r3
 8000646:	4805      	ldr	r0, [pc, #20]	; (800065c <HAL_UART_MspInit+0x78>)
 8000648:	f001 f85e 	bl	8001708 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800064c:	bf00      	nop
 800064e:	3720      	adds	r7, #32
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40004400 	.word	0x40004400
 8000658:	40021000 	.word	0x40021000
 800065c:	40010800 	.word	0x40010800

08000660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <NMI_Handler+0x4>

08000666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800066a:	e7fe      	b.n	800066a <HardFault_Handler+0x4>

0800066c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000670:	e7fe      	b.n	8000670 <MemManage_Handler+0x4>

08000672 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000676:	e7fe      	b.n	8000676 <BusFault_Handler+0x4>

08000678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800067c:	e7fe      	b.n	800067c <UsageFault_Handler+0x4>

0800067e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr

0800068a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr

08000696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr

080006a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a6:	f000 f927 	bl	80008f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80006b4:	4802      	ldr	r0, [pc, #8]	; (80006c0 <DMA1_Channel1_IRQHandler+0x10>)
 80006b6:	f000 fef3 	bl	80014a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200000bc 	.word	0x200000bc

080006c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80006c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006cc:	f001 f9b8 	bl	8001a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	e00a      	b.n	80006fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006e6:	f3af 8000 	nop.w
 80006ea:	4601      	mov	r1, r0
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	1c5a      	adds	r2, r3, #1
 80006f0:	60ba      	str	r2, [r7, #8]
 80006f2:	b2ca      	uxtb	r2, r1
 80006f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	3301      	adds	r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	697a      	ldr	r2, [r7, #20]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	429a      	cmp	r2, r3
 8000702:	dbf0      	blt.n	80006e6 <_read+0x12>
	}

return len;
 8000704:	687b      	ldr	r3, [r7, #4]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3718      	adds	r7, #24
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b086      	sub	sp, #24
 8000712:	af00      	add	r7, sp, #0
 8000714:	60f8      	str	r0, [r7, #12]
 8000716:	60b9      	str	r1, [r7, #8]
 8000718:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	e009      	b.n	8000734 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	1c5a      	adds	r2, r3, #1
 8000724:	60ba      	str	r2, [r7, #8]
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff fea9 	bl	8000480 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	3301      	adds	r3, #1
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	697a      	ldr	r2, [r7, #20]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	429a      	cmp	r2, r3
 800073a:	dbf1      	blt.n	8000720 <_write+0x12>
	}
	return len;
 800073c:	687b      	ldr	r3, [r7, #4]
}
 800073e:	4618      	mov	r0, r3
 8000740:	3718      	adds	r7, #24
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <_close>:

int _close(int file)
{
 8000746:	b480      	push	{r7}
 8000748:	b083      	sub	sp, #12
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
	return -1;
 800074e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000752:	4618      	mov	r0, r3
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800076c:	605a      	str	r2, [r3, #4]
	return 0;
 800076e:	2300      	movs	r3, #0
}
 8000770:	4618      	mov	r0, r3
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr

0800077a <_isatty>:

int _isatty(int file)
{
 800077a:	b480      	push	{r7}
 800077c:	b083      	sub	sp, #12
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
	return 1;
 8000782:	2301      	movs	r3, #1
}
 8000784:	4618      	mov	r0, r3
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr

0800078e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800078e:	b480      	push	{r7}
 8000790:	b085      	sub	sp, #20
 8000792:	af00      	add	r7, sp, #0
 8000794:	60f8      	str	r0, [r7, #12]
 8000796:	60b9      	str	r1, [r7, #8]
 8000798:	607a      	str	r2, [r7, #4]
	return 0;
 800079a:	2300      	movs	r3, #0
}
 800079c:	4618      	mov	r0, r3
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
	...

080007a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007b0:	4a14      	ldr	r2, [pc, #80]	; (8000804 <_sbrk+0x5c>)
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <_sbrk+0x60>)
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007bc:	4b13      	ldr	r3, [pc, #76]	; (800080c <_sbrk+0x64>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d102      	bne.n	80007ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <_sbrk+0x64>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	; (8000810 <_sbrk+0x68>)
 80007c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <_sbrk+0x64>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4413      	add	r3, r2
 80007d2:	693a      	ldr	r2, [r7, #16]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d207      	bcs.n	80007e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007d8:	f001 ffdc 	bl	8002794 <__errno>
 80007dc:	4603      	mov	r3, r0
 80007de:	220c      	movs	r2, #12
 80007e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007e2:	f04f 33ff 	mov.w	r3, #4294967295
 80007e6:	e009      	b.n	80007fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <_sbrk+0x64>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ee:	4b07      	ldr	r3, [pc, #28]	; (800080c <_sbrk+0x64>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	4a05      	ldr	r2, [pc, #20]	; (800080c <_sbrk+0x64>)
 80007f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007fa:	68fb      	ldr	r3, [r7, #12]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3718      	adds	r7, #24
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20005000 	.word	0x20005000
 8000808:	00000400 	.word	0x00000400
 800080c:	2000014c 	.word	0x2000014c
 8000810:	20000168 	.word	0x20000168

08000814 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000820:	480c      	ldr	r0, [pc, #48]	; (8000854 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000822:	490d      	ldr	r1, [pc, #52]	; (8000858 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000824:	4a0d      	ldr	r2, [pc, #52]	; (800085c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000828:	e002      	b.n	8000830 <LoopCopyDataInit>

0800082a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800082c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082e:	3304      	adds	r3, #4

08000830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000834:	d3f9      	bcc.n	800082a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000836:	4a0a      	ldr	r2, [pc, #40]	; (8000860 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000838:	4c0a      	ldr	r4, [pc, #40]	; (8000864 <LoopFillZerobss+0x22>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800083c:	e001      	b.n	8000842 <LoopFillZerobss>

0800083e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000840:	3204      	adds	r2, #4

08000842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000844:	d3fb      	bcc.n	800083e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000846:	f7ff ffe5 	bl	8000814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800084a:	f001 ffa9 	bl	80027a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800084e:	f7ff fc7d 	bl	800014c <main>
  bx lr
 8000852:	4770      	bx	lr
  ldr r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000858:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800085c:	0800390c 	.word	0x0800390c
  ldr r2, =_sbss
 8000860:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000864:	20000164 	.word	0x20000164

08000868 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000868:	e7fe      	b.n	8000868 <ADC1_2_IRQHandler>
	...

0800086c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <HAL_Init+0x28>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a07      	ldr	r2, [pc, #28]	; (8000894 <HAL_Init+0x28>)
 8000876:	f043 0310 	orr.w	r3, r3, #16
 800087a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800087c:	2003      	movs	r0, #3
 800087e:	f000 fd13 	bl	80012a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000882:	2000      	movs	r0, #0
 8000884:	f000 f808 	bl	8000898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000888:	f7ff fe12 	bl	80004b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40022000 	.word	0x40022000

08000898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_InitTick+0x54>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_InitTick+0x58>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	4619      	mov	r1, r3
 80008aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80008b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 fd2b 	bl	8001312 <HAL_SYSTICK_Config>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
 80008c4:	e00e      	b.n	80008e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2b0f      	cmp	r3, #15
 80008ca:	d80a      	bhi.n	80008e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008cc:	2200      	movs	r2, #0
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295
 80008d4:	f000 fcf3 	bl	80012be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d8:	4a06      	ldr	r2, [pc, #24]	; (80008f4 <HAL_InitTick+0x5c>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008de:	2300      	movs	r3, #0
 80008e0:	e000      	b.n	80008e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000008 	.word	0x20000008
 80008f4:	20000004 	.word	0x20000004

080008f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <HAL_IncTick+0x1c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	461a      	mov	r2, r3
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_IncTick+0x20>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4413      	add	r3, r2
 8000908:	4a03      	ldr	r2, [pc, #12]	; (8000918 <HAL_IncTick+0x20>)
 800090a:	6013      	str	r3, [r2, #0]
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr
 8000914:	20000008 	.word	0x20000008
 8000918:	20000150 	.word	0x20000150

0800091c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return uwTick;
 8000920:	4b02      	ldr	r3, [pc, #8]	; (800092c <HAL_GetTick+0x10>)
 8000922:	681b      	ldr	r3, [r3, #0]
}
 8000924:	4618      	mov	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	20000150 	.word	0x20000150

08000930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000938:	f7ff fff0 	bl	800091c <HAL_GetTick>
 800093c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000948:	d005      	beq.n	8000956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800094a:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_Delay+0x44>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	461a      	mov	r2, r3
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	4413      	add	r3, r2
 8000954:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000956:	bf00      	nop
 8000958:	f7ff ffe0 	bl	800091c <HAL_GetTick>
 800095c:	4602      	mov	r2, r0
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	429a      	cmp	r2, r3
 8000966:	d8f7      	bhi.n	8000958 <HAL_Delay+0x28>
  {
  }
}
 8000968:	bf00      	nop
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000008 	.word	0x20000008

08000978 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000980:	2300      	movs	r3, #0
 8000982:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000984:	2300      	movs	r3, #0
 8000986:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000988:	2300      	movs	r3, #0
 800098a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800098c:	2300      	movs	r3, #0
 800098e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d101      	bne.n	800099a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e0be      	b.n	8000b18 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d109      	bne.n	80009bc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff fdac 	bl	8000514 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f000 faff 	bl	8000fc0 <ADC_ConversionStop_Disable>
 80009c2:	4603      	mov	r3, r0
 80009c4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ca:	f003 0310 	and.w	r3, r3, #16
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	f040 8099 	bne.w	8000b06 <HAL_ADC_Init+0x18e>
 80009d4:	7dfb      	ldrb	r3, [r7, #23]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f040 8095 	bne.w	8000b06 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80009e4:	f023 0302 	bic.w	r3, r3, #2
 80009e8:	f043 0202 	orr.w	r2, r3, #2
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009f8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	7b1b      	ldrb	r3, [r3, #12]
 80009fe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a00:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a10:	d003      	beq.n	8000a1a <HAL_ADC_Init+0xa2>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d102      	bne.n	8000a20 <HAL_ADC_Init+0xa8>
 8000a1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a1e:	e000      	b.n	8000a22 <HAL_ADC_Init+0xaa>
 8000a20:	2300      	movs	r3, #0
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	7d1b      	ldrb	r3, [r3, #20]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d119      	bne.n	8000a64 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	7b1b      	ldrb	r3, [r3, #12]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d109      	bne.n	8000a4c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	035a      	lsls	r2, r3, #13
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	e00b      	b.n	8000a64 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a50:	f043 0220 	orr.w	r2, r3, #32
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5c:	f043 0201 	orr.w	r2, r3, #1
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	430a      	orrs	r2, r1
 8000a76:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	689a      	ldr	r2, [r3, #8]
 8000a7e:	4b28      	ldr	r3, [pc, #160]	; (8000b20 <HAL_ADC_Init+0x1a8>)
 8000a80:	4013      	ands	r3, r2
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	6812      	ldr	r2, [r2, #0]
 8000a86:	68b9      	ldr	r1, [r7, #8]
 8000a88:	430b      	orrs	r3, r1
 8000a8a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a94:	d003      	beq.n	8000a9e <HAL_ADC_Init+0x126>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d104      	bne.n	8000aa8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	691b      	ldr	r3, [r3, #16]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	051b      	lsls	r3, r3, #20
 8000aa6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aae:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	430a      	orrs	r2, r1
 8000aba:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	689a      	ldr	r2, [r3, #8]
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <HAL_ADC_Init+0x1ac>)
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d10b      	bne.n	8000ae4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad6:	f023 0303 	bic.w	r3, r3, #3
 8000ada:	f043 0201 	orr.w	r2, r3, #1
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ae2:	e018      	b.n	8000b16 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae8:	f023 0312 	bic.w	r3, r3, #18
 8000aec:	f043 0210 	orr.w	r2, r3, #16
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af8:	f043 0201 	orr.w	r2, r3, #1
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b00:	2301      	movs	r3, #1
 8000b02:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b04:	e007      	b.n	8000b16 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b0a:	f043 0210 	orr.w	r2, r3, #16
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	ffe1f7fd 	.word	0xffe1f7fd
 8000b24:	ff1f0efe 	.word	0xff1f0efe

08000b28 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b34:	2300      	movs	r3, #0
 8000b36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a64      	ldr	r2, [pc, #400]	; (8000cd0 <HAL_ADC_Start_DMA+0x1a8>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d004      	beq.n	8000b4c <HAL_ADC_Start_DMA+0x24>
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a63      	ldr	r2, [pc, #396]	; (8000cd4 <HAL_ADC_Start_DMA+0x1ac>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d106      	bne.n	8000b5a <HAL_ADC_Start_DMA+0x32>
 8000b4c:	4b60      	ldr	r3, [pc, #384]	; (8000cd0 <HAL_ADC_Start_DMA+0x1a8>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	f040 80b3 	bne.w	8000cc0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d101      	bne.n	8000b68 <HAL_ADC_Start_DMA+0x40>
 8000b64:	2302      	movs	r3, #2
 8000b66:	e0ae      	b.n	8000cc6 <HAL_ADC_Start_DMA+0x19e>
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000b70:	68f8      	ldr	r0, [r7, #12]
 8000b72:	f000 f9cb 	bl	8000f0c <ADC_Enable>
 8000b76:	4603      	mov	r3, r0
 8000b78:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000b7a:	7dfb      	ldrb	r3, [r7, #23]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	f040 809a 	bne.w	8000cb6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b86:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000b8a:	f023 0301 	bic.w	r3, r3, #1
 8000b8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a4e      	ldr	r2, [pc, #312]	; (8000cd4 <HAL_ADC_Start_DMA+0x1ac>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d105      	bne.n	8000bac <HAL_ADC_Start_DMA+0x84>
 8000ba0:	4b4b      	ldr	r3, [pc, #300]	; (8000cd0 <HAL_ADC_Start_DMA+0x1a8>)
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d115      	bne.n	8000bd8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d026      	beq.n	8000c14 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bd6:	e01d      	b.n	8000c14 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bdc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a39      	ldr	r2, [pc, #228]	; (8000cd0 <HAL_ADC_Start_DMA+0x1a8>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d004      	beq.n	8000bf8 <HAL_ADC_Start_DMA+0xd0>
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a38      	ldr	r2, [pc, #224]	; (8000cd4 <HAL_ADC_Start_DMA+0x1ac>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d10d      	bne.n	8000c14 <HAL_ADC_Start_DMA+0xec>
 8000bf8:	4b35      	ldr	r3, [pc, #212]	; (8000cd0 <HAL_ADC_Start_DMA+0x1a8>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d007      	beq.n	8000c14 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c08:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c0c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d006      	beq.n	8000c2e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c24:	f023 0206 	bic.w	r2, r3, #6
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c2c:	e002      	b.n	8000c34 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	2200      	movs	r2, #0
 8000c32:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2200      	movs	r2, #0
 8000c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	6a1b      	ldr	r3, [r3, #32]
 8000c40:	4a25      	ldr	r2, [pc, #148]	; (8000cd8 <HAL_ADC_Start_DMA+0x1b0>)
 8000c42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	6a1b      	ldr	r3, [r3, #32]
 8000c48:	4a24      	ldr	r2, [pc, #144]	; (8000cdc <HAL_ADC_Start_DMA+0x1b4>)
 8000c4a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	6a1b      	ldr	r3, [r3, #32]
 8000c50:	4a23      	ldr	r2, [pc, #140]	; (8000ce0 <HAL_ADC_Start_DMA+0x1b8>)
 8000c52:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f06f 0202 	mvn.w	r2, #2
 8000c5c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	689a      	ldr	r2, [r3, #8]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c6c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	6a18      	ldr	r0, [r3, #32]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	334c      	adds	r3, #76	; 0x4c
 8000c78:	4619      	mov	r1, r3
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f000 fbaf 	bl	80013e0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c8c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c90:	d108      	bne.n	8000ca4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000ca0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000ca2:	e00f      	b.n	8000cc4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000cb2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000cb4:	e006      	b.n	8000cc4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000cbe:	e001      	b.n	8000cc4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40012400 	.word	0x40012400
 8000cd4:	40012800 	.word	0x40012800
 8000cd8:	08001043 	.word	0x08001043
 8000cdc:	080010bf 	.word	0x080010bf
 8000ce0:	080010db 	.word	0x080010db

08000ce4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr

08000cf6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
	...

08000d1c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d101      	bne.n	8000d3c <HAL_ADC_ConfigChannel+0x20>
 8000d38:	2302      	movs	r3, #2
 8000d3a:	e0dc      	b.n	8000ef6 <HAL_ADC_ConfigChannel+0x1da>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b06      	cmp	r3, #6
 8000d4a:	d81c      	bhi.n	8000d86 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685a      	ldr	r2, [r3, #4]
 8000d56:	4613      	mov	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4413      	add	r3, r2
 8000d5c:	3b05      	subs	r3, #5
 8000d5e:	221f      	movs	r2, #31
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	4019      	ands	r1, r3
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	6818      	ldr	r0, [r3, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	4613      	mov	r3, r2
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	4413      	add	r3, r2
 8000d76:	3b05      	subs	r3, #5
 8000d78:	fa00 f203 	lsl.w	r2, r0, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	430a      	orrs	r2, r1
 8000d82:	635a      	str	r2, [r3, #52]	; 0x34
 8000d84:	e03c      	b.n	8000e00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2b0c      	cmp	r3, #12
 8000d8c:	d81c      	bhi.n	8000dc8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	3b23      	subs	r3, #35	; 0x23
 8000da0:	221f      	movs	r2, #31
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	4019      	ands	r1, r3
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	6818      	ldr	r0, [r3, #0]
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	4613      	mov	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4413      	add	r3, r2
 8000db8:	3b23      	subs	r3, #35	; 0x23
 8000dba:	fa00 f203 	lsl.w	r2, r0, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	631a      	str	r2, [r3, #48]	; 0x30
 8000dc6:	e01b      	b.n	8000e00 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3b41      	subs	r3, #65	; 0x41
 8000dda:	221f      	movs	r2, #31
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	4019      	ands	r1, r3
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	6818      	ldr	r0, [r3, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	4613      	mov	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4413      	add	r3, r2
 8000df2:	3b41      	subs	r3, #65	; 0x41
 8000df4:	fa00 f203 	lsl.w	r2, r0, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b09      	cmp	r3, #9
 8000e06:	d91c      	bls.n	8000e42 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	68d9      	ldr	r1, [r3, #12]
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	4613      	mov	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	3b1e      	subs	r3, #30
 8000e1a:	2207      	movs	r2, #7
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	4019      	ands	r1, r3
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	6898      	ldr	r0, [r3, #8]
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	4413      	add	r3, r2
 8000e32:	3b1e      	subs	r3, #30
 8000e34:	fa00 f203 	lsl.w	r2, r0, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	e019      	b.n	8000e76 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	6919      	ldr	r1, [r3, #16]
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	4413      	add	r3, r2
 8000e52:	2207      	movs	r2, #7
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	4019      	ands	r1, r3
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	6898      	ldr	r0, [r3, #8]
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4613      	mov	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	4413      	add	r3, r2
 8000e6a:	fa00 f203 	lsl.w	r2, r0, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	430a      	orrs	r2, r1
 8000e74:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b10      	cmp	r3, #16
 8000e7c:	d003      	beq.n	8000e86 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e82:	2b11      	cmp	r3, #17
 8000e84:	d132      	bne.n	8000eec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a1d      	ldr	r2, [pc, #116]	; (8000f00 <HAL_ADC_ConfigChannel+0x1e4>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d125      	bne.n	8000edc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d126      	bne.n	8000eec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000eac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b10      	cmp	r3, #16
 8000eb4:	d11a      	bne.n	8000eec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000eb6:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <HAL_ADC_ConfigChannel+0x1e8>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a13      	ldr	r2, [pc, #76]	; (8000f08 <HAL_ADC_ConfigChannel+0x1ec>)
 8000ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec0:	0c9a      	lsrs	r2, r3, #18
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ecc:	e002      	b.n	8000ed4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1f9      	bne.n	8000ece <HAL_ADC_ConfigChannel+0x1b2>
 8000eda:	e007      	b.n	8000eec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee0:	f043 0220 	orr.w	r2, r3, #32
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	40012400 	.word	0x40012400
 8000f04:	20000000 	.word	0x20000000
 8000f08:	431bde83 	.word	0x431bde83

08000f0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d040      	beq.n	8000fac <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f042 0201 	orr.w	r2, r2, #1
 8000f38:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f3a:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <ADC_Enable+0xac>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a1f      	ldr	r2, [pc, #124]	; (8000fbc <ADC_Enable+0xb0>)
 8000f40:	fba2 2303 	umull	r2, r3, r2, r3
 8000f44:	0c9b      	lsrs	r3, r3, #18
 8000f46:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f48:	e002      	b.n	8000f50 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1f9      	bne.n	8000f4a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f56:	f7ff fce1 	bl	800091c <HAL_GetTick>
 8000f5a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f5c:	e01f      	b.n	8000f9e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f5e:	f7ff fcdd 	bl	800091c <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d918      	bls.n	8000f9e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d011      	beq.n	8000f9e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7e:	f043 0210 	orr.w	r2, r3, #16
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8a:	f043 0201 	orr.w	r2, r3, #1
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e007      	b.n	8000fae <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d1d8      	bne.n	8000f5e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	431bde83 	.word	0x431bde83

08000fc0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d12e      	bne.n	8001038 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f022 0201 	bic.w	r2, r2, #1
 8000fe8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fea:	f7ff fc97 	bl	800091c <HAL_GetTick>
 8000fee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ff0:	e01b      	b.n	800102a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ff2:	f7ff fc93 	bl	800091c <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d914      	bls.n	800102a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b01      	cmp	r3, #1
 800100c:	d10d      	bne.n	800102a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001012:	f043 0210 	orr.w	r2, r3, #16
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101e:	f043 0201 	orr.w	r2, r3, #1
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e007      	b.n	800103a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	2b01      	cmp	r3, #1
 8001036:	d0dc      	beq.n	8000ff2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b084      	sub	sp, #16
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001058:	2b00      	cmp	r3, #0
 800105a:	d127      	bne.n	80010ac <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001060:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001072:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001076:	d115      	bne.n	80010a4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800107c:	2b00      	cmp	r3, #0
 800107e:	d111      	bne.n	80010a4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001084:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001090:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d105      	bne.n	80010a4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109c:	f043 0201 	orr.w	r2, r3, #1
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f7ff fe1d 	bl	8000ce4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80010aa:	e004      	b.n	80010b6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	4798      	blx	r3
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b084      	sub	sp, #16
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f7ff fe12 	bl	8000cf6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b084      	sub	sp, #16
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f8:	f043 0204 	orr.w	r2, r3, #4
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f7ff fe01 	bl	8000d08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800112c:	4013      	ands	r3, r2
 800112e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800113c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001142:	4a04      	ldr	r2, [pc, #16]	; (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	60d3      	str	r3, [r2, #12]
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <__NVIC_GetPriorityGrouping+0x18>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	f003 0307 	and.w	r3, r3, #7
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	2b00      	cmp	r3, #0
 8001184:	db0b      	blt.n	800119e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	f003 021f 	and.w	r2, r3, #31
 800118c:	4906      	ldr	r1, [pc, #24]	; (80011a8 <__NVIC_EnableIRQ+0x34>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	095b      	lsrs	r3, r3, #5
 8001194:	2001      	movs	r0, #1
 8001196:	fa00 f202 	lsl.w	r2, r0, r2
 800119a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100

080011ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	db0a      	blt.n	80011d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	490c      	ldr	r1, [pc, #48]	; (80011f8 <__NVIC_SetPriority+0x4c>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	440b      	add	r3, r1
 80011d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d4:	e00a      	b.n	80011ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4908      	ldr	r1, [pc, #32]	; (80011fc <__NVIC_SetPriority+0x50>)
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	3b04      	subs	r3, #4
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	440b      	add	r3, r1
 80011ea:	761a      	strb	r2, [r3, #24]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000e100 	.word	0xe000e100
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001200:	b480      	push	{r7}
 8001202:	b089      	sub	sp, #36	; 0x24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f1c3 0307 	rsb	r3, r3, #7
 800121a:	2b04      	cmp	r3, #4
 800121c:	bf28      	it	cs
 800121e:	2304      	movcs	r3, #4
 8001220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3304      	adds	r3, #4
 8001226:	2b06      	cmp	r3, #6
 8001228:	d902      	bls.n	8001230 <NVIC_EncodePriority+0x30>
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3b03      	subs	r3, #3
 800122e:	e000      	b.n	8001232 <NVIC_EncodePriority+0x32>
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	401a      	ands	r2, r3
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001248:	f04f 31ff 	mov.w	r1, #4294967295
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa01 f303 	lsl.w	r3, r1, r3
 8001252:	43d9      	mvns	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	4313      	orrs	r3, r2
         );
}
 800125a:	4618      	mov	r0, r3
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001274:	d301      	bcc.n	800127a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001276:	2301      	movs	r3, #1
 8001278:	e00f      	b.n	800129a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <SysTick_Config+0x40>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001282:	210f      	movs	r1, #15
 8001284:	f04f 30ff 	mov.w	r0, #4294967295
 8001288:	f7ff ff90 	bl	80011ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <SysTick_Config+0x40>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <SysTick_Config+0x40>)
 8001294:	2207      	movs	r2, #7
 8001296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	e000e010 	.word	0xe000e010

080012a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff ff2d 	bl	8001110 <__NVIC_SetPriorityGrouping>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012be:	b580      	push	{r7, lr}
 80012c0:	b086      	sub	sp, #24
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
 80012ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d0:	f7ff ff42 	bl	8001158 <__NVIC_GetPriorityGrouping>
 80012d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	6978      	ldr	r0, [r7, #20]
 80012dc:	f7ff ff90 	bl	8001200 <NVIC_EncodePriority>
 80012e0:	4602      	mov	r2, r0
 80012e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e6:	4611      	mov	r1, r2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff5f 	bl	80011ac <__NVIC_SetPriority>
}
 80012ee:	bf00      	nop
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff35 	bl	8001174 <__NVIC_EnableIRQ>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ffa2 	bl	8001264 <SysTick_Config>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e043      	b.n	80013ca <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <HAL_DMA_Init+0xa8>)
 800134a:	4413      	add	r3, r2
 800134c:	4a22      	ldr	r2, [pc, #136]	; (80013d8 <HAL_DMA_Init+0xac>)
 800134e:	fba2 2303 	umull	r2, r3, r2, r3
 8001352:	091b      	lsrs	r3, r3, #4
 8001354:	009a      	lsls	r2, r3, #2
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a1f      	ldr	r2, [pc, #124]	; (80013dc <HAL_DMA_Init+0xb0>)
 800135e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2202      	movs	r2, #2
 8001364:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001376:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800137a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001384:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001390:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800139c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	bffdfff8 	.word	0xbffdfff8
 80013d8:	cccccccd 	.word	0xcccccccd
 80013dc:	40020000 	.word	0x40020000

080013e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d101      	bne.n	8001400 <HAL_DMA_Start_IT+0x20>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e04a      	b.n	8001496 <HAL_DMA_Start_IT+0xb6>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800140e:	2b01      	cmp	r3, #1
 8001410:	d13a      	bne.n	8001488 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2202      	movs	r2, #2
 8001416:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2200      	movs	r2, #0
 800141e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0201 	bic.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f000 f938 	bl	80016ac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001440:	2b00      	cmp	r3, #0
 8001442:	d008      	beq.n	8001456 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 020e 	orr.w	r2, r2, #14
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	e00f      	b.n	8001476 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0204 	bic.w	r2, r2, #4
 8001464:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f042 020a 	orr.w	r2, r2, #10
 8001474:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f042 0201 	orr.w	r2, r2, #1
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	e005      	b.n	8001494 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001490:	2302      	movs	r3, #2
 8001492:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001494:	7dfb      	ldrb	r3, [r7, #23]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	2204      	movs	r2, #4
 80014be:	409a      	lsls	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4013      	ands	r3, r2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d04f      	beq.n	8001568 <HAL_DMA_IRQHandler+0xc8>
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d04a      	beq.n	8001568 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0320 	and.w	r3, r3, #32
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d107      	bne.n	80014f0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0204 	bic.w	r2, r2, #4
 80014ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a66      	ldr	r2, [pc, #408]	; (8001690 <HAL_DMA_IRQHandler+0x1f0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d029      	beq.n	800154e <HAL_DMA_IRQHandler+0xae>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a65      	ldr	r2, [pc, #404]	; (8001694 <HAL_DMA_IRQHandler+0x1f4>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d022      	beq.n	800154a <HAL_DMA_IRQHandler+0xaa>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a63      	ldr	r2, [pc, #396]	; (8001698 <HAL_DMA_IRQHandler+0x1f8>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d01a      	beq.n	8001544 <HAL_DMA_IRQHandler+0xa4>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a62      	ldr	r2, [pc, #392]	; (800169c <HAL_DMA_IRQHandler+0x1fc>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d012      	beq.n	800153e <HAL_DMA_IRQHandler+0x9e>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a60      	ldr	r2, [pc, #384]	; (80016a0 <HAL_DMA_IRQHandler+0x200>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d00a      	beq.n	8001538 <HAL_DMA_IRQHandler+0x98>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a5f      	ldr	r2, [pc, #380]	; (80016a4 <HAL_DMA_IRQHandler+0x204>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d102      	bne.n	8001532 <HAL_DMA_IRQHandler+0x92>
 800152c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001530:	e00e      	b.n	8001550 <HAL_DMA_IRQHandler+0xb0>
 8001532:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001536:	e00b      	b.n	8001550 <HAL_DMA_IRQHandler+0xb0>
 8001538:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800153c:	e008      	b.n	8001550 <HAL_DMA_IRQHandler+0xb0>
 800153e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001542:	e005      	b.n	8001550 <HAL_DMA_IRQHandler+0xb0>
 8001544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001548:	e002      	b.n	8001550 <HAL_DMA_IRQHandler+0xb0>
 800154a:	2340      	movs	r3, #64	; 0x40
 800154c:	e000      	b.n	8001550 <HAL_DMA_IRQHandler+0xb0>
 800154e:	2304      	movs	r3, #4
 8001550:	4a55      	ldr	r2, [pc, #340]	; (80016a8 <HAL_DMA_IRQHandler+0x208>)
 8001552:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 8094 	beq.w	8001686 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001566:	e08e      	b.n	8001686 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	2202      	movs	r2, #2
 800156e:	409a      	lsls	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4013      	ands	r3, r2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d056      	beq.n	8001626 <HAL_DMA_IRQHandler+0x186>
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d051      	beq.n	8001626 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0320 	and.w	r3, r3, #32
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10b      	bne.n	80015a8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 020a 	bic.w	r2, r2, #10
 800159e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a38      	ldr	r2, [pc, #224]	; (8001690 <HAL_DMA_IRQHandler+0x1f0>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d029      	beq.n	8001606 <HAL_DMA_IRQHandler+0x166>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a37      	ldr	r2, [pc, #220]	; (8001694 <HAL_DMA_IRQHandler+0x1f4>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d022      	beq.n	8001602 <HAL_DMA_IRQHandler+0x162>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a35      	ldr	r2, [pc, #212]	; (8001698 <HAL_DMA_IRQHandler+0x1f8>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d01a      	beq.n	80015fc <HAL_DMA_IRQHandler+0x15c>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a34      	ldr	r2, [pc, #208]	; (800169c <HAL_DMA_IRQHandler+0x1fc>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d012      	beq.n	80015f6 <HAL_DMA_IRQHandler+0x156>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a32      	ldr	r2, [pc, #200]	; (80016a0 <HAL_DMA_IRQHandler+0x200>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d00a      	beq.n	80015f0 <HAL_DMA_IRQHandler+0x150>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a31      	ldr	r2, [pc, #196]	; (80016a4 <HAL_DMA_IRQHandler+0x204>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d102      	bne.n	80015ea <HAL_DMA_IRQHandler+0x14a>
 80015e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015e8:	e00e      	b.n	8001608 <HAL_DMA_IRQHandler+0x168>
 80015ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015ee:	e00b      	b.n	8001608 <HAL_DMA_IRQHandler+0x168>
 80015f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015f4:	e008      	b.n	8001608 <HAL_DMA_IRQHandler+0x168>
 80015f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015fa:	e005      	b.n	8001608 <HAL_DMA_IRQHandler+0x168>
 80015fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001600:	e002      	b.n	8001608 <HAL_DMA_IRQHandler+0x168>
 8001602:	2320      	movs	r3, #32
 8001604:	e000      	b.n	8001608 <HAL_DMA_IRQHandler+0x168>
 8001606:	2302      	movs	r3, #2
 8001608:	4a27      	ldr	r2, [pc, #156]	; (80016a8 <HAL_DMA_IRQHandler+0x208>)
 800160a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001618:	2b00      	cmp	r3, #0
 800161a:	d034      	beq.n	8001686 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001624:	e02f      	b.n	8001686 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	2208      	movs	r2, #8
 800162c:	409a      	lsls	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4013      	ands	r3, r2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d028      	beq.n	8001688 <HAL_DMA_IRQHandler+0x1e8>
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	2b00      	cmp	r3, #0
 800163e:	d023      	beq.n	8001688 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 020e 	bic.w	r2, r2, #14
 800164e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001658:	2101      	movs	r1, #1
 800165a:	fa01 f202 	lsl.w	r2, r1, r2
 800165e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	2b00      	cmp	r3, #0
 800167c:	d004      	beq.n	8001688 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	4798      	blx	r3
    }
  }
  return;
 8001686:	bf00      	nop
 8001688:	bf00      	nop
}
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40020008 	.word	0x40020008
 8001694:	4002001c 	.word	0x4002001c
 8001698:	40020030 	.word	0x40020030
 800169c:	40020044 	.word	0x40020044
 80016a0:	40020058 	.word	0x40020058
 80016a4:	4002006c 	.word	0x4002006c
 80016a8:	40020000 	.word	0x40020000

080016ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
 80016b8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c2:	2101      	movs	r1, #1
 80016c4:	fa01 f202 	lsl.w	r2, r1, r2
 80016c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b10      	cmp	r3, #16
 80016d8:	d108      	bne.n	80016ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016ea:	e007      	b.n	80016fc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68ba      	ldr	r2, [r7, #8]
 80016f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	60da      	str	r2, [r3, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
	...

08001708 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001708:	b480      	push	{r7}
 800170a:	b08b      	sub	sp, #44	; 0x2c
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171a:	e169      	b.n	80019f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800171c:	2201      	movs	r2, #1
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	429a      	cmp	r2, r3
 8001736:	f040 8158 	bne.w	80019ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	4a9a      	ldr	r2, [pc, #616]	; (80019a8 <HAL_GPIO_Init+0x2a0>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d05e      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 8001744:	4a98      	ldr	r2, [pc, #608]	; (80019a8 <HAL_GPIO_Init+0x2a0>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d875      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 800174a:	4a98      	ldr	r2, [pc, #608]	; (80019ac <HAL_GPIO_Init+0x2a4>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d058      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 8001750:	4a96      	ldr	r2, [pc, #600]	; (80019ac <HAL_GPIO_Init+0x2a4>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d86f      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 8001756:	4a96      	ldr	r2, [pc, #600]	; (80019b0 <HAL_GPIO_Init+0x2a8>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d052      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 800175c:	4a94      	ldr	r2, [pc, #592]	; (80019b0 <HAL_GPIO_Init+0x2a8>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d869      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 8001762:	4a94      	ldr	r2, [pc, #592]	; (80019b4 <HAL_GPIO_Init+0x2ac>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d04c      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 8001768:	4a92      	ldr	r2, [pc, #584]	; (80019b4 <HAL_GPIO_Init+0x2ac>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d863      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 800176e:	4a92      	ldr	r2, [pc, #584]	; (80019b8 <HAL_GPIO_Init+0x2b0>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d046      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
 8001774:	4a90      	ldr	r2, [pc, #576]	; (80019b8 <HAL_GPIO_Init+0x2b0>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d85d      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 800177a:	2b12      	cmp	r3, #18
 800177c:	d82a      	bhi.n	80017d4 <HAL_GPIO_Init+0xcc>
 800177e:	2b12      	cmp	r3, #18
 8001780:	d859      	bhi.n	8001836 <HAL_GPIO_Init+0x12e>
 8001782:	a201      	add	r2, pc, #4	; (adr r2, 8001788 <HAL_GPIO_Init+0x80>)
 8001784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001788:	08001803 	.word	0x08001803
 800178c:	080017dd 	.word	0x080017dd
 8001790:	080017ef 	.word	0x080017ef
 8001794:	08001831 	.word	0x08001831
 8001798:	08001837 	.word	0x08001837
 800179c:	08001837 	.word	0x08001837
 80017a0:	08001837 	.word	0x08001837
 80017a4:	08001837 	.word	0x08001837
 80017a8:	08001837 	.word	0x08001837
 80017ac:	08001837 	.word	0x08001837
 80017b0:	08001837 	.word	0x08001837
 80017b4:	08001837 	.word	0x08001837
 80017b8:	08001837 	.word	0x08001837
 80017bc:	08001837 	.word	0x08001837
 80017c0:	08001837 	.word	0x08001837
 80017c4:	08001837 	.word	0x08001837
 80017c8:	08001837 	.word	0x08001837
 80017cc:	080017e5 	.word	0x080017e5
 80017d0:	080017f9 	.word	0x080017f9
 80017d4:	4a79      	ldr	r2, [pc, #484]	; (80019bc <HAL_GPIO_Init+0x2b4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d013      	beq.n	8001802 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017da:	e02c      	b.n	8001836 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	623b      	str	r3, [r7, #32]
          break;
 80017e2:	e029      	b.n	8001838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	3304      	adds	r3, #4
 80017ea:	623b      	str	r3, [r7, #32]
          break;
 80017ec:	e024      	b.n	8001838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	3308      	adds	r3, #8
 80017f4:	623b      	str	r3, [r7, #32]
          break;
 80017f6:	e01f      	b.n	8001838 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	330c      	adds	r3, #12
 80017fe:	623b      	str	r3, [r7, #32]
          break;
 8001800:	e01a      	b.n	8001838 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d102      	bne.n	8001810 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800180a:	2304      	movs	r3, #4
 800180c:	623b      	str	r3, [r7, #32]
          break;
 800180e:	e013      	b.n	8001838 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d105      	bne.n	8001824 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001818:	2308      	movs	r3, #8
 800181a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	611a      	str	r2, [r3, #16]
          break;
 8001822:	e009      	b.n	8001838 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001824:	2308      	movs	r3, #8
 8001826:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69fa      	ldr	r2, [r7, #28]
 800182c:	615a      	str	r2, [r3, #20]
          break;
 800182e:	e003      	b.n	8001838 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
          break;
 8001834:	e000      	b.n	8001838 <HAL_GPIO_Init+0x130>
          break;
 8001836:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	2bff      	cmp	r3, #255	; 0xff
 800183c:	d801      	bhi.n	8001842 <HAL_GPIO_Init+0x13a>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	e001      	b.n	8001846 <HAL_GPIO_Init+0x13e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3304      	adds	r3, #4
 8001846:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	2bff      	cmp	r3, #255	; 0xff
 800184c:	d802      	bhi.n	8001854 <HAL_GPIO_Init+0x14c>
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	e002      	b.n	800185a <HAL_GPIO_Init+0x152>
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	3b08      	subs	r3, #8
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	210f      	movs	r1, #15
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	fa01 f303 	lsl.w	r3, r1, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	401a      	ands	r2, r3
 800186c:	6a39      	ldr	r1, [r7, #32]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	fa01 f303 	lsl.w	r3, r1, r3
 8001874:	431a      	orrs	r2, r3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 80b1 	beq.w	80019ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001888:	4b4d      	ldr	r3, [pc, #308]	; (80019c0 <HAL_GPIO_Init+0x2b8>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a4c      	ldr	r2, [pc, #304]	; (80019c0 <HAL_GPIO_Init+0x2b8>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6193      	str	r3, [r2, #24]
 8001894:	4b4a      	ldr	r3, [pc, #296]	; (80019c0 <HAL_GPIO_Init+0x2b8>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018a0:	4a48      	ldr	r2, [pc, #288]	; (80019c4 <HAL_GPIO_Init+0x2bc>)
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	3302      	adds	r3, #2
 80018a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	220f      	movs	r2, #15
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	4013      	ands	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a40      	ldr	r2, [pc, #256]	; (80019c8 <HAL_GPIO_Init+0x2c0>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d013      	beq.n	80018f4 <HAL_GPIO_Init+0x1ec>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a3f      	ldr	r2, [pc, #252]	; (80019cc <HAL_GPIO_Init+0x2c4>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d00d      	beq.n	80018f0 <HAL_GPIO_Init+0x1e8>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a3e      	ldr	r2, [pc, #248]	; (80019d0 <HAL_GPIO_Init+0x2c8>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d007      	beq.n	80018ec <HAL_GPIO_Init+0x1e4>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a3d      	ldr	r2, [pc, #244]	; (80019d4 <HAL_GPIO_Init+0x2cc>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d101      	bne.n	80018e8 <HAL_GPIO_Init+0x1e0>
 80018e4:	2303      	movs	r3, #3
 80018e6:	e006      	b.n	80018f6 <HAL_GPIO_Init+0x1ee>
 80018e8:	2304      	movs	r3, #4
 80018ea:	e004      	b.n	80018f6 <HAL_GPIO_Init+0x1ee>
 80018ec:	2302      	movs	r3, #2
 80018ee:	e002      	b.n	80018f6 <HAL_GPIO_Init+0x1ee>
 80018f0:	2301      	movs	r3, #1
 80018f2:	e000      	b.n	80018f6 <HAL_GPIO_Init+0x1ee>
 80018f4:	2300      	movs	r3, #0
 80018f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f8:	f002 0203 	and.w	r2, r2, #3
 80018fc:	0092      	lsls	r2, r2, #2
 80018fe:	4093      	lsls	r3, r2
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	4313      	orrs	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001906:	492f      	ldr	r1, [pc, #188]	; (80019c4 <HAL_GPIO_Init+0x2bc>)
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	089b      	lsrs	r3, r3, #2
 800190c:	3302      	adds	r3, #2
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001920:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	492c      	ldr	r1, [pc, #176]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	600b      	str	r3, [r1, #0]
 800192c:	e006      	b.n	800193c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800192e:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	43db      	mvns	r3, r3
 8001936:	4928      	ldr	r1, [pc, #160]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001938:	4013      	ands	r3, r2
 800193a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d006      	beq.n	8001956 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001948:	4b23      	ldr	r3, [pc, #140]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	4922      	ldr	r1, [pc, #136]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001956:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	43db      	mvns	r3, r3
 800195e:	491e      	ldr	r1, [pc, #120]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001960:	4013      	ands	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d006      	beq.n	800197e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	4918      	ldr	r1, [pc, #96]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	608b      	str	r3, [r1, #8]
 800197c:	e006      	b.n	800198c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800197e:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	43db      	mvns	r3, r3
 8001986:	4914      	ldr	r1, [pc, #80]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 8001988:	4013      	ands	r3, r2
 800198a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d021      	beq.n	80019dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	490e      	ldr	r1, [pc, #56]	; (80019d8 <HAL_GPIO_Init+0x2d0>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	60cb      	str	r3, [r1, #12]
 80019a4:	e021      	b.n	80019ea <HAL_GPIO_Init+0x2e2>
 80019a6:	bf00      	nop
 80019a8:	10320000 	.word	0x10320000
 80019ac:	10310000 	.word	0x10310000
 80019b0:	10220000 	.word	0x10220000
 80019b4:	10210000 	.word	0x10210000
 80019b8:	10120000 	.word	0x10120000
 80019bc:	10110000 	.word	0x10110000
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010000 	.word	0x40010000
 80019c8:	40010800 	.word	0x40010800
 80019cc:	40010c00 	.word	0x40010c00
 80019d0:	40011000 	.word	0x40011000
 80019d4:	40011400 	.word	0x40011400
 80019d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_GPIO_Init+0x304>)
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	4909      	ldr	r1, [pc, #36]	; (8001a0c <HAL_GPIO_Init+0x304>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	3301      	adds	r3, #1
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	fa22 f303 	lsr.w	r3, r2, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f47f ae8e 	bne.w	800171c <HAL_GPIO_Init+0x14>
  }
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	372c      	adds	r7, #44	; 0x2c
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr
 8001a0c:	40010400 	.word	0x40010400

08001a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	807b      	strh	r3, [r7, #2]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a20:	787b      	ldrb	r3, [r7, #1]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a26:	887a      	ldrh	r2, [r7, #2]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a2c:	e003      	b.n	8001a36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a2e:	887b      	ldrh	r3, [r7, #2]
 8001a30:	041a      	lsls	r2, r3, #16
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	611a      	str	r2, [r3, #16]
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a4c:	695a      	ldr	r2, [r3, #20]
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	4013      	ands	r3, r2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d006      	beq.n	8001a64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 f806 	bl	8001a70 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40010400 	.word	0x40010400

08001a70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e272      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 8087 	beq.w	8001bb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aa4:	4b92      	ldr	r3, [pc, #584]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d00c      	beq.n	8001aca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ab0:	4b8f      	ldr	r3, [pc, #572]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d112      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x5e>
 8001abc:	4b8c      	ldr	r3, [pc, #560]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac8:	d10b      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aca:	4b89      	ldr	r3, [pc, #548]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d06c      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x12c>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d168      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e24c      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aea:	d106      	bne.n	8001afa <HAL_RCC_OscConfig+0x76>
 8001aec:	4b80      	ldr	r3, [pc, #512]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a7f      	ldr	r2, [pc, #508]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	e02e      	b.n	8001b58 <HAL_RCC_OscConfig+0xd4>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10c      	bne.n	8001b1c <HAL_RCC_OscConfig+0x98>
 8001b02:	4b7b      	ldr	r3, [pc, #492]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a7a      	ldr	r2, [pc, #488]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b78      	ldr	r3, [pc, #480]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a77      	ldr	r2, [pc, #476]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e01d      	b.n	8001b58 <HAL_RCC_OscConfig+0xd4>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b24:	d10c      	bne.n	8001b40 <HAL_RCC_OscConfig+0xbc>
 8001b26:	4b72      	ldr	r3, [pc, #456]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a71      	ldr	r2, [pc, #452]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	4b6f      	ldr	r3, [pc, #444]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a6e      	ldr	r2, [pc, #440]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	e00b      	b.n	8001b58 <HAL_RCC_OscConfig+0xd4>
 8001b40:	4b6b      	ldr	r3, [pc, #428]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a6a      	ldr	r2, [pc, #424]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	4b68      	ldr	r3, [pc, #416]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a67      	ldr	r2, [pc, #412]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d013      	beq.n	8001b88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7fe fedc 	bl	800091c <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b68:	f7fe fed8 	bl	800091c <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b64      	cmp	r3, #100	; 0x64
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e200      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7a:	4b5d      	ldr	r3, [pc, #372]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0xe4>
 8001b86:	e014      	b.n	8001bb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7fe fec8 	bl	800091c <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b90:	f7fe fec4 	bl	800091c <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b64      	cmp	r3, #100	; 0x64
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e1ec      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba2:	4b53      	ldr	r3, [pc, #332]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x10c>
 8001bae:	e000      	b.n	8001bb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d063      	beq.n	8001c86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bbe:	4b4c      	ldr	r3, [pc, #304]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00b      	beq.n	8001be2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bca:	4b49      	ldr	r3, [pc, #292]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d11c      	bne.n	8001c10 <HAL_RCC_OscConfig+0x18c>
 8001bd6:	4b46      	ldr	r3, [pc, #280]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d116      	bne.n	8001c10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be2:	4b43      	ldr	r3, [pc, #268]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d005      	beq.n	8001bfa <HAL_RCC_OscConfig+0x176>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d001      	beq.n	8001bfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e1c0      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfa:	4b3d      	ldr	r3, [pc, #244]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	4939      	ldr	r1, [pc, #228]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0e:	e03a      	b.n	8001c86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d020      	beq.n	8001c5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c18:	4b36      	ldr	r3, [pc, #216]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1e:	f7fe fe7d 	bl	800091c <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c26:	f7fe fe79 	bl	800091c <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e1a1      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c38:	4b2d      	ldr	r3, [pc, #180]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c44:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4927      	ldr	r1, [pc, #156]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	600b      	str	r3, [r1, #0]
 8001c58:	e015      	b.n	8001c86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c5a:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <HAL_RCC_OscConfig+0x270>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c60:	f7fe fe5c 	bl	800091c <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c68:	f7fe fe58 	bl	800091c <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e180      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d03a      	beq.n	8001d08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d019      	beq.n	8001cce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c9a:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <HAL_RCC_OscConfig+0x274>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca0:	f7fe fe3c 	bl	800091c <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca8:	f7fe fe38 	bl	800091c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e160      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cba:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f000 fad8 	bl	800227c <RCC_Delay>
 8001ccc:	e01c      	b.n	8001d08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <HAL_RCC_OscConfig+0x274>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd4:	f7fe fe22 	bl	800091c <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cda:	e00f      	b.n	8001cfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cdc:	f7fe fe1e 	bl	800091c <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d908      	bls.n	8001cfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e146      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	42420000 	.word	0x42420000
 8001cf8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cfc:	4b92      	ldr	r3, [pc, #584]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1e9      	bne.n	8001cdc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f000 80a6 	beq.w	8001e62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d16:	2300      	movs	r3, #0
 8001d18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d1a:	4b8b      	ldr	r3, [pc, #556]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10d      	bne.n	8001d42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	4b88      	ldr	r3, [pc, #544]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	4a87      	ldr	r2, [pc, #540]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d30:	61d3      	str	r3, [r2, #28]
 8001d32:	4b85      	ldr	r3, [pc, #532]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	60bb      	str	r3, [r7, #8]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d42:	4b82      	ldr	r3, [pc, #520]	; (8001f4c <HAL_RCC_OscConfig+0x4c8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d118      	bne.n	8001d80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d4e:	4b7f      	ldr	r3, [pc, #508]	; (8001f4c <HAL_RCC_OscConfig+0x4c8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a7e      	ldr	r2, [pc, #504]	; (8001f4c <HAL_RCC_OscConfig+0x4c8>)
 8001d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d5a:	f7fe fddf 	bl	800091c <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d62:	f7fe fddb 	bl	800091c <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b64      	cmp	r3, #100	; 0x64
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e103      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d74:	4b75      	ldr	r3, [pc, #468]	; (8001f4c <HAL_RCC_OscConfig+0x4c8>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d106      	bne.n	8001d96 <HAL_RCC_OscConfig+0x312>
 8001d88:	4b6f      	ldr	r3, [pc, #444]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	4a6e      	ldr	r2, [pc, #440]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6213      	str	r3, [r2, #32]
 8001d94:	e02d      	b.n	8001df2 <HAL_RCC_OscConfig+0x36e>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x334>
 8001d9e:	4b6a      	ldr	r3, [pc, #424]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	4a69      	ldr	r2, [pc, #420]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	f023 0301 	bic.w	r3, r3, #1
 8001da8:	6213      	str	r3, [r2, #32]
 8001daa:	4b67      	ldr	r3, [pc, #412]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	4a66      	ldr	r2, [pc, #408]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	f023 0304 	bic.w	r3, r3, #4
 8001db4:	6213      	str	r3, [r2, #32]
 8001db6:	e01c      	b.n	8001df2 <HAL_RCC_OscConfig+0x36e>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	2b05      	cmp	r3, #5
 8001dbe:	d10c      	bne.n	8001dda <HAL_RCC_OscConfig+0x356>
 8001dc0:	4b61      	ldr	r3, [pc, #388]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	4a60      	ldr	r2, [pc, #384]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	f043 0304 	orr.w	r3, r3, #4
 8001dca:	6213      	str	r3, [r2, #32]
 8001dcc:	4b5e      	ldr	r3, [pc, #376]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4a5d      	ldr	r2, [pc, #372]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	6213      	str	r3, [r2, #32]
 8001dd8:	e00b      	b.n	8001df2 <HAL_RCC_OscConfig+0x36e>
 8001dda:	4b5b      	ldr	r3, [pc, #364]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	4a5a      	ldr	r2, [pc, #360]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	f023 0301 	bic.w	r3, r3, #1
 8001de4:	6213      	str	r3, [r2, #32]
 8001de6:	4b58      	ldr	r3, [pc, #352]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	4a57      	ldr	r2, [pc, #348]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	f023 0304 	bic.w	r3, r3, #4
 8001df0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d015      	beq.n	8001e26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfa:	f7fe fd8f 	bl	800091c <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e00:	e00a      	b.n	8001e18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e02:	f7fe fd8b 	bl	800091c <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e0b1      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e18:	4b4b      	ldr	r3, [pc, #300]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0ee      	beq.n	8001e02 <HAL_RCC_OscConfig+0x37e>
 8001e24:	e014      	b.n	8001e50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e26:	f7fe fd79 	bl	800091c <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2c:	e00a      	b.n	8001e44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2e:	f7fe fd75 	bl	800091c <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e09b      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e44:	4b40      	ldr	r3, [pc, #256]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1ee      	bne.n	8001e2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e50:	7dfb      	ldrb	r3, [r7, #23]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d105      	bne.n	8001e62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e56:	4b3c      	ldr	r3, [pc, #240]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	4a3b      	ldr	r2, [pc, #236]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 8087 	beq.w	8001f7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e6c:	4b36      	ldr	r3, [pc, #216]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 030c 	and.w	r3, r3, #12
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d061      	beq.n	8001f3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d146      	bne.n	8001f0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e80:	4b33      	ldr	r3, [pc, #204]	; (8001f50 <HAL_RCC_OscConfig+0x4cc>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e86:	f7fe fd49 	bl	800091c <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8e:	f7fe fd45 	bl	800091c <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e06d      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea0:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f0      	bne.n	8001e8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb4:	d108      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eb6:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	4921      	ldr	r1, [pc, #132]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec8:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a19      	ldr	r1, [r3, #32]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	430b      	orrs	r3, r1
 8001eda:	491b      	ldr	r1, [pc, #108]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <HAL_RCC_OscConfig+0x4cc>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee6:	f7fe fd19 	bl	800091c <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eee:	f7fe fd15 	bl	800091c <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e03d      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0f0      	beq.n	8001eee <HAL_RCC_OscConfig+0x46a>
 8001f0c:	e035      	b.n	8001f7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <HAL_RCC_OscConfig+0x4cc>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f14:	f7fe fd02 	bl	800091c <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7fe fcfe 	bl	800091c <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e026      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x498>
 8001f3a:	e01e      	b.n	8001f7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d107      	bne.n	8001f54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e019      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40007000 	.word	0x40007000
 8001f50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_RCC_OscConfig+0x500>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d106      	bne.n	8001f76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d001      	beq.n	8001f7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40021000 	.word	0x40021000

08001f88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0d0      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b6a      	ldr	r3, [pc, #424]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d910      	bls.n	8001fcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b67      	ldr	r3, [pc, #412]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 0207 	bic.w	r2, r3, #7
 8001fb2:	4965      	ldr	r1, [pc, #404]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fba:	4b63      	ldr	r3, [pc, #396]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d001      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0b8      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d020      	beq.n	800201a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fe4:	4b59      	ldr	r3, [pc, #356]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4a58      	ldr	r2, [pc, #352]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ffc:	4b53      	ldr	r3, [pc, #332]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4a52      	ldr	r2, [pc, #328]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002006:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002008:	4b50      	ldr	r3, [pc, #320]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	494d      	ldr	r1, [pc, #308]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	4313      	orrs	r3, r2
 8002018:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d040      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202e:	4b47      	ldr	r3, [pc, #284]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d115      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e07f      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d107      	bne.n	8002056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002046:	4b41      	ldr	r3, [pc, #260]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d109      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e073      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002056:	4b3d      	ldr	r3, [pc, #244]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e06b      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002066:	4b39      	ldr	r3, [pc, #228]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f023 0203 	bic.w	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	4936      	ldr	r1, [pc, #216]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	4313      	orrs	r3, r2
 8002076:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002078:	f7fe fc50 	bl	800091c <HAL_GetTick>
 800207c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	e00a      	b.n	8002096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002080:	f7fe fc4c 	bl	800091c <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f241 3288 	movw	r2, #5000	; 0x1388
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e053      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002096:	4b2d      	ldr	r3, [pc, #180]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 020c 	and.w	r2, r3, #12
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d1eb      	bne.n	8002080 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020a8:	4b27      	ldr	r3, [pc, #156]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d210      	bcs.n	80020d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b6:	4b24      	ldr	r3, [pc, #144]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 0207 	bic.w	r2, r3, #7
 80020be:	4922      	ldr	r1, [pc, #136]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020c6:	4b20      	ldr	r3, [pc, #128]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e032      	b.n	800213e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0304 	and.w	r3, r3, #4
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4916      	ldr	r1, [pc, #88]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d009      	beq.n	8002116 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002102:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	490e      	ldr	r1, [pc, #56]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	4313      	orrs	r3, r2
 8002114:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002116:	f000 f821 	bl	800215c <HAL_RCC_GetSysClockFreq>
 800211a:	4602      	mov	r2, r0
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	490a      	ldr	r1, [pc, #40]	; (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 8002128:	5ccb      	ldrb	r3, [r1, r3]
 800212a:	fa22 f303 	lsr.w	r3, r2, r3
 800212e:	4a09      	ldr	r2, [pc, #36]	; (8002154 <HAL_RCC_ClockConfig+0x1cc>)
 8002130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_RCC_ClockConfig+0x1d0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fbae 	bl	8000898 <HAL_InitTick>

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40022000 	.word	0x40022000
 800214c:	40021000 	.word	0x40021000
 8002150:	08003854 	.word	0x08003854
 8002154:	20000000 	.word	0x20000000
 8002158:	20000004 	.word	0x20000004

0800215c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800215c:	b490      	push	{r4, r7}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002162:	4b29      	ldr	r3, [pc, #164]	; (8002208 <HAL_RCC_GetSysClockFreq+0xac>)
 8002164:	1d3c      	adds	r4, r7, #4
 8002166:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002168:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800216c:	f240 2301 	movw	r3, #513	; 0x201
 8002170:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002182:	2300      	movs	r3, #0
 8002184:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002186:	4b21      	ldr	r3, [pc, #132]	; (800220c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	2b04      	cmp	r3, #4
 8002194:	d002      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0x40>
 8002196:	2b08      	cmp	r3, #8
 8002198:	d003      	beq.n	80021a2 <HAL_RCC_GetSysClockFreq+0x46>
 800219a:	e02b      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800219c:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <HAL_RCC_GetSysClockFreq+0xb4>)
 800219e:	623b      	str	r3, [r7, #32]
      break;
 80021a0:	e02b      	b.n	80021fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	0c9b      	lsrs	r3, r3, #18
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	3328      	adds	r3, #40	; 0x28
 80021ac:	443b      	add	r3, r7
 80021ae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80021b2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d012      	beq.n	80021e4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021be:	4b13      	ldr	r3, [pc, #76]	; (800220c <HAL_RCC_GetSysClockFreq+0xb0>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	0c5b      	lsrs	r3, r3, #17
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	3328      	adds	r3, #40	; 0x28
 80021ca:	443b      	add	r3, r7
 80021cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	4a0e      	ldr	r2, [pc, #56]	; (8002210 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021d6:	fb03 f202 	mul.w	r2, r3, r2
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
 80021e2:	e004      	b.n	80021ee <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	4a0b      	ldr	r2, [pc, #44]	; (8002214 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021e8:	fb02 f303 	mul.w	r3, r2, r3
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	623b      	str	r3, [r7, #32]
      break;
 80021f2:	e002      	b.n	80021fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021f4:	4b06      	ldr	r3, [pc, #24]	; (8002210 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021f6:	623b      	str	r3, [r7, #32]
      break;
 80021f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021fa:	6a3b      	ldr	r3, [r7, #32]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3728      	adds	r7, #40	; 0x28
 8002200:	46bd      	mov	sp, r7
 8002202:	bc90      	pop	{r4, r7}
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	08003844 	.word	0x08003844
 800220c:	40021000 	.word	0x40021000
 8002210:	007a1200 	.word	0x007a1200
 8002214:	003d0900 	.word	0x003d0900

08002218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800221c:	4b02      	ldr	r3, [pc, #8]	; (8002228 <HAL_RCC_GetHCLKFreq+0x10>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	20000000 	.word	0x20000000

0800222c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002230:	f7ff fff2 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002234:	4602      	mov	r2, r0
 8002236:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	0a1b      	lsrs	r3, r3, #8
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	4903      	ldr	r1, [pc, #12]	; (8002250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002242:	5ccb      	ldrb	r3, [r1, r3]
 8002244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002248:	4618      	mov	r0, r3
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	08003864 	.word	0x08003864

08002254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002258:	f7ff ffde 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 800225c:	4602      	mov	r2, r0
 800225e:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	0adb      	lsrs	r3, r3, #11
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	4903      	ldr	r1, [pc, #12]	; (8002278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800226a:	5ccb      	ldrb	r3, [r1, r3]
 800226c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002270:	4618      	mov	r0, r3
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40021000 	.word	0x40021000
 8002278:	08003864 	.word	0x08003864

0800227c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002284:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <RCC_Delay+0x34>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <RCC_Delay+0x38>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	0a5b      	lsrs	r3, r3, #9
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	fb02 f303 	mul.w	r3, r2, r3
 8002296:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002298:	bf00      	nop
  }
  while (Delay --);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	1e5a      	subs	r2, r3, #1
 800229e:	60fa      	str	r2, [r7, #12]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1f9      	bne.n	8002298 <RCC_Delay+0x1c>
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr
 80022b0:	20000000 	.word	0x20000000
 80022b4:	10624dd3 	.word	0x10624dd3

080022b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	2300      	movs	r3, #0
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d07d      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80022d4:	2300      	movs	r3, #0
 80022d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022d8:	4b4f      	ldr	r3, [pc, #316]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10d      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e4:	4b4c      	ldr	r3, [pc, #304]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	4a4b      	ldr	r2, [pc, #300]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ee:	61d3      	str	r3, [r2, #28]
 80022f0:	4b49      	ldr	r3, [pc, #292]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022fc:	2301      	movs	r3, #1
 80022fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002300:	4b46      	ldr	r3, [pc, #280]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002308:	2b00      	cmp	r3, #0
 800230a:	d118      	bne.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800230c:	4b43      	ldr	r3, [pc, #268]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a42      	ldr	r2, [pc, #264]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002316:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002318:	f7fe fb00 	bl	800091c <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231e:	e008      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002320:	f7fe fafc 	bl	800091c <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b64      	cmp	r3, #100	; 0x64
 800232c:	d901      	bls.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e06d      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002332:	4b3a      	ldr	r3, [pc, #232]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800233e:	4b36      	ldr	r3, [pc, #216]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002346:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d02e      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	429a      	cmp	r2, r3
 800235a:	d027      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800235c:	4b2e      	ldr	r3, [pc, #184]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002364:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002366:	4b2e      	ldr	r3, [pc, #184]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002368:	2201      	movs	r2, #1
 800236a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800236c:	4b2c      	ldr	r3, [pc, #176]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002372:	4a29      	ldr	r2, [pc, #164]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d014      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002382:	f7fe facb 	bl	800091c <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002388:	e00a      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238a:	f7fe fac7 	bl	800091c <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	f241 3288 	movw	r2, #5000	; 0x1388
 8002398:	4293      	cmp	r3, r2
 800239a:	d901      	bls.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e036      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a0:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0ee      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023ac:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4917      	ldr	r1, [pc, #92]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023be:	7dfb      	ldrb	r3, [r7, #23]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d105      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c4:	4b14      	ldr	r3, [pc, #80]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	4a13      	ldr	r2, [pc, #76]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	490b      	ldr	r1, [pc, #44]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0310 	and.w	r3, r3, #16
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023fa:	4b07      	ldr	r3, [pc, #28]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	4904      	ldr	r1, [pc, #16]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	40007000 	.word	0x40007000
 8002420:	42420440 	.word	0x42420440

08002424 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e03f      	b.n	80024b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d106      	bne.n	8002450 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7fe f8ca 	bl	80005e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2224      	movs	r2, #36	; 0x24
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002466:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f905 	bl	8002678 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800247c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	695a      	ldr	r2, [r3, #20]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800248c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68da      	ldr	r2, [r3, #12]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800249c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2220      	movs	r2, #32
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b08a      	sub	sp, #40	; 0x28
 80024c2:	af02      	add	r7, sp, #8
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	4613      	mov	r3, r2
 80024cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b20      	cmp	r3, #32
 80024dc:	d17c      	bne.n	80025d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <HAL_UART_Transmit+0x2c>
 80024e4:	88fb      	ldrh	r3, [r7, #6]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e075      	b.n	80025da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_UART_Transmit+0x3e>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e06e      	b.n	80025da <HAL_UART_Transmit+0x11c>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2221      	movs	r2, #33	; 0x21
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002512:	f7fe fa03 	bl	800091c <HAL_GetTick>
 8002516:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	88fa      	ldrh	r2, [r7, #6]
 800251c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	88fa      	ldrh	r2, [r7, #6]
 8002522:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800252c:	d108      	bne.n	8002540 <HAL_UART_Transmit+0x82>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d104      	bne.n	8002540 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	e003      	b.n	8002548 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002544:	2300      	movs	r3, #0
 8002546:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002550:	e02a      	b.n	80025a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2200      	movs	r2, #0
 800255a:	2180      	movs	r1, #128	; 0x80
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 f840 	bl	80025e2 <UART_WaitOnFlagUntilTimeout>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e036      	b.n	80025da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10b      	bne.n	800258a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	461a      	mov	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002580:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	3302      	adds	r3, #2
 8002586:	61bb      	str	r3, [r7, #24]
 8002588:	e007      	b.n	800259a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	781a      	ldrb	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	3301      	adds	r3, #1
 8002598:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800259e:	b29b      	uxth	r3, r3
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1cf      	bne.n	8002552 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2200      	movs	r2, #0
 80025ba:	2140      	movs	r1, #64	; 0x40
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 f810 	bl	80025e2 <UART_WaitOnFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e006      	b.n	80025da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2220      	movs	r2, #32
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e000      	b.n	80025da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80025d8:	2302      	movs	r3, #2
  }
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3720      	adds	r7, #32
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b084      	sub	sp, #16
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	603b      	str	r3, [r7, #0]
 80025ee:	4613      	mov	r3, r2
 80025f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025f2:	e02c      	b.n	800264e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fa:	d028      	beq.n	800264e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <UART_WaitOnFlagUntilTimeout+0x30>
 8002602:	f7fe f98b 	bl	800091c <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	429a      	cmp	r2, r3
 8002610:	d21d      	bcs.n	800264e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002620:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	695a      	ldr	r2, [r3, #20]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0201 	bic.w	r2, r2, #1
 8002630:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2220      	movs	r2, #32
 8002636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e00f      	b.n	800266e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4013      	ands	r3, r2
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	429a      	cmp	r2, r3
 800265c:	bf0c      	ite	eq
 800265e:	2301      	moveq	r3, #1
 8002660:	2300      	movne	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	461a      	mov	r2, r3
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	429a      	cmp	r2, r3
 800266a:	d0c3      	beq.n	80025f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80026b2:	f023 030c 	bic.w	r3, r3, #12
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	68b9      	ldr	r1, [r7, #8]
 80026bc:	430b      	orrs	r3, r1
 80026be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a2c      	ldr	r2, [pc, #176]	; (800278c <UART_SetConfig+0x114>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d103      	bne.n	80026e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026e0:	f7ff fdb8 	bl	8002254 <HAL_RCC_GetPCLK2Freq>
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	e002      	b.n	80026ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80026e8:	f7ff fda0 	bl	800222c <HAL_RCC_GetPCLK1Freq>
 80026ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	009a      	lsls	r2, r3, #2
 80026f8:	441a      	add	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	4a22      	ldr	r2, [pc, #136]	; (8002790 <UART_SetConfig+0x118>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	0119      	lsls	r1, r3, #4
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	009a      	lsls	r2, r3, #2
 8002718:	441a      	add	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	fbb2 f2f3 	udiv	r2, r2, r3
 8002724:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <UART_SetConfig+0x118>)
 8002726:	fba3 0302 	umull	r0, r3, r3, r2
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	2064      	movs	r0, #100	; 0x64
 800272e:	fb00 f303 	mul.w	r3, r0, r3
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	3332      	adds	r3, #50	; 0x32
 8002738:	4a15      	ldr	r2, [pc, #84]	; (8002790 <UART_SetConfig+0x118>)
 800273a:	fba2 2303 	umull	r2, r3, r2, r3
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002744:	4419      	add	r1, r3
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	009a      	lsls	r2, r3, #2
 8002750:	441a      	add	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	fbb2 f2f3 	udiv	r2, r2, r3
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <UART_SetConfig+0x118>)
 800275e:	fba3 0302 	umull	r0, r3, r3, r2
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	2064      	movs	r0, #100	; 0x64
 8002766:	fb00 f303 	mul.w	r3, r0, r3
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	3332      	adds	r3, #50	; 0x32
 8002770:	4a07      	ldr	r2, [pc, #28]	; (8002790 <UART_SetConfig+0x118>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	f003 020f 	and.w	r2, r3, #15
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	440a      	add	r2, r1
 8002782:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40013800 	.word	0x40013800
 8002790:	51eb851f 	.word	0x51eb851f

08002794 <__errno>:
 8002794:	4b01      	ldr	r3, [pc, #4]	; (800279c <__errno+0x8>)
 8002796:	6818      	ldr	r0, [r3, #0]
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	2000000c 	.word	0x2000000c

080027a0 <__libc_init_array>:
 80027a0:	b570      	push	{r4, r5, r6, lr}
 80027a2:	2600      	movs	r6, #0
 80027a4:	4d0c      	ldr	r5, [pc, #48]	; (80027d8 <__libc_init_array+0x38>)
 80027a6:	4c0d      	ldr	r4, [pc, #52]	; (80027dc <__libc_init_array+0x3c>)
 80027a8:	1b64      	subs	r4, r4, r5
 80027aa:	10a4      	asrs	r4, r4, #2
 80027ac:	42a6      	cmp	r6, r4
 80027ae:	d109      	bne.n	80027c4 <__libc_init_array+0x24>
 80027b0:	f001 f82c 	bl	800380c <_init>
 80027b4:	2600      	movs	r6, #0
 80027b6:	4d0a      	ldr	r5, [pc, #40]	; (80027e0 <__libc_init_array+0x40>)
 80027b8:	4c0a      	ldr	r4, [pc, #40]	; (80027e4 <__libc_init_array+0x44>)
 80027ba:	1b64      	subs	r4, r4, r5
 80027bc:	10a4      	asrs	r4, r4, #2
 80027be:	42a6      	cmp	r6, r4
 80027c0:	d105      	bne.n	80027ce <__libc_init_array+0x2e>
 80027c2:	bd70      	pop	{r4, r5, r6, pc}
 80027c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80027c8:	4798      	blx	r3
 80027ca:	3601      	adds	r6, #1
 80027cc:	e7ee      	b.n	80027ac <__libc_init_array+0xc>
 80027ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80027d2:	4798      	blx	r3
 80027d4:	3601      	adds	r6, #1
 80027d6:	e7f2      	b.n	80027be <__libc_init_array+0x1e>
 80027d8:	08003904 	.word	0x08003904
 80027dc:	08003904 	.word	0x08003904
 80027e0:	08003904 	.word	0x08003904
 80027e4:	08003908 	.word	0x08003908

080027e8 <memset>:
 80027e8:	4603      	mov	r3, r0
 80027ea:	4402      	add	r2, r0
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d100      	bne.n	80027f2 <memset+0xa>
 80027f0:	4770      	bx	lr
 80027f2:	f803 1b01 	strb.w	r1, [r3], #1
 80027f6:	e7f9      	b.n	80027ec <memset+0x4>

080027f8 <iprintf>:
 80027f8:	b40f      	push	{r0, r1, r2, r3}
 80027fa:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <iprintf+0x2c>)
 80027fc:	b513      	push	{r0, r1, r4, lr}
 80027fe:	681c      	ldr	r4, [r3, #0]
 8002800:	b124      	cbz	r4, 800280c <iprintf+0x14>
 8002802:	69a3      	ldr	r3, [r4, #24]
 8002804:	b913      	cbnz	r3, 800280c <iprintf+0x14>
 8002806:	4620      	mov	r0, r4
 8002808:	f000 fa5a 	bl	8002cc0 <__sinit>
 800280c:	ab05      	add	r3, sp, #20
 800280e:	4620      	mov	r0, r4
 8002810:	9a04      	ldr	r2, [sp, #16]
 8002812:	68a1      	ldr	r1, [r4, #8]
 8002814:	9301      	str	r3, [sp, #4]
 8002816:	f000 fc5d 	bl	80030d4 <_vfiprintf_r>
 800281a:	b002      	add	sp, #8
 800281c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002820:	b004      	add	sp, #16
 8002822:	4770      	bx	lr
 8002824:	2000000c 	.word	0x2000000c

08002828 <_puts_r>:
 8002828:	b570      	push	{r4, r5, r6, lr}
 800282a:	460e      	mov	r6, r1
 800282c:	4605      	mov	r5, r0
 800282e:	b118      	cbz	r0, 8002838 <_puts_r+0x10>
 8002830:	6983      	ldr	r3, [r0, #24]
 8002832:	b90b      	cbnz	r3, 8002838 <_puts_r+0x10>
 8002834:	f000 fa44 	bl	8002cc0 <__sinit>
 8002838:	69ab      	ldr	r3, [r5, #24]
 800283a:	68ac      	ldr	r4, [r5, #8]
 800283c:	b913      	cbnz	r3, 8002844 <_puts_r+0x1c>
 800283e:	4628      	mov	r0, r5
 8002840:	f000 fa3e 	bl	8002cc0 <__sinit>
 8002844:	4b2c      	ldr	r3, [pc, #176]	; (80028f8 <_puts_r+0xd0>)
 8002846:	429c      	cmp	r4, r3
 8002848:	d120      	bne.n	800288c <_puts_r+0x64>
 800284a:	686c      	ldr	r4, [r5, #4]
 800284c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800284e:	07db      	lsls	r3, r3, #31
 8002850:	d405      	bmi.n	800285e <_puts_r+0x36>
 8002852:	89a3      	ldrh	r3, [r4, #12]
 8002854:	0598      	lsls	r0, r3, #22
 8002856:	d402      	bmi.n	800285e <_puts_r+0x36>
 8002858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800285a:	f000 facf 	bl	8002dfc <__retarget_lock_acquire_recursive>
 800285e:	89a3      	ldrh	r3, [r4, #12]
 8002860:	0719      	lsls	r1, r3, #28
 8002862:	d51d      	bpl.n	80028a0 <_puts_r+0x78>
 8002864:	6923      	ldr	r3, [r4, #16]
 8002866:	b1db      	cbz	r3, 80028a0 <_puts_r+0x78>
 8002868:	3e01      	subs	r6, #1
 800286a:	68a3      	ldr	r3, [r4, #8]
 800286c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002870:	3b01      	subs	r3, #1
 8002872:	60a3      	str	r3, [r4, #8]
 8002874:	bb39      	cbnz	r1, 80028c6 <_puts_r+0x9e>
 8002876:	2b00      	cmp	r3, #0
 8002878:	da38      	bge.n	80028ec <_puts_r+0xc4>
 800287a:	4622      	mov	r2, r4
 800287c:	210a      	movs	r1, #10
 800287e:	4628      	mov	r0, r5
 8002880:	f000 f848 	bl	8002914 <__swbuf_r>
 8002884:	3001      	adds	r0, #1
 8002886:	d011      	beq.n	80028ac <_puts_r+0x84>
 8002888:	250a      	movs	r5, #10
 800288a:	e011      	b.n	80028b0 <_puts_r+0x88>
 800288c:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <_puts_r+0xd4>)
 800288e:	429c      	cmp	r4, r3
 8002890:	d101      	bne.n	8002896 <_puts_r+0x6e>
 8002892:	68ac      	ldr	r4, [r5, #8]
 8002894:	e7da      	b.n	800284c <_puts_r+0x24>
 8002896:	4b1a      	ldr	r3, [pc, #104]	; (8002900 <_puts_r+0xd8>)
 8002898:	429c      	cmp	r4, r3
 800289a:	bf08      	it	eq
 800289c:	68ec      	ldreq	r4, [r5, #12]
 800289e:	e7d5      	b.n	800284c <_puts_r+0x24>
 80028a0:	4621      	mov	r1, r4
 80028a2:	4628      	mov	r0, r5
 80028a4:	f000 f888 	bl	80029b8 <__swsetup_r>
 80028a8:	2800      	cmp	r0, #0
 80028aa:	d0dd      	beq.n	8002868 <_puts_r+0x40>
 80028ac:	f04f 35ff 	mov.w	r5, #4294967295
 80028b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028b2:	07da      	lsls	r2, r3, #31
 80028b4:	d405      	bmi.n	80028c2 <_puts_r+0x9a>
 80028b6:	89a3      	ldrh	r3, [r4, #12]
 80028b8:	059b      	lsls	r3, r3, #22
 80028ba:	d402      	bmi.n	80028c2 <_puts_r+0x9a>
 80028bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028be:	f000 fa9e 	bl	8002dfe <__retarget_lock_release_recursive>
 80028c2:	4628      	mov	r0, r5
 80028c4:	bd70      	pop	{r4, r5, r6, pc}
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	da04      	bge.n	80028d4 <_puts_r+0xac>
 80028ca:	69a2      	ldr	r2, [r4, #24]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	dc06      	bgt.n	80028de <_puts_r+0xb6>
 80028d0:	290a      	cmp	r1, #10
 80028d2:	d004      	beq.n	80028de <_puts_r+0xb6>
 80028d4:	6823      	ldr	r3, [r4, #0]
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	6022      	str	r2, [r4, #0]
 80028da:	7019      	strb	r1, [r3, #0]
 80028dc:	e7c5      	b.n	800286a <_puts_r+0x42>
 80028de:	4622      	mov	r2, r4
 80028e0:	4628      	mov	r0, r5
 80028e2:	f000 f817 	bl	8002914 <__swbuf_r>
 80028e6:	3001      	adds	r0, #1
 80028e8:	d1bf      	bne.n	800286a <_puts_r+0x42>
 80028ea:	e7df      	b.n	80028ac <_puts_r+0x84>
 80028ec:	250a      	movs	r5, #10
 80028ee:	6823      	ldr	r3, [r4, #0]
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	6022      	str	r2, [r4, #0]
 80028f4:	701d      	strb	r5, [r3, #0]
 80028f6:	e7db      	b.n	80028b0 <_puts_r+0x88>
 80028f8:	08003890 	.word	0x08003890
 80028fc:	080038b0 	.word	0x080038b0
 8002900:	08003870 	.word	0x08003870

08002904 <puts>:
 8002904:	4b02      	ldr	r3, [pc, #8]	; (8002910 <puts+0xc>)
 8002906:	4601      	mov	r1, r0
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	f7ff bf8d 	b.w	8002828 <_puts_r>
 800290e:	bf00      	nop
 8002910:	2000000c 	.word	0x2000000c

08002914 <__swbuf_r>:
 8002914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002916:	460e      	mov	r6, r1
 8002918:	4614      	mov	r4, r2
 800291a:	4605      	mov	r5, r0
 800291c:	b118      	cbz	r0, 8002926 <__swbuf_r+0x12>
 800291e:	6983      	ldr	r3, [r0, #24]
 8002920:	b90b      	cbnz	r3, 8002926 <__swbuf_r+0x12>
 8002922:	f000 f9cd 	bl	8002cc0 <__sinit>
 8002926:	4b21      	ldr	r3, [pc, #132]	; (80029ac <__swbuf_r+0x98>)
 8002928:	429c      	cmp	r4, r3
 800292a:	d12b      	bne.n	8002984 <__swbuf_r+0x70>
 800292c:	686c      	ldr	r4, [r5, #4]
 800292e:	69a3      	ldr	r3, [r4, #24]
 8002930:	60a3      	str	r3, [r4, #8]
 8002932:	89a3      	ldrh	r3, [r4, #12]
 8002934:	071a      	lsls	r2, r3, #28
 8002936:	d52f      	bpl.n	8002998 <__swbuf_r+0x84>
 8002938:	6923      	ldr	r3, [r4, #16]
 800293a:	b36b      	cbz	r3, 8002998 <__swbuf_r+0x84>
 800293c:	6923      	ldr	r3, [r4, #16]
 800293e:	6820      	ldr	r0, [r4, #0]
 8002940:	b2f6      	uxtb	r6, r6
 8002942:	1ac0      	subs	r0, r0, r3
 8002944:	6963      	ldr	r3, [r4, #20]
 8002946:	4637      	mov	r7, r6
 8002948:	4283      	cmp	r3, r0
 800294a:	dc04      	bgt.n	8002956 <__swbuf_r+0x42>
 800294c:	4621      	mov	r1, r4
 800294e:	4628      	mov	r0, r5
 8002950:	f000 f922 	bl	8002b98 <_fflush_r>
 8002954:	bb30      	cbnz	r0, 80029a4 <__swbuf_r+0x90>
 8002956:	68a3      	ldr	r3, [r4, #8]
 8002958:	3001      	adds	r0, #1
 800295a:	3b01      	subs	r3, #1
 800295c:	60a3      	str	r3, [r4, #8]
 800295e:	6823      	ldr	r3, [r4, #0]
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	6022      	str	r2, [r4, #0]
 8002964:	701e      	strb	r6, [r3, #0]
 8002966:	6963      	ldr	r3, [r4, #20]
 8002968:	4283      	cmp	r3, r0
 800296a:	d004      	beq.n	8002976 <__swbuf_r+0x62>
 800296c:	89a3      	ldrh	r3, [r4, #12]
 800296e:	07db      	lsls	r3, r3, #31
 8002970:	d506      	bpl.n	8002980 <__swbuf_r+0x6c>
 8002972:	2e0a      	cmp	r6, #10
 8002974:	d104      	bne.n	8002980 <__swbuf_r+0x6c>
 8002976:	4621      	mov	r1, r4
 8002978:	4628      	mov	r0, r5
 800297a:	f000 f90d 	bl	8002b98 <_fflush_r>
 800297e:	b988      	cbnz	r0, 80029a4 <__swbuf_r+0x90>
 8002980:	4638      	mov	r0, r7
 8002982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002984:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <__swbuf_r+0x9c>)
 8002986:	429c      	cmp	r4, r3
 8002988:	d101      	bne.n	800298e <__swbuf_r+0x7a>
 800298a:	68ac      	ldr	r4, [r5, #8]
 800298c:	e7cf      	b.n	800292e <__swbuf_r+0x1a>
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <__swbuf_r+0xa0>)
 8002990:	429c      	cmp	r4, r3
 8002992:	bf08      	it	eq
 8002994:	68ec      	ldreq	r4, [r5, #12]
 8002996:	e7ca      	b.n	800292e <__swbuf_r+0x1a>
 8002998:	4621      	mov	r1, r4
 800299a:	4628      	mov	r0, r5
 800299c:	f000 f80c 	bl	80029b8 <__swsetup_r>
 80029a0:	2800      	cmp	r0, #0
 80029a2:	d0cb      	beq.n	800293c <__swbuf_r+0x28>
 80029a4:	f04f 37ff 	mov.w	r7, #4294967295
 80029a8:	e7ea      	b.n	8002980 <__swbuf_r+0x6c>
 80029aa:	bf00      	nop
 80029ac:	08003890 	.word	0x08003890
 80029b0:	080038b0 	.word	0x080038b0
 80029b4:	08003870 	.word	0x08003870

080029b8 <__swsetup_r>:
 80029b8:	4b32      	ldr	r3, [pc, #200]	; (8002a84 <__swsetup_r+0xcc>)
 80029ba:	b570      	push	{r4, r5, r6, lr}
 80029bc:	681d      	ldr	r5, [r3, #0]
 80029be:	4606      	mov	r6, r0
 80029c0:	460c      	mov	r4, r1
 80029c2:	b125      	cbz	r5, 80029ce <__swsetup_r+0x16>
 80029c4:	69ab      	ldr	r3, [r5, #24]
 80029c6:	b913      	cbnz	r3, 80029ce <__swsetup_r+0x16>
 80029c8:	4628      	mov	r0, r5
 80029ca:	f000 f979 	bl	8002cc0 <__sinit>
 80029ce:	4b2e      	ldr	r3, [pc, #184]	; (8002a88 <__swsetup_r+0xd0>)
 80029d0:	429c      	cmp	r4, r3
 80029d2:	d10f      	bne.n	80029f4 <__swsetup_r+0x3c>
 80029d4:	686c      	ldr	r4, [r5, #4]
 80029d6:	89a3      	ldrh	r3, [r4, #12]
 80029d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80029dc:	0719      	lsls	r1, r3, #28
 80029de:	d42c      	bmi.n	8002a3a <__swsetup_r+0x82>
 80029e0:	06dd      	lsls	r5, r3, #27
 80029e2:	d411      	bmi.n	8002a08 <__swsetup_r+0x50>
 80029e4:	2309      	movs	r3, #9
 80029e6:	6033      	str	r3, [r6, #0]
 80029e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80029ec:	f04f 30ff 	mov.w	r0, #4294967295
 80029f0:	81a3      	strh	r3, [r4, #12]
 80029f2:	e03e      	b.n	8002a72 <__swsetup_r+0xba>
 80029f4:	4b25      	ldr	r3, [pc, #148]	; (8002a8c <__swsetup_r+0xd4>)
 80029f6:	429c      	cmp	r4, r3
 80029f8:	d101      	bne.n	80029fe <__swsetup_r+0x46>
 80029fa:	68ac      	ldr	r4, [r5, #8]
 80029fc:	e7eb      	b.n	80029d6 <__swsetup_r+0x1e>
 80029fe:	4b24      	ldr	r3, [pc, #144]	; (8002a90 <__swsetup_r+0xd8>)
 8002a00:	429c      	cmp	r4, r3
 8002a02:	bf08      	it	eq
 8002a04:	68ec      	ldreq	r4, [r5, #12]
 8002a06:	e7e6      	b.n	80029d6 <__swsetup_r+0x1e>
 8002a08:	0758      	lsls	r0, r3, #29
 8002a0a:	d512      	bpl.n	8002a32 <__swsetup_r+0x7a>
 8002a0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a0e:	b141      	cbz	r1, 8002a22 <__swsetup_r+0x6a>
 8002a10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a14:	4299      	cmp	r1, r3
 8002a16:	d002      	beq.n	8002a1e <__swsetup_r+0x66>
 8002a18:	4630      	mov	r0, r6
 8002a1a:	f000 fa57 	bl	8002ecc <_free_r>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	6363      	str	r3, [r4, #52]	; 0x34
 8002a22:	89a3      	ldrh	r3, [r4, #12]
 8002a24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002a28:	81a3      	strh	r3, [r4, #12]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	6063      	str	r3, [r4, #4]
 8002a2e:	6923      	ldr	r3, [r4, #16]
 8002a30:	6023      	str	r3, [r4, #0]
 8002a32:	89a3      	ldrh	r3, [r4, #12]
 8002a34:	f043 0308 	orr.w	r3, r3, #8
 8002a38:	81a3      	strh	r3, [r4, #12]
 8002a3a:	6923      	ldr	r3, [r4, #16]
 8002a3c:	b94b      	cbnz	r3, 8002a52 <__swsetup_r+0x9a>
 8002a3e:	89a3      	ldrh	r3, [r4, #12]
 8002a40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a48:	d003      	beq.n	8002a52 <__swsetup_r+0x9a>
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	4630      	mov	r0, r6
 8002a4e:	f000 f9fd 	bl	8002e4c <__smakebuf_r>
 8002a52:	89a0      	ldrh	r0, [r4, #12]
 8002a54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002a58:	f010 0301 	ands.w	r3, r0, #1
 8002a5c:	d00a      	beq.n	8002a74 <__swsetup_r+0xbc>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60a3      	str	r3, [r4, #8]
 8002a62:	6963      	ldr	r3, [r4, #20]
 8002a64:	425b      	negs	r3, r3
 8002a66:	61a3      	str	r3, [r4, #24]
 8002a68:	6923      	ldr	r3, [r4, #16]
 8002a6a:	b943      	cbnz	r3, 8002a7e <__swsetup_r+0xc6>
 8002a6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002a70:	d1ba      	bne.n	80029e8 <__swsetup_r+0x30>
 8002a72:	bd70      	pop	{r4, r5, r6, pc}
 8002a74:	0781      	lsls	r1, r0, #30
 8002a76:	bf58      	it	pl
 8002a78:	6963      	ldrpl	r3, [r4, #20]
 8002a7a:	60a3      	str	r3, [r4, #8]
 8002a7c:	e7f4      	b.n	8002a68 <__swsetup_r+0xb0>
 8002a7e:	2000      	movs	r0, #0
 8002a80:	e7f7      	b.n	8002a72 <__swsetup_r+0xba>
 8002a82:	bf00      	nop
 8002a84:	2000000c 	.word	0x2000000c
 8002a88:	08003890 	.word	0x08003890
 8002a8c:	080038b0 	.word	0x080038b0
 8002a90:	08003870 	.word	0x08003870

08002a94 <__sflush_r>:
 8002a94:	898a      	ldrh	r2, [r1, #12]
 8002a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a98:	4605      	mov	r5, r0
 8002a9a:	0710      	lsls	r0, r2, #28
 8002a9c:	460c      	mov	r4, r1
 8002a9e:	d457      	bmi.n	8002b50 <__sflush_r+0xbc>
 8002aa0:	684b      	ldr	r3, [r1, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	dc04      	bgt.n	8002ab0 <__sflush_r+0x1c>
 8002aa6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	dc01      	bgt.n	8002ab0 <__sflush_r+0x1c>
 8002aac:	2000      	movs	r0, #0
 8002aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ab0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ab2:	2e00      	cmp	r6, #0
 8002ab4:	d0fa      	beq.n	8002aac <__sflush_r+0x18>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002abc:	682f      	ldr	r7, [r5, #0]
 8002abe:	602b      	str	r3, [r5, #0]
 8002ac0:	d032      	beq.n	8002b28 <__sflush_r+0x94>
 8002ac2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ac4:	89a3      	ldrh	r3, [r4, #12]
 8002ac6:	075a      	lsls	r2, r3, #29
 8002ac8:	d505      	bpl.n	8002ad6 <__sflush_r+0x42>
 8002aca:	6863      	ldr	r3, [r4, #4]
 8002acc:	1ac0      	subs	r0, r0, r3
 8002ace:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ad0:	b10b      	cbz	r3, 8002ad6 <__sflush_r+0x42>
 8002ad2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ad4:	1ac0      	subs	r0, r0, r3
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	4602      	mov	r2, r0
 8002ada:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002adc:	4628      	mov	r0, r5
 8002ade:	6a21      	ldr	r1, [r4, #32]
 8002ae0:	47b0      	blx	r6
 8002ae2:	1c43      	adds	r3, r0, #1
 8002ae4:	89a3      	ldrh	r3, [r4, #12]
 8002ae6:	d106      	bne.n	8002af6 <__sflush_r+0x62>
 8002ae8:	6829      	ldr	r1, [r5, #0]
 8002aea:	291d      	cmp	r1, #29
 8002aec:	d82c      	bhi.n	8002b48 <__sflush_r+0xb4>
 8002aee:	4a29      	ldr	r2, [pc, #164]	; (8002b94 <__sflush_r+0x100>)
 8002af0:	40ca      	lsrs	r2, r1
 8002af2:	07d6      	lsls	r6, r2, #31
 8002af4:	d528      	bpl.n	8002b48 <__sflush_r+0xb4>
 8002af6:	2200      	movs	r2, #0
 8002af8:	6062      	str	r2, [r4, #4]
 8002afa:	6922      	ldr	r2, [r4, #16]
 8002afc:	04d9      	lsls	r1, r3, #19
 8002afe:	6022      	str	r2, [r4, #0]
 8002b00:	d504      	bpl.n	8002b0c <__sflush_r+0x78>
 8002b02:	1c42      	adds	r2, r0, #1
 8002b04:	d101      	bne.n	8002b0a <__sflush_r+0x76>
 8002b06:	682b      	ldr	r3, [r5, #0]
 8002b08:	b903      	cbnz	r3, 8002b0c <__sflush_r+0x78>
 8002b0a:	6560      	str	r0, [r4, #84]	; 0x54
 8002b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b0e:	602f      	str	r7, [r5, #0]
 8002b10:	2900      	cmp	r1, #0
 8002b12:	d0cb      	beq.n	8002aac <__sflush_r+0x18>
 8002b14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b18:	4299      	cmp	r1, r3
 8002b1a:	d002      	beq.n	8002b22 <__sflush_r+0x8e>
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	f000 f9d5 	bl	8002ecc <_free_r>
 8002b22:	2000      	movs	r0, #0
 8002b24:	6360      	str	r0, [r4, #52]	; 0x34
 8002b26:	e7c2      	b.n	8002aae <__sflush_r+0x1a>
 8002b28:	6a21      	ldr	r1, [r4, #32]
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	4628      	mov	r0, r5
 8002b2e:	47b0      	blx	r6
 8002b30:	1c41      	adds	r1, r0, #1
 8002b32:	d1c7      	bne.n	8002ac4 <__sflush_r+0x30>
 8002b34:	682b      	ldr	r3, [r5, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0c4      	beq.n	8002ac4 <__sflush_r+0x30>
 8002b3a:	2b1d      	cmp	r3, #29
 8002b3c:	d001      	beq.n	8002b42 <__sflush_r+0xae>
 8002b3e:	2b16      	cmp	r3, #22
 8002b40:	d101      	bne.n	8002b46 <__sflush_r+0xb2>
 8002b42:	602f      	str	r7, [r5, #0]
 8002b44:	e7b2      	b.n	8002aac <__sflush_r+0x18>
 8002b46:	89a3      	ldrh	r3, [r4, #12]
 8002b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b4c:	81a3      	strh	r3, [r4, #12]
 8002b4e:	e7ae      	b.n	8002aae <__sflush_r+0x1a>
 8002b50:	690f      	ldr	r7, [r1, #16]
 8002b52:	2f00      	cmp	r7, #0
 8002b54:	d0aa      	beq.n	8002aac <__sflush_r+0x18>
 8002b56:	0793      	lsls	r3, r2, #30
 8002b58:	bf18      	it	ne
 8002b5a:	2300      	movne	r3, #0
 8002b5c:	680e      	ldr	r6, [r1, #0]
 8002b5e:	bf08      	it	eq
 8002b60:	694b      	ldreq	r3, [r1, #20]
 8002b62:	1bf6      	subs	r6, r6, r7
 8002b64:	600f      	str	r7, [r1, #0]
 8002b66:	608b      	str	r3, [r1, #8]
 8002b68:	2e00      	cmp	r6, #0
 8002b6a:	dd9f      	ble.n	8002aac <__sflush_r+0x18>
 8002b6c:	4633      	mov	r3, r6
 8002b6e:	463a      	mov	r2, r7
 8002b70:	4628      	mov	r0, r5
 8002b72:	6a21      	ldr	r1, [r4, #32]
 8002b74:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002b78:	47e0      	blx	ip
 8002b7a:	2800      	cmp	r0, #0
 8002b7c:	dc06      	bgt.n	8002b8c <__sflush_r+0xf8>
 8002b7e:	89a3      	ldrh	r3, [r4, #12]
 8002b80:	f04f 30ff 	mov.w	r0, #4294967295
 8002b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b88:	81a3      	strh	r3, [r4, #12]
 8002b8a:	e790      	b.n	8002aae <__sflush_r+0x1a>
 8002b8c:	4407      	add	r7, r0
 8002b8e:	1a36      	subs	r6, r6, r0
 8002b90:	e7ea      	b.n	8002b68 <__sflush_r+0xd4>
 8002b92:	bf00      	nop
 8002b94:	20400001 	.word	0x20400001

08002b98 <_fflush_r>:
 8002b98:	b538      	push	{r3, r4, r5, lr}
 8002b9a:	690b      	ldr	r3, [r1, #16]
 8002b9c:	4605      	mov	r5, r0
 8002b9e:	460c      	mov	r4, r1
 8002ba0:	b913      	cbnz	r3, 8002ba8 <_fflush_r+0x10>
 8002ba2:	2500      	movs	r5, #0
 8002ba4:	4628      	mov	r0, r5
 8002ba6:	bd38      	pop	{r3, r4, r5, pc}
 8002ba8:	b118      	cbz	r0, 8002bb2 <_fflush_r+0x1a>
 8002baa:	6983      	ldr	r3, [r0, #24]
 8002bac:	b90b      	cbnz	r3, 8002bb2 <_fflush_r+0x1a>
 8002bae:	f000 f887 	bl	8002cc0 <__sinit>
 8002bb2:	4b14      	ldr	r3, [pc, #80]	; (8002c04 <_fflush_r+0x6c>)
 8002bb4:	429c      	cmp	r4, r3
 8002bb6:	d11b      	bne.n	8002bf0 <_fflush_r+0x58>
 8002bb8:	686c      	ldr	r4, [r5, #4]
 8002bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0ef      	beq.n	8002ba2 <_fflush_r+0xa>
 8002bc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002bc4:	07d0      	lsls	r0, r2, #31
 8002bc6:	d404      	bmi.n	8002bd2 <_fflush_r+0x3a>
 8002bc8:	0599      	lsls	r1, r3, #22
 8002bca:	d402      	bmi.n	8002bd2 <_fflush_r+0x3a>
 8002bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bce:	f000 f915 	bl	8002dfc <__retarget_lock_acquire_recursive>
 8002bd2:	4628      	mov	r0, r5
 8002bd4:	4621      	mov	r1, r4
 8002bd6:	f7ff ff5d 	bl	8002a94 <__sflush_r>
 8002bda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002bdc:	4605      	mov	r5, r0
 8002bde:	07da      	lsls	r2, r3, #31
 8002be0:	d4e0      	bmi.n	8002ba4 <_fflush_r+0xc>
 8002be2:	89a3      	ldrh	r3, [r4, #12]
 8002be4:	059b      	lsls	r3, r3, #22
 8002be6:	d4dd      	bmi.n	8002ba4 <_fflush_r+0xc>
 8002be8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bea:	f000 f908 	bl	8002dfe <__retarget_lock_release_recursive>
 8002bee:	e7d9      	b.n	8002ba4 <_fflush_r+0xc>
 8002bf0:	4b05      	ldr	r3, [pc, #20]	; (8002c08 <_fflush_r+0x70>)
 8002bf2:	429c      	cmp	r4, r3
 8002bf4:	d101      	bne.n	8002bfa <_fflush_r+0x62>
 8002bf6:	68ac      	ldr	r4, [r5, #8]
 8002bf8:	e7df      	b.n	8002bba <_fflush_r+0x22>
 8002bfa:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <_fflush_r+0x74>)
 8002bfc:	429c      	cmp	r4, r3
 8002bfe:	bf08      	it	eq
 8002c00:	68ec      	ldreq	r4, [r5, #12]
 8002c02:	e7da      	b.n	8002bba <_fflush_r+0x22>
 8002c04:	08003890 	.word	0x08003890
 8002c08:	080038b0 	.word	0x080038b0
 8002c0c:	08003870 	.word	0x08003870

08002c10 <std>:
 8002c10:	2300      	movs	r3, #0
 8002c12:	b510      	push	{r4, lr}
 8002c14:	4604      	mov	r4, r0
 8002c16:	e9c0 3300 	strd	r3, r3, [r0]
 8002c1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c1e:	6083      	str	r3, [r0, #8]
 8002c20:	8181      	strh	r1, [r0, #12]
 8002c22:	6643      	str	r3, [r0, #100]	; 0x64
 8002c24:	81c2      	strh	r2, [r0, #14]
 8002c26:	6183      	str	r3, [r0, #24]
 8002c28:	4619      	mov	r1, r3
 8002c2a:	2208      	movs	r2, #8
 8002c2c:	305c      	adds	r0, #92	; 0x5c
 8002c2e:	f7ff fddb 	bl	80027e8 <memset>
 8002c32:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <std+0x38>)
 8002c34:	6224      	str	r4, [r4, #32]
 8002c36:	6263      	str	r3, [r4, #36]	; 0x24
 8002c38:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <std+0x3c>)
 8002c3a:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <std+0x40>)
 8002c3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c40:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <std+0x44>)
 8002c42:	6323      	str	r3, [r4, #48]	; 0x30
 8002c44:	bd10      	pop	{r4, pc}
 8002c46:	bf00      	nop
 8002c48:	08003681 	.word	0x08003681
 8002c4c:	080036a3 	.word	0x080036a3
 8002c50:	080036db 	.word	0x080036db
 8002c54:	080036ff 	.word	0x080036ff

08002c58 <_cleanup_r>:
 8002c58:	4901      	ldr	r1, [pc, #4]	; (8002c60 <_cleanup_r+0x8>)
 8002c5a:	f000 b8af 	b.w	8002dbc <_fwalk_reent>
 8002c5e:	bf00      	nop
 8002c60:	08002b99 	.word	0x08002b99

08002c64 <__sfmoreglue>:
 8002c64:	2268      	movs	r2, #104	; 0x68
 8002c66:	b570      	push	{r4, r5, r6, lr}
 8002c68:	1e4d      	subs	r5, r1, #1
 8002c6a:	4355      	muls	r5, r2
 8002c6c:	460e      	mov	r6, r1
 8002c6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002c72:	f000 f993 	bl	8002f9c <_malloc_r>
 8002c76:	4604      	mov	r4, r0
 8002c78:	b140      	cbz	r0, 8002c8c <__sfmoreglue+0x28>
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	e9c0 1600 	strd	r1, r6, [r0]
 8002c80:	300c      	adds	r0, #12
 8002c82:	60a0      	str	r0, [r4, #8]
 8002c84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002c88:	f7ff fdae 	bl	80027e8 <memset>
 8002c8c:	4620      	mov	r0, r4
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}

08002c90 <__sfp_lock_acquire>:
 8002c90:	4801      	ldr	r0, [pc, #4]	; (8002c98 <__sfp_lock_acquire+0x8>)
 8002c92:	f000 b8b3 	b.w	8002dfc <__retarget_lock_acquire_recursive>
 8002c96:	bf00      	nop
 8002c98:	20000155 	.word	0x20000155

08002c9c <__sfp_lock_release>:
 8002c9c:	4801      	ldr	r0, [pc, #4]	; (8002ca4 <__sfp_lock_release+0x8>)
 8002c9e:	f000 b8ae 	b.w	8002dfe <__retarget_lock_release_recursive>
 8002ca2:	bf00      	nop
 8002ca4:	20000155 	.word	0x20000155

08002ca8 <__sinit_lock_acquire>:
 8002ca8:	4801      	ldr	r0, [pc, #4]	; (8002cb0 <__sinit_lock_acquire+0x8>)
 8002caa:	f000 b8a7 	b.w	8002dfc <__retarget_lock_acquire_recursive>
 8002cae:	bf00      	nop
 8002cb0:	20000156 	.word	0x20000156

08002cb4 <__sinit_lock_release>:
 8002cb4:	4801      	ldr	r0, [pc, #4]	; (8002cbc <__sinit_lock_release+0x8>)
 8002cb6:	f000 b8a2 	b.w	8002dfe <__retarget_lock_release_recursive>
 8002cba:	bf00      	nop
 8002cbc:	20000156 	.word	0x20000156

08002cc0 <__sinit>:
 8002cc0:	b510      	push	{r4, lr}
 8002cc2:	4604      	mov	r4, r0
 8002cc4:	f7ff fff0 	bl	8002ca8 <__sinit_lock_acquire>
 8002cc8:	69a3      	ldr	r3, [r4, #24]
 8002cca:	b11b      	cbz	r3, 8002cd4 <__sinit+0x14>
 8002ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cd0:	f7ff bff0 	b.w	8002cb4 <__sinit_lock_release>
 8002cd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002cd8:	6523      	str	r3, [r4, #80]	; 0x50
 8002cda:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <__sinit+0x68>)
 8002cdc:	4a13      	ldr	r2, [pc, #76]	; (8002d2c <__sinit+0x6c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	62a2      	str	r2, [r4, #40]	; 0x28
 8002ce2:	42a3      	cmp	r3, r4
 8002ce4:	bf08      	it	eq
 8002ce6:	2301      	moveq	r3, #1
 8002ce8:	4620      	mov	r0, r4
 8002cea:	bf08      	it	eq
 8002cec:	61a3      	streq	r3, [r4, #24]
 8002cee:	f000 f81f 	bl	8002d30 <__sfp>
 8002cf2:	6060      	str	r0, [r4, #4]
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f000 f81b 	bl	8002d30 <__sfp>
 8002cfa:	60a0      	str	r0, [r4, #8]
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	f000 f817 	bl	8002d30 <__sfp>
 8002d02:	2200      	movs	r2, #0
 8002d04:	2104      	movs	r1, #4
 8002d06:	60e0      	str	r0, [r4, #12]
 8002d08:	6860      	ldr	r0, [r4, #4]
 8002d0a:	f7ff ff81 	bl	8002c10 <std>
 8002d0e:	2201      	movs	r2, #1
 8002d10:	2109      	movs	r1, #9
 8002d12:	68a0      	ldr	r0, [r4, #8]
 8002d14:	f7ff ff7c 	bl	8002c10 <std>
 8002d18:	2202      	movs	r2, #2
 8002d1a:	2112      	movs	r1, #18
 8002d1c:	68e0      	ldr	r0, [r4, #12]
 8002d1e:	f7ff ff77 	bl	8002c10 <std>
 8002d22:	2301      	movs	r3, #1
 8002d24:	61a3      	str	r3, [r4, #24]
 8002d26:	e7d1      	b.n	8002ccc <__sinit+0xc>
 8002d28:	0800386c 	.word	0x0800386c
 8002d2c:	08002c59 	.word	0x08002c59

08002d30 <__sfp>:
 8002d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d32:	4607      	mov	r7, r0
 8002d34:	f7ff ffac 	bl	8002c90 <__sfp_lock_acquire>
 8002d38:	4b1e      	ldr	r3, [pc, #120]	; (8002db4 <__sfp+0x84>)
 8002d3a:	681e      	ldr	r6, [r3, #0]
 8002d3c:	69b3      	ldr	r3, [r6, #24]
 8002d3e:	b913      	cbnz	r3, 8002d46 <__sfp+0x16>
 8002d40:	4630      	mov	r0, r6
 8002d42:	f7ff ffbd 	bl	8002cc0 <__sinit>
 8002d46:	3648      	adds	r6, #72	; 0x48
 8002d48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	d503      	bpl.n	8002d58 <__sfp+0x28>
 8002d50:	6833      	ldr	r3, [r6, #0]
 8002d52:	b30b      	cbz	r3, 8002d98 <__sfp+0x68>
 8002d54:	6836      	ldr	r6, [r6, #0]
 8002d56:	e7f7      	b.n	8002d48 <__sfp+0x18>
 8002d58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002d5c:	b9d5      	cbnz	r5, 8002d94 <__sfp+0x64>
 8002d5e:	4b16      	ldr	r3, [pc, #88]	; (8002db8 <__sfp+0x88>)
 8002d60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002d64:	60e3      	str	r3, [r4, #12]
 8002d66:	6665      	str	r5, [r4, #100]	; 0x64
 8002d68:	f000 f847 	bl	8002dfa <__retarget_lock_init_recursive>
 8002d6c:	f7ff ff96 	bl	8002c9c <__sfp_lock_release>
 8002d70:	2208      	movs	r2, #8
 8002d72:	4629      	mov	r1, r5
 8002d74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002d78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002d7c:	6025      	str	r5, [r4, #0]
 8002d7e:	61a5      	str	r5, [r4, #24]
 8002d80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002d84:	f7ff fd30 	bl	80027e8 <memset>
 8002d88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002d8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002d90:	4620      	mov	r0, r4
 8002d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d94:	3468      	adds	r4, #104	; 0x68
 8002d96:	e7d9      	b.n	8002d4c <__sfp+0x1c>
 8002d98:	2104      	movs	r1, #4
 8002d9a:	4638      	mov	r0, r7
 8002d9c:	f7ff ff62 	bl	8002c64 <__sfmoreglue>
 8002da0:	4604      	mov	r4, r0
 8002da2:	6030      	str	r0, [r6, #0]
 8002da4:	2800      	cmp	r0, #0
 8002da6:	d1d5      	bne.n	8002d54 <__sfp+0x24>
 8002da8:	f7ff ff78 	bl	8002c9c <__sfp_lock_release>
 8002dac:	230c      	movs	r3, #12
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	e7ee      	b.n	8002d90 <__sfp+0x60>
 8002db2:	bf00      	nop
 8002db4:	0800386c 	.word	0x0800386c
 8002db8:	ffff0001 	.word	0xffff0001

08002dbc <_fwalk_reent>:
 8002dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dc0:	4606      	mov	r6, r0
 8002dc2:	4688      	mov	r8, r1
 8002dc4:	2700      	movs	r7, #0
 8002dc6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002dca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002dce:	f1b9 0901 	subs.w	r9, r9, #1
 8002dd2:	d505      	bpl.n	8002de0 <_fwalk_reent+0x24>
 8002dd4:	6824      	ldr	r4, [r4, #0]
 8002dd6:	2c00      	cmp	r4, #0
 8002dd8:	d1f7      	bne.n	8002dca <_fwalk_reent+0xe>
 8002dda:	4638      	mov	r0, r7
 8002ddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002de0:	89ab      	ldrh	r3, [r5, #12]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d907      	bls.n	8002df6 <_fwalk_reent+0x3a>
 8002de6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002dea:	3301      	adds	r3, #1
 8002dec:	d003      	beq.n	8002df6 <_fwalk_reent+0x3a>
 8002dee:	4629      	mov	r1, r5
 8002df0:	4630      	mov	r0, r6
 8002df2:	47c0      	blx	r8
 8002df4:	4307      	orrs	r7, r0
 8002df6:	3568      	adds	r5, #104	; 0x68
 8002df8:	e7e9      	b.n	8002dce <_fwalk_reent+0x12>

08002dfa <__retarget_lock_init_recursive>:
 8002dfa:	4770      	bx	lr

08002dfc <__retarget_lock_acquire_recursive>:
 8002dfc:	4770      	bx	lr

08002dfe <__retarget_lock_release_recursive>:
 8002dfe:	4770      	bx	lr

08002e00 <__swhatbuf_r>:
 8002e00:	b570      	push	{r4, r5, r6, lr}
 8002e02:	460e      	mov	r6, r1
 8002e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e08:	4614      	mov	r4, r2
 8002e0a:	2900      	cmp	r1, #0
 8002e0c:	461d      	mov	r5, r3
 8002e0e:	b096      	sub	sp, #88	; 0x58
 8002e10:	da08      	bge.n	8002e24 <__swhatbuf_r+0x24>
 8002e12:	2200      	movs	r2, #0
 8002e14:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002e18:	602a      	str	r2, [r5, #0]
 8002e1a:	061a      	lsls	r2, r3, #24
 8002e1c:	d410      	bmi.n	8002e40 <__swhatbuf_r+0x40>
 8002e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e22:	e00e      	b.n	8002e42 <__swhatbuf_r+0x42>
 8002e24:	466a      	mov	r2, sp
 8002e26:	f000 fc91 	bl	800374c <_fstat_r>
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	dbf1      	blt.n	8002e12 <__swhatbuf_r+0x12>
 8002e2e:	9a01      	ldr	r2, [sp, #4]
 8002e30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002e34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002e38:	425a      	negs	r2, r3
 8002e3a:	415a      	adcs	r2, r3
 8002e3c:	602a      	str	r2, [r5, #0]
 8002e3e:	e7ee      	b.n	8002e1e <__swhatbuf_r+0x1e>
 8002e40:	2340      	movs	r3, #64	; 0x40
 8002e42:	2000      	movs	r0, #0
 8002e44:	6023      	str	r3, [r4, #0]
 8002e46:	b016      	add	sp, #88	; 0x58
 8002e48:	bd70      	pop	{r4, r5, r6, pc}
	...

08002e4c <__smakebuf_r>:
 8002e4c:	898b      	ldrh	r3, [r1, #12]
 8002e4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e50:	079d      	lsls	r5, r3, #30
 8002e52:	4606      	mov	r6, r0
 8002e54:	460c      	mov	r4, r1
 8002e56:	d507      	bpl.n	8002e68 <__smakebuf_r+0x1c>
 8002e58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002e5c:	6023      	str	r3, [r4, #0]
 8002e5e:	6123      	str	r3, [r4, #16]
 8002e60:	2301      	movs	r3, #1
 8002e62:	6163      	str	r3, [r4, #20]
 8002e64:	b002      	add	sp, #8
 8002e66:	bd70      	pop	{r4, r5, r6, pc}
 8002e68:	466a      	mov	r2, sp
 8002e6a:	ab01      	add	r3, sp, #4
 8002e6c:	f7ff ffc8 	bl	8002e00 <__swhatbuf_r>
 8002e70:	9900      	ldr	r1, [sp, #0]
 8002e72:	4605      	mov	r5, r0
 8002e74:	4630      	mov	r0, r6
 8002e76:	f000 f891 	bl	8002f9c <_malloc_r>
 8002e7a:	b948      	cbnz	r0, 8002e90 <__smakebuf_r+0x44>
 8002e7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e80:	059a      	lsls	r2, r3, #22
 8002e82:	d4ef      	bmi.n	8002e64 <__smakebuf_r+0x18>
 8002e84:	f023 0303 	bic.w	r3, r3, #3
 8002e88:	f043 0302 	orr.w	r3, r3, #2
 8002e8c:	81a3      	strh	r3, [r4, #12]
 8002e8e:	e7e3      	b.n	8002e58 <__smakebuf_r+0xc>
 8002e90:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <__smakebuf_r+0x7c>)
 8002e92:	62b3      	str	r3, [r6, #40]	; 0x28
 8002e94:	89a3      	ldrh	r3, [r4, #12]
 8002e96:	6020      	str	r0, [r4, #0]
 8002e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e9c:	81a3      	strh	r3, [r4, #12]
 8002e9e:	9b00      	ldr	r3, [sp, #0]
 8002ea0:	6120      	str	r0, [r4, #16]
 8002ea2:	6163      	str	r3, [r4, #20]
 8002ea4:	9b01      	ldr	r3, [sp, #4]
 8002ea6:	b15b      	cbz	r3, 8002ec0 <__smakebuf_r+0x74>
 8002ea8:	4630      	mov	r0, r6
 8002eaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002eae:	f000 fc5f 	bl	8003770 <_isatty_r>
 8002eb2:	b128      	cbz	r0, 8002ec0 <__smakebuf_r+0x74>
 8002eb4:	89a3      	ldrh	r3, [r4, #12]
 8002eb6:	f023 0303 	bic.w	r3, r3, #3
 8002eba:	f043 0301 	orr.w	r3, r3, #1
 8002ebe:	81a3      	strh	r3, [r4, #12]
 8002ec0:	89a0      	ldrh	r0, [r4, #12]
 8002ec2:	4305      	orrs	r5, r0
 8002ec4:	81a5      	strh	r5, [r4, #12]
 8002ec6:	e7cd      	b.n	8002e64 <__smakebuf_r+0x18>
 8002ec8:	08002c59 	.word	0x08002c59

08002ecc <_free_r>:
 8002ecc:	b538      	push	{r3, r4, r5, lr}
 8002ece:	4605      	mov	r5, r0
 8002ed0:	2900      	cmp	r1, #0
 8002ed2:	d040      	beq.n	8002f56 <_free_r+0x8a>
 8002ed4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ed8:	1f0c      	subs	r4, r1, #4
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	bfb8      	it	lt
 8002ede:	18e4      	addlt	r4, r4, r3
 8002ee0:	f000 fc76 	bl	80037d0 <__malloc_lock>
 8002ee4:	4a1c      	ldr	r2, [pc, #112]	; (8002f58 <_free_r+0x8c>)
 8002ee6:	6813      	ldr	r3, [r2, #0]
 8002ee8:	b933      	cbnz	r3, 8002ef8 <_free_r+0x2c>
 8002eea:	6063      	str	r3, [r4, #4]
 8002eec:	6014      	str	r4, [r2, #0]
 8002eee:	4628      	mov	r0, r5
 8002ef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ef4:	f000 bc72 	b.w	80037dc <__malloc_unlock>
 8002ef8:	42a3      	cmp	r3, r4
 8002efa:	d908      	bls.n	8002f0e <_free_r+0x42>
 8002efc:	6820      	ldr	r0, [r4, #0]
 8002efe:	1821      	adds	r1, r4, r0
 8002f00:	428b      	cmp	r3, r1
 8002f02:	bf01      	itttt	eq
 8002f04:	6819      	ldreq	r1, [r3, #0]
 8002f06:	685b      	ldreq	r3, [r3, #4]
 8002f08:	1809      	addeq	r1, r1, r0
 8002f0a:	6021      	streq	r1, [r4, #0]
 8002f0c:	e7ed      	b.n	8002eea <_free_r+0x1e>
 8002f0e:	461a      	mov	r2, r3
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	b10b      	cbz	r3, 8002f18 <_free_r+0x4c>
 8002f14:	42a3      	cmp	r3, r4
 8002f16:	d9fa      	bls.n	8002f0e <_free_r+0x42>
 8002f18:	6811      	ldr	r1, [r2, #0]
 8002f1a:	1850      	adds	r0, r2, r1
 8002f1c:	42a0      	cmp	r0, r4
 8002f1e:	d10b      	bne.n	8002f38 <_free_r+0x6c>
 8002f20:	6820      	ldr	r0, [r4, #0]
 8002f22:	4401      	add	r1, r0
 8002f24:	1850      	adds	r0, r2, r1
 8002f26:	4283      	cmp	r3, r0
 8002f28:	6011      	str	r1, [r2, #0]
 8002f2a:	d1e0      	bne.n	8002eee <_free_r+0x22>
 8002f2c:	6818      	ldr	r0, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	4401      	add	r1, r0
 8002f32:	6011      	str	r1, [r2, #0]
 8002f34:	6053      	str	r3, [r2, #4]
 8002f36:	e7da      	b.n	8002eee <_free_r+0x22>
 8002f38:	d902      	bls.n	8002f40 <_free_r+0x74>
 8002f3a:	230c      	movs	r3, #12
 8002f3c:	602b      	str	r3, [r5, #0]
 8002f3e:	e7d6      	b.n	8002eee <_free_r+0x22>
 8002f40:	6820      	ldr	r0, [r4, #0]
 8002f42:	1821      	adds	r1, r4, r0
 8002f44:	428b      	cmp	r3, r1
 8002f46:	bf01      	itttt	eq
 8002f48:	6819      	ldreq	r1, [r3, #0]
 8002f4a:	685b      	ldreq	r3, [r3, #4]
 8002f4c:	1809      	addeq	r1, r1, r0
 8002f4e:	6021      	streq	r1, [r4, #0]
 8002f50:	6063      	str	r3, [r4, #4]
 8002f52:	6054      	str	r4, [r2, #4]
 8002f54:	e7cb      	b.n	8002eee <_free_r+0x22>
 8002f56:	bd38      	pop	{r3, r4, r5, pc}
 8002f58:	20000158 	.word	0x20000158

08002f5c <sbrk_aligned>:
 8002f5c:	b570      	push	{r4, r5, r6, lr}
 8002f5e:	4e0e      	ldr	r6, [pc, #56]	; (8002f98 <sbrk_aligned+0x3c>)
 8002f60:	460c      	mov	r4, r1
 8002f62:	6831      	ldr	r1, [r6, #0]
 8002f64:	4605      	mov	r5, r0
 8002f66:	b911      	cbnz	r1, 8002f6e <sbrk_aligned+0x12>
 8002f68:	f000 fb7a 	bl	8003660 <_sbrk_r>
 8002f6c:	6030      	str	r0, [r6, #0]
 8002f6e:	4621      	mov	r1, r4
 8002f70:	4628      	mov	r0, r5
 8002f72:	f000 fb75 	bl	8003660 <_sbrk_r>
 8002f76:	1c43      	adds	r3, r0, #1
 8002f78:	d00a      	beq.n	8002f90 <sbrk_aligned+0x34>
 8002f7a:	1cc4      	adds	r4, r0, #3
 8002f7c:	f024 0403 	bic.w	r4, r4, #3
 8002f80:	42a0      	cmp	r0, r4
 8002f82:	d007      	beq.n	8002f94 <sbrk_aligned+0x38>
 8002f84:	1a21      	subs	r1, r4, r0
 8002f86:	4628      	mov	r0, r5
 8002f88:	f000 fb6a 	bl	8003660 <_sbrk_r>
 8002f8c:	3001      	adds	r0, #1
 8002f8e:	d101      	bne.n	8002f94 <sbrk_aligned+0x38>
 8002f90:	f04f 34ff 	mov.w	r4, #4294967295
 8002f94:	4620      	mov	r0, r4
 8002f96:	bd70      	pop	{r4, r5, r6, pc}
 8002f98:	2000015c 	.word	0x2000015c

08002f9c <_malloc_r>:
 8002f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fa0:	1ccd      	adds	r5, r1, #3
 8002fa2:	f025 0503 	bic.w	r5, r5, #3
 8002fa6:	3508      	adds	r5, #8
 8002fa8:	2d0c      	cmp	r5, #12
 8002faa:	bf38      	it	cc
 8002fac:	250c      	movcc	r5, #12
 8002fae:	2d00      	cmp	r5, #0
 8002fb0:	4607      	mov	r7, r0
 8002fb2:	db01      	blt.n	8002fb8 <_malloc_r+0x1c>
 8002fb4:	42a9      	cmp	r1, r5
 8002fb6:	d905      	bls.n	8002fc4 <_malloc_r+0x28>
 8002fb8:	230c      	movs	r3, #12
 8002fba:	2600      	movs	r6, #0
 8002fbc:	603b      	str	r3, [r7, #0]
 8002fbe:	4630      	mov	r0, r6
 8002fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fc4:	4e2e      	ldr	r6, [pc, #184]	; (8003080 <_malloc_r+0xe4>)
 8002fc6:	f000 fc03 	bl	80037d0 <__malloc_lock>
 8002fca:	6833      	ldr	r3, [r6, #0]
 8002fcc:	461c      	mov	r4, r3
 8002fce:	bb34      	cbnz	r4, 800301e <_malloc_r+0x82>
 8002fd0:	4629      	mov	r1, r5
 8002fd2:	4638      	mov	r0, r7
 8002fd4:	f7ff ffc2 	bl	8002f5c <sbrk_aligned>
 8002fd8:	1c43      	adds	r3, r0, #1
 8002fda:	4604      	mov	r4, r0
 8002fdc:	d14d      	bne.n	800307a <_malloc_r+0xde>
 8002fde:	6834      	ldr	r4, [r6, #0]
 8002fe0:	4626      	mov	r6, r4
 8002fe2:	2e00      	cmp	r6, #0
 8002fe4:	d140      	bne.n	8003068 <_malloc_r+0xcc>
 8002fe6:	6823      	ldr	r3, [r4, #0]
 8002fe8:	4631      	mov	r1, r6
 8002fea:	4638      	mov	r0, r7
 8002fec:	eb04 0803 	add.w	r8, r4, r3
 8002ff0:	f000 fb36 	bl	8003660 <_sbrk_r>
 8002ff4:	4580      	cmp	r8, r0
 8002ff6:	d13a      	bne.n	800306e <_malloc_r+0xd2>
 8002ff8:	6821      	ldr	r1, [r4, #0]
 8002ffa:	3503      	adds	r5, #3
 8002ffc:	1a6d      	subs	r5, r5, r1
 8002ffe:	f025 0503 	bic.w	r5, r5, #3
 8003002:	3508      	adds	r5, #8
 8003004:	2d0c      	cmp	r5, #12
 8003006:	bf38      	it	cc
 8003008:	250c      	movcc	r5, #12
 800300a:	4638      	mov	r0, r7
 800300c:	4629      	mov	r1, r5
 800300e:	f7ff ffa5 	bl	8002f5c <sbrk_aligned>
 8003012:	3001      	adds	r0, #1
 8003014:	d02b      	beq.n	800306e <_malloc_r+0xd2>
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	442b      	add	r3, r5
 800301a:	6023      	str	r3, [r4, #0]
 800301c:	e00e      	b.n	800303c <_malloc_r+0xa0>
 800301e:	6822      	ldr	r2, [r4, #0]
 8003020:	1b52      	subs	r2, r2, r5
 8003022:	d41e      	bmi.n	8003062 <_malloc_r+0xc6>
 8003024:	2a0b      	cmp	r2, #11
 8003026:	d916      	bls.n	8003056 <_malloc_r+0xba>
 8003028:	1961      	adds	r1, r4, r5
 800302a:	42a3      	cmp	r3, r4
 800302c:	6025      	str	r5, [r4, #0]
 800302e:	bf18      	it	ne
 8003030:	6059      	strne	r1, [r3, #4]
 8003032:	6863      	ldr	r3, [r4, #4]
 8003034:	bf08      	it	eq
 8003036:	6031      	streq	r1, [r6, #0]
 8003038:	5162      	str	r2, [r4, r5]
 800303a:	604b      	str	r3, [r1, #4]
 800303c:	4638      	mov	r0, r7
 800303e:	f104 060b 	add.w	r6, r4, #11
 8003042:	f000 fbcb 	bl	80037dc <__malloc_unlock>
 8003046:	f026 0607 	bic.w	r6, r6, #7
 800304a:	1d23      	adds	r3, r4, #4
 800304c:	1af2      	subs	r2, r6, r3
 800304e:	d0b6      	beq.n	8002fbe <_malloc_r+0x22>
 8003050:	1b9b      	subs	r3, r3, r6
 8003052:	50a3      	str	r3, [r4, r2]
 8003054:	e7b3      	b.n	8002fbe <_malloc_r+0x22>
 8003056:	6862      	ldr	r2, [r4, #4]
 8003058:	42a3      	cmp	r3, r4
 800305a:	bf0c      	ite	eq
 800305c:	6032      	streq	r2, [r6, #0]
 800305e:	605a      	strne	r2, [r3, #4]
 8003060:	e7ec      	b.n	800303c <_malloc_r+0xa0>
 8003062:	4623      	mov	r3, r4
 8003064:	6864      	ldr	r4, [r4, #4]
 8003066:	e7b2      	b.n	8002fce <_malloc_r+0x32>
 8003068:	4634      	mov	r4, r6
 800306a:	6876      	ldr	r6, [r6, #4]
 800306c:	e7b9      	b.n	8002fe2 <_malloc_r+0x46>
 800306e:	230c      	movs	r3, #12
 8003070:	4638      	mov	r0, r7
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	f000 fbb2 	bl	80037dc <__malloc_unlock>
 8003078:	e7a1      	b.n	8002fbe <_malloc_r+0x22>
 800307a:	6025      	str	r5, [r4, #0]
 800307c:	e7de      	b.n	800303c <_malloc_r+0xa0>
 800307e:	bf00      	nop
 8003080:	20000158 	.word	0x20000158

08003084 <__sfputc_r>:
 8003084:	6893      	ldr	r3, [r2, #8]
 8003086:	b410      	push	{r4}
 8003088:	3b01      	subs	r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	6093      	str	r3, [r2, #8]
 800308e:	da07      	bge.n	80030a0 <__sfputc_r+0x1c>
 8003090:	6994      	ldr	r4, [r2, #24]
 8003092:	42a3      	cmp	r3, r4
 8003094:	db01      	blt.n	800309a <__sfputc_r+0x16>
 8003096:	290a      	cmp	r1, #10
 8003098:	d102      	bne.n	80030a0 <__sfputc_r+0x1c>
 800309a:	bc10      	pop	{r4}
 800309c:	f7ff bc3a 	b.w	8002914 <__swbuf_r>
 80030a0:	6813      	ldr	r3, [r2, #0]
 80030a2:	1c58      	adds	r0, r3, #1
 80030a4:	6010      	str	r0, [r2, #0]
 80030a6:	7019      	strb	r1, [r3, #0]
 80030a8:	4608      	mov	r0, r1
 80030aa:	bc10      	pop	{r4}
 80030ac:	4770      	bx	lr

080030ae <__sfputs_r>:
 80030ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b0:	4606      	mov	r6, r0
 80030b2:	460f      	mov	r7, r1
 80030b4:	4614      	mov	r4, r2
 80030b6:	18d5      	adds	r5, r2, r3
 80030b8:	42ac      	cmp	r4, r5
 80030ba:	d101      	bne.n	80030c0 <__sfputs_r+0x12>
 80030bc:	2000      	movs	r0, #0
 80030be:	e007      	b.n	80030d0 <__sfputs_r+0x22>
 80030c0:	463a      	mov	r2, r7
 80030c2:	4630      	mov	r0, r6
 80030c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030c8:	f7ff ffdc 	bl	8003084 <__sfputc_r>
 80030cc:	1c43      	adds	r3, r0, #1
 80030ce:	d1f3      	bne.n	80030b8 <__sfputs_r+0xa>
 80030d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080030d4 <_vfiprintf_r>:
 80030d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030d8:	460d      	mov	r5, r1
 80030da:	4614      	mov	r4, r2
 80030dc:	4698      	mov	r8, r3
 80030de:	4606      	mov	r6, r0
 80030e0:	b09d      	sub	sp, #116	; 0x74
 80030e2:	b118      	cbz	r0, 80030ec <_vfiprintf_r+0x18>
 80030e4:	6983      	ldr	r3, [r0, #24]
 80030e6:	b90b      	cbnz	r3, 80030ec <_vfiprintf_r+0x18>
 80030e8:	f7ff fdea 	bl	8002cc0 <__sinit>
 80030ec:	4b89      	ldr	r3, [pc, #548]	; (8003314 <_vfiprintf_r+0x240>)
 80030ee:	429d      	cmp	r5, r3
 80030f0:	d11b      	bne.n	800312a <_vfiprintf_r+0x56>
 80030f2:	6875      	ldr	r5, [r6, #4]
 80030f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80030f6:	07d9      	lsls	r1, r3, #31
 80030f8:	d405      	bmi.n	8003106 <_vfiprintf_r+0x32>
 80030fa:	89ab      	ldrh	r3, [r5, #12]
 80030fc:	059a      	lsls	r2, r3, #22
 80030fe:	d402      	bmi.n	8003106 <_vfiprintf_r+0x32>
 8003100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003102:	f7ff fe7b 	bl	8002dfc <__retarget_lock_acquire_recursive>
 8003106:	89ab      	ldrh	r3, [r5, #12]
 8003108:	071b      	lsls	r3, r3, #28
 800310a:	d501      	bpl.n	8003110 <_vfiprintf_r+0x3c>
 800310c:	692b      	ldr	r3, [r5, #16]
 800310e:	b9eb      	cbnz	r3, 800314c <_vfiprintf_r+0x78>
 8003110:	4629      	mov	r1, r5
 8003112:	4630      	mov	r0, r6
 8003114:	f7ff fc50 	bl	80029b8 <__swsetup_r>
 8003118:	b1c0      	cbz	r0, 800314c <_vfiprintf_r+0x78>
 800311a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800311c:	07dc      	lsls	r4, r3, #31
 800311e:	d50e      	bpl.n	800313e <_vfiprintf_r+0x6a>
 8003120:	f04f 30ff 	mov.w	r0, #4294967295
 8003124:	b01d      	add	sp, #116	; 0x74
 8003126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800312a:	4b7b      	ldr	r3, [pc, #492]	; (8003318 <_vfiprintf_r+0x244>)
 800312c:	429d      	cmp	r5, r3
 800312e:	d101      	bne.n	8003134 <_vfiprintf_r+0x60>
 8003130:	68b5      	ldr	r5, [r6, #8]
 8003132:	e7df      	b.n	80030f4 <_vfiprintf_r+0x20>
 8003134:	4b79      	ldr	r3, [pc, #484]	; (800331c <_vfiprintf_r+0x248>)
 8003136:	429d      	cmp	r5, r3
 8003138:	bf08      	it	eq
 800313a:	68f5      	ldreq	r5, [r6, #12]
 800313c:	e7da      	b.n	80030f4 <_vfiprintf_r+0x20>
 800313e:	89ab      	ldrh	r3, [r5, #12]
 8003140:	0598      	lsls	r0, r3, #22
 8003142:	d4ed      	bmi.n	8003120 <_vfiprintf_r+0x4c>
 8003144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003146:	f7ff fe5a 	bl	8002dfe <__retarget_lock_release_recursive>
 800314a:	e7e9      	b.n	8003120 <_vfiprintf_r+0x4c>
 800314c:	2300      	movs	r3, #0
 800314e:	9309      	str	r3, [sp, #36]	; 0x24
 8003150:	2320      	movs	r3, #32
 8003152:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003156:	2330      	movs	r3, #48	; 0x30
 8003158:	f04f 0901 	mov.w	r9, #1
 800315c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003160:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003320 <_vfiprintf_r+0x24c>
 8003164:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003168:	4623      	mov	r3, r4
 800316a:	469a      	mov	sl, r3
 800316c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003170:	b10a      	cbz	r2, 8003176 <_vfiprintf_r+0xa2>
 8003172:	2a25      	cmp	r2, #37	; 0x25
 8003174:	d1f9      	bne.n	800316a <_vfiprintf_r+0x96>
 8003176:	ebba 0b04 	subs.w	fp, sl, r4
 800317a:	d00b      	beq.n	8003194 <_vfiprintf_r+0xc0>
 800317c:	465b      	mov	r3, fp
 800317e:	4622      	mov	r2, r4
 8003180:	4629      	mov	r1, r5
 8003182:	4630      	mov	r0, r6
 8003184:	f7ff ff93 	bl	80030ae <__sfputs_r>
 8003188:	3001      	adds	r0, #1
 800318a:	f000 80aa 	beq.w	80032e2 <_vfiprintf_r+0x20e>
 800318e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003190:	445a      	add	r2, fp
 8003192:	9209      	str	r2, [sp, #36]	; 0x24
 8003194:	f89a 3000 	ldrb.w	r3, [sl]
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 80a2 	beq.w	80032e2 <_vfiprintf_r+0x20e>
 800319e:	2300      	movs	r3, #0
 80031a0:	f04f 32ff 	mov.w	r2, #4294967295
 80031a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031a8:	f10a 0a01 	add.w	sl, sl, #1
 80031ac:	9304      	str	r3, [sp, #16]
 80031ae:	9307      	str	r3, [sp, #28]
 80031b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031b4:	931a      	str	r3, [sp, #104]	; 0x68
 80031b6:	4654      	mov	r4, sl
 80031b8:	2205      	movs	r2, #5
 80031ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031be:	4858      	ldr	r0, [pc, #352]	; (8003320 <_vfiprintf_r+0x24c>)
 80031c0:	f000 faf8 	bl	80037b4 <memchr>
 80031c4:	9a04      	ldr	r2, [sp, #16]
 80031c6:	b9d8      	cbnz	r0, 8003200 <_vfiprintf_r+0x12c>
 80031c8:	06d1      	lsls	r1, r2, #27
 80031ca:	bf44      	itt	mi
 80031cc:	2320      	movmi	r3, #32
 80031ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031d2:	0713      	lsls	r3, r2, #28
 80031d4:	bf44      	itt	mi
 80031d6:	232b      	movmi	r3, #43	; 0x2b
 80031d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80031dc:	f89a 3000 	ldrb.w	r3, [sl]
 80031e0:	2b2a      	cmp	r3, #42	; 0x2a
 80031e2:	d015      	beq.n	8003210 <_vfiprintf_r+0x13c>
 80031e4:	4654      	mov	r4, sl
 80031e6:	2000      	movs	r0, #0
 80031e8:	f04f 0c0a 	mov.w	ip, #10
 80031ec:	9a07      	ldr	r2, [sp, #28]
 80031ee:	4621      	mov	r1, r4
 80031f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031f4:	3b30      	subs	r3, #48	; 0x30
 80031f6:	2b09      	cmp	r3, #9
 80031f8:	d94e      	bls.n	8003298 <_vfiprintf_r+0x1c4>
 80031fa:	b1b0      	cbz	r0, 800322a <_vfiprintf_r+0x156>
 80031fc:	9207      	str	r2, [sp, #28]
 80031fe:	e014      	b.n	800322a <_vfiprintf_r+0x156>
 8003200:	eba0 0308 	sub.w	r3, r0, r8
 8003204:	fa09 f303 	lsl.w	r3, r9, r3
 8003208:	4313      	orrs	r3, r2
 800320a:	46a2      	mov	sl, r4
 800320c:	9304      	str	r3, [sp, #16]
 800320e:	e7d2      	b.n	80031b6 <_vfiprintf_r+0xe2>
 8003210:	9b03      	ldr	r3, [sp, #12]
 8003212:	1d19      	adds	r1, r3, #4
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	9103      	str	r1, [sp, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	bfbb      	ittet	lt
 800321c:	425b      	neglt	r3, r3
 800321e:	f042 0202 	orrlt.w	r2, r2, #2
 8003222:	9307      	strge	r3, [sp, #28]
 8003224:	9307      	strlt	r3, [sp, #28]
 8003226:	bfb8      	it	lt
 8003228:	9204      	strlt	r2, [sp, #16]
 800322a:	7823      	ldrb	r3, [r4, #0]
 800322c:	2b2e      	cmp	r3, #46	; 0x2e
 800322e:	d10c      	bne.n	800324a <_vfiprintf_r+0x176>
 8003230:	7863      	ldrb	r3, [r4, #1]
 8003232:	2b2a      	cmp	r3, #42	; 0x2a
 8003234:	d135      	bne.n	80032a2 <_vfiprintf_r+0x1ce>
 8003236:	9b03      	ldr	r3, [sp, #12]
 8003238:	3402      	adds	r4, #2
 800323a:	1d1a      	adds	r2, r3, #4
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	9203      	str	r2, [sp, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	bfb8      	it	lt
 8003244:	f04f 33ff 	movlt.w	r3, #4294967295
 8003248:	9305      	str	r3, [sp, #20]
 800324a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003324 <_vfiprintf_r+0x250>
 800324e:	2203      	movs	r2, #3
 8003250:	4650      	mov	r0, sl
 8003252:	7821      	ldrb	r1, [r4, #0]
 8003254:	f000 faae 	bl	80037b4 <memchr>
 8003258:	b140      	cbz	r0, 800326c <_vfiprintf_r+0x198>
 800325a:	2340      	movs	r3, #64	; 0x40
 800325c:	eba0 000a 	sub.w	r0, r0, sl
 8003260:	fa03 f000 	lsl.w	r0, r3, r0
 8003264:	9b04      	ldr	r3, [sp, #16]
 8003266:	3401      	adds	r4, #1
 8003268:	4303      	orrs	r3, r0
 800326a:	9304      	str	r3, [sp, #16]
 800326c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003270:	2206      	movs	r2, #6
 8003272:	482d      	ldr	r0, [pc, #180]	; (8003328 <_vfiprintf_r+0x254>)
 8003274:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003278:	f000 fa9c 	bl	80037b4 <memchr>
 800327c:	2800      	cmp	r0, #0
 800327e:	d03f      	beq.n	8003300 <_vfiprintf_r+0x22c>
 8003280:	4b2a      	ldr	r3, [pc, #168]	; (800332c <_vfiprintf_r+0x258>)
 8003282:	bb1b      	cbnz	r3, 80032cc <_vfiprintf_r+0x1f8>
 8003284:	9b03      	ldr	r3, [sp, #12]
 8003286:	3307      	adds	r3, #7
 8003288:	f023 0307 	bic.w	r3, r3, #7
 800328c:	3308      	adds	r3, #8
 800328e:	9303      	str	r3, [sp, #12]
 8003290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003292:	443b      	add	r3, r7
 8003294:	9309      	str	r3, [sp, #36]	; 0x24
 8003296:	e767      	b.n	8003168 <_vfiprintf_r+0x94>
 8003298:	460c      	mov	r4, r1
 800329a:	2001      	movs	r0, #1
 800329c:	fb0c 3202 	mla	r2, ip, r2, r3
 80032a0:	e7a5      	b.n	80031ee <_vfiprintf_r+0x11a>
 80032a2:	2300      	movs	r3, #0
 80032a4:	f04f 0c0a 	mov.w	ip, #10
 80032a8:	4619      	mov	r1, r3
 80032aa:	3401      	adds	r4, #1
 80032ac:	9305      	str	r3, [sp, #20]
 80032ae:	4620      	mov	r0, r4
 80032b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032b4:	3a30      	subs	r2, #48	; 0x30
 80032b6:	2a09      	cmp	r2, #9
 80032b8:	d903      	bls.n	80032c2 <_vfiprintf_r+0x1ee>
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0c5      	beq.n	800324a <_vfiprintf_r+0x176>
 80032be:	9105      	str	r1, [sp, #20]
 80032c0:	e7c3      	b.n	800324a <_vfiprintf_r+0x176>
 80032c2:	4604      	mov	r4, r0
 80032c4:	2301      	movs	r3, #1
 80032c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80032ca:	e7f0      	b.n	80032ae <_vfiprintf_r+0x1da>
 80032cc:	ab03      	add	r3, sp, #12
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	462a      	mov	r2, r5
 80032d2:	4630      	mov	r0, r6
 80032d4:	4b16      	ldr	r3, [pc, #88]	; (8003330 <_vfiprintf_r+0x25c>)
 80032d6:	a904      	add	r1, sp, #16
 80032d8:	f3af 8000 	nop.w
 80032dc:	4607      	mov	r7, r0
 80032de:	1c78      	adds	r0, r7, #1
 80032e0:	d1d6      	bne.n	8003290 <_vfiprintf_r+0x1bc>
 80032e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80032e4:	07d9      	lsls	r1, r3, #31
 80032e6:	d405      	bmi.n	80032f4 <_vfiprintf_r+0x220>
 80032e8:	89ab      	ldrh	r3, [r5, #12]
 80032ea:	059a      	lsls	r2, r3, #22
 80032ec:	d402      	bmi.n	80032f4 <_vfiprintf_r+0x220>
 80032ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80032f0:	f7ff fd85 	bl	8002dfe <__retarget_lock_release_recursive>
 80032f4:	89ab      	ldrh	r3, [r5, #12]
 80032f6:	065b      	lsls	r3, r3, #25
 80032f8:	f53f af12 	bmi.w	8003120 <_vfiprintf_r+0x4c>
 80032fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032fe:	e711      	b.n	8003124 <_vfiprintf_r+0x50>
 8003300:	ab03      	add	r3, sp, #12
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	462a      	mov	r2, r5
 8003306:	4630      	mov	r0, r6
 8003308:	4b09      	ldr	r3, [pc, #36]	; (8003330 <_vfiprintf_r+0x25c>)
 800330a:	a904      	add	r1, sp, #16
 800330c:	f000 f882 	bl	8003414 <_printf_i>
 8003310:	e7e4      	b.n	80032dc <_vfiprintf_r+0x208>
 8003312:	bf00      	nop
 8003314:	08003890 	.word	0x08003890
 8003318:	080038b0 	.word	0x080038b0
 800331c:	08003870 	.word	0x08003870
 8003320:	080038d0 	.word	0x080038d0
 8003324:	080038d6 	.word	0x080038d6
 8003328:	080038da 	.word	0x080038da
 800332c:	00000000 	.word	0x00000000
 8003330:	080030af 	.word	0x080030af

08003334 <_printf_common>:
 8003334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003338:	4616      	mov	r6, r2
 800333a:	4699      	mov	r9, r3
 800333c:	688a      	ldr	r2, [r1, #8]
 800333e:	690b      	ldr	r3, [r1, #16]
 8003340:	4607      	mov	r7, r0
 8003342:	4293      	cmp	r3, r2
 8003344:	bfb8      	it	lt
 8003346:	4613      	movlt	r3, r2
 8003348:	6033      	str	r3, [r6, #0]
 800334a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800334e:	460c      	mov	r4, r1
 8003350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003354:	b10a      	cbz	r2, 800335a <_printf_common+0x26>
 8003356:	3301      	adds	r3, #1
 8003358:	6033      	str	r3, [r6, #0]
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	0699      	lsls	r1, r3, #26
 800335e:	bf42      	ittt	mi
 8003360:	6833      	ldrmi	r3, [r6, #0]
 8003362:	3302      	addmi	r3, #2
 8003364:	6033      	strmi	r3, [r6, #0]
 8003366:	6825      	ldr	r5, [r4, #0]
 8003368:	f015 0506 	ands.w	r5, r5, #6
 800336c:	d106      	bne.n	800337c <_printf_common+0x48>
 800336e:	f104 0a19 	add.w	sl, r4, #25
 8003372:	68e3      	ldr	r3, [r4, #12]
 8003374:	6832      	ldr	r2, [r6, #0]
 8003376:	1a9b      	subs	r3, r3, r2
 8003378:	42ab      	cmp	r3, r5
 800337a:	dc28      	bgt.n	80033ce <_printf_common+0x9a>
 800337c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003380:	1e13      	subs	r3, r2, #0
 8003382:	6822      	ldr	r2, [r4, #0]
 8003384:	bf18      	it	ne
 8003386:	2301      	movne	r3, #1
 8003388:	0692      	lsls	r2, r2, #26
 800338a:	d42d      	bmi.n	80033e8 <_printf_common+0xb4>
 800338c:	4649      	mov	r1, r9
 800338e:	4638      	mov	r0, r7
 8003390:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003394:	47c0      	blx	r8
 8003396:	3001      	adds	r0, #1
 8003398:	d020      	beq.n	80033dc <_printf_common+0xa8>
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	68e5      	ldr	r5, [r4, #12]
 800339e:	f003 0306 	and.w	r3, r3, #6
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	bf18      	it	ne
 80033a6:	2500      	movne	r5, #0
 80033a8:	6832      	ldr	r2, [r6, #0]
 80033aa:	f04f 0600 	mov.w	r6, #0
 80033ae:	68a3      	ldr	r3, [r4, #8]
 80033b0:	bf08      	it	eq
 80033b2:	1aad      	subeq	r5, r5, r2
 80033b4:	6922      	ldr	r2, [r4, #16]
 80033b6:	bf08      	it	eq
 80033b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033bc:	4293      	cmp	r3, r2
 80033be:	bfc4      	itt	gt
 80033c0:	1a9b      	subgt	r3, r3, r2
 80033c2:	18ed      	addgt	r5, r5, r3
 80033c4:	341a      	adds	r4, #26
 80033c6:	42b5      	cmp	r5, r6
 80033c8:	d11a      	bne.n	8003400 <_printf_common+0xcc>
 80033ca:	2000      	movs	r0, #0
 80033cc:	e008      	b.n	80033e0 <_printf_common+0xac>
 80033ce:	2301      	movs	r3, #1
 80033d0:	4652      	mov	r2, sl
 80033d2:	4649      	mov	r1, r9
 80033d4:	4638      	mov	r0, r7
 80033d6:	47c0      	blx	r8
 80033d8:	3001      	adds	r0, #1
 80033da:	d103      	bne.n	80033e4 <_printf_common+0xb0>
 80033dc:	f04f 30ff 	mov.w	r0, #4294967295
 80033e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033e4:	3501      	adds	r5, #1
 80033e6:	e7c4      	b.n	8003372 <_printf_common+0x3e>
 80033e8:	2030      	movs	r0, #48	; 0x30
 80033ea:	18e1      	adds	r1, r4, r3
 80033ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033f6:	4422      	add	r2, r4
 80033f8:	3302      	adds	r3, #2
 80033fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033fe:	e7c5      	b.n	800338c <_printf_common+0x58>
 8003400:	2301      	movs	r3, #1
 8003402:	4622      	mov	r2, r4
 8003404:	4649      	mov	r1, r9
 8003406:	4638      	mov	r0, r7
 8003408:	47c0      	blx	r8
 800340a:	3001      	adds	r0, #1
 800340c:	d0e6      	beq.n	80033dc <_printf_common+0xa8>
 800340e:	3601      	adds	r6, #1
 8003410:	e7d9      	b.n	80033c6 <_printf_common+0x92>
	...

08003414 <_printf_i>:
 8003414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003418:	7e0f      	ldrb	r7, [r1, #24]
 800341a:	4691      	mov	r9, r2
 800341c:	2f78      	cmp	r7, #120	; 0x78
 800341e:	4680      	mov	r8, r0
 8003420:	460c      	mov	r4, r1
 8003422:	469a      	mov	sl, r3
 8003424:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003426:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800342a:	d807      	bhi.n	800343c <_printf_i+0x28>
 800342c:	2f62      	cmp	r7, #98	; 0x62
 800342e:	d80a      	bhi.n	8003446 <_printf_i+0x32>
 8003430:	2f00      	cmp	r7, #0
 8003432:	f000 80d9 	beq.w	80035e8 <_printf_i+0x1d4>
 8003436:	2f58      	cmp	r7, #88	; 0x58
 8003438:	f000 80a4 	beq.w	8003584 <_printf_i+0x170>
 800343c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003444:	e03a      	b.n	80034bc <_printf_i+0xa8>
 8003446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800344a:	2b15      	cmp	r3, #21
 800344c:	d8f6      	bhi.n	800343c <_printf_i+0x28>
 800344e:	a101      	add	r1, pc, #4	; (adr r1, 8003454 <_printf_i+0x40>)
 8003450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003454:	080034ad 	.word	0x080034ad
 8003458:	080034c1 	.word	0x080034c1
 800345c:	0800343d 	.word	0x0800343d
 8003460:	0800343d 	.word	0x0800343d
 8003464:	0800343d 	.word	0x0800343d
 8003468:	0800343d 	.word	0x0800343d
 800346c:	080034c1 	.word	0x080034c1
 8003470:	0800343d 	.word	0x0800343d
 8003474:	0800343d 	.word	0x0800343d
 8003478:	0800343d 	.word	0x0800343d
 800347c:	0800343d 	.word	0x0800343d
 8003480:	080035cf 	.word	0x080035cf
 8003484:	080034f1 	.word	0x080034f1
 8003488:	080035b1 	.word	0x080035b1
 800348c:	0800343d 	.word	0x0800343d
 8003490:	0800343d 	.word	0x0800343d
 8003494:	080035f1 	.word	0x080035f1
 8003498:	0800343d 	.word	0x0800343d
 800349c:	080034f1 	.word	0x080034f1
 80034a0:	0800343d 	.word	0x0800343d
 80034a4:	0800343d 	.word	0x0800343d
 80034a8:	080035b9 	.word	0x080035b9
 80034ac:	682b      	ldr	r3, [r5, #0]
 80034ae:	1d1a      	adds	r2, r3, #4
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	602a      	str	r2, [r5, #0]
 80034b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034bc:	2301      	movs	r3, #1
 80034be:	e0a4      	b.n	800360a <_printf_i+0x1f6>
 80034c0:	6820      	ldr	r0, [r4, #0]
 80034c2:	6829      	ldr	r1, [r5, #0]
 80034c4:	0606      	lsls	r6, r0, #24
 80034c6:	f101 0304 	add.w	r3, r1, #4
 80034ca:	d50a      	bpl.n	80034e2 <_printf_i+0xce>
 80034cc:	680e      	ldr	r6, [r1, #0]
 80034ce:	602b      	str	r3, [r5, #0]
 80034d0:	2e00      	cmp	r6, #0
 80034d2:	da03      	bge.n	80034dc <_printf_i+0xc8>
 80034d4:	232d      	movs	r3, #45	; 0x2d
 80034d6:	4276      	negs	r6, r6
 80034d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034dc:	230a      	movs	r3, #10
 80034de:	485e      	ldr	r0, [pc, #376]	; (8003658 <_printf_i+0x244>)
 80034e0:	e019      	b.n	8003516 <_printf_i+0x102>
 80034e2:	680e      	ldr	r6, [r1, #0]
 80034e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80034e8:	602b      	str	r3, [r5, #0]
 80034ea:	bf18      	it	ne
 80034ec:	b236      	sxthne	r6, r6
 80034ee:	e7ef      	b.n	80034d0 <_printf_i+0xbc>
 80034f0:	682b      	ldr	r3, [r5, #0]
 80034f2:	6820      	ldr	r0, [r4, #0]
 80034f4:	1d19      	adds	r1, r3, #4
 80034f6:	6029      	str	r1, [r5, #0]
 80034f8:	0601      	lsls	r1, r0, #24
 80034fa:	d501      	bpl.n	8003500 <_printf_i+0xec>
 80034fc:	681e      	ldr	r6, [r3, #0]
 80034fe:	e002      	b.n	8003506 <_printf_i+0xf2>
 8003500:	0646      	lsls	r6, r0, #25
 8003502:	d5fb      	bpl.n	80034fc <_printf_i+0xe8>
 8003504:	881e      	ldrh	r6, [r3, #0]
 8003506:	2f6f      	cmp	r7, #111	; 0x6f
 8003508:	bf0c      	ite	eq
 800350a:	2308      	moveq	r3, #8
 800350c:	230a      	movne	r3, #10
 800350e:	4852      	ldr	r0, [pc, #328]	; (8003658 <_printf_i+0x244>)
 8003510:	2100      	movs	r1, #0
 8003512:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003516:	6865      	ldr	r5, [r4, #4]
 8003518:	2d00      	cmp	r5, #0
 800351a:	bfa8      	it	ge
 800351c:	6821      	ldrge	r1, [r4, #0]
 800351e:	60a5      	str	r5, [r4, #8]
 8003520:	bfa4      	itt	ge
 8003522:	f021 0104 	bicge.w	r1, r1, #4
 8003526:	6021      	strge	r1, [r4, #0]
 8003528:	b90e      	cbnz	r6, 800352e <_printf_i+0x11a>
 800352a:	2d00      	cmp	r5, #0
 800352c:	d04d      	beq.n	80035ca <_printf_i+0x1b6>
 800352e:	4615      	mov	r5, r2
 8003530:	fbb6 f1f3 	udiv	r1, r6, r3
 8003534:	fb03 6711 	mls	r7, r3, r1, r6
 8003538:	5dc7      	ldrb	r7, [r0, r7]
 800353a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800353e:	4637      	mov	r7, r6
 8003540:	42bb      	cmp	r3, r7
 8003542:	460e      	mov	r6, r1
 8003544:	d9f4      	bls.n	8003530 <_printf_i+0x11c>
 8003546:	2b08      	cmp	r3, #8
 8003548:	d10b      	bne.n	8003562 <_printf_i+0x14e>
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	07de      	lsls	r6, r3, #31
 800354e:	d508      	bpl.n	8003562 <_printf_i+0x14e>
 8003550:	6923      	ldr	r3, [r4, #16]
 8003552:	6861      	ldr	r1, [r4, #4]
 8003554:	4299      	cmp	r1, r3
 8003556:	bfde      	ittt	le
 8003558:	2330      	movle	r3, #48	; 0x30
 800355a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800355e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003562:	1b52      	subs	r2, r2, r5
 8003564:	6122      	str	r2, [r4, #16]
 8003566:	464b      	mov	r3, r9
 8003568:	4621      	mov	r1, r4
 800356a:	4640      	mov	r0, r8
 800356c:	f8cd a000 	str.w	sl, [sp]
 8003570:	aa03      	add	r2, sp, #12
 8003572:	f7ff fedf 	bl	8003334 <_printf_common>
 8003576:	3001      	adds	r0, #1
 8003578:	d14c      	bne.n	8003614 <_printf_i+0x200>
 800357a:	f04f 30ff 	mov.w	r0, #4294967295
 800357e:	b004      	add	sp, #16
 8003580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003584:	4834      	ldr	r0, [pc, #208]	; (8003658 <_printf_i+0x244>)
 8003586:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800358a:	6829      	ldr	r1, [r5, #0]
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003592:	6029      	str	r1, [r5, #0]
 8003594:	061d      	lsls	r5, r3, #24
 8003596:	d514      	bpl.n	80035c2 <_printf_i+0x1ae>
 8003598:	07df      	lsls	r7, r3, #31
 800359a:	bf44      	itt	mi
 800359c:	f043 0320 	orrmi.w	r3, r3, #32
 80035a0:	6023      	strmi	r3, [r4, #0]
 80035a2:	b91e      	cbnz	r6, 80035ac <_printf_i+0x198>
 80035a4:	6823      	ldr	r3, [r4, #0]
 80035a6:	f023 0320 	bic.w	r3, r3, #32
 80035aa:	6023      	str	r3, [r4, #0]
 80035ac:	2310      	movs	r3, #16
 80035ae:	e7af      	b.n	8003510 <_printf_i+0xfc>
 80035b0:	6823      	ldr	r3, [r4, #0]
 80035b2:	f043 0320 	orr.w	r3, r3, #32
 80035b6:	6023      	str	r3, [r4, #0]
 80035b8:	2378      	movs	r3, #120	; 0x78
 80035ba:	4828      	ldr	r0, [pc, #160]	; (800365c <_printf_i+0x248>)
 80035bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035c0:	e7e3      	b.n	800358a <_printf_i+0x176>
 80035c2:	0659      	lsls	r1, r3, #25
 80035c4:	bf48      	it	mi
 80035c6:	b2b6      	uxthmi	r6, r6
 80035c8:	e7e6      	b.n	8003598 <_printf_i+0x184>
 80035ca:	4615      	mov	r5, r2
 80035cc:	e7bb      	b.n	8003546 <_printf_i+0x132>
 80035ce:	682b      	ldr	r3, [r5, #0]
 80035d0:	6826      	ldr	r6, [r4, #0]
 80035d2:	1d18      	adds	r0, r3, #4
 80035d4:	6961      	ldr	r1, [r4, #20]
 80035d6:	6028      	str	r0, [r5, #0]
 80035d8:	0635      	lsls	r5, r6, #24
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	d501      	bpl.n	80035e2 <_printf_i+0x1ce>
 80035de:	6019      	str	r1, [r3, #0]
 80035e0:	e002      	b.n	80035e8 <_printf_i+0x1d4>
 80035e2:	0670      	lsls	r0, r6, #25
 80035e4:	d5fb      	bpl.n	80035de <_printf_i+0x1ca>
 80035e6:	8019      	strh	r1, [r3, #0]
 80035e8:	2300      	movs	r3, #0
 80035ea:	4615      	mov	r5, r2
 80035ec:	6123      	str	r3, [r4, #16]
 80035ee:	e7ba      	b.n	8003566 <_printf_i+0x152>
 80035f0:	682b      	ldr	r3, [r5, #0]
 80035f2:	2100      	movs	r1, #0
 80035f4:	1d1a      	adds	r2, r3, #4
 80035f6:	602a      	str	r2, [r5, #0]
 80035f8:	681d      	ldr	r5, [r3, #0]
 80035fa:	6862      	ldr	r2, [r4, #4]
 80035fc:	4628      	mov	r0, r5
 80035fe:	f000 f8d9 	bl	80037b4 <memchr>
 8003602:	b108      	cbz	r0, 8003608 <_printf_i+0x1f4>
 8003604:	1b40      	subs	r0, r0, r5
 8003606:	6060      	str	r0, [r4, #4]
 8003608:	6863      	ldr	r3, [r4, #4]
 800360a:	6123      	str	r3, [r4, #16]
 800360c:	2300      	movs	r3, #0
 800360e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003612:	e7a8      	b.n	8003566 <_printf_i+0x152>
 8003614:	462a      	mov	r2, r5
 8003616:	4649      	mov	r1, r9
 8003618:	4640      	mov	r0, r8
 800361a:	6923      	ldr	r3, [r4, #16]
 800361c:	47d0      	blx	sl
 800361e:	3001      	adds	r0, #1
 8003620:	d0ab      	beq.n	800357a <_printf_i+0x166>
 8003622:	6823      	ldr	r3, [r4, #0]
 8003624:	079b      	lsls	r3, r3, #30
 8003626:	d413      	bmi.n	8003650 <_printf_i+0x23c>
 8003628:	68e0      	ldr	r0, [r4, #12]
 800362a:	9b03      	ldr	r3, [sp, #12]
 800362c:	4298      	cmp	r0, r3
 800362e:	bfb8      	it	lt
 8003630:	4618      	movlt	r0, r3
 8003632:	e7a4      	b.n	800357e <_printf_i+0x16a>
 8003634:	2301      	movs	r3, #1
 8003636:	4632      	mov	r2, r6
 8003638:	4649      	mov	r1, r9
 800363a:	4640      	mov	r0, r8
 800363c:	47d0      	blx	sl
 800363e:	3001      	adds	r0, #1
 8003640:	d09b      	beq.n	800357a <_printf_i+0x166>
 8003642:	3501      	adds	r5, #1
 8003644:	68e3      	ldr	r3, [r4, #12]
 8003646:	9903      	ldr	r1, [sp, #12]
 8003648:	1a5b      	subs	r3, r3, r1
 800364a:	42ab      	cmp	r3, r5
 800364c:	dcf2      	bgt.n	8003634 <_printf_i+0x220>
 800364e:	e7eb      	b.n	8003628 <_printf_i+0x214>
 8003650:	2500      	movs	r5, #0
 8003652:	f104 0619 	add.w	r6, r4, #25
 8003656:	e7f5      	b.n	8003644 <_printf_i+0x230>
 8003658:	080038e1 	.word	0x080038e1
 800365c:	080038f2 	.word	0x080038f2

08003660 <_sbrk_r>:
 8003660:	b538      	push	{r3, r4, r5, lr}
 8003662:	2300      	movs	r3, #0
 8003664:	4d05      	ldr	r5, [pc, #20]	; (800367c <_sbrk_r+0x1c>)
 8003666:	4604      	mov	r4, r0
 8003668:	4608      	mov	r0, r1
 800366a:	602b      	str	r3, [r5, #0]
 800366c:	f7fd f89c 	bl	80007a8 <_sbrk>
 8003670:	1c43      	adds	r3, r0, #1
 8003672:	d102      	bne.n	800367a <_sbrk_r+0x1a>
 8003674:	682b      	ldr	r3, [r5, #0]
 8003676:	b103      	cbz	r3, 800367a <_sbrk_r+0x1a>
 8003678:	6023      	str	r3, [r4, #0]
 800367a:	bd38      	pop	{r3, r4, r5, pc}
 800367c:	20000160 	.word	0x20000160

08003680 <__sread>:
 8003680:	b510      	push	{r4, lr}
 8003682:	460c      	mov	r4, r1
 8003684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003688:	f000 f8ae 	bl	80037e8 <_read_r>
 800368c:	2800      	cmp	r0, #0
 800368e:	bfab      	itete	ge
 8003690:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003692:	89a3      	ldrhlt	r3, [r4, #12]
 8003694:	181b      	addge	r3, r3, r0
 8003696:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800369a:	bfac      	ite	ge
 800369c:	6563      	strge	r3, [r4, #84]	; 0x54
 800369e:	81a3      	strhlt	r3, [r4, #12]
 80036a0:	bd10      	pop	{r4, pc}

080036a2 <__swrite>:
 80036a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036a6:	461f      	mov	r7, r3
 80036a8:	898b      	ldrh	r3, [r1, #12]
 80036aa:	4605      	mov	r5, r0
 80036ac:	05db      	lsls	r3, r3, #23
 80036ae:	460c      	mov	r4, r1
 80036b0:	4616      	mov	r6, r2
 80036b2:	d505      	bpl.n	80036c0 <__swrite+0x1e>
 80036b4:	2302      	movs	r3, #2
 80036b6:	2200      	movs	r2, #0
 80036b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036bc:	f000 f868 	bl	8003790 <_lseek_r>
 80036c0:	89a3      	ldrh	r3, [r4, #12]
 80036c2:	4632      	mov	r2, r6
 80036c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036c8:	81a3      	strh	r3, [r4, #12]
 80036ca:	4628      	mov	r0, r5
 80036cc:	463b      	mov	r3, r7
 80036ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036d6:	f000 b817 	b.w	8003708 <_write_r>

080036da <__sseek>:
 80036da:	b510      	push	{r4, lr}
 80036dc:	460c      	mov	r4, r1
 80036de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036e2:	f000 f855 	bl	8003790 <_lseek_r>
 80036e6:	1c43      	adds	r3, r0, #1
 80036e8:	89a3      	ldrh	r3, [r4, #12]
 80036ea:	bf15      	itete	ne
 80036ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80036ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80036f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80036f6:	81a3      	strheq	r3, [r4, #12]
 80036f8:	bf18      	it	ne
 80036fa:	81a3      	strhne	r3, [r4, #12]
 80036fc:	bd10      	pop	{r4, pc}

080036fe <__sclose>:
 80036fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003702:	f000 b813 	b.w	800372c <_close_r>
	...

08003708 <_write_r>:
 8003708:	b538      	push	{r3, r4, r5, lr}
 800370a:	4604      	mov	r4, r0
 800370c:	4608      	mov	r0, r1
 800370e:	4611      	mov	r1, r2
 8003710:	2200      	movs	r2, #0
 8003712:	4d05      	ldr	r5, [pc, #20]	; (8003728 <_write_r+0x20>)
 8003714:	602a      	str	r2, [r5, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	f7fc fff9 	bl	800070e <_write>
 800371c:	1c43      	adds	r3, r0, #1
 800371e:	d102      	bne.n	8003726 <_write_r+0x1e>
 8003720:	682b      	ldr	r3, [r5, #0]
 8003722:	b103      	cbz	r3, 8003726 <_write_r+0x1e>
 8003724:	6023      	str	r3, [r4, #0]
 8003726:	bd38      	pop	{r3, r4, r5, pc}
 8003728:	20000160 	.word	0x20000160

0800372c <_close_r>:
 800372c:	b538      	push	{r3, r4, r5, lr}
 800372e:	2300      	movs	r3, #0
 8003730:	4d05      	ldr	r5, [pc, #20]	; (8003748 <_close_r+0x1c>)
 8003732:	4604      	mov	r4, r0
 8003734:	4608      	mov	r0, r1
 8003736:	602b      	str	r3, [r5, #0]
 8003738:	f7fd f805 	bl	8000746 <_close>
 800373c:	1c43      	adds	r3, r0, #1
 800373e:	d102      	bne.n	8003746 <_close_r+0x1a>
 8003740:	682b      	ldr	r3, [r5, #0]
 8003742:	b103      	cbz	r3, 8003746 <_close_r+0x1a>
 8003744:	6023      	str	r3, [r4, #0]
 8003746:	bd38      	pop	{r3, r4, r5, pc}
 8003748:	20000160 	.word	0x20000160

0800374c <_fstat_r>:
 800374c:	b538      	push	{r3, r4, r5, lr}
 800374e:	2300      	movs	r3, #0
 8003750:	4d06      	ldr	r5, [pc, #24]	; (800376c <_fstat_r+0x20>)
 8003752:	4604      	mov	r4, r0
 8003754:	4608      	mov	r0, r1
 8003756:	4611      	mov	r1, r2
 8003758:	602b      	str	r3, [r5, #0]
 800375a:	f7fc ffff 	bl	800075c <_fstat>
 800375e:	1c43      	adds	r3, r0, #1
 8003760:	d102      	bne.n	8003768 <_fstat_r+0x1c>
 8003762:	682b      	ldr	r3, [r5, #0]
 8003764:	b103      	cbz	r3, 8003768 <_fstat_r+0x1c>
 8003766:	6023      	str	r3, [r4, #0]
 8003768:	bd38      	pop	{r3, r4, r5, pc}
 800376a:	bf00      	nop
 800376c:	20000160 	.word	0x20000160

08003770 <_isatty_r>:
 8003770:	b538      	push	{r3, r4, r5, lr}
 8003772:	2300      	movs	r3, #0
 8003774:	4d05      	ldr	r5, [pc, #20]	; (800378c <_isatty_r+0x1c>)
 8003776:	4604      	mov	r4, r0
 8003778:	4608      	mov	r0, r1
 800377a:	602b      	str	r3, [r5, #0]
 800377c:	f7fc fffd 	bl	800077a <_isatty>
 8003780:	1c43      	adds	r3, r0, #1
 8003782:	d102      	bne.n	800378a <_isatty_r+0x1a>
 8003784:	682b      	ldr	r3, [r5, #0]
 8003786:	b103      	cbz	r3, 800378a <_isatty_r+0x1a>
 8003788:	6023      	str	r3, [r4, #0]
 800378a:	bd38      	pop	{r3, r4, r5, pc}
 800378c:	20000160 	.word	0x20000160

08003790 <_lseek_r>:
 8003790:	b538      	push	{r3, r4, r5, lr}
 8003792:	4604      	mov	r4, r0
 8003794:	4608      	mov	r0, r1
 8003796:	4611      	mov	r1, r2
 8003798:	2200      	movs	r2, #0
 800379a:	4d05      	ldr	r5, [pc, #20]	; (80037b0 <_lseek_r+0x20>)
 800379c:	602a      	str	r2, [r5, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	f7fc fff5 	bl	800078e <_lseek>
 80037a4:	1c43      	adds	r3, r0, #1
 80037a6:	d102      	bne.n	80037ae <_lseek_r+0x1e>
 80037a8:	682b      	ldr	r3, [r5, #0]
 80037aa:	b103      	cbz	r3, 80037ae <_lseek_r+0x1e>
 80037ac:	6023      	str	r3, [r4, #0]
 80037ae:	bd38      	pop	{r3, r4, r5, pc}
 80037b0:	20000160 	.word	0x20000160

080037b4 <memchr>:
 80037b4:	4603      	mov	r3, r0
 80037b6:	b510      	push	{r4, lr}
 80037b8:	b2c9      	uxtb	r1, r1
 80037ba:	4402      	add	r2, r0
 80037bc:	4293      	cmp	r3, r2
 80037be:	4618      	mov	r0, r3
 80037c0:	d101      	bne.n	80037c6 <memchr+0x12>
 80037c2:	2000      	movs	r0, #0
 80037c4:	e003      	b.n	80037ce <memchr+0x1a>
 80037c6:	7804      	ldrb	r4, [r0, #0]
 80037c8:	3301      	adds	r3, #1
 80037ca:	428c      	cmp	r4, r1
 80037cc:	d1f6      	bne.n	80037bc <memchr+0x8>
 80037ce:	bd10      	pop	{r4, pc}

080037d0 <__malloc_lock>:
 80037d0:	4801      	ldr	r0, [pc, #4]	; (80037d8 <__malloc_lock+0x8>)
 80037d2:	f7ff bb13 	b.w	8002dfc <__retarget_lock_acquire_recursive>
 80037d6:	bf00      	nop
 80037d8:	20000154 	.word	0x20000154

080037dc <__malloc_unlock>:
 80037dc:	4801      	ldr	r0, [pc, #4]	; (80037e4 <__malloc_unlock+0x8>)
 80037de:	f7ff bb0e 	b.w	8002dfe <__retarget_lock_release_recursive>
 80037e2:	bf00      	nop
 80037e4:	20000154 	.word	0x20000154

080037e8 <_read_r>:
 80037e8:	b538      	push	{r3, r4, r5, lr}
 80037ea:	4604      	mov	r4, r0
 80037ec:	4608      	mov	r0, r1
 80037ee:	4611      	mov	r1, r2
 80037f0:	2200      	movs	r2, #0
 80037f2:	4d05      	ldr	r5, [pc, #20]	; (8003808 <_read_r+0x20>)
 80037f4:	602a      	str	r2, [r5, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	f7fc ff6c 	bl	80006d4 <_read>
 80037fc:	1c43      	adds	r3, r0, #1
 80037fe:	d102      	bne.n	8003806 <_read_r+0x1e>
 8003800:	682b      	ldr	r3, [r5, #0]
 8003802:	b103      	cbz	r3, 8003806 <_read_r+0x1e>
 8003804:	6023      	str	r3, [r4, #0]
 8003806:	bd38      	pop	{r3, r4, r5, pc}
 8003808:	20000160 	.word	0x20000160

0800380c <_init>:
 800380c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800380e:	bf00      	nop
 8003810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003812:	bc08      	pop	{r3}
 8003814:	469e      	mov	lr, r3
 8003816:	4770      	bx	lr

08003818 <_fini>:
 8003818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800381a:	bf00      	nop
 800381c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800381e:	bc08      	pop	{r3}
 8003820:	469e      	mov	lr, r3
 8003822:	4770      	bx	lr
