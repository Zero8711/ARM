
220428Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08002f20  08002f20  00012f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ff8  08002ff8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002ff8  08002ff8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ff8  08002ff8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ff8  08002ff8  00012ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ffc  08002ffc  00012ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  08003070  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08003070  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e51  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019de  00000000  00000000  00029eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002b8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  0002c4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183ec  00000000  00000000  0002d060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bcd5  00000000  00000000  0004544c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b7db  00000000  00000000  00051121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc8fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a7c  00000000  00000000  000dc94c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f08 	.word	0x08002f08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002f08 	.word	0x08002f08

0800014c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f001 fda2 	bl	8001ca6 <HAL_UART_Transmit>

  return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	200000d4 	.word	0x200000d4

08000170 <us_delay>:
void us_delay(uint16_t delay)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800017a:	4b08      	ldr	r3, [pc, #32]	; (800019c <us_delay+0x2c>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2200      	movs	r2, #0
 8000180:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim2)) < delay);
 8000182:	bf00      	nop
 8000184:	4b05      	ldr	r3, [pc, #20]	; (800019c <us_delay+0x2c>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800018a:	88fb      	ldrh	r3, [r7, #6]
 800018c:	429a      	cmp	r2, r3
 800018e:	d3f9      	bcc.n	8000184 <us_delay+0x14>
}
 8000190:	bf00      	nop
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	2000008c 	.word	0x2000008c

080001a0 <getKeyNumber>:

/*-----------------------------------------------------------------------------*/
int getKeyNumber()
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	int scanValue = 0;
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 4; i++)
 80001aa:	2300      	movs	r3, #0
 80001ac:	603b      	str	r3, [r7, #0]
 80001ae:	e035      	b.n	800021c <getKeyNumber+0x7c>
	{
		GPIOC -> ODR = ~(0x10 << i);//KEYPAD_PORT_OUT = ~(0x10 << i)
 80001b0:	2210      	movs	r2, #16
 80001b2:	683b      	ldr	r3, [r7, #0]
 80001b4:	fa02 f303 	lsl.w	r3, r2, r3
 80001b8:	43da      	mvns	r2, r3
 80001ba:	4b1c      	ldr	r3, [pc, #112]	; (800022c <getKeyNumber+0x8c>)
 80001bc:	60da      	str	r2, [r3, #12]
		us_delay(500);
 80001be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001c2:	f7ff ffd5 	bl	8000170 <us_delay>
		if((GPIOC -> IDR & 0x0F) == 0x0E)//KEYPAD_PORT_IN = ~(0x10 << i)
 80001c6:	4b19      	ldr	r3, [pc, #100]	; (800022c <getKeyNumber+0x8c>)
 80001c8:	689b      	ldr	r3, [r3, #8]
 80001ca:	f003 030f 	and.w	r3, r3, #15
 80001ce:	2b0e      	cmp	r3, #14
 80001d0:	d103      	bne.n	80001da <getKeyNumber+0x3a>
		{
			scanValue = i + 1;
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	3301      	adds	r3, #1
 80001d6:	607b      	str	r3, [r7, #4]
			break;
 80001d8:	e023      	b.n	8000222 <getKeyNumber+0x82>
		}
		else if((GPIOC -> IDR & 0x0F) == 0x0D)//GPIOC -> IDR = ~(0x10 << i)
 80001da:	4b14      	ldr	r3, [pc, #80]	; (800022c <getKeyNumber+0x8c>)
 80001dc:	689b      	ldr	r3, [r3, #8]
 80001de:	f003 030f 	and.w	r3, r3, #15
 80001e2:	2b0d      	cmp	r3, #13
 80001e4:	d103      	bne.n	80001ee <getKeyNumber+0x4e>
		{
			scanValue = i + 5;
 80001e6:	683b      	ldr	r3, [r7, #0]
 80001e8:	3305      	adds	r3, #5
 80001ea:	607b      	str	r3, [r7, #4]
			break;
 80001ec:	e019      	b.n	8000222 <getKeyNumber+0x82>
		}
		else if((GPIOC -> IDR & 0x0F) == 0x0B)//GPIOC -> IDR = ~(0x10 << i)
 80001ee:	4b0f      	ldr	r3, [pc, #60]	; (800022c <getKeyNumber+0x8c>)
 80001f0:	689b      	ldr	r3, [r3, #8]
 80001f2:	f003 030f 	and.w	r3, r3, #15
 80001f6:	2b0b      	cmp	r3, #11
 80001f8:	d103      	bne.n	8000202 <getKeyNumber+0x62>
		{
			scanValue = i + 9;
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	3309      	adds	r3, #9
 80001fe:	607b      	str	r3, [r7, #4]
			break;
 8000200:	e00f      	b.n	8000222 <getKeyNumber+0x82>
		}
		else if((GPIOC -> IDR & 0x0F) == 0x07)//GPIOC -> IDR = ~(0x10 << i)
 8000202:	4b0a      	ldr	r3, [pc, #40]	; (800022c <getKeyNumber+0x8c>)
 8000204:	689b      	ldr	r3, [r3, #8]
 8000206:	f003 030f 	and.w	r3, r3, #15
 800020a:	2b07      	cmp	r3, #7
 800020c:	d103      	bne.n	8000216 <getKeyNumber+0x76>
		{
			scanValue = i + 13;
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	330d      	adds	r3, #13
 8000212:	607b      	str	r3, [r7, #4]
			break;
 8000214:	e005      	b.n	8000222 <getKeyNumber+0x82>
	for(int i = 0; i < 4; i++)
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	3301      	adds	r3, #1
 800021a:	603b      	str	r3, [r7, #0]
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	2b03      	cmp	r3, #3
 8000220:	ddc6      	ble.n	80001b0 <getKeyNumber+0x10>
		}
	}
	return scanValue;
 8000222:	687b      	ldr	r3, [r7, #4]
}
 8000224:	4618      	mov	r0, r3
 8000226:	3708      	adds	r7, #8
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}
 800022c:	40011000 	.word	0x40011000

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000234:	f000 faee 	bl	8000814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000238:	f000 f81a 	bl	8000270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023c:	f000 f8d0 	bl	80003e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000240:	f000 f8a4 	bl	800038c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000244:	f000 f856 	bl	80002f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start(&htim2);
 8000248:	4807      	ldr	r0, [pc, #28]	; (8000268 <main+0x38>)
 800024a:	f001 fa7b 	bl	8001744 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(getKeyNumber()!=0)
 800024e:	f7ff ffa7 	bl	80001a0 <getKeyNumber>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d0fa      	beq.n	800024e <main+0x1e>
	  printf("%d Button Pressed!\r\n",getKeyNumber());
 8000258:	f7ff ffa2 	bl	80001a0 <getKeyNumber>
 800025c:	4603      	mov	r3, r0
 800025e:	4619      	mov	r1, r3
 8000260:	4802      	ldr	r0, [pc, #8]	; (800026c <main+0x3c>)
 8000262:	f001 febd 	bl	8001fe0 <iprintf>
	  if(getKeyNumber()!=0)
 8000266:	e7f2      	b.n	800024e <main+0x1e>
 8000268:	2000008c 	.word	0x2000008c
 800026c:	08002f20 	.word	0x08002f20

08000270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b090      	sub	sp, #64	; 0x40
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	f107 0318 	add.w	r3, r7, #24
 800027a:	2228      	movs	r2, #40	; 0x28
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f001 fea6 	bl	8001fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]
 8000290:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000292:	2302      	movs	r3, #2
 8000294:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000296:	2301      	movs	r3, #1
 8000298:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029a:	2310      	movs	r3, #16
 800029c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029e:	2302      	movs	r3, #2
 80002a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002a2:	2300      	movs	r3, #0
 80002a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002a6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ac:	f107 0318 	add.w	r3, r7, #24
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 fddd 	bl	8000e70 <HAL_RCC_OscConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002bc:	f000 f91e 	bl	80004fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c0:	230f      	movs	r3, #15
 80002c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c4:	2302      	movs	r3, #2
 80002c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2102      	movs	r1, #2
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 f84a 	bl	8001374 <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002e6:	f000 f909 	bl	80004fc <Error_Handler>
  }
}
 80002ea:	bf00      	nop
 80002ec:	3740      	adds	r7, #64	; 0x40
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b086      	sub	sp, #24
 80002f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002fa:	f107 0308 	add.w	r3, r7, #8
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000308:	463b      	mov	r3, r7
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000310:	4b1d      	ldr	r3, [pc, #116]	; (8000388 <MX_TIM2_Init+0x94>)
 8000312:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000316:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <MX_TIM2_Init+0x94>)
 800031a:	223f      	movs	r2, #63	; 0x3f
 800031c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800031e:	4b1a      	ldr	r3, [pc, #104]	; (8000388 <MX_TIM2_Init+0x94>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000324:	4b18      	ldr	r3, [pc, #96]	; (8000388 <MX_TIM2_Init+0x94>)
 8000326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800032a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800032c:	4b16      	ldr	r3, [pc, #88]	; (8000388 <MX_TIM2_Init+0x94>)
 800032e:	2200      	movs	r2, #0
 8000330:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <MX_TIM2_Init+0x94>)
 8000334:	2200      	movs	r2, #0
 8000336:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000338:	4813      	ldr	r0, [pc, #76]	; (8000388 <MX_TIM2_Init+0x94>)
 800033a:	f001 f9b3 	bl	80016a4 <HAL_TIM_Base_Init>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000344:	f000 f8da 	bl	80004fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800034c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800034e:	f107 0308 	add.w	r3, r7, #8
 8000352:	4619      	mov	r1, r3
 8000354:	480c      	ldr	r0, [pc, #48]	; (8000388 <MX_TIM2_Init+0x94>)
 8000356:	f001 fa3f 	bl	80017d8 <HAL_TIM_ConfigClockSource>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000360:	f000 f8cc 	bl	80004fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000364:	2300      	movs	r3, #0
 8000366:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000368:	2300      	movs	r3, #0
 800036a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800036c:	463b      	mov	r3, r7
 800036e:	4619      	mov	r1, r3
 8000370:	4805      	ldr	r0, [pc, #20]	; (8000388 <MX_TIM2_Init+0x94>)
 8000372:	f001 fbed 	bl	8001b50 <HAL_TIMEx_MasterConfigSynchronization>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800037c:	f000 f8be 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000380:	bf00      	nop
 8000382:	3718      	adds	r7, #24
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	2000008c 	.word	0x2000008c

0800038c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <MX_USART2_UART_Init+0x4c>)
 8000392:	4a12      	ldr	r2, [pc, #72]	; (80003dc <MX_USART2_UART_Init+0x50>)
 8000394:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000396:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <MX_USART2_UART_Init+0x4c>)
 8000398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800039c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800039e:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <MX_USART2_UART_Init+0x4c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <MX_USART2_UART_Init+0x4c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003aa:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <MX_USART2_UART_Init+0x4c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <MX_USART2_UART_Init+0x4c>)
 80003b2:	220c      	movs	r2, #12
 80003b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003b6:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <MX_USART2_UART_Init+0x4c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <MX_USART2_UART_Init+0x4c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003c2:	4805      	ldr	r0, [pc, #20]	; (80003d8 <MX_USART2_UART_Init+0x4c>)
 80003c4:	f001 fc22 	bl	8001c0c <HAL_UART_Init>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003ce:	f000 f895 	bl	80004fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	200000d4 	.word	0x200000d4
 80003dc:	40004400 	.word	0x40004400

080003e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b088      	sub	sp, #32
 80003e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	f107 0310 	add.w	r3, r7, #16
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f4:	4b3d      	ldr	r3, [pc, #244]	; (80004ec <MX_GPIO_Init+0x10c>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a3c      	ldr	r2, [pc, #240]	; (80004ec <MX_GPIO_Init+0x10c>)
 80003fa:	f043 0310 	orr.w	r3, r3, #16
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b3a      	ldr	r3, [pc, #232]	; (80004ec <MX_GPIO_Init+0x10c>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0310 	and.w	r3, r3, #16
 8000408:	60fb      	str	r3, [r7, #12]
 800040a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800040c:	4b37      	ldr	r3, [pc, #220]	; (80004ec <MX_GPIO_Init+0x10c>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a36      	ldr	r2, [pc, #216]	; (80004ec <MX_GPIO_Init+0x10c>)
 8000412:	f043 0320 	orr.w	r3, r3, #32
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b34      	ldr	r3, [pc, #208]	; (80004ec <MX_GPIO_Init+0x10c>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0320 	and.w	r3, r3, #32
 8000420:	60bb      	str	r3, [r7, #8]
 8000422:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000424:	4b31      	ldr	r3, [pc, #196]	; (80004ec <MX_GPIO_Init+0x10c>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a30      	ldr	r2, [pc, #192]	; (80004ec <MX_GPIO_Init+0x10c>)
 800042a:	f043 0304 	orr.w	r3, r3, #4
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b2e      	ldr	r3, [pc, #184]	; (80004ec <MX_GPIO_Init+0x10c>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0304 	and.w	r3, r3, #4
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800043c:	4b2b      	ldr	r3, [pc, #172]	; (80004ec <MX_GPIO_Init+0x10c>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a2a      	ldr	r2, [pc, #168]	; (80004ec <MX_GPIO_Init+0x10c>)
 8000442:	f043 0308 	orr.w	r3, r3, #8
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b28      	ldr	r3, [pc, #160]	; (80004ec <MX_GPIO_Init+0x10c>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0308 	and.w	r3, r3, #8
 8000450:	603b      	str	r3, [r7, #0]
 8000452:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	2120      	movs	r1, #32
 8000458:	4825      	ldr	r0, [pc, #148]	; (80004f0 <MX_GPIO_Init+0x110>)
 800045a:	f000 fccf 	bl	8000dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800045e:	2200      	movs	r2, #0
 8000460:	21f0      	movs	r1, #240	; 0xf0
 8000462:	4824      	ldr	r0, [pc, #144]	; (80004f4 <MX_GPIO_Init+0x114>)
 8000464:	f000 fcca 	bl	8000dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800046c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800046e:	4b22      	ldr	r3, [pc, #136]	; (80004f8 <MX_GPIO_Init+0x118>)
 8000470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	2300      	movs	r3, #0
 8000474:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000476:	f107 0310 	add.w	r3, r7, #16
 800047a:	4619      	mov	r1, r3
 800047c:	481d      	ldr	r0, [pc, #116]	; (80004f4 <MX_GPIO_Init+0x114>)
 800047e:	f000 fb39 	bl	8000af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000482:	230f      	movs	r3, #15
 8000484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	2300      	movs	r3, #0
 800048c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800048e:	f107 0310 	add.w	r3, r7, #16
 8000492:	4619      	mov	r1, r3
 8000494:	4817      	ldr	r0, [pc, #92]	; (80004f4 <MX_GPIO_Init+0x114>)
 8000496:	f000 fb2d 	bl	8000af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800049a:	2320      	movs	r3, #32
 800049c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049e:	2301      	movs	r3, #1
 80004a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a2:	2300      	movs	r3, #0
 80004a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a6:	2302      	movs	r3, #2
 80004a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004aa:	f107 0310 	add.w	r3, r7, #16
 80004ae:	4619      	mov	r1, r3
 80004b0:	480f      	ldr	r0, [pc, #60]	; (80004f0 <MX_GPIO_Init+0x110>)
 80004b2:	f000 fb1f 	bl	8000af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80004b6:	23f0      	movs	r3, #240	; 0xf0
 80004b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ba:	2301      	movs	r3, #1
 80004bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004be:	2300      	movs	r3, #0
 80004c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c2:	2302      	movs	r3, #2
 80004c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004c6:	f107 0310 	add.w	r3, r7, #16
 80004ca:	4619      	mov	r1, r3
 80004cc:	4809      	ldr	r0, [pc, #36]	; (80004f4 <MX_GPIO_Init+0x114>)
 80004ce:	f000 fb11 	bl	8000af4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2100      	movs	r1, #0
 80004d6:	2028      	movs	r0, #40	; 0x28
 80004d8:	f000 fad5 	bl	8000a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004dc:	2028      	movs	r0, #40	; 0x28
 80004de:	f000 faee 	bl	8000abe <HAL_NVIC_EnableIRQ>

}
 80004e2:	bf00      	nop
 80004e4:	3720      	adds	r7, #32
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40021000 	.word	0x40021000
 80004f0:	40010800 	.word	0x40010800
 80004f4:	40011000 	.word	0x40011000
 80004f8:	10110000 	.word	0x10110000

080004fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000500:	b672      	cpsid	i
}
 8000502:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000504:	e7fe      	b.n	8000504 <Error_Handler+0x8>
	...

08000508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800050e:	4b15      	ldr	r3, [pc, #84]	; (8000564 <HAL_MspInit+0x5c>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	4a14      	ldr	r2, [pc, #80]	; (8000564 <HAL_MspInit+0x5c>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	6193      	str	r3, [r2, #24]
 800051a:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_MspInit+0x5c>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <HAL_MspInit+0x5c>)
 8000528:	69db      	ldr	r3, [r3, #28]
 800052a:	4a0e      	ldr	r2, [pc, #56]	; (8000564 <HAL_MspInit+0x5c>)
 800052c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000530:	61d3      	str	r3, [r2, #28]
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <HAL_MspInit+0x5c>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <HAL_MspInit+0x60>)
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <HAL_MspInit+0x60>)
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	40021000 	.word	0x40021000
 8000568:	40010000 	.word	0x40010000

0800056c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800057c:	d10b      	bne.n	8000596 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800057e:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <HAL_TIM_Base_MspInit+0x34>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <HAL_TIM_Base_MspInit+0x34>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	61d3      	str	r3, [r2, #28]
 800058a:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <HAL_TIM_Base_MspInit+0x34>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	60fb      	str	r3, [r7, #12]
 8000594:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	40021000 	.word	0x40021000

080005a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a15      	ldr	r2, [pc, #84]	; (8000614 <HAL_UART_MspInit+0x70>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d123      	bne.n	800060c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <HAL_UART_MspInit+0x74>)
 80005c6:	69db      	ldr	r3, [r3, #28]
 80005c8:	4a13      	ldr	r2, [pc, #76]	; (8000618 <HAL_UART_MspInit+0x74>)
 80005ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ce:	61d3      	str	r3, [r2, #28]
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <HAL_UART_MspInit+0x74>)
 80005d2:	69db      	ldr	r3, [r3, #28]
 80005d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005dc:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <HAL_UART_MspInit+0x74>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a0d      	ldr	r2, [pc, #52]	; (8000618 <HAL_UART_MspInit+0x74>)
 80005e2:	f043 0304 	orr.w	r3, r3, #4
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <HAL_UART_MspInit+0x74>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0304 	and.w	r3, r3, #4
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005f4:	230c      	movs	r3, #12
 80005f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f8:	2302      	movs	r3, #2
 80005fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	4619      	mov	r1, r3
 8000606:	4805      	ldr	r0, [pc, #20]	; (800061c <HAL_UART_MspInit+0x78>)
 8000608:	f000 fa74 	bl	8000af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800060c:	bf00      	nop
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40004400 	.word	0x40004400
 8000618:	40021000 	.word	0x40021000
 800061c:	40010800 	.word	0x40010800

08000620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000624:	e7fe      	b.n	8000624 <NMI_Handler+0x4>

08000626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800062a:	e7fe      	b.n	800062a <HardFault_Handler+0x4>

0800062c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000630:	e7fe      	b.n	8000630 <MemManage_Handler+0x4>

08000632 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000636:	e7fe      	b.n	8000636 <BusFault_Handler+0x4>

08000638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800063c:	e7fe      	b.n	800063c <UsageFault_Handler+0x4>

0800063e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr

0800064a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr

08000656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr

08000662 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000666:	f000 f91b 	bl	80008a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}

0800066e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000672:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000676:	f000 fbd9 	bl	8000e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}

0800067e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b086      	sub	sp, #24
 8000682:	af00      	add	r7, sp, #0
 8000684:	60f8      	str	r0, [r7, #12]
 8000686:	60b9      	str	r1, [r7, #8]
 8000688:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
 800068e:	e00a      	b.n	80006a6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000690:	f3af 8000 	nop.w
 8000694:	4601      	mov	r1, r0
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	1c5a      	adds	r2, r3, #1
 800069a:	60ba      	str	r2, [r7, #8]
 800069c:	b2ca      	uxtb	r2, r1
 800069e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	3301      	adds	r3, #1
 80006a4:	617b      	str	r3, [r7, #20]
 80006a6:	697a      	ldr	r2, [r7, #20]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	dbf0      	blt.n	8000690 <_read+0x12>
	}

return len;
 80006ae:	687b      	ldr	r3, [r7, #4]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	e009      	b.n	80006de <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	1c5a      	adds	r2, r3, #1
 80006ce:	60ba      	str	r2, [r7, #8]
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff fd3a 	bl	800014c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	3301      	adds	r3, #1
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	697a      	ldr	r2, [r7, #20]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	dbf1      	blt.n	80006ca <_write+0x12>
	}
	return len;
 80006e6:	687b      	ldr	r3, [r7, #4]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3718      	adds	r7, #24
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <_close>:

int _close(int file)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	return -1;
 80006f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr

08000706 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000706:	b480      	push	{r7}
 8000708:	b083      	sub	sp, #12
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
 800070e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000716:	605a      	str	r2, [r3, #4]
	return 0;
 8000718:	2300      	movs	r3, #0
}
 800071a:	4618      	mov	r0, r3
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <_isatty>:

int _isatty(int file)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	return 1;
 800072c:	2301      	movs	r3, #1
}
 800072e:	4618      	mov	r0, r3
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
	return 0;
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000758:	4a14      	ldr	r2, [pc, #80]	; (80007ac <_sbrk+0x5c>)
 800075a:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <_sbrk+0x60>)
 800075c:	1ad3      	subs	r3, r2, r3
 800075e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <_sbrk+0x64>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d102      	bne.n	8000772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <_sbrk+0x64>)
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <_sbrk+0x68>)
 8000770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <_sbrk+0x64>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4413      	add	r3, r2
 800077a:	693a      	ldr	r2, [r7, #16]
 800077c:	429a      	cmp	r2, r3
 800077e:	d207      	bcs.n	8000790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000780:	f001 fbfc 	bl	8001f7c <__errno>
 8000784:	4603      	mov	r3, r0
 8000786:	220c      	movs	r2, #12
 8000788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800078a:	f04f 33ff 	mov.w	r3, #4294967295
 800078e:	e009      	b.n	80007a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <_sbrk+0x64>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000796:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <_sbrk+0x64>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4413      	add	r3, r2
 800079e:	4a05      	ldr	r2, [pc, #20]	; (80007b4 <_sbrk+0x64>)
 80007a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007a2:	68fb      	ldr	r3, [r7, #12]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20005000 	.word	0x20005000
 80007b0:	00000400 	.word	0x00000400
 80007b4:	20000118 	.word	0x20000118
 80007b8:	20000130 	.word	0x20000130

080007bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c8:	480c      	ldr	r0, [pc, #48]	; (80007fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007ca:	490d      	ldr	r1, [pc, #52]	; (8000800 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007cc:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d0:	e002      	b.n	80007d8 <LoopCopyDataInit>

080007d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d6:	3304      	adds	r3, #4

080007d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007dc:	d3f9      	bcc.n	80007d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007e0:	4c0a      	ldr	r4, [pc, #40]	; (800080c <LoopFillZerobss+0x22>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e4:	e001      	b.n	80007ea <LoopFillZerobss>

080007e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e8:	3204      	adds	r2, #4

080007ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ec:	d3fb      	bcc.n	80007e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007ee:	f7ff ffe5 	bl	80007bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007f2:	f001 fbc9 	bl	8001f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007f6:	f7ff fd1b 	bl	8000230 <main>
  bx lr
 80007fa:	4770      	bx	lr
  ldr r0, =_sdata
 80007fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000800:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000804:	08003000 	.word	0x08003000
  ldr r2, =_sbss
 8000808:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800080c:	20000130 	.word	0x20000130

08000810 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000810:	e7fe      	b.n	8000810 <ADC1_2_IRQHandler>
	...

08000814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <HAL_Init+0x28>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a07      	ldr	r2, [pc, #28]	; (800083c <HAL_Init+0x28>)
 800081e:	f043 0310 	orr.w	r3, r3, #16
 8000822:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000824:	2003      	movs	r0, #3
 8000826:	f000 f923 	bl	8000a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800082a:	2000      	movs	r0, #0
 800082c:	f000 f808 	bl	8000840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000830:	f7ff fe6a 	bl	8000508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40022000 	.word	0x40022000

08000840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <HAL_InitTick+0x54>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_InitTick+0x58>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4619      	mov	r1, r3
 8000852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000856:	fbb3 f3f1 	udiv	r3, r3, r1
 800085a:	fbb2 f3f3 	udiv	r3, r2, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f93b 	bl	8000ada <HAL_SYSTICK_Config>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
 800086c:	e00e      	b.n	800088c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b0f      	cmp	r3, #15
 8000872:	d80a      	bhi.n	800088a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000874:	2200      	movs	r2, #0
 8000876:	6879      	ldr	r1, [r7, #4]
 8000878:	f04f 30ff 	mov.w	r0, #4294967295
 800087c:	f000 f903 	bl	8000a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000880:	4a06      	ldr	r2, [pc, #24]	; (800089c <HAL_InitTick+0x5c>)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000886:	2300      	movs	r3, #0
 8000888:	e000      	b.n	800088c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800088a:	2301      	movs	r3, #1
}
 800088c:	4618      	mov	r0, r3
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000000 	.word	0x20000000
 8000898:	20000008 	.word	0x20000008
 800089c:	20000004 	.word	0x20000004

080008a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <HAL_IncTick+0x1c>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <HAL_IncTick+0x20>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4413      	add	r3, r2
 80008b0:	4a03      	ldr	r2, [pc, #12]	; (80008c0 <HAL_IncTick+0x20>)
 80008b2:	6013      	str	r3, [r2, #0]
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	20000008 	.word	0x20000008
 80008c0:	2000011c 	.word	0x2000011c

080008c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  return uwTick;
 80008c8:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <HAL_GetTick+0x10>)
 80008ca:	681b      	ldr	r3, [r3, #0]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	2000011c 	.word	0x2000011c

080008d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <__NVIC_SetPriorityGrouping+0x44>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008f4:	4013      	ands	r3, r2
 80008f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000900:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090a:	4a04      	ldr	r2, [pc, #16]	; (800091c <__NVIC_SetPriorityGrouping+0x44>)
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	60d3      	str	r3, [r2, #12]
}
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <__NVIC_GetPriorityGrouping+0x18>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	f003 0307 	and.w	r3, r3, #7
}
 800092e:	4618      	mov	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	2b00      	cmp	r3, #0
 800094c:	db0b      	blt.n	8000966 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	f003 021f 	and.w	r2, r3, #31
 8000954:	4906      	ldr	r1, [pc, #24]	; (8000970 <__NVIC_EnableIRQ+0x34>)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	095b      	lsrs	r3, r3, #5
 800095c:	2001      	movs	r0, #1
 800095e:	fa00 f202 	lsl.w	r2, r0, r2
 8000962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	e000e100 	.word	0xe000e100

08000974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000984:	2b00      	cmp	r3, #0
 8000986:	db0a      	blt.n	800099e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	b2da      	uxtb	r2, r3
 800098c:	490c      	ldr	r1, [pc, #48]	; (80009c0 <__NVIC_SetPriority+0x4c>)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	0112      	lsls	r2, r2, #4
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	440b      	add	r3, r1
 8000998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800099c:	e00a      	b.n	80009b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4908      	ldr	r1, [pc, #32]	; (80009c4 <__NVIC_SetPriority+0x50>)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	f003 030f 	and.w	r3, r3, #15
 80009aa:	3b04      	subs	r3, #4
 80009ac:	0112      	lsls	r2, r2, #4
 80009ae:	b2d2      	uxtb	r2, r2
 80009b0:	440b      	add	r3, r1
 80009b2:	761a      	strb	r2, [r3, #24]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000e100 	.word	0xe000e100
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b089      	sub	sp, #36	; 0x24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	f1c3 0307 	rsb	r3, r3, #7
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	bf28      	it	cs
 80009e6:	2304      	movcs	r3, #4
 80009e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3304      	adds	r3, #4
 80009ee:	2b06      	cmp	r3, #6
 80009f0:	d902      	bls.n	80009f8 <NVIC_EncodePriority+0x30>
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3b03      	subs	r3, #3
 80009f6:	e000      	b.n	80009fa <NVIC_EncodePriority+0x32>
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43da      	mvns	r2, r3
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a10:	f04f 31ff 	mov.w	r1, #4294967295
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	43d9      	mvns	r1, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a20:	4313      	orrs	r3, r2
         );
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3724      	adds	r7, #36	; 0x24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a3c:	d301      	bcc.n	8000a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00f      	b.n	8000a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <SysTick_Config+0x40>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4a:	210f      	movs	r1, #15
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a50:	f7ff ff90 	bl	8000974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <SysTick_Config+0x40>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <SysTick_Config+0x40>)
 8000a5c:	2207      	movs	r2, #7
 8000a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	e000e010 	.word	0xe000e010

08000a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff ff2d 	bl	80008d8 <__NVIC_SetPriorityGrouping>
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b086      	sub	sp, #24
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	60b9      	str	r1, [r7, #8]
 8000a90:	607a      	str	r2, [r7, #4]
 8000a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a98:	f7ff ff42 	bl	8000920 <__NVIC_GetPriorityGrouping>
 8000a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	68b9      	ldr	r1, [r7, #8]
 8000aa2:	6978      	ldr	r0, [r7, #20]
 8000aa4:	f7ff ff90 	bl	80009c8 <NVIC_EncodePriority>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aae:	4611      	mov	r1, r2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff5f 	bl	8000974 <__NVIC_SetPriority>
}
 8000ab6:	bf00      	nop
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b082      	sub	sp, #8
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff35 	bl	800093c <__NVIC_EnableIRQ>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff ffa2 	bl	8000a2c <SysTick_Config>
 8000ae8:	4603      	mov	r3, r0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b08b      	sub	sp, #44	; 0x2c
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b06:	e169      	b.n	8000ddc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	69fa      	ldr	r2, [r7, #28]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b1c:	69ba      	ldr	r2, [r7, #24]
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	f040 8158 	bne.w	8000dd6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	4a9a      	ldr	r2, [pc, #616]	; (8000d94 <HAL_GPIO_Init+0x2a0>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d05e      	beq.n	8000bee <HAL_GPIO_Init+0xfa>
 8000b30:	4a98      	ldr	r2, [pc, #608]	; (8000d94 <HAL_GPIO_Init+0x2a0>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d875      	bhi.n	8000c22 <HAL_GPIO_Init+0x12e>
 8000b36:	4a98      	ldr	r2, [pc, #608]	; (8000d98 <HAL_GPIO_Init+0x2a4>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d058      	beq.n	8000bee <HAL_GPIO_Init+0xfa>
 8000b3c:	4a96      	ldr	r2, [pc, #600]	; (8000d98 <HAL_GPIO_Init+0x2a4>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d86f      	bhi.n	8000c22 <HAL_GPIO_Init+0x12e>
 8000b42:	4a96      	ldr	r2, [pc, #600]	; (8000d9c <HAL_GPIO_Init+0x2a8>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d052      	beq.n	8000bee <HAL_GPIO_Init+0xfa>
 8000b48:	4a94      	ldr	r2, [pc, #592]	; (8000d9c <HAL_GPIO_Init+0x2a8>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d869      	bhi.n	8000c22 <HAL_GPIO_Init+0x12e>
 8000b4e:	4a94      	ldr	r2, [pc, #592]	; (8000da0 <HAL_GPIO_Init+0x2ac>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d04c      	beq.n	8000bee <HAL_GPIO_Init+0xfa>
 8000b54:	4a92      	ldr	r2, [pc, #584]	; (8000da0 <HAL_GPIO_Init+0x2ac>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d863      	bhi.n	8000c22 <HAL_GPIO_Init+0x12e>
 8000b5a:	4a92      	ldr	r2, [pc, #584]	; (8000da4 <HAL_GPIO_Init+0x2b0>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d046      	beq.n	8000bee <HAL_GPIO_Init+0xfa>
 8000b60:	4a90      	ldr	r2, [pc, #576]	; (8000da4 <HAL_GPIO_Init+0x2b0>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d85d      	bhi.n	8000c22 <HAL_GPIO_Init+0x12e>
 8000b66:	2b12      	cmp	r3, #18
 8000b68:	d82a      	bhi.n	8000bc0 <HAL_GPIO_Init+0xcc>
 8000b6a:	2b12      	cmp	r3, #18
 8000b6c:	d859      	bhi.n	8000c22 <HAL_GPIO_Init+0x12e>
 8000b6e:	a201      	add	r2, pc, #4	; (adr r2, 8000b74 <HAL_GPIO_Init+0x80>)
 8000b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b74:	08000bef 	.word	0x08000bef
 8000b78:	08000bc9 	.word	0x08000bc9
 8000b7c:	08000bdb 	.word	0x08000bdb
 8000b80:	08000c1d 	.word	0x08000c1d
 8000b84:	08000c23 	.word	0x08000c23
 8000b88:	08000c23 	.word	0x08000c23
 8000b8c:	08000c23 	.word	0x08000c23
 8000b90:	08000c23 	.word	0x08000c23
 8000b94:	08000c23 	.word	0x08000c23
 8000b98:	08000c23 	.word	0x08000c23
 8000b9c:	08000c23 	.word	0x08000c23
 8000ba0:	08000c23 	.word	0x08000c23
 8000ba4:	08000c23 	.word	0x08000c23
 8000ba8:	08000c23 	.word	0x08000c23
 8000bac:	08000c23 	.word	0x08000c23
 8000bb0:	08000c23 	.word	0x08000c23
 8000bb4:	08000c23 	.word	0x08000c23
 8000bb8:	08000bd1 	.word	0x08000bd1
 8000bbc:	08000be5 	.word	0x08000be5
 8000bc0:	4a79      	ldr	r2, [pc, #484]	; (8000da8 <HAL_GPIO_Init+0x2b4>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d013      	beq.n	8000bee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bc6:	e02c      	b.n	8000c22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	623b      	str	r3, [r7, #32]
          break;
 8000bce:	e029      	b.n	8000c24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	623b      	str	r3, [r7, #32]
          break;
 8000bd8:	e024      	b.n	8000c24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	3308      	adds	r3, #8
 8000be0:	623b      	str	r3, [r7, #32]
          break;
 8000be2:	e01f      	b.n	8000c24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	330c      	adds	r3, #12
 8000bea:	623b      	str	r3, [r7, #32]
          break;
 8000bec:	e01a      	b.n	8000c24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d102      	bne.n	8000bfc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	623b      	str	r3, [r7, #32]
          break;
 8000bfa:	e013      	b.n	8000c24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d105      	bne.n	8000c10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c04:	2308      	movs	r3, #8
 8000c06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	69fa      	ldr	r2, [r7, #28]
 8000c0c:	611a      	str	r2, [r3, #16]
          break;
 8000c0e:	e009      	b.n	8000c24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c10:	2308      	movs	r3, #8
 8000c12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	69fa      	ldr	r2, [r7, #28]
 8000c18:	615a      	str	r2, [r3, #20]
          break;
 8000c1a:	e003      	b.n	8000c24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
          break;
 8000c20:	e000      	b.n	8000c24 <HAL_GPIO_Init+0x130>
          break;
 8000c22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	2bff      	cmp	r3, #255	; 0xff
 8000c28:	d801      	bhi.n	8000c2e <HAL_GPIO_Init+0x13a>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	e001      	b.n	8000c32 <HAL_GPIO_Init+0x13e>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3304      	adds	r3, #4
 8000c32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	2bff      	cmp	r3, #255	; 0xff
 8000c38:	d802      	bhi.n	8000c40 <HAL_GPIO_Init+0x14c>
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	e002      	b.n	8000c46 <HAL_GPIO_Init+0x152>
 8000c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c42:	3b08      	subs	r3, #8
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	210f      	movs	r1, #15
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	fa01 f303 	lsl.w	r3, r1, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	401a      	ands	r2, r3
 8000c58:	6a39      	ldr	r1, [r7, #32]
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c60:	431a      	orrs	r2, r3
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f000 80b1 	beq.w	8000dd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c74:	4b4d      	ldr	r3, [pc, #308]	; (8000dac <HAL_GPIO_Init+0x2b8>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a4c      	ldr	r2, [pc, #304]	; (8000dac <HAL_GPIO_Init+0x2b8>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b4a      	ldr	r3, [pc, #296]	; (8000dac <HAL_GPIO_Init+0x2b8>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c8c:	4a48      	ldr	r2, [pc, #288]	; (8000db0 <HAL_GPIO_Init+0x2bc>)
 8000c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c90:	089b      	lsrs	r3, r3, #2
 8000c92:	3302      	adds	r3, #2
 8000c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	f003 0303 	and.w	r3, r3, #3
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	220f      	movs	r2, #15
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	4013      	ands	r3, r2
 8000cae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a40      	ldr	r2, [pc, #256]	; (8000db4 <HAL_GPIO_Init+0x2c0>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d013      	beq.n	8000ce0 <HAL_GPIO_Init+0x1ec>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a3f      	ldr	r2, [pc, #252]	; (8000db8 <HAL_GPIO_Init+0x2c4>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d00d      	beq.n	8000cdc <HAL_GPIO_Init+0x1e8>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a3e      	ldr	r2, [pc, #248]	; (8000dbc <HAL_GPIO_Init+0x2c8>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d007      	beq.n	8000cd8 <HAL_GPIO_Init+0x1e4>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a3d      	ldr	r2, [pc, #244]	; (8000dc0 <HAL_GPIO_Init+0x2cc>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d101      	bne.n	8000cd4 <HAL_GPIO_Init+0x1e0>
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	e006      	b.n	8000ce2 <HAL_GPIO_Init+0x1ee>
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	e004      	b.n	8000ce2 <HAL_GPIO_Init+0x1ee>
 8000cd8:	2302      	movs	r3, #2
 8000cda:	e002      	b.n	8000ce2 <HAL_GPIO_Init+0x1ee>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e000      	b.n	8000ce2 <HAL_GPIO_Init+0x1ee>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ce4:	f002 0203 	and.w	r2, r2, #3
 8000ce8:	0092      	lsls	r2, r2, #2
 8000cea:	4093      	lsls	r3, r2
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cf2:	492f      	ldr	r1, [pc, #188]	; (8000db0 <HAL_GPIO_Init+0x2bc>)
 8000cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf6:	089b      	lsrs	r3, r3, #2
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d006      	beq.n	8000d1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d0c:	4b2d      	ldr	r3, [pc, #180]	; (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	492c      	ldr	r1, [pc, #176]	; (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	600b      	str	r3, [r1, #0]
 8000d18:	e006      	b.n	8000d28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d1a:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	43db      	mvns	r3, r3
 8000d22:	4928      	ldr	r1, [pc, #160]	; (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d24:	4013      	ands	r3, r2
 8000d26:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d006      	beq.n	8000d42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d34:	4b23      	ldr	r3, [pc, #140]	; (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d36:	685a      	ldr	r2, [r3, #4]
 8000d38:	4922      	ldr	r1, [pc, #136]	; (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	604b      	str	r3, [r1, #4]
 8000d40:	e006      	b.n	8000d50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d42:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	491e      	ldr	r1, [pc, #120]	; (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d006      	beq.n	8000d6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	4918      	ldr	r1, [pc, #96]	; (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	608b      	str	r3, [r1, #8]
 8000d68:	e006      	b.n	8000d78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d6c:	689a      	ldr	r2, [r3, #8]
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	43db      	mvns	r3, r3
 8000d72:	4914      	ldr	r1, [pc, #80]	; (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d74:	4013      	ands	r3, r2
 8000d76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d021      	beq.n	8000dc8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d86:	68da      	ldr	r2, [r3, #12]
 8000d88:	490e      	ldr	r1, [pc, #56]	; (8000dc4 <HAL_GPIO_Init+0x2d0>)
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	60cb      	str	r3, [r1, #12]
 8000d90:	e021      	b.n	8000dd6 <HAL_GPIO_Init+0x2e2>
 8000d92:	bf00      	nop
 8000d94:	10320000 	.word	0x10320000
 8000d98:	10310000 	.word	0x10310000
 8000d9c:	10220000 	.word	0x10220000
 8000da0:	10210000 	.word	0x10210000
 8000da4:	10120000 	.word	0x10120000
 8000da8:	10110000 	.word	0x10110000
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40010000 	.word	0x40010000
 8000db4:	40010800 	.word	0x40010800
 8000db8:	40010c00 	.word	0x40010c00
 8000dbc:	40011000 	.word	0x40011000
 8000dc0:	40011400 	.word	0x40011400
 8000dc4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <HAL_GPIO_Init+0x304>)
 8000dca:	68da      	ldr	r2, [r3, #12]
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	4909      	ldr	r1, [pc, #36]	; (8000df8 <HAL_GPIO_Init+0x304>)
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	3301      	adds	r3, #1
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de2:	fa22 f303 	lsr.w	r3, r2, r3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f47f ae8e 	bne.w	8000b08 <HAL_GPIO_Init+0x14>
  }
}
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	372c      	adds	r7, #44	; 0x2c
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	40010400 	.word	0x40010400

08000dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	807b      	strh	r3, [r7, #2]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e0c:	787b      	ldrb	r3, [r7, #1]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e12:	887a      	ldrh	r2, [r7, #2]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e18:	e003      	b.n	8000e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e1a:	887b      	ldrh	r3, [r7, #2]
 8000e1c:	041a      	lsls	r2, r3, #16
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	611a      	str	r2, [r3, #16]
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr

08000e2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e38:	695a      	ldr	r2, [r3, #20]
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d006      	beq.n	8000e50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e44:	88fb      	ldrh	r3, [r7, #6]
 8000e46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f806 	bl	8000e5c <HAL_GPIO_EXTI_Callback>
  }
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40010400 	.word	0x40010400

08000e5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e272      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 8087 	beq.w	8000f9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e90:	4b92      	ldr	r3, [pc, #584]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 030c 	and.w	r3, r3, #12
 8000e98:	2b04      	cmp	r3, #4
 8000e9a:	d00c      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e9c:	4b8f      	ldr	r3, [pc, #572]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 030c 	and.w	r3, r3, #12
 8000ea4:	2b08      	cmp	r3, #8
 8000ea6:	d112      	bne.n	8000ece <HAL_RCC_OscConfig+0x5e>
 8000ea8:	4b8c      	ldr	r3, [pc, #560]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eb4:	d10b      	bne.n	8000ece <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb6:	4b89      	ldr	r3, [pc, #548]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d06c      	beq.n	8000f9c <HAL_RCC_OscConfig+0x12c>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d168      	bne.n	8000f9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e24c      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed6:	d106      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x76>
 8000ed8:	4b80      	ldr	r3, [pc, #512]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a7f      	ldr	r2, [pc, #508]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	e02e      	b.n	8000f44 <HAL_RCC_OscConfig+0xd4>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10c      	bne.n	8000f08 <HAL_RCC_OscConfig+0x98>
 8000eee:	4b7b      	ldr	r3, [pc, #492]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a7a      	ldr	r2, [pc, #488]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ef8:	6013      	str	r3, [r2, #0]
 8000efa:	4b78      	ldr	r3, [pc, #480]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a77      	ldr	r2, [pc, #476]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	e01d      	b.n	8000f44 <HAL_RCC_OscConfig+0xd4>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f10:	d10c      	bne.n	8000f2c <HAL_RCC_OscConfig+0xbc>
 8000f12:	4b72      	ldr	r3, [pc, #456]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a71      	ldr	r2, [pc, #452]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	4b6f      	ldr	r3, [pc, #444]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a6e      	ldr	r2, [pc, #440]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	e00b      	b.n	8000f44 <HAL_RCC_OscConfig+0xd4>
 8000f2c:	4b6b      	ldr	r3, [pc, #428]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a6a      	ldr	r2, [pc, #424]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4b68      	ldr	r3, [pc, #416]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a67      	ldr	r2, [pc, #412]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d013      	beq.n	8000f74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fcba 	bl	80008c4 <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f54:	f7ff fcb6 	bl	80008c4 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b64      	cmp	r3, #100	; 0x64
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e200      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f66:	4b5d      	ldr	r3, [pc, #372]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0f0      	beq.n	8000f54 <HAL_RCC_OscConfig+0xe4>
 8000f72:	e014      	b.n	8000f9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fca6 	bl	80008c4 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f7c:	f7ff fca2 	bl	80008c4 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b64      	cmp	r3, #100	; 0x64
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e1ec      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f8e:	4b53      	ldr	r3, [pc, #332]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f0      	bne.n	8000f7c <HAL_RCC_OscConfig+0x10c>
 8000f9a:	e000      	b.n	8000f9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d063      	beq.n	8001072 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000faa:	4b4c      	ldr	r3, [pc, #304]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 030c 	and.w	r3, r3, #12
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00b      	beq.n	8000fce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fb6:	4b49      	ldr	r3, [pc, #292]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 030c 	and.w	r3, r3, #12
 8000fbe:	2b08      	cmp	r3, #8
 8000fc0:	d11c      	bne.n	8000ffc <HAL_RCC_OscConfig+0x18c>
 8000fc2:	4b46      	ldr	r3, [pc, #280]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d116      	bne.n	8000ffc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fce:	4b43      	ldr	r3, [pc, #268]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d005      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x176>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d001      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e1c0      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe6:	4b3d      	ldr	r3, [pc, #244]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	4939      	ldr	r1, [pc, #228]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffa:	e03a      	b.n	8001072 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d020      	beq.n	8001046 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001004:	4b36      	ldr	r3, [pc, #216]	; (80010e0 <HAL_RCC_OscConfig+0x270>)
 8001006:	2201      	movs	r2, #1
 8001008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100a:	f7ff fc5b 	bl	80008c4 <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001012:	f7ff fc57 	bl	80008c4 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e1a1      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001024:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0f0      	beq.n	8001012 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001030:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	4927      	ldr	r1, [pc, #156]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8001040:	4313      	orrs	r3, r2
 8001042:	600b      	str	r3, [r1, #0]
 8001044:	e015      	b.n	8001072 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001046:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <HAL_RCC_OscConfig+0x270>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fc3a 	bl	80008c4 <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001054:	f7ff fc36 	bl	80008c4 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e180      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f0      	bne.n	8001054 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0308 	and.w	r3, r3, #8
 800107a:	2b00      	cmp	r3, #0
 800107c:	d03a      	beq.n	80010f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d019      	beq.n	80010ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_RCC_OscConfig+0x274>)
 8001088:	2201      	movs	r2, #1
 800108a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108c:	f7ff fc1a 	bl	80008c4 <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001092:	e008      	b.n	80010a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001094:	f7ff fc16 	bl	80008c4 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d901      	bls.n	80010a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e160      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <HAL_RCC_OscConfig+0x26c>)
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0f0      	beq.n	8001094 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f000 fad8 	bl	8001668 <RCC_Delay>
 80010b8:	e01c      	b.n	80010f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_RCC_OscConfig+0x274>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c0:	f7ff fc00 	bl	80008c4 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c6:	e00f      	b.n	80010e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010c8:	f7ff fbfc 	bl	80008c4 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d908      	bls.n	80010e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e146      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000
 80010e0:	42420000 	.word	0x42420000
 80010e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e8:	4b92      	ldr	r3, [pc, #584]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1e9      	bne.n	80010c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0304 	and.w	r3, r3, #4
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	f000 80a6 	beq.w	800124e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001106:	4b8b      	ldr	r3, [pc, #556]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10d      	bne.n	800112e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001112:	4b88      	ldr	r3, [pc, #544]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	4a87      	ldr	r2, [pc, #540]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111c:	61d3      	str	r3, [r2, #28]
 800111e:	4b85      	ldr	r3, [pc, #532]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800112a:	2301      	movs	r3, #1
 800112c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800112e:	4b82      	ldr	r3, [pc, #520]	; (8001338 <HAL_RCC_OscConfig+0x4c8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001136:	2b00      	cmp	r3, #0
 8001138:	d118      	bne.n	800116c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800113a:	4b7f      	ldr	r3, [pc, #508]	; (8001338 <HAL_RCC_OscConfig+0x4c8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a7e      	ldr	r2, [pc, #504]	; (8001338 <HAL_RCC_OscConfig+0x4c8>)
 8001140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001146:	f7ff fbbd 	bl	80008c4 <HAL_GetTick>
 800114a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800114e:	f7ff fbb9 	bl	80008c4 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b64      	cmp	r3, #100	; 0x64
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e103      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001160:	4b75      	ldr	r3, [pc, #468]	; (8001338 <HAL_RCC_OscConfig+0x4c8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0f0      	beq.n	800114e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d106      	bne.n	8001182 <HAL_RCC_OscConfig+0x312>
 8001174:	4b6f      	ldr	r3, [pc, #444]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	4a6e      	ldr	r2, [pc, #440]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6213      	str	r3, [r2, #32]
 8001180:	e02d      	b.n	80011de <HAL_RCC_OscConfig+0x36e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10c      	bne.n	80011a4 <HAL_RCC_OscConfig+0x334>
 800118a:	4b6a      	ldr	r3, [pc, #424]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	4a69      	ldr	r2, [pc, #420]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001190:	f023 0301 	bic.w	r3, r3, #1
 8001194:	6213      	str	r3, [r2, #32]
 8001196:	4b67      	ldr	r3, [pc, #412]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	4a66      	ldr	r2, [pc, #408]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	f023 0304 	bic.w	r3, r3, #4
 80011a0:	6213      	str	r3, [r2, #32]
 80011a2:	e01c      	b.n	80011de <HAL_RCC_OscConfig+0x36e>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	2b05      	cmp	r3, #5
 80011aa:	d10c      	bne.n	80011c6 <HAL_RCC_OscConfig+0x356>
 80011ac:	4b61      	ldr	r3, [pc, #388]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	4a60      	ldr	r2, [pc, #384]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6213      	str	r3, [r2, #32]
 80011b8:	4b5e      	ldr	r3, [pc, #376]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	4a5d      	ldr	r2, [pc, #372]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6213      	str	r3, [r2, #32]
 80011c4:	e00b      	b.n	80011de <HAL_RCC_OscConfig+0x36e>
 80011c6:	4b5b      	ldr	r3, [pc, #364]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	4a5a      	ldr	r2, [pc, #360]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011cc:	f023 0301 	bic.w	r3, r3, #1
 80011d0:	6213      	str	r3, [r2, #32]
 80011d2:	4b58      	ldr	r3, [pc, #352]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	4a57      	ldr	r2, [pc, #348]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80011d8:	f023 0304 	bic.w	r3, r3, #4
 80011dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d015      	beq.n	8001212 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e6:	f7ff fb6d 	bl	80008c4 <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ec:	e00a      	b.n	8001204 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ee:	f7ff fb69 	bl	80008c4 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e0b1      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001204:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0ee      	beq.n	80011ee <HAL_RCC_OscConfig+0x37e>
 8001210:	e014      	b.n	800123c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001212:	f7ff fb57 	bl	80008c4 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001218:	e00a      	b.n	8001230 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800121a:	f7ff fb53 	bl	80008c4 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	f241 3288 	movw	r2, #5000	; 0x1388
 8001228:	4293      	cmp	r3, r2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e09b      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001230:	4b40      	ldr	r3, [pc, #256]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1ee      	bne.n	800121a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800123c:	7dfb      	ldrb	r3, [r7, #23]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d105      	bne.n	800124e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001242:	4b3c      	ldr	r3, [pc, #240]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	4a3b      	ldr	r2, [pc, #236]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 8001248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800124c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 8087 	beq.w	8001366 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001258:	4b36      	ldr	r3, [pc, #216]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 030c 	and.w	r3, r3, #12
 8001260:	2b08      	cmp	r3, #8
 8001262:	d061      	beq.n	8001328 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69db      	ldr	r3, [r3, #28]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d146      	bne.n	80012fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126c:	4b33      	ldr	r3, [pc, #204]	; (800133c <HAL_RCC_OscConfig+0x4cc>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001272:	f7ff fb27 	bl	80008c4 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127a:	f7ff fb23 	bl	80008c4 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e06d      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800128c:	4b29      	ldr	r3, [pc, #164]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f0      	bne.n	800127a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a0:	d108      	bne.n	80012b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012a2:	4b24      	ldr	r3, [pc, #144]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	4921      	ldr	r1, [pc, #132]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012b4:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a19      	ldr	r1, [r3, #32]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c4:	430b      	orrs	r3, r1
 80012c6:	491b      	ldr	r1, [pc, #108]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <HAL_RCC_OscConfig+0x4cc>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d2:	f7ff faf7 	bl	80008c4 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012da:	f7ff faf3 	bl	80008c4 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e03d      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0f0      	beq.n	80012da <HAL_RCC_OscConfig+0x46a>
 80012f8:	e035      	b.n	8001366 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <HAL_RCC_OscConfig+0x4cc>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001300:	f7ff fae0 	bl	80008c4 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001308:	f7ff fadc 	bl	80008c4 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e026      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_RCC_OscConfig+0x4c4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f0      	bne.n	8001308 <HAL_RCC_OscConfig+0x498>
 8001326:	e01e      	b.n	8001366 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d107      	bne.n	8001340 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e019      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
 8001334:	40021000 	.word	0x40021000
 8001338:	40007000 	.word	0x40007000
 800133c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_RCC_OscConfig+0x500>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	429a      	cmp	r2, r3
 8001352:	d106      	bne.n	8001362 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135e:	429a      	cmp	r2, r3
 8001360:	d001      	beq.n	8001366 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40021000 	.word	0x40021000

08001374 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e0d0      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001388:	4b6a      	ldr	r3, [pc, #424]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d910      	bls.n	80013b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001396:	4b67      	ldr	r3, [pc, #412]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 0207 	bic.w	r2, r3, #7
 800139e:	4965      	ldr	r1, [pc, #404]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a6:	4b63      	ldr	r3, [pc, #396]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d001      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e0b8      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d020      	beq.n	8001406 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013d0:	4b59      	ldr	r3, [pc, #356]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	4a58      	ldr	r2, [pc, #352]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80013d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0308 	and.w	r3, r3, #8
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d005      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013e8:	4b53      	ldr	r3, [pc, #332]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	4a52      	ldr	r2, [pc, #328]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f4:	4b50      	ldr	r3, [pc, #320]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	494d      	ldr	r1, [pc, #308]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	4313      	orrs	r3, r2
 8001404:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d040      	beq.n	8001494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d107      	bne.n	800142a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	4b47      	ldr	r3, [pc, #284]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d115      	bne.n	8001452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e07f      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d107      	bne.n	8001442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001432:	4b41      	ldr	r3, [pc, #260]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d109      	bne.n	8001452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e073      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001442:	4b3d      	ldr	r3, [pc, #244]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e06b      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001452:	4b39      	ldr	r3, [pc, #228]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f023 0203 	bic.w	r2, r3, #3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	4936      	ldr	r1, [pc, #216]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	4313      	orrs	r3, r2
 8001462:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001464:	f7ff fa2e 	bl	80008c4 <HAL_GetTick>
 8001468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146a:	e00a      	b.n	8001482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800146c:	f7ff fa2a 	bl	80008c4 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f241 3288 	movw	r2, #5000	; 0x1388
 800147a:	4293      	cmp	r3, r2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e053      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001482:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 020c 	and.w	r2, r3, #12
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	429a      	cmp	r2, r3
 8001492:	d1eb      	bne.n	800146c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001494:	4b27      	ldr	r3, [pc, #156]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d210      	bcs.n	80014c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a2:	4b24      	ldr	r3, [pc, #144]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f023 0207 	bic.w	r2, r3, #7
 80014aa:	4922      	ldr	r1, [pc, #136]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d001      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e032      	b.n	800152a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d008      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	4916      	ldr	r1, [pc, #88]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d009      	beq.n	8001502 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	490e      	ldr	r1, [pc, #56]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001502:	f000 f821 	bl	8001548 <HAL_RCC_GetSysClockFreq>
 8001506:	4602      	mov	r2, r0
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	091b      	lsrs	r3, r3, #4
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	490a      	ldr	r1, [pc, #40]	; (800153c <HAL_RCC_ClockConfig+0x1c8>)
 8001514:	5ccb      	ldrb	r3, [r1, r3]
 8001516:	fa22 f303 	lsr.w	r3, r2, r3
 800151a:	4a09      	ldr	r2, [pc, #36]	; (8001540 <HAL_RCC_ClockConfig+0x1cc>)
 800151c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_RCC_ClockConfig+0x1d0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f98c 	bl	8000840 <HAL_InitTick>

  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40022000 	.word	0x40022000
 8001538:	40021000 	.word	0x40021000
 800153c:	08002f48 	.word	0x08002f48
 8001540:	20000000 	.word	0x20000000
 8001544:	20000004 	.word	0x20000004

08001548 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001548:	b490      	push	{r4, r7}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800154e:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001550:	1d3c      	adds	r4, r7, #4
 8001552:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001554:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001558:	f240 2301 	movw	r3, #513	; 0x201
 800155c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
 8001562:	2300      	movs	r3, #0
 8001564:	61bb      	str	r3, [r7, #24]
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b04      	cmp	r3, #4
 8001580:	d002      	beq.n	8001588 <HAL_RCC_GetSysClockFreq+0x40>
 8001582:	2b08      	cmp	r3, #8
 8001584:	d003      	beq.n	800158e <HAL_RCC_GetSysClockFreq+0x46>
 8001586:	e02b      	b.n	80015e0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001588:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <HAL_RCC_GetSysClockFreq+0xb4>)
 800158a:	623b      	str	r3, [r7, #32]
      break;
 800158c:	e02b      	b.n	80015e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	0c9b      	lsrs	r3, r3, #18
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	3328      	adds	r3, #40	; 0x28
 8001598:	443b      	add	r3, r7
 800159a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800159e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d012      	beq.n	80015d0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	0c5b      	lsrs	r3, r3, #17
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	3328      	adds	r3, #40	; 0x28
 80015b6:	443b      	add	r3, r7
 80015b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80015c2:	fb03 f202 	mul.w	r2, r3, r2
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
 80015ce:	e004      	b.n	80015da <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015d4:	fb02 f303 	mul.w	r3, r2, r3
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	623b      	str	r3, [r7, #32]
      break;
 80015de:	e002      	b.n	80015e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80015e2:	623b      	str	r3, [r7, #32]
      break;
 80015e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015e6:	6a3b      	ldr	r3, [r7, #32]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3728      	adds	r7, #40	; 0x28
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc90      	pop	{r4, r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	08002f38 	.word	0x08002f38
 80015f8:	40021000 	.word	0x40021000
 80015fc:	007a1200 	.word	0x007a1200
 8001600:	003d0900 	.word	0x003d0900

08001604 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001608:	4b02      	ldr	r3, [pc, #8]	; (8001614 <HAL_RCC_GetHCLKFreq+0x10>)
 800160a:	681b      	ldr	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	20000000 	.word	0x20000000

08001618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800161c:	f7ff fff2 	bl	8001604 <HAL_RCC_GetHCLKFreq>
 8001620:	4602      	mov	r2, r0
 8001622:	4b05      	ldr	r3, [pc, #20]	; (8001638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	0a1b      	lsrs	r3, r3, #8
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	4903      	ldr	r1, [pc, #12]	; (800163c <HAL_RCC_GetPCLK1Freq+0x24>)
 800162e:	5ccb      	ldrb	r3, [r1, r3]
 8001630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001634:	4618      	mov	r0, r3
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40021000 	.word	0x40021000
 800163c:	08002f58 	.word	0x08002f58

08001640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001644:	f7ff ffde 	bl	8001604 <HAL_RCC_GetHCLKFreq>
 8001648:	4602      	mov	r2, r0
 800164a:	4b05      	ldr	r3, [pc, #20]	; (8001660 <HAL_RCC_GetPCLK2Freq+0x20>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	0adb      	lsrs	r3, r3, #11
 8001650:	f003 0307 	and.w	r3, r3, #7
 8001654:	4903      	ldr	r1, [pc, #12]	; (8001664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001656:	5ccb      	ldrb	r3, [r1, r3]
 8001658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800165c:	4618      	mov	r0, r3
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40021000 	.word	0x40021000
 8001664:	08002f58 	.word	0x08002f58

08001668 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001670:	4b0a      	ldr	r3, [pc, #40]	; (800169c <RCC_Delay+0x34>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <RCC_Delay+0x38>)
 8001676:	fba2 2303 	umull	r2, r3, r2, r3
 800167a:	0a5b      	lsrs	r3, r3, #9
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	fb02 f303 	mul.w	r3, r2, r3
 8001682:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001684:	bf00      	nop
  }
  while (Delay --);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1e5a      	subs	r2, r3, #1
 800168a:	60fa      	str	r2, [r7, #12]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f9      	bne.n	8001684 <RCC_Delay+0x1c>
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	20000000 	.word	0x20000000
 80016a0:	10624dd3 	.word	0x10624dd3

080016a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e041      	b.n	800173a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d106      	bne.n	80016d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7fe ff4e 	bl	800056c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2202      	movs	r2, #2
 80016d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3304      	adds	r3, #4
 80016e0:	4619      	mov	r1, r3
 80016e2:	4610      	mov	r0, r2
 80016e4:	f000 f93c 	bl	8001960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d001      	beq.n	800175c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e032      	b.n	80017c2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2202      	movs	r2, #2
 8001760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a18      	ldr	r2, [pc, #96]	; (80017cc <HAL_TIM_Base_Start+0x88>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d00e      	beq.n	800178c <HAL_TIM_Base_Start+0x48>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001776:	d009      	beq.n	800178c <HAL_TIM_Base_Start+0x48>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a14      	ldr	r2, [pc, #80]	; (80017d0 <HAL_TIM_Base_Start+0x8c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d004      	beq.n	800178c <HAL_TIM_Base_Start+0x48>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a13      	ldr	r2, [pc, #76]	; (80017d4 <HAL_TIM_Base_Start+0x90>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d111      	bne.n	80017b0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b06      	cmp	r3, #6
 800179c:	d010      	beq.n	80017c0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f042 0201 	orr.w	r2, r2, #1
 80017ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017ae:	e007      	b.n	80017c0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0201 	orr.w	r2, r2, #1
 80017be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	40012c00 	.word	0x40012c00
 80017d0:	40000400 	.word	0x40000400
 80017d4:	40000800 	.word	0x40000800

080017d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d101      	bne.n	80017f0 <HAL_TIM_ConfigClockSource+0x18>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e0b3      	b.n	8001958 <HAL_TIM_ConfigClockSource+0x180>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2202      	movs	r2, #2
 80017fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800180e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001816:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001828:	d03e      	beq.n	80018a8 <HAL_TIM_ConfigClockSource+0xd0>
 800182a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800182e:	f200 8087 	bhi.w	8001940 <HAL_TIM_ConfigClockSource+0x168>
 8001832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001836:	f000 8085 	beq.w	8001944 <HAL_TIM_ConfigClockSource+0x16c>
 800183a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800183e:	d87f      	bhi.n	8001940 <HAL_TIM_ConfigClockSource+0x168>
 8001840:	2b70      	cmp	r3, #112	; 0x70
 8001842:	d01a      	beq.n	800187a <HAL_TIM_ConfigClockSource+0xa2>
 8001844:	2b70      	cmp	r3, #112	; 0x70
 8001846:	d87b      	bhi.n	8001940 <HAL_TIM_ConfigClockSource+0x168>
 8001848:	2b60      	cmp	r3, #96	; 0x60
 800184a:	d050      	beq.n	80018ee <HAL_TIM_ConfigClockSource+0x116>
 800184c:	2b60      	cmp	r3, #96	; 0x60
 800184e:	d877      	bhi.n	8001940 <HAL_TIM_ConfigClockSource+0x168>
 8001850:	2b50      	cmp	r3, #80	; 0x50
 8001852:	d03c      	beq.n	80018ce <HAL_TIM_ConfigClockSource+0xf6>
 8001854:	2b50      	cmp	r3, #80	; 0x50
 8001856:	d873      	bhi.n	8001940 <HAL_TIM_ConfigClockSource+0x168>
 8001858:	2b40      	cmp	r3, #64	; 0x40
 800185a:	d058      	beq.n	800190e <HAL_TIM_ConfigClockSource+0x136>
 800185c:	2b40      	cmp	r3, #64	; 0x40
 800185e:	d86f      	bhi.n	8001940 <HAL_TIM_ConfigClockSource+0x168>
 8001860:	2b30      	cmp	r3, #48	; 0x30
 8001862:	d064      	beq.n	800192e <HAL_TIM_ConfigClockSource+0x156>
 8001864:	2b30      	cmp	r3, #48	; 0x30
 8001866:	d86b      	bhi.n	8001940 <HAL_TIM_ConfigClockSource+0x168>
 8001868:	2b20      	cmp	r3, #32
 800186a:	d060      	beq.n	800192e <HAL_TIM_ConfigClockSource+0x156>
 800186c:	2b20      	cmp	r3, #32
 800186e:	d867      	bhi.n	8001940 <HAL_TIM_ConfigClockSource+0x168>
 8001870:	2b00      	cmp	r3, #0
 8001872:	d05c      	beq.n	800192e <HAL_TIM_ConfigClockSource+0x156>
 8001874:	2b10      	cmp	r3, #16
 8001876:	d05a      	beq.n	800192e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001878:	e062      	b.n	8001940 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6818      	ldr	r0, [r3, #0]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	6899      	ldr	r1, [r3, #8]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f000 f942 	bl	8001b12 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800189c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	609a      	str	r2, [r3, #8]
      break;
 80018a6:	e04e      	b.n	8001946 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	6899      	ldr	r1, [r3, #8]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	f000 f92b 	bl	8001b12 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018ca:	609a      	str	r2, [r3, #8]
      break;
 80018cc:	e03b      	b.n	8001946 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	6859      	ldr	r1, [r3, #4]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	461a      	mov	r2, r3
 80018dc:	f000 f8a2 	bl	8001a24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2150      	movs	r1, #80	; 0x50
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 f8f9 	bl	8001ade <TIM_ITRx_SetConfig>
      break;
 80018ec:	e02b      	b.n	8001946 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	6859      	ldr	r1, [r3, #4]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	461a      	mov	r2, r3
 80018fc:	f000 f8c0 	bl	8001a80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2160      	movs	r1, #96	; 0x60
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f8e9 	bl	8001ade <TIM_ITRx_SetConfig>
      break;
 800190c:	e01b      	b.n	8001946 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	6859      	ldr	r1, [r3, #4]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	461a      	mov	r2, r3
 800191c:	f000 f882 	bl	8001a24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2140      	movs	r1, #64	; 0x40
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f8d9 	bl	8001ade <TIM_ITRx_SetConfig>
      break;
 800192c:	e00b      	b.n	8001946 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4619      	mov	r1, r3
 8001938:	4610      	mov	r0, r2
 800193a:	f000 f8d0 	bl	8001ade <TIM_ITRx_SetConfig>
        break;
 800193e:	e002      	b.n	8001946 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001940:	bf00      	nop
 8001942:	e000      	b.n	8001946 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001944:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a29      	ldr	r2, [pc, #164]	; (8001a18 <TIM_Base_SetConfig+0xb8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d00b      	beq.n	8001990 <TIM_Base_SetConfig+0x30>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800197e:	d007      	beq.n	8001990 <TIM_Base_SetConfig+0x30>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a26      	ldr	r2, [pc, #152]	; (8001a1c <TIM_Base_SetConfig+0xbc>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d003      	beq.n	8001990 <TIM_Base_SetConfig+0x30>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a25      	ldr	r2, [pc, #148]	; (8001a20 <TIM_Base_SetConfig+0xc0>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d108      	bne.n	80019a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	4313      	orrs	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a1c      	ldr	r2, [pc, #112]	; (8001a18 <TIM_Base_SetConfig+0xb8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d00b      	beq.n	80019c2 <TIM_Base_SetConfig+0x62>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b0:	d007      	beq.n	80019c2 <TIM_Base_SetConfig+0x62>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a19      	ldr	r2, [pc, #100]	; (8001a1c <TIM_Base_SetConfig+0xbc>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d003      	beq.n	80019c2 <TIM_Base_SetConfig+0x62>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a18      	ldr	r2, [pc, #96]	; (8001a20 <TIM_Base_SetConfig+0xc0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d108      	bne.n	80019d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	4313      	orrs	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a07      	ldr	r2, [pc, #28]	; (8001a18 <TIM_Base_SetConfig+0xb8>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d103      	bne.n	8001a08 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	691a      	ldr	r2, [r3, #16]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	615a      	str	r2, [r3, #20]
}
 8001a0e:	bf00      	nop
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr
 8001a18:	40012c00 	.word	0x40012c00
 8001a1c:	40000400 	.word	0x40000400
 8001a20:	40000800 	.word	0x40000800

08001a24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	f023 0201 	bic.w	r2, r3, #1
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f023 030a 	bic.w	r3, r3, #10
 8001a60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	621a      	str	r2, [r3, #32]
}
 8001a76:	bf00      	nop
 8001a78:	371c      	adds	r7, #28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	f023 0210 	bic.w	r2, r3, #16
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001aaa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	031b      	lsls	r3, r3, #12
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001abc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	011b      	lsls	r3, r3, #4
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	621a      	str	r2, [r3, #32]
}
 8001ad4:	bf00      	nop
 8001ad6:	371c      	adds	r7, #28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr

08001ade <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b085      	sub	sp, #20
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001af4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	f043 0307 	orr.w	r3, r3, #7
 8001b00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	609a      	str	r2, [r3, #8]
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bc80      	pop	{r7}
 8001b10:	4770      	bx	lr

08001b12 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b087      	sub	sp, #28
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b2c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	021a      	lsls	r2, r3, #8
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	431a      	orrs	r2, r3
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	609a      	str	r2, [r3, #8]
}
 8001b46:	bf00      	nop
 8001b48:	371c      	adds	r7, #28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d101      	bne.n	8001b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e046      	b.n	8001bf6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a16      	ldr	r2, [pc, #88]	; (8001c00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d00e      	beq.n	8001bca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb4:	d009      	beq.n	8001bca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d004      	beq.n	8001bca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a10      	ldr	r2, [pc, #64]	; (8001c08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d10c      	bne.n	8001be4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr
 8001c00:	40012c00 	.word	0x40012c00
 8001c04:	40000400 	.word	0x40000400
 8001c08:	40000800 	.word	0x40000800

08001c0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e03f      	b.n	8001c9e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d106      	bne.n	8001c38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7fe fcb6 	bl	80005a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2224      	movs	r2, #36	; 0x24
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f905 	bl	8001e60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	695a      	ldr	r2, [r3, #20]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2220      	movs	r2, #32
 8001c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b08a      	sub	sp, #40	; 0x28
 8001caa:	af02      	add	r7, sp, #8
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	603b      	str	r3, [r7, #0]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b20      	cmp	r3, #32
 8001cc4:	d17c      	bne.n	8001dc0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d002      	beq.n	8001cd2 <HAL_UART_Transmit+0x2c>
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e075      	b.n	8001dc2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <HAL_UART_Transmit+0x3e>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e06e      	b.n	8001dc2 <HAL_UART_Transmit+0x11c>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2221      	movs	r2, #33	; 0x21
 8001cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cfa:	f7fe fde3 	bl	80008c4 <HAL_GetTick>
 8001cfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	88fa      	ldrh	r2, [r7, #6]
 8001d04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	88fa      	ldrh	r2, [r7, #6]
 8001d0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d14:	d108      	bne.n	8001d28 <HAL_UART_Transmit+0x82>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d104      	bne.n	8001d28 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	61bb      	str	r3, [r7, #24]
 8001d26:	e003      	b.n	8001d30 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001d38:	e02a      	b.n	8001d90 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2200      	movs	r2, #0
 8001d42:	2180      	movs	r1, #128	; 0x80
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f000 f840 	bl	8001dca <UART_WaitOnFlagUntilTimeout>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e036      	b.n	8001dc2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10b      	bne.n	8001d72 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	61bb      	str	r3, [r7, #24]
 8001d70:	e007      	b.n	8001d82 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	781a      	ldrb	r2, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1cf      	bne.n	8001d3a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2200      	movs	r2, #0
 8001da2:	2140      	movs	r1, #64	; 0x40
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 f810 	bl	8001dca <UART_WaitOnFlagUntilTimeout>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e006      	b.n	8001dc2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	e000      	b.n	8001dc2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001dc0:	2302      	movs	r3, #2
  }
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3720      	adds	r7, #32
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b084      	sub	sp, #16
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	60f8      	str	r0, [r7, #12]
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	603b      	str	r3, [r7, #0]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dda:	e02c      	b.n	8001e36 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de2:	d028      	beq.n	8001e36 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d007      	beq.n	8001dfa <UART_WaitOnFlagUntilTimeout+0x30>
 8001dea:	f7fe fd6b 	bl	80008c4 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d21d      	bcs.n	8001e36 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e08:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	695a      	ldr	r2, [r3, #20]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0201 	bic.w	r2, r2, #1
 8001e18:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2220      	movs	r2, #32
 8001e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e00f      	b.n	8001e56 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	bf0c      	ite	eq
 8001e46:	2301      	moveq	r3, #1
 8001e48:	2300      	movne	r3, #0
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d0c3      	beq.n	8001ddc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001e9a:	f023 030c 	bic.w	r3, r3, #12
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	68b9      	ldr	r1, [r7, #8]
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699a      	ldr	r2, [r3, #24]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a2c      	ldr	r2, [pc, #176]	; (8001f74 <UART_SetConfig+0x114>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d103      	bne.n	8001ed0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ec8:	f7ff fbba 	bl	8001640 <HAL_RCC_GetPCLK2Freq>
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	e002      	b.n	8001ed6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001ed0:	f7ff fba2 	bl	8001618 <HAL_RCC_GetPCLK1Freq>
 8001ed4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	009a      	lsls	r2, r3, #2
 8001ee0:	441a      	add	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eec:	4a22      	ldr	r2, [pc, #136]	; (8001f78 <UART_SetConfig+0x118>)
 8001eee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef2:	095b      	lsrs	r3, r3, #5
 8001ef4:	0119      	lsls	r1, r3, #4
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	009a      	lsls	r2, r3, #2
 8001f00:	441a      	add	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f0c:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <UART_SetConfig+0x118>)
 8001f0e:	fba3 0302 	umull	r0, r3, r3, r2
 8001f12:	095b      	lsrs	r3, r3, #5
 8001f14:	2064      	movs	r0, #100	; 0x64
 8001f16:	fb00 f303 	mul.w	r3, r0, r3
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	3332      	adds	r3, #50	; 0x32
 8001f20:	4a15      	ldr	r2, [pc, #84]	; (8001f78 <UART_SetConfig+0x118>)
 8001f22:	fba2 2303 	umull	r2, r3, r2, r3
 8001f26:	095b      	lsrs	r3, r3, #5
 8001f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f2c:	4419      	add	r1, r3
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	009a      	lsls	r2, r3, #2
 8001f38:	441a      	add	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <UART_SetConfig+0x118>)
 8001f46:	fba3 0302 	umull	r0, r3, r3, r2
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	2064      	movs	r0, #100	; 0x64
 8001f4e:	fb00 f303 	mul.w	r3, r0, r3
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	011b      	lsls	r3, r3, #4
 8001f56:	3332      	adds	r3, #50	; 0x32
 8001f58:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <UART_SetConfig+0x118>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	f003 020f 	and.w	r2, r3, #15
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	440a      	add	r2, r1
 8001f6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001f6c:	bf00      	nop
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40013800 	.word	0x40013800
 8001f78:	51eb851f 	.word	0x51eb851f

08001f7c <__errno>:
 8001f7c:	4b01      	ldr	r3, [pc, #4]	; (8001f84 <__errno+0x8>)
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	2000000c 	.word	0x2000000c

08001f88 <__libc_init_array>:
 8001f88:	b570      	push	{r4, r5, r6, lr}
 8001f8a:	2600      	movs	r6, #0
 8001f8c:	4d0c      	ldr	r5, [pc, #48]	; (8001fc0 <__libc_init_array+0x38>)
 8001f8e:	4c0d      	ldr	r4, [pc, #52]	; (8001fc4 <__libc_init_array+0x3c>)
 8001f90:	1b64      	subs	r4, r4, r5
 8001f92:	10a4      	asrs	r4, r4, #2
 8001f94:	42a6      	cmp	r6, r4
 8001f96:	d109      	bne.n	8001fac <__libc_init_array+0x24>
 8001f98:	f000 ffb6 	bl	8002f08 <_init>
 8001f9c:	2600      	movs	r6, #0
 8001f9e:	4d0a      	ldr	r5, [pc, #40]	; (8001fc8 <__libc_init_array+0x40>)
 8001fa0:	4c0a      	ldr	r4, [pc, #40]	; (8001fcc <__libc_init_array+0x44>)
 8001fa2:	1b64      	subs	r4, r4, r5
 8001fa4:	10a4      	asrs	r4, r4, #2
 8001fa6:	42a6      	cmp	r6, r4
 8001fa8:	d105      	bne.n	8001fb6 <__libc_init_array+0x2e>
 8001faa:	bd70      	pop	{r4, r5, r6, pc}
 8001fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fb0:	4798      	blx	r3
 8001fb2:	3601      	adds	r6, #1
 8001fb4:	e7ee      	b.n	8001f94 <__libc_init_array+0xc>
 8001fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fba:	4798      	blx	r3
 8001fbc:	3601      	adds	r6, #1
 8001fbe:	e7f2      	b.n	8001fa6 <__libc_init_array+0x1e>
 8001fc0:	08002ff8 	.word	0x08002ff8
 8001fc4:	08002ff8 	.word	0x08002ff8
 8001fc8:	08002ff8 	.word	0x08002ff8
 8001fcc:	08002ffc 	.word	0x08002ffc

08001fd0 <memset>:
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4402      	add	r2, r0
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d100      	bne.n	8001fda <memset+0xa>
 8001fd8:	4770      	bx	lr
 8001fda:	f803 1b01 	strb.w	r1, [r3], #1
 8001fde:	e7f9      	b.n	8001fd4 <memset+0x4>

08001fe0 <iprintf>:
 8001fe0:	b40f      	push	{r0, r1, r2, r3}
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	; (800200c <iprintf+0x2c>)
 8001fe4:	b513      	push	{r0, r1, r4, lr}
 8001fe6:	681c      	ldr	r4, [r3, #0]
 8001fe8:	b124      	cbz	r4, 8001ff4 <iprintf+0x14>
 8001fea:	69a3      	ldr	r3, [r4, #24]
 8001fec:	b913      	cbnz	r3, 8001ff4 <iprintf+0x14>
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f000 f866 	bl	80020c0 <__sinit>
 8001ff4:	ab05      	add	r3, sp, #20
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	9a04      	ldr	r2, [sp, #16]
 8001ffa:	68a1      	ldr	r1, [r4, #8]
 8001ffc:	9301      	str	r3, [sp, #4]
 8001ffe:	f000 f9bb 	bl	8002378 <_vfiprintf_r>
 8002002:	b002      	add	sp, #8
 8002004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002008:	b004      	add	sp, #16
 800200a:	4770      	bx	lr
 800200c:	2000000c 	.word	0x2000000c

08002010 <std>:
 8002010:	2300      	movs	r3, #0
 8002012:	b510      	push	{r4, lr}
 8002014:	4604      	mov	r4, r0
 8002016:	e9c0 3300 	strd	r3, r3, [r0]
 800201a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800201e:	6083      	str	r3, [r0, #8]
 8002020:	8181      	strh	r1, [r0, #12]
 8002022:	6643      	str	r3, [r0, #100]	; 0x64
 8002024:	81c2      	strh	r2, [r0, #14]
 8002026:	6183      	str	r3, [r0, #24]
 8002028:	4619      	mov	r1, r3
 800202a:	2208      	movs	r2, #8
 800202c:	305c      	adds	r0, #92	; 0x5c
 800202e:	f7ff ffcf 	bl	8001fd0 <memset>
 8002032:	4b05      	ldr	r3, [pc, #20]	; (8002048 <std+0x38>)
 8002034:	6224      	str	r4, [r4, #32]
 8002036:	6263      	str	r3, [r4, #36]	; 0x24
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <std+0x3c>)
 800203a:	62a3      	str	r3, [r4, #40]	; 0x28
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <std+0x40>)
 800203e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <std+0x44>)
 8002042:	6323      	str	r3, [r4, #48]	; 0x30
 8002044:	bd10      	pop	{r4, pc}
 8002046:	bf00      	nop
 8002048:	08002925 	.word	0x08002925
 800204c:	08002947 	.word	0x08002947
 8002050:	0800297f 	.word	0x0800297f
 8002054:	080029a3 	.word	0x080029a3

08002058 <_cleanup_r>:
 8002058:	4901      	ldr	r1, [pc, #4]	; (8002060 <_cleanup_r+0x8>)
 800205a:	f000 b8af 	b.w	80021bc <_fwalk_reent>
 800205e:	bf00      	nop
 8002060:	08002c75 	.word	0x08002c75

08002064 <__sfmoreglue>:
 8002064:	2268      	movs	r2, #104	; 0x68
 8002066:	b570      	push	{r4, r5, r6, lr}
 8002068:	1e4d      	subs	r5, r1, #1
 800206a:	4355      	muls	r5, r2
 800206c:	460e      	mov	r6, r1
 800206e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002072:	f000 f8e5 	bl	8002240 <_malloc_r>
 8002076:	4604      	mov	r4, r0
 8002078:	b140      	cbz	r0, 800208c <__sfmoreglue+0x28>
 800207a:	2100      	movs	r1, #0
 800207c:	e9c0 1600 	strd	r1, r6, [r0]
 8002080:	300c      	adds	r0, #12
 8002082:	60a0      	str	r0, [r4, #8]
 8002084:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002088:	f7ff ffa2 	bl	8001fd0 <memset>
 800208c:	4620      	mov	r0, r4
 800208e:	bd70      	pop	{r4, r5, r6, pc}

08002090 <__sfp_lock_acquire>:
 8002090:	4801      	ldr	r0, [pc, #4]	; (8002098 <__sfp_lock_acquire+0x8>)
 8002092:	f000 b8b3 	b.w	80021fc <__retarget_lock_acquire_recursive>
 8002096:	bf00      	nop
 8002098:	20000121 	.word	0x20000121

0800209c <__sfp_lock_release>:
 800209c:	4801      	ldr	r0, [pc, #4]	; (80020a4 <__sfp_lock_release+0x8>)
 800209e:	f000 b8ae 	b.w	80021fe <__retarget_lock_release_recursive>
 80020a2:	bf00      	nop
 80020a4:	20000121 	.word	0x20000121

080020a8 <__sinit_lock_acquire>:
 80020a8:	4801      	ldr	r0, [pc, #4]	; (80020b0 <__sinit_lock_acquire+0x8>)
 80020aa:	f000 b8a7 	b.w	80021fc <__retarget_lock_acquire_recursive>
 80020ae:	bf00      	nop
 80020b0:	20000122 	.word	0x20000122

080020b4 <__sinit_lock_release>:
 80020b4:	4801      	ldr	r0, [pc, #4]	; (80020bc <__sinit_lock_release+0x8>)
 80020b6:	f000 b8a2 	b.w	80021fe <__retarget_lock_release_recursive>
 80020ba:	bf00      	nop
 80020bc:	20000122 	.word	0x20000122

080020c0 <__sinit>:
 80020c0:	b510      	push	{r4, lr}
 80020c2:	4604      	mov	r4, r0
 80020c4:	f7ff fff0 	bl	80020a8 <__sinit_lock_acquire>
 80020c8:	69a3      	ldr	r3, [r4, #24]
 80020ca:	b11b      	cbz	r3, 80020d4 <__sinit+0x14>
 80020cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020d0:	f7ff bff0 	b.w	80020b4 <__sinit_lock_release>
 80020d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80020d8:	6523      	str	r3, [r4, #80]	; 0x50
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <__sinit+0x68>)
 80020dc:	4a13      	ldr	r2, [pc, #76]	; (800212c <__sinit+0x6c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80020e2:	42a3      	cmp	r3, r4
 80020e4:	bf08      	it	eq
 80020e6:	2301      	moveq	r3, #1
 80020e8:	4620      	mov	r0, r4
 80020ea:	bf08      	it	eq
 80020ec:	61a3      	streq	r3, [r4, #24]
 80020ee:	f000 f81f 	bl	8002130 <__sfp>
 80020f2:	6060      	str	r0, [r4, #4]
 80020f4:	4620      	mov	r0, r4
 80020f6:	f000 f81b 	bl	8002130 <__sfp>
 80020fa:	60a0      	str	r0, [r4, #8]
 80020fc:	4620      	mov	r0, r4
 80020fe:	f000 f817 	bl	8002130 <__sfp>
 8002102:	2200      	movs	r2, #0
 8002104:	2104      	movs	r1, #4
 8002106:	60e0      	str	r0, [r4, #12]
 8002108:	6860      	ldr	r0, [r4, #4]
 800210a:	f7ff ff81 	bl	8002010 <std>
 800210e:	2201      	movs	r2, #1
 8002110:	2109      	movs	r1, #9
 8002112:	68a0      	ldr	r0, [r4, #8]
 8002114:	f7ff ff7c 	bl	8002010 <std>
 8002118:	2202      	movs	r2, #2
 800211a:	2112      	movs	r1, #18
 800211c:	68e0      	ldr	r0, [r4, #12]
 800211e:	f7ff ff77 	bl	8002010 <std>
 8002122:	2301      	movs	r3, #1
 8002124:	61a3      	str	r3, [r4, #24]
 8002126:	e7d1      	b.n	80020cc <__sinit+0xc>
 8002128:	08002f60 	.word	0x08002f60
 800212c:	08002059 	.word	0x08002059

08002130 <__sfp>:
 8002130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002132:	4607      	mov	r7, r0
 8002134:	f7ff ffac 	bl	8002090 <__sfp_lock_acquire>
 8002138:	4b1e      	ldr	r3, [pc, #120]	; (80021b4 <__sfp+0x84>)
 800213a:	681e      	ldr	r6, [r3, #0]
 800213c:	69b3      	ldr	r3, [r6, #24]
 800213e:	b913      	cbnz	r3, 8002146 <__sfp+0x16>
 8002140:	4630      	mov	r0, r6
 8002142:	f7ff ffbd 	bl	80020c0 <__sinit>
 8002146:	3648      	adds	r6, #72	; 0x48
 8002148:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800214c:	3b01      	subs	r3, #1
 800214e:	d503      	bpl.n	8002158 <__sfp+0x28>
 8002150:	6833      	ldr	r3, [r6, #0]
 8002152:	b30b      	cbz	r3, 8002198 <__sfp+0x68>
 8002154:	6836      	ldr	r6, [r6, #0]
 8002156:	e7f7      	b.n	8002148 <__sfp+0x18>
 8002158:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800215c:	b9d5      	cbnz	r5, 8002194 <__sfp+0x64>
 800215e:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <__sfp+0x88>)
 8002160:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002164:	60e3      	str	r3, [r4, #12]
 8002166:	6665      	str	r5, [r4, #100]	; 0x64
 8002168:	f000 f847 	bl	80021fa <__retarget_lock_init_recursive>
 800216c:	f7ff ff96 	bl	800209c <__sfp_lock_release>
 8002170:	2208      	movs	r2, #8
 8002172:	4629      	mov	r1, r5
 8002174:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002178:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800217c:	6025      	str	r5, [r4, #0]
 800217e:	61a5      	str	r5, [r4, #24]
 8002180:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002184:	f7ff ff24 	bl	8001fd0 <memset>
 8002188:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800218c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002190:	4620      	mov	r0, r4
 8002192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002194:	3468      	adds	r4, #104	; 0x68
 8002196:	e7d9      	b.n	800214c <__sfp+0x1c>
 8002198:	2104      	movs	r1, #4
 800219a:	4638      	mov	r0, r7
 800219c:	f7ff ff62 	bl	8002064 <__sfmoreglue>
 80021a0:	4604      	mov	r4, r0
 80021a2:	6030      	str	r0, [r6, #0]
 80021a4:	2800      	cmp	r0, #0
 80021a6:	d1d5      	bne.n	8002154 <__sfp+0x24>
 80021a8:	f7ff ff78 	bl	800209c <__sfp_lock_release>
 80021ac:	230c      	movs	r3, #12
 80021ae:	603b      	str	r3, [r7, #0]
 80021b0:	e7ee      	b.n	8002190 <__sfp+0x60>
 80021b2:	bf00      	nop
 80021b4:	08002f60 	.word	0x08002f60
 80021b8:	ffff0001 	.word	0xffff0001

080021bc <_fwalk_reent>:
 80021bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021c0:	4606      	mov	r6, r0
 80021c2:	4688      	mov	r8, r1
 80021c4:	2700      	movs	r7, #0
 80021c6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80021ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80021ce:	f1b9 0901 	subs.w	r9, r9, #1
 80021d2:	d505      	bpl.n	80021e0 <_fwalk_reent+0x24>
 80021d4:	6824      	ldr	r4, [r4, #0]
 80021d6:	2c00      	cmp	r4, #0
 80021d8:	d1f7      	bne.n	80021ca <_fwalk_reent+0xe>
 80021da:	4638      	mov	r0, r7
 80021dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021e0:	89ab      	ldrh	r3, [r5, #12]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d907      	bls.n	80021f6 <_fwalk_reent+0x3a>
 80021e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80021ea:	3301      	adds	r3, #1
 80021ec:	d003      	beq.n	80021f6 <_fwalk_reent+0x3a>
 80021ee:	4629      	mov	r1, r5
 80021f0:	4630      	mov	r0, r6
 80021f2:	47c0      	blx	r8
 80021f4:	4307      	orrs	r7, r0
 80021f6:	3568      	adds	r5, #104	; 0x68
 80021f8:	e7e9      	b.n	80021ce <_fwalk_reent+0x12>

080021fa <__retarget_lock_init_recursive>:
 80021fa:	4770      	bx	lr

080021fc <__retarget_lock_acquire_recursive>:
 80021fc:	4770      	bx	lr

080021fe <__retarget_lock_release_recursive>:
 80021fe:	4770      	bx	lr

08002200 <sbrk_aligned>:
 8002200:	b570      	push	{r4, r5, r6, lr}
 8002202:	4e0e      	ldr	r6, [pc, #56]	; (800223c <sbrk_aligned+0x3c>)
 8002204:	460c      	mov	r4, r1
 8002206:	6831      	ldr	r1, [r6, #0]
 8002208:	4605      	mov	r5, r0
 800220a:	b911      	cbnz	r1, 8002212 <sbrk_aligned+0x12>
 800220c:	f000 fb7a 	bl	8002904 <_sbrk_r>
 8002210:	6030      	str	r0, [r6, #0]
 8002212:	4621      	mov	r1, r4
 8002214:	4628      	mov	r0, r5
 8002216:	f000 fb75 	bl	8002904 <_sbrk_r>
 800221a:	1c43      	adds	r3, r0, #1
 800221c:	d00a      	beq.n	8002234 <sbrk_aligned+0x34>
 800221e:	1cc4      	adds	r4, r0, #3
 8002220:	f024 0403 	bic.w	r4, r4, #3
 8002224:	42a0      	cmp	r0, r4
 8002226:	d007      	beq.n	8002238 <sbrk_aligned+0x38>
 8002228:	1a21      	subs	r1, r4, r0
 800222a:	4628      	mov	r0, r5
 800222c:	f000 fb6a 	bl	8002904 <_sbrk_r>
 8002230:	3001      	adds	r0, #1
 8002232:	d101      	bne.n	8002238 <sbrk_aligned+0x38>
 8002234:	f04f 34ff 	mov.w	r4, #4294967295
 8002238:	4620      	mov	r0, r4
 800223a:	bd70      	pop	{r4, r5, r6, pc}
 800223c:	20000128 	.word	0x20000128

08002240 <_malloc_r>:
 8002240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002244:	1ccd      	adds	r5, r1, #3
 8002246:	f025 0503 	bic.w	r5, r5, #3
 800224a:	3508      	adds	r5, #8
 800224c:	2d0c      	cmp	r5, #12
 800224e:	bf38      	it	cc
 8002250:	250c      	movcc	r5, #12
 8002252:	2d00      	cmp	r5, #0
 8002254:	4607      	mov	r7, r0
 8002256:	db01      	blt.n	800225c <_malloc_r+0x1c>
 8002258:	42a9      	cmp	r1, r5
 800225a:	d905      	bls.n	8002268 <_malloc_r+0x28>
 800225c:	230c      	movs	r3, #12
 800225e:	2600      	movs	r6, #0
 8002260:	603b      	str	r3, [r7, #0]
 8002262:	4630      	mov	r0, r6
 8002264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002268:	4e2e      	ldr	r6, [pc, #184]	; (8002324 <_malloc_r+0xe4>)
 800226a:	f000 fdc5 	bl	8002df8 <__malloc_lock>
 800226e:	6833      	ldr	r3, [r6, #0]
 8002270:	461c      	mov	r4, r3
 8002272:	bb34      	cbnz	r4, 80022c2 <_malloc_r+0x82>
 8002274:	4629      	mov	r1, r5
 8002276:	4638      	mov	r0, r7
 8002278:	f7ff ffc2 	bl	8002200 <sbrk_aligned>
 800227c:	1c43      	adds	r3, r0, #1
 800227e:	4604      	mov	r4, r0
 8002280:	d14d      	bne.n	800231e <_malloc_r+0xde>
 8002282:	6834      	ldr	r4, [r6, #0]
 8002284:	4626      	mov	r6, r4
 8002286:	2e00      	cmp	r6, #0
 8002288:	d140      	bne.n	800230c <_malloc_r+0xcc>
 800228a:	6823      	ldr	r3, [r4, #0]
 800228c:	4631      	mov	r1, r6
 800228e:	4638      	mov	r0, r7
 8002290:	eb04 0803 	add.w	r8, r4, r3
 8002294:	f000 fb36 	bl	8002904 <_sbrk_r>
 8002298:	4580      	cmp	r8, r0
 800229a:	d13a      	bne.n	8002312 <_malloc_r+0xd2>
 800229c:	6821      	ldr	r1, [r4, #0]
 800229e:	3503      	adds	r5, #3
 80022a0:	1a6d      	subs	r5, r5, r1
 80022a2:	f025 0503 	bic.w	r5, r5, #3
 80022a6:	3508      	adds	r5, #8
 80022a8:	2d0c      	cmp	r5, #12
 80022aa:	bf38      	it	cc
 80022ac:	250c      	movcc	r5, #12
 80022ae:	4638      	mov	r0, r7
 80022b0:	4629      	mov	r1, r5
 80022b2:	f7ff ffa5 	bl	8002200 <sbrk_aligned>
 80022b6:	3001      	adds	r0, #1
 80022b8:	d02b      	beq.n	8002312 <_malloc_r+0xd2>
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	442b      	add	r3, r5
 80022be:	6023      	str	r3, [r4, #0]
 80022c0:	e00e      	b.n	80022e0 <_malloc_r+0xa0>
 80022c2:	6822      	ldr	r2, [r4, #0]
 80022c4:	1b52      	subs	r2, r2, r5
 80022c6:	d41e      	bmi.n	8002306 <_malloc_r+0xc6>
 80022c8:	2a0b      	cmp	r2, #11
 80022ca:	d916      	bls.n	80022fa <_malloc_r+0xba>
 80022cc:	1961      	adds	r1, r4, r5
 80022ce:	42a3      	cmp	r3, r4
 80022d0:	6025      	str	r5, [r4, #0]
 80022d2:	bf18      	it	ne
 80022d4:	6059      	strne	r1, [r3, #4]
 80022d6:	6863      	ldr	r3, [r4, #4]
 80022d8:	bf08      	it	eq
 80022da:	6031      	streq	r1, [r6, #0]
 80022dc:	5162      	str	r2, [r4, r5]
 80022de:	604b      	str	r3, [r1, #4]
 80022e0:	4638      	mov	r0, r7
 80022e2:	f104 060b 	add.w	r6, r4, #11
 80022e6:	f000 fd8d 	bl	8002e04 <__malloc_unlock>
 80022ea:	f026 0607 	bic.w	r6, r6, #7
 80022ee:	1d23      	adds	r3, r4, #4
 80022f0:	1af2      	subs	r2, r6, r3
 80022f2:	d0b6      	beq.n	8002262 <_malloc_r+0x22>
 80022f4:	1b9b      	subs	r3, r3, r6
 80022f6:	50a3      	str	r3, [r4, r2]
 80022f8:	e7b3      	b.n	8002262 <_malloc_r+0x22>
 80022fa:	6862      	ldr	r2, [r4, #4]
 80022fc:	42a3      	cmp	r3, r4
 80022fe:	bf0c      	ite	eq
 8002300:	6032      	streq	r2, [r6, #0]
 8002302:	605a      	strne	r2, [r3, #4]
 8002304:	e7ec      	b.n	80022e0 <_malloc_r+0xa0>
 8002306:	4623      	mov	r3, r4
 8002308:	6864      	ldr	r4, [r4, #4]
 800230a:	e7b2      	b.n	8002272 <_malloc_r+0x32>
 800230c:	4634      	mov	r4, r6
 800230e:	6876      	ldr	r6, [r6, #4]
 8002310:	e7b9      	b.n	8002286 <_malloc_r+0x46>
 8002312:	230c      	movs	r3, #12
 8002314:	4638      	mov	r0, r7
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	f000 fd74 	bl	8002e04 <__malloc_unlock>
 800231c:	e7a1      	b.n	8002262 <_malloc_r+0x22>
 800231e:	6025      	str	r5, [r4, #0]
 8002320:	e7de      	b.n	80022e0 <_malloc_r+0xa0>
 8002322:	bf00      	nop
 8002324:	20000124 	.word	0x20000124

08002328 <__sfputc_r>:
 8002328:	6893      	ldr	r3, [r2, #8]
 800232a:	b410      	push	{r4}
 800232c:	3b01      	subs	r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	6093      	str	r3, [r2, #8]
 8002332:	da07      	bge.n	8002344 <__sfputc_r+0x1c>
 8002334:	6994      	ldr	r4, [r2, #24]
 8002336:	42a3      	cmp	r3, r4
 8002338:	db01      	blt.n	800233e <__sfputc_r+0x16>
 800233a:	290a      	cmp	r1, #10
 800233c:	d102      	bne.n	8002344 <__sfputc_r+0x1c>
 800233e:	bc10      	pop	{r4}
 8002340:	f000 bb34 	b.w	80029ac <__swbuf_r>
 8002344:	6813      	ldr	r3, [r2, #0]
 8002346:	1c58      	adds	r0, r3, #1
 8002348:	6010      	str	r0, [r2, #0]
 800234a:	7019      	strb	r1, [r3, #0]
 800234c:	4608      	mov	r0, r1
 800234e:	bc10      	pop	{r4}
 8002350:	4770      	bx	lr

08002352 <__sfputs_r>:
 8002352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002354:	4606      	mov	r6, r0
 8002356:	460f      	mov	r7, r1
 8002358:	4614      	mov	r4, r2
 800235a:	18d5      	adds	r5, r2, r3
 800235c:	42ac      	cmp	r4, r5
 800235e:	d101      	bne.n	8002364 <__sfputs_r+0x12>
 8002360:	2000      	movs	r0, #0
 8002362:	e007      	b.n	8002374 <__sfputs_r+0x22>
 8002364:	463a      	mov	r2, r7
 8002366:	4630      	mov	r0, r6
 8002368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800236c:	f7ff ffdc 	bl	8002328 <__sfputc_r>
 8002370:	1c43      	adds	r3, r0, #1
 8002372:	d1f3      	bne.n	800235c <__sfputs_r+0xa>
 8002374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002378 <_vfiprintf_r>:
 8002378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800237c:	460d      	mov	r5, r1
 800237e:	4614      	mov	r4, r2
 8002380:	4698      	mov	r8, r3
 8002382:	4606      	mov	r6, r0
 8002384:	b09d      	sub	sp, #116	; 0x74
 8002386:	b118      	cbz	r0, 8002390 <_vfiprintf_r+0x18>
 8002388:	6983      	ldr	r3, [r0, #24]
 800238a:	b90b      	cbnz	r3, 8002390 <_vfiprintf_r+0x18>
 800238c:	f7ff fe98 	bl	80020c0 <__sinit>
 8002390:	4b89      	ldr	r3, [pc, #548]	; (80025b8 <_vfiprintf_r+0x240>)
 8002392:	429d      	cmp	r5, r3
 8002394:	d11b      	bne.n	80023ce <_vfiprintf_r+0x56>
 8002396:	6875      	ldr	r5, [r6, #4]
 8002398:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800239a:	07d9      	lsls	r1, r3, #31
 800239c:	d405      	bmi.n	80023aa <_vfiprintf_r+0x32>
 800239e:	89ab      	ldrh	r3, [r5, #12]
 80023a0:	059a      	lsls	r2, r3, #22
 80023a2:	d402      	bmi.n	80023aa <_vfiprintf_r+0x32>
 80023a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80023a6:	f7ff ff29 	bl	80021fc <__retarget_lock_acquire_recursive>
 80023aa:	89ab      	ldrh	r3, [r5, #12]
 80023ac:	071b      	lsls	r3, r3, #28
 80023ae:	d501      	bpl.n	80023b4 <_vfiprintf_r+0x3c>
 80023b0:	692b      	ldr	r3, [r5, #16]
 80023b2:	b9eb      	cbnz	r3, 80023f0 <_vfiprintf_r+0x78>
 80023b4:	4629      	mov	r1, r5
 80023b6:	4630      	mov	r0, r6
 80023b8:	f000 fb5c 	bl	8002a74 <__swsetup_r>
 80023bc:	b1c0      	cbz	r0, 80023f0 <_vfiprintf_r+0x78>
 80023be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80023c0:	07dc      	lsls	r4, r3, #31
 80023c2:	d50e      	bpl.n	80023e2 <_vfiprintf_r+0x6a>
 80023c4:	f04f 30ff 	mov.w	r0, #4294967295
 80023c8:	b01d      	add	sp, #116	; 0x74
 80023ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023ce:	4b7b      	ldr	r3, [pc, #492]	; (80025bc <_vfiprintf_r+0x244>)
 80023d0:	429d      	cmp	r5, r3
 80023d2:	d101      	bne.n	80023d8 <_vfiprintf_r+0x60>
 80023d4:	68b5      	ldr	r5, [r6, #8]
 80023d6:	e7df      	b.n	8002398 <_vfiprintf_r+0x20>
 80023d8:	4b79      	ldr	r3, [pc, #484]	; (80025c0 <_vfiprintf_r+0x248>)
 80023da:	429d      	cmp	r5, r3
 80023dc:	bf08      	it	eq
 80023de:	68f5      	ldreq	r5, [r6, #12]
 80023e0:	e7da      	b.n	8002398 <_vfiprintf_r+0x20>
 80023e2:	89ab      	ldrh	r3, [r5, #12]
 80023e4:	0598      	lsls	r0, r3, #22
 80023e6:	d4ed      	bmi.n	80023c4 <_vfiprintf_r+0x4c>
 80023e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80023ea:	f7ff ff08 	bl	80021fe <__retarget_lock_release_recursive>
 80023ee:	e7e9      	b.n	80023c4 <_vfiprintf_r+0x4c>
 80023f0:	2300      	movs	r3, #0
 80023f2:	9309      	str	r3, [sp, #36]	; 0x24
 80023f4:	2320      	movs	r3, #32
 80023f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80023fa:	2330      	movs	r3, #48	; 0x30
 80023fc:	f04f 0901 	mov.w	r9, #1
 8002400:	f8cd 800c 	str.w	r8, [sp, #12]
 8002404:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80025c4 <_vfiprintf_r+0x24c>
 8002408:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800240c:	4623      	mov	r3, r4
 800240e:	469a      	mov	sl, r3
 8002410:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002414:	b10a      	cbz	r2, 800241a <_vfiprintf_r+0xa2>
 8002416:	2a25      	cmp	r2, #37	; 0x25
 8002418:	d1f9      	bne.n	800240e <_vfiprintf_r+0x96>
 800241a:	ebba 0b04 	subs.w	fp, sl, r4
 800241e:	d00b      	beq.n	8002438 <_vfiprintf_r+0xc0>
 8002420:	465b      	mov	r3, fp
 8002422:	4622      	mov	r2, r4
 8002424:	4629      	mov	r1, r5
 8002426:	4630      	mov	r0, r6
 8002428:	f7ff ff93 	bl	8002352 <__sfputs_r>
 800242c:	3001      	adds	r0, #1
 800242e:	f000 80aa 	beq.w	8002586 <_vfiprintf_r+0x20e>
 8002432:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002434:	445a      	add	r2, fp
 8002436:	9209      	str	r2, [sp, #36]	; 0x24
 8002438:	f89a 3000 	ldrb.w	r3, [sl]
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 80a2 	beq.w	8002586 <_vfiprintf_r+0x20e>
 8002442:	2300      	movs	r3, #0
 8002444:	f04f 32ff 	mov.w	r2, #4294967295
 8002448:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800244c:	f10a 0a01 	add.w	sl, sl, #1
 8002450:	9304      	str	r3, [sp, #16]
 8002452:	9307      	str	r3, [sp, #28]
 8002454:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002458:	931a      	str	r3, [sp, #104]	; 0x68
 800245a:	4654      	mov	r4, sl
 800245c:	2205      	movs	r2, #5
 800245e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002462:	4858      	ldr	r0, [pc, #352]	; (80025c4 <_vfiprintf_r+0x24c>)
 8002464:	f000 fcba 	bl	8002ddc <memchr>
 8002468:	9a04      	ldr	r2, [sp, #16]
 800246a:	b9d8      	cbnz	r0, 80024a4 <_vfiprintf_r+0x12c>
 800246c:	06d1      	lsls	r1, r2, #27
 800246e:	bf44      	itt	mi
 8002470:	2320      	movmi	r3, #32
 8002472:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002476:	0713      	lsls	r3, r2, #28
 8002478:	bf44      	itt	mi
 800247a:	232b      	movmi	r3, #43	; 0x2b
 800247c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002480:	f89a 3000 	ldrb.w	r3, [sl]
 8002484:	2b2a      	cmp	r3, #42	; 0x2a
 8002486:	d015      	beq.n	80024b4 <_vfiprintf_r+0x13c>
 8002488:	4654      	mov	r4, sl
 800248a:	2000      	movs	r0, #0
 800248c:	f04f 0c0a 	mov.w	ip, #10
 8002490:	9a07      	ldr	r2, [sp, #28]
 8002492:	4621      	mov	r1, r4
 8002494:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002498:	3b30      	subs	r3, #48	; 0x30
 800249a:	2b09      	cmp	r3, #9
 800249c:	d94e      	bls.n	800253c <_vfiprintf_r+0x1c4>
 800249e:	b1b0      	cbz	r0, 80024ce <_vfiprintf_r+0x156>
 80024a0:	9207      	str	r2, [sp, #28]
 80024a2:	e014      	b.n	80024ce <_vfiprintf_r+0x156>
 80024a4:	eba0 0308 	sub.w	r3, r0, r8
 80024a8:	fa09 f303 	lsl.w	r3, r9, r3
 80024ac:	4313      	orrs	r3, r2
 80024ae:	46a2      	mov	sl, r4
 80024b0:	9304      	str	r3, [sp, #16]
 80024b2:	e7d2      	b.n	800245a <_vfiprintf_r+0xe2>
 80024b4:	9b03      	ldr	r3, [sp, #12]
 80024b6:	1d19      	adds	r1, r3, #4
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	9103      	str	r1, [sp, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	bfbb      	ittet	lt
 80024c0:	425b      	neglt	r3, r3
 80024c2:	f042 0202 	orrlt.w	r2, r2, #2
 80024c6:	9307      	strge	r3, [sp, #28]
 80024c8:	9307      	strlt	r3, [sp, #28]
 80024ca:	bfb8      	it	lt
 80024cc:	9204      	strlt	r2, [sp, #16]
 80024ce:	7823      	ldrb	r3, [r4, #0]
 80024d0:	2b2e      	cmp	r3, #46	; 0x2e
 80024d2:	d10c      	bne.n	80024ee <_vfiprintf_r+0x176>
 80024d4:	7863      	ldrb	r3, [r4, #1]
 80024d6:	2b2a      	cmp	r3, #42	; 0x2a
 80024d8:	d135      	bne.n	8002546 <_vfiprintf_r+0x1ce>
 80024da:	9b03      	ldr	r3, [sp, #12]
 80024dc:	3402      	adds	r4, #2
 80024de:	1d1a      	adds	r2, r3, #4
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	9203      	str	r2, [sp, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	bfb8      	it	lt
 80024e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80024ec:	9305      	str	r3, [sp, #20]
 80024ee:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80025c8 <_vfiprintf_r+0x250>
 80024f2:	2203      	movs	r2, #3
 80024f4:	4650      	mov	r0, sl
 80024f6:	7821      	ldrb	r1, [r4, #0]
 80024f8:	f000 fc70 	bl	8002ddc <memchr>
 80024fc:	b140      	cbz	r0, 8002510 <_vfiprintf_r+0x198>
 80024fe:	2340      	movs	r3, #64	; 0x40
 8002500:	eba0 000a 	sub.w	r0, r0, sl
 8002504:	fa03 f000 	lsl.w	r0, r3, r0
 8002508:	9b04      	ldr	r3, [sp, #16]
 800250a:	3401      	adds	r4, #1
 800250c:	4303      	orrs	r3, r0
 800250e:	9304      	str	r3, [sp, #16]
 8002510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002514:	2206      	movs	r2, #6
 8002516:	482d      	ldr	r0, [pc, #180]	; (80025cc <_vfiprintf_r+0x254>)
 8002518:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800251c:	f000 fc5e 	bl	8002ddc <memchr>
 8002520:	2800      	cmp	r0, #0
 8002522:	d03f      	beq.n	80025a4 <_vfiprintf_r+0x22c>
 8002524:	4b2a      	ldr	r3, [pc, #168]	; (80025d0 <_vfiprintf_r+0x258>)
 8002526:	bb1b      	cbnz	r3, 8002570 <_vfiprintf_r+0x1f8>
 8002528:	9b03      	ldr	r3, [sp, #12]
 800252a:	3307      	adds	r3, #7
 800252c:	f023 0307 	bic.w	r3, r3, #7
 8002530:	3308      	adds	r3, #8
 8002532:	9303      	str	r3, [sp, #12]
 8002534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002536:	443b      	add	r3, r7
 8002538:	9309      	str	r3, [sp, #36]	; 0x24
 800253a:	e767      	b.n	800240c <_vfiprintf_r+0x94>
 800253c:	460c      	mov	r4, r1
 800253e:	2001      	movs	r0, #1
 8002540:	fb0c 3202 	mla	r2, ip, r2, r3
 8002544:	e7a5      	b.n	8002492 <_vfiprintf_r+0x11a>
 8002546:	2300      	movs	r3, #0
 8002548:	f04f 0c0a 	mov.w	ip, #10
 800254c:	4619      	mov	r1, r3
 800254e:	3401      	adds	r4, #1
 8002550:	9305      	str	r3, [sp, #20]
 8002552:	4620      	mov	r0, r4
 8002554:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002558:	3a30      	subs	r2, #48	; 0x30
 800255a:	2a09      	cmp	r2, #9
 800255c:	d903      	bls.n	8002566 <_vfiprintf_r+0x1ee>
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0c5      	beq.n	80024ee <_vfiprintf_r+0x176>
 8002562:	9105      	str	r1, [sp, #20]
 8002564:	e7c3      	b.n	80024ee <_vfiprintf_r+0x176>
 8002566:	4604      	mov	r4, r0
 8002568:	2301      	movs	r3, #1
 800256a:	fb0c 2101 	mla	r1, ip, r1, r2
 800256e:	e7f0      	b.n	8002552 <_vfiprintf_r+0x1da>
 8002570:	ab03      	add	r3, sp, #12
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	462a      	mov	r2, r5
 8002576:	4630      	mov	r0, r6
 8002578:	4b16      	ldr	r3, [pc, #88]	; (80025d4 <_vfiprintf_r+0x25c>)
 800257a:	a904      	add	r1, sp, #16
 800257c:	f3af 8000 	nop.w
 8002580:	4607      	mov	r7, r0
 8002582:	1c78      	adds	r0, r7, #1
 8002584:	d1d6      	bne.n	8002534 <_vfiprintf_r+0x1bc>
 8002586:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002588:	07d9      	lsls	r1, r3, #31
 800258a:	d405      	bmi.n	8002598 <_vfiprintf_r+0x220>
 800258c:	89ab      	ldrh	r3, [r5, #12]
 800258e:	059a      	lsls	r2, r3, #22
 8002590:	d402      	bmi.n	8002598 <_vfiprintf_r+0x220>
 8002592:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002594:	f7ff fe33 	bl	80021fe <__retarget_lock_release_recursive>
 8002598:	89ab      	ldrh	r3, [r5, #12]
 800259a:	065b      	lsls	r3, r3, #25
 800259c:	f53f af12 	bmi.w	80023c4 <_vfiprintf_r+0x4c>
 80025a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025a2:	e711      	b.n	80023c8 <_vfiprintf_r+0x50>
 80025a4:	ab03      	add	r3, sp, #12
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	462a      	mov	r2, r5
 80025aa:	4630      	mov	r0, r6
 80025ac:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <_vfiprintf_r+0x25c>)
 80025ae:	a904      	add	r1, sp, #16
 80025b0:	f000 f882 	bl	80026b8 <_printf_i>
 80025b4:	e7e4      	b.n	8002580 <_vfiprintf_r+0x208>
 80025b6:	bf00      	nop
 80025b8:	08002f84 	.word	0x08002f84
 80025bc:	08002fa4 	.word	0x08002fa4
 80025c0:	08002f64 	.word	0x08002f64
 80025c4:	08002fc4 	.word	0x08002fc4
 80025c8:	08002fca 	.word	0x08002fca
 80025cc:	08002fce 	.word	0x08002fce
 80025d0:	00000000 	.word	0x00000000
 80025d4:	08002353 	.word	0x08002353

080025d8 <_printf_common>:
 80025d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025dc:	4616      	mov	r6, r2
 80025de:	4699      	mov	r9, r3
 80025e0:	688a      	ldr	r2, [r1, #8]
 80025e2:	690b      	ldr	r3, [r1, #16]
 80025e4:	4607      	mov	r7, r0
 80025e6:	4293      	cmp	r3, r2
 80025e8:	bfb8      	it	lt
 80025ea:	4613      	movlt	r3, r2
 80025ec:	6033      	str	r3, [r6, #0]
 80025ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80025f2:	460c      	mov	r4, r1
 80025f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80025f8:	b10a      	cbz	r2, 80025fe <_printf_common+0x26>
 80025fa:	3301      	adds	r3, #1
 80025fc:	6033      	str	r3, [r6, #0]
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	0699      	lsls	r1, r3, #26
 8002602:	bf42      	ittt	mi
 8002604:	6833      	ldrmi	r3, [r6, #0]
 8002606:	3302      	addmi	r3, #2
 8002608:	6033      	strmi	r3, [r6, #0]
 800260a:	6825      	ldr	r5, [r4, #0]
 800260c:	f015 0506 	ands.w	r5, r5, #6
 8002610:	d106      	bne.n	8002620 <_printf_common+0x48>
 8002612:	f104 0a19 	add.w	sl, r4, #25
 8002616:	68e3      	ldr	r3, [r4, #12]
 8002618:	6832      	ldr	r2, [r6, #0]
 800261a:	1a9b      	subs	r3, r3, r2
 800261c:	42ab      	cmp	r3, r5
 800261e:	dc28      	bgt.n	8002672 <_printf_common+0x9a>
 8002620:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002624:	1e13      	subs	r3, r2, #0
 8002626:	6822      	ldr	r2, [r4, #0]
 8002628:	bf18      	it	ne
 800262a:	2301      	movne	r3, #1
 800262c:	0692      	lsls	r2, r2, #26
 800262e:	d42d      	bmi.n	800268c <_printf_common+0xb4>
 8002630:	4649      	mov	r1, r9
 8002632:	4638      	mov	r0, r7
 8002634:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002638:	47c0      	blx	r8
 800263a:	3001      	adds	r0, #1
 800263c:	d020      	beq.n	8002680 <_printf_common+0xa8>
 800263e:	6823      	ldr	r3, [r4, #0]
 8002640:	68e5      	ldr	r5, [r4, #12]
 8002642:	f003 0306 	and.w	r3, r3, #6
 8002646:	2b04      	cmp	r3, #4
 8002648:	bf18      	it	ne
 800264a:	2500      	movne	r5, #0
 800264c:	6832      	ldr	r2, [r6, #0]
 800264e:	f04f 0600 	mov.w	r6, #0
 8002652:	68a3      	ldr	r3, [r4, #8]
 8002654:	bf08      	it	eq
 8002656:	1aad      	subeq	r5, r5, r2
 8002658:	6922      	ldr	r2, [r4, #16]
 800265a:	bf08      	it	eq
 800265c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002660:	4293      	cmp	r3, r2
 8002662:	bfc4      	itt	gt
 8002664:	1a9b      	subgt	r3, r3, r2
 8002666:	18ed      	addgt	r5, r5, r3
 8002668:	341a      	adds	r4, #26
 800266a:	42b5      	cmp	r5, r6
 800266c:	d11a      	bne.n	80026a4 <_printf_common+0xcc>
 800266e:	2000      	movs	r0, #0
 8002670:	e008      	b.n	8002684 <_printf_common+0xac>
 8002672:	2301      	movs	r3, #1
 8002674:	4652      	mov	r2, sl
 8002676:	4649      	mov	r1, r9
 8002678:	4638      	mov	r0, r7
 800267a:	47c0      	blx	r8
 800267c:	3001      	adds	r0, #1
 800267e:	d103      	bne.n	8002688 <_printf_common+0xb0>
 8002680:	f04f 30ff 	mov.w	r0, #4294967295
 8002684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002688:	3501      	adds	r5, #1
 800268a:	e7c4      	b.n	8002616 <_printf_common+0x3e>
 800268c:	2030      	movs	r0, #48	; 0x30
 800268e:	18e1      	adds	r1, r4, r3
 8002690:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800269a:	4422      	add	r2, r4
 800269c:	3302      	adds	r3, #2
 800269e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80026a2:	e7c5      	b.n	8002630 <_printf_common+0x58>
 80026a4:	2301      	movs	r3, #1
 80026a6:	4622      	mov	r2, r4
 80026a8:	4649      	mov	r1, r9
 80026aa:	4638      	mov	r0, r7
 80026ac:	47c0      	blx	r8
 80026ae:	3001      	adds	r0, #1
 80026b0:	d0e6      	beq.n	8002680 <_printf_common+0xa8>
 80026b2:	3601      	adds	r6, #1
 80026b4:	e7d9      	b.n	800266a <_printf_common+0x92>
	...

080026b8 <_printf_i>:
 80026b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026bc:	7e0f      	ldrb	r7, [r1, #24]
 80026be:	4691      	mov	r9, r2
 80026c0:	2f78      	cmp	r7, #120	; 0x78
 80026c2:	4680      	mov	r8, r0
 80026c4:	460c      	mov	r4, r1
 80026c6:	469a      	mov	sl, r3
 80026c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80026ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80026ce:	d807      	bhi.n	80026e0 <_printf_i+0x28>
 80026d0:	2f62      	cmp	r7, #98	; 0x62
 80026d2:	d80a      	bhi.n	80026ea <_printf_i+0x32>
 80026d4:	2f00      	cmp	r7, #0
 80026d6:	f000 80d9 	beq.w	800288c <_printf_i+0x1d4>
 80026da:	2f58      	cmp	r7, #88	; 0x58
 80026dc:	f000 80a4 	beq.w	8002828 <_printf_i+0x170>
 80026e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80026e8:	e03a      	b.n	8002760 <_printf_i+0xa8>
 80026ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80026ee:	2b15      	cmp	r3, #21
 80026f0:	d8f6      	bhi.n	80026e0 <_printf_i+0x28>
 80026f2:	a101      	add	r1, pc, #4	; (adr r1, 80026f8 <_printf_i+0x40>)
 80026f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80026f8:	08002751 	.word	0x08002751
 80026fc:	08002765 	.word	0x08002765
 8002700:	080026e1 	.word	0x080026e1
 8002704:	080026e1 	.word	0x080026e1
 8002708:	080026e1 	.word	0x080026e1
 800270c:	080026e1 	.word	0x080026e1
 8002710:	08002765 	.word	0x08002765
 8002714:	080026e1 	.word	0x080026e1
 8002718:	080026e1 	.word	0x080026e1
 800271c:	080026e1 	.word	0x080026e1
 8002720:	080026e1 	.word	0x080026e1
 8002724:	08002873 	.word	0x08002873
 8002728:	08002795 	.word	0x08002795
 800272c:	08002855 	.word	0x08002855
 8002730:	080026e1 	.word	0x080026e1
 8002734:	080026e1 	.word	0x080026e1
 8002738:	08002895 	.word	0x08002895
 800273c:	080026e1 	.word	0x080026e1
 8002740:	08002795 	.word	0x08002795
 8002744:	080026e1 	.word	0x080026e1
 8002748:	080026e1 	.word	0x080026e1
 800274c:	0800285d 	.word	0x0800285d
 8002750:	682b      	ldr	r3, [r5, #0]
 8002752:	1d1a      	adds	r2, r3, #4
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	602a      	str	r2, [r5, #0]
 8002758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800275c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002760:	2301      	movs	r3, #1
 8002762:	e0a4      	b.n	80028ae <_printf_i+0x1f6>
 8002764:	6820      	ldr	r0, [r4, #0]
 8002766:	6829      	ldr	r1, [r5, #0]
 8002768:	0606      	lsls	r6, r0, #24
 800276a:	f101 0304 	add.w	r3, r1, #4
 800276e:	d50a      	bpl.n	8002786 <_printf_i+0xce>
 8002770:	680e      	ldr	r6, [r1, #0]
 8002772:	602b      	str	r3, [r5, #0]
 8002774:	2e00      	cmp	r6, #0
 8002776:	da03      	bge.n	8002780 <_printf_i+0xc8>
 8002778:	232d      	movs	r3, #45	; 0x2d
 800277a:	4276      	negs	r6, r6
 800277c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002780:	230a      	movs	r3, #10
 8002782:	485e      	ldr	r0, [pc, #376]	; (80028fc <_printf_i+0x244>)
 8002784:	e019      	b.n	80027ba <_printf_i+0x102>
 8002786:	680e      	ldr	r6, [r1, #0]
 8002788:	f010 0f40 	tst.w	r0, #64	; 0x40
 800278c:	602b      	str	r3, [r5, #0]
 800278e:	bf18      	it	ne
 8002790:	b236      	sxthne	r6, r6
 8002792:	e7ef      	b.n	8002774 <_printf_i+0xbc>
 8002794:	682b      	ldr	r3, [r5, #0]
 8002796:	6820      	ldr	r0, [r4, #0]
 8002798:	1d19      	adds	r1, r3, #4
 800279a:	6029      	str	r1, [r5, #0]
 800279c:	0601      	lsls	r1, r0, #24
 800279e:	d501      	bpl.n	80027a4 <_printf_i+0xec>
 80027a0:	681e      	ldr	r6, [r3, #0]
 80027a2:	e002      	b.n	80027aa <_printf_i+0xf2>
 80027a4:	0646      	lsls	r6, r0, #25
 80027a6:	d5fb      	bpl.n	80027a0 <_printf_i+0xe8>
 80027a8:	881e      	ldrh	r6, [r3, #0]
 80027aa:	2f6f      	cmp	r7, #111	; 0x6f
 80027ac:	bf0c      	ite	eq
 80027ae:	2308      	moveq	r3, #8
 80027b0:	230a      	movne	r3, #10
 80027b2:	4852      	ldr	r0, [pc, #328]	; (80028fc <_printf_i+0x244>)
 80027b4:	2100      	movs	r1, #0
 80027b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80027ba:	6865      	ldr	r5, [r4, #4]
 80027bc:	2d00      	cmp	r5, #0
 80027be:	bfa8      	it	ge
 80027c0:	6821      	ldrge	r1, [r4, #0]
 80027c2:	60a5      	str	r5, [r4, #8]
 80027c4:	bfa4      	itt	ge
 80027c6:	f021 0104 	bicge.w	r1, r1, #4
 80027ca:	6021      	strge	r1, [r4, #0]
 80027cc:	b90e      	cbnz	r6, 80027d2 <_printf_i+0x11a>
 80027ce:	2d00      	cmp	r5, #0
 80027d0:	d04d      	beq.n	800286e <_printf_i+0x1b6>
 80027d2:	4615      	mov	r5, r2
 80027d4:	fbb6 f1f3 	udiv	r1, r6, r3
 80027d8:	fb03 6711 	mls	r7, r3, r1, r6
 80027dc:	5dc7      	ldrb	r7, [r0, r7]
 80027de:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80027e2:	4637      	mov	r7, r6
 80027e4:	42bb      	cmp	r3, r7
 80027e6:	460e      	mov	r6, r1
 80027e8:	d9f4      	bls.n	80027d4 <_printf_i+0x11c>
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d10b      	bne.n	8002806 <_printf_i+0x14e>
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	07de      	lsls	r6, r3, #31
 80027f2:	d508      	bpl.n	8002806 <_printf_i+0x14e>
 80027f4:	6923      	ldr	r3, [r4, #16]
 80027f6:	6861      	ldr	r1, [r4, #4]
 80027f8:	4299      	cmp	r1, r3
 80027fa:	bfde      	ittt	le
 80027fc:	2330      	movle	r3, #48	; 0x30
 80027fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002802:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002806:	1b52      	subs	r2, r2, r5
 8002808:	6122      	str	r2, [r4, #16]
 800280a:	464b      	mov	r3, r9
 800280c:	4621      	mov	r1, r4
 800280e:	4640      	mov	r0, r8
 8002810:	f8cd a000 	str.w	sl, [sp]
 8002814:	aa03      	add	r2, sp, #12
 8002816:	f7ff fedf 	bl	80025d8 <_printf_common>
 800281a:	3001      	adds	r0, #1
 800281c:	d14c      	bne.n	80028b8 <_printf_i+0x200>
 800281e:	f04f 30ff 	mov.w	r0, #4294967295
 8002822:	b004      	add	sp, #16
 8002824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002828:	4834      	ldr	r0, [pc, #208]	; (80028fc <_printf_i+0x244>)
 800282a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800282e:	6829      	ldr	r1, [r5, #0]
 8002830:	6823      	ldr	r3, [r4, #0]
 8002832:	f851 6b04 	ldr.w	r6, [r1], #4
 8002836:	6029      	str	r1, [r5, #0]
 8002838:	061d      	lsls	r5, r3, #24
 800283a:	d514      	bpl.n	8002866 <_printf_i+0x1ae>
 800283c:	07df      	lsls	r7, r3, #31
 800283e:	bf44      	itt	mi
 8002840:	f043 0320 	orrmi.w	r3, r3, #32
 8002844:	6023      	strmi	r3, [r4, #0]
 8002846:	b91e      	cbnz	r6, 8002850 <_printf_i+0x198>
 8002848:	6823      	ldr	r3, [r4, #0]
 800284a:	f023 0320 	bic.w	r3, r3, #32
 800284e:	6023      	str	r3, [r4, #0]
 8002850:	2310      	movs	r3, #16
 8002852:	e7af      	b.n	80027b4 <_printf_i+0xfc>
 8002854:	6823      	ldr	r3, [r4, #0]
 8002856:	f043 0320 	orr.w	r3, r3, #32
 800285a:	6023      	str	r3, [r4, #0]
 800285c:	2378      	movs	r3, #120	; 0x78
 800285e:	4828      	ldr	r0, [pc, #160]	; (8002900 <_printf_i+0x248>)
 8002860:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002864:	e7e3      	b.n	800282e <_printf_i+0x176>
 8002866:	0659      	lsls	r1, r3, #25
 8002868:	bf48      	it	mi
 800286a:	b2b6      	uxthmi	r6, r6
 800286c:	e7e6      	b.n	800283c <_printf_i+0x184>
 800286e:	4615      	mov	r5, r2
 8002870:	e7bb      	b.n	80027ea <_printf_i+0x132>
 8002872:	682b      	ldr	r3, [r5, #0]
 8002874:	6826      	ldr	r6, [r4, #0]
 8002876:	1d18      	adds	r0, r3, #4
 8002878:	6961      	ldr	r1, [r4, #20]
 800287a:	6028      	str	r0, [r5, #0]
 800287c:	0635      	lsls	r5, r6, #24
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	d501      	bpl.n	8002886 <_printf_i+0x1ce>
 8002882:	6019      	str	r1, [r3, #0]
 8002884:	e002      	b.n	800288c <_printf_i+0x1d4>
 8002886:	0670      	lsls	r0, r6, #25
 8002888:	d5fb      	bpl.n	8002882 <_printf_i+0x1ca>
 800288a:	8019      	strh	r1, [r3, #0]
 800288c:	2300      	movs	r3, #0
 800288e:	4615      	mov	r5, r2
 8002890:	6123      	str	r3, [r4, #16]
 8002892:	e7ba      	b.n	800280a <_printf_i+0x152>
 8002894:	682b      	ldr	r3, [r5, #0]
 8002896:	2100      	movs	r1, #0
 8002898:	1d1a      	adds	r2, r3, #4
 800289a:	602a      	str	r2, [r5, #0]
 800289c:	681d      	ldr	r5, [r3, #0]
 800289e:	6862      	ldr	r2, [r4, #4]
 80028a0:	4628      	mov	r0, r5
 80028a2:	f000 fa9b 	bl	8002ddc <memchr>
 80028a6:	b108      	cbz	r0, 80028ac <_printf_i+0x1f4>
 80028a8:	1b40      	subs	r0, r0, r5
 80028aa:	6060      	str	r0, [r4, #4]
 80028ac:	6863      	ldr	r3, [r4, #4]
 80028ae:	6123      	str	r3, [r4, #16]
 80028b0:	2300      	movs	r3, #0
 80028b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028b6:	e7a8      	b.n	800280a <_printf_i+0x152>
 80028b8:	462a      	mov	r2, r5
 80028ba:	4649      	mov	r1, r9
 80028bc:	4640      	mov	r0, r8
 80028be:	6923      	ldr	r3, [r4, #16]
 80028c0:	47d0      	blx	sl
 80028c2:	3001      	adds	r0, #1
 80028c4:	d0ab      	beq.n	800281e <_printf_i+0x166>
 80028c6:	6823      	ldr	r3, [r4, #0]
 80028c8:	079b      	lsls	r3, r3, #30
 80028ca:	d413      	bmi.n	80028f4 <_printf_i+0x23c>
 80028cc:	68e0      	ldr	r0, [r4, #12]
 80028ce:	9b03      	ldr	r3, [sp, #12]
 80028d0:	4298      	cmp	r0, r3
 80028d2:	bfb8      	it	lt
 80028d4:	4618      	movlt	r0, r3
 80028d6:	e7a4      	b.n	8002822 <_printf_i+0x16a>
 80028d8:	2301      	movs	r3, #1
 80028da:	4632      	mov	r2, r6
 80028dc:	4649      	mov	r1, r9
 80028de:	4640      	mov	r0, r8
 80028e0:	47d0      	blx	sl
 80028e2:	3001      	adds	r0, #1
 80028e4:	d09b      	beq.n	800281e <_printf_i+0x166>
 80028e6:	3501      	adds	r5, #1
 80028e8:	68e3      	ldr	r3, [r4, #12]
 80028ea:	9903      	ldr	r1, [sp, #12]
 80028ec:	1a5b      	subs	r3, r3, r1
 80028ee:	42ab      	cmp	r3, r5
 80028f0:	dcf2      	bgt.n	80028d8 <_printf_i+0x220>
 80028f2:	e7eb      	b.n	80028cc <_printf_i+0x214>
 80028f4:	2500      	movs	r5, #0
 80028f6:	f104 0619 	add.w	r6, r4, #25
 80028fa:	e7f5      	b.n	80028e8 <_printf_i+0x230>
 80028fc:	08002fd5 	.word	0x08002fd5
 8002900:	08002fe6 	.word	0x08002fe6

08002904 <_sbrk_r>:
 8002904:	b538      	push	{r3, r4, r5, lr}
 8002906:	2300      	movs	r3, #0
 8002908:	4d05      	ldr	r5, [pc, #20]	; (8002920 <_sbrk_r+0x1c>)
 800290a:	4604      	mov	r4, r0
 800290c:	4608      	mov	r0, r1
 800290e:	602b      	str	r3, [r5, #0]
 8002910:	f7fd ff1e 	bl	8000750 <_sbrk>
 8002914:	1c43      	adds	r3, r0, #1
 8002916:	d102      	bne.n	800291e <_sbrk_r+0x1a>
 8002918:	682b      	ldr	r3, [r5, #0]
 800291a:	b103      	cbz	r3, 800291e <_sbrk_r+0x1a>
 800291c:	6023      	str	r3, [r4, #0]
 800291e:	bd38      	pop	{r3, r4, r5, pc}
 8002920:	2000012c 	.word	0x2000012c

08002924 <__sread>:
 8002924:	b510      	push	{r4, lr}
 8002926:	460c      	mov	r4, r1
 8002928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800292c:	f000 fab8 	bl	8002ea0 <_read_r>
 8002930:	2800      	cmp	r0, #0
 8002932:	bfab      	itete	ge
 8002934:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002936:	89a3      	ldrhlt	r3, [r4, #12]
 8002938:	181b      	addge	r3, r3, r0
 800293a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800293e:	bfac      	ite	ge
 8002940:	6563      	strge	r3, [r4, #84]	; 0x54
 8002942:	81a3      	strhlt	r3, [r4, #12]
 8002944:	bd10      	pop	{r4, pc}

08002946 <__swrite>:
 8002946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800294a:	461f      	mov	r7, r3
 800294c:	898b      	ldrh	r3, [r1, #12]
 800294e:	4605      	mov	r5, r0
 8002950:	05db      	lsls	r3, r3, #23
 8002952:	460c      	mov	r4, r1
 8002954:	4616      	mov	r6, r2
 8002956:	d505      	bpl.n	8002964 <__swrite+0x1e>
 8002958:	2302      	movs	r3, #2
 800295a:	2200      	movs	r2, #0
 800295c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002960:	f000 f9c4 	bl	8002cec <_lseek_r>
 8002964:	89a3      	ldrh	r3, [r4, #12]
 8002966:	4632      	mov	r2, r6
 8002968:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800296c:	81a3      	strh	r3, [r4, #12]
 800296e:	4628      	mov	r0, r5
 8002970:	463b      	mov	r3, r7
 8002972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800297a:	f000 b869 	b.w	8002a50 <_write_r>

0800297e <__sseek>:
 800297e:	b510      	push	{r4, lr}
 8002980:	460c      	mov	r4, r1
 8002982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002986:	f000 f9b1 	bl	8002cec <_lseek_r>
 800298a:	1c43      	adds	r3, r0, #1
 800298c:	89a3      	ldrh	r3, [r4, #12]
 800298e:	bf15      	itete	ne
 8002990:	6560      	strne	r0, [r4, #84]	; 0x54
 8002992:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002996:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800299a:	81a3      	strheq	r3, [r4, #12]
 800299c:	bf18      	it	ne
 800299e:	81a3      	strhne	r3, [r4, #12]
 80029a0:	bd10      	pop	{r4, pc}

080029a2 <__sclose>:
 80029a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029a6:	f000 b8d3 	b.w	8002b50 <_close_r>
	...

080029ac <__swbuf_r>:
 80029ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ae:	460e      	mov	r6, r1
 80029b0:	4614      	mov	r4, r2
 80029b2:	4605      	mov	r5, r0
 80029b4:	b118      	cbz	r0, 80029be <__swbuf_r+0x12>
 80029b6:	6983      	ldr	r3, [r0, #24]
 80029b8:	b90b      	cbnz	r3, 80029be <__swbuf_r+0x12>
 80029ba:	f7ff fb81 	bl	80020c0 <__sinit>
 80029be:	4b21      	ldr	r3, [pc, #132]	; (8002a44 <__swbuf_r+0x98>)
 80029c0:	429c      	cmp	r4, r3
 80029c2:	d12b      	bne.n	8002a1c <__swbuf_r+0x70>
 80029c4:	686c      	ldr	r4, [r5, #4]
 80029c6:	69a3      	ldr	r3, [r4, #24]
 80029c8:	60a3      	str	r3, [r4, #8]
 80029ca:	89a3      	ldrh	r3, [r4, #12]
 80029cc:	071a      	lsls	r2, r3, #28
 80029ce:	d52f      	bpl.n	8002a30 <__swbuf_r+0x84>
 80029d0:	6923      	ldr	r3, [r4, #16]
 80029d2:	b36b      	cbz	r3, 8002a30 <__swbuf_r+0x84>
 80029d4:	6923      	ldr	r3, [r4, #16]
 80029d6:	6820      	ldr	r0, [r4, #0]
 80029d8:	b2f6      	uxtb	r6, r6
 80029da:	1ac0      	subs	r0, r0, r3
 80029dc:	6963      	ldr	r3, [r4, #20]
 80029de:	4637      	mov	r7, r6
 80029e0:	4283      	cmp	r3, r0
 80029e2:	dc04      	bgt.n	80029ee <__swbuf_r+0x42>
 80029e4:	4621      	mov	r1, r4
 80029e6:	4628      	mov	r0, r5
 80029e8:	f000 f944 	bl	8002c74 <_fflush_r>
 80029ec:	bb30      	cbnz	r0, 8002a3c <__swbuf_r+0x90>
 80029ee:	68a3      	ldr	r3, [r4, #8]
 80029f0:	3001      	adds	r0, #1
 80029f2:	3b01      	subs	r3, #1
 80029f4:	60a3      	str	r3, [r4, #8]
 80029f6:	6823      	ldr	r3, [r4, #0]
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	6022      	str	r2, [r4, #0]
 80029fc:	701e      	strb	r6, [r3, #0]
 80029fe:	6963      	ldr	r3, [r4, #20]
 8002a00:	4283      	cmp	r3, r0
 8002a02:	d004      	beq.n	8002a0e <__swbuf_r+0x62>
 8002a04:	89a3      	ldrh	r3, [r4, #12]
 8002a06:	07db      	lsls	r3, r3, #31
 8002a08:	d506      	bpl.n	8002a18 <__swbuf_r+0x6c>
 8002a0a:	2e0a      	cmp	r6, #10
 8002a0c:	d104      	bne.n	8002a18 <__swbuf_r+0x6c>
 8002a0e:	4621      	mov	r1, r4
 8002a10:	4628      	mov	r0, r5
 8002a12:	f000 f92f 	bl	8002c74 <_fflush_r>
 8002a16:	b988      	cbnz	r0, 8002a3c <__swbuf_r+0x90>
 8002a18:	4638      	mov	r0, r7
 8002a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <__swbuf_r+0x9c>)
 8002a1e:	429c      	cmp	r4, r3
 8002a20:	d101      	bne.n	8002a26 <__swbuf_r+0x7a>
 8002a22:	68ac      	ldr	r4, [r5, #8]
 8002a24:	e7cf      	b.n	80029c6 <__swbuf_r+0x1a>
 8002a26:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <__swbuf_r+0xa0>)
 8002a28:	429c      	cmp	r4, r3
 8002a2a:	bf08      	it	eq
 8002a2c:	68ec      	ldreq	r4, [r5, #12]
 8002a2e:	e7ca      	b.n	80029c6 <__swbuf_r+0x1a>
 8002a30:	4621      	mov	r1, r4
 8002a32:	4628      	mov	r0, r5
 8002a34:	f000 f81e 	bl	8002a74 <__swsetup_r>
 8002a38:	2800      	cmp	r0, #0
 8002a3a:	d0cb      	beq.n	80029d4 <__swbuf_r+0x28>
 8002a3c:	f04f 37ff 	mov.w	r7, #4294967295
 8002a40:	e7ea      	b.n	8002a18 <__swbuf_r+0x6c>
 8002a42:	bf00      	nop
 8002a44:	08002f84 	.word	0x08002f84
 8002a48:	08002fa4 	.word	0x08002fa4
 8002a4c:	08002f64 	.word	0x08002f64

08002a50 <_write_r>:
 8002a50:	b538      	push	{r3, r4, r5, lr}
 8002a52:	4604      	mov	r4, r0
 8002a54:	4608      	mov	r0, r1
 8002a56:	4611      	mov	r1, r2
 8002a58:	2200      	movs	r2, #0
 8002a5a:	4d05      	ldr	r5, [pc, #20]	; (8002a70 <_write_r+0x20>)
 8002a5c:	602a      	str	r2, [r5, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f7fd fe2a 	bl	80006b8 <_write>
 8002a64:	1c43      	adds	r3, r0, #1
 8002a66:	d102      	bne.n	8002a6e <_write_r+0x1e>
 8002a68:	682b      	ldr	r3, [r5, #0]
 8002a6a:	b103      	cbz	r3, 8002a6e <_write_r+0x1e>
 8002a6c:	6023      	str	r3, [r4, #0]
 8002a6e:	bd38      	pop	{r3, r4, r5, pc}
 8002a70:	2000012c 	.word	0x2000012c

08002a74 <__swsetup_r>:
 8002a74:	4b32      	ldr	r3, [pc, #200]	; (8002b40 <__swsetup_r+0xcc>)
 8002a76:	b570      	push	{r4, r5, r6, lr}
 8002a78:	681d      	ldr	r5, [r3, #0]
 8002a7a:	4606      	mov	r6, r0
 8002a7c:	460c      	mov	r4, r1
 8002a7e:	b125      	cbz	r5, 8002a8a <__swsetup_r+0x16>
 8002a80:	69ab      	ldr	r3, [r5, #24]
 8002a82:	b913      	cbnz	r3, 8002a8a <__swsetup_r+0x16>
 8002a84:	4628      	mov	r0, r5
 8002a86:	f7ff fb1b 	bl	80020c0 <__sinit>
 8002a8a:	4b2e      	ldr	r3, [pc, #184]	; (8002b44 <__swsetup_r+0xd0>)
 8002a8c:	429c      	cmp	r4, r3
 8002a8e:	d10f      	bne.n	8002ab0 <__swsetup_r+0x3c>
 8002a90:	686c      	ldr	r4, [r5, #4]
 8002a92:	89a3      	ldrh	r3, [r4, #12]
 8002a94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002a98:	0719      	lsls	r1, r3, #28
 8002a9a:	d42c      	bmi.n	8002af6 <__swsetup_r+0x82>
 8002a9c:	06dd      	lsls	r5, r3, #27
 8002a9e:	d411      	bmi.n	8002ac4 <__swsetup_r+0x50>
 8002aa0:	2309      	movs	r3, #9
 8002aa2:	6033      	str	r3, [r6, #0]
 8002aa4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aac:	81a3      	strh	r3, [r4, #12]
 8002aae:	e03e      	b.n	8002b2e <__swsetup_r+0xba>
 8002ab0:	4b25      	ldr	r3, [pc, #148]	; (8002b48 <__swsetup_r+0xd4>)
 8002ab2:	429c      	cmp	r4, r3
 8002ab4:	d101      	bne.n	8002aba <__swsetup_r+0x46>
 8002ab6:	68ac      	ldr	r4, [r5, #8]
 8002ab8:	e7eb      	b.n	8002a92 <__swsetup_r+0x1e>
 8002aba:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <__swsetup_r+0xd8>)
 8002abc:	429c      	cmp	r4, r3
 8002abe:	bf08      	it	eq
 8002ac0:	68ec      	ldreq	r4, [r5, #12]
 8002ac2:	e7e6      	b.n	8002a92 <__swsetup_r+0x1e>
 8002ac4:	0758      	lsls	r0, r3, #29
 8002ac6:	d512      	bpl.n	8002aee <__swsetup_r+0x7a>
 8002ac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002aca:	b141      	cbz	r1, 8002ade <__swsetup_r+0x6a>
 8002acc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ad0:	4299      	cmp	r1, r3
 8002ad2:	d002      	beq.n	8002ada <__swsetup_r+0x66>
 8002ad4:	4630      	mov	r0, r6
 8002ad6:	f000 f99b 	bl	8002e10 <_free_r>
 8002ada:	2300      	movs	r3, #0
 8002adc:	6363      	str	r3, [r4, #52]	; 0x34
 8002ade:	89a3      	ldrh	r3, [r4, #12]
 8002ae0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ae4:	81a3      	strh	r3, [r4, #12]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	6063      	str	r3, [r4, #4]
 8002aea:	6923      	ldr	r3, [r4, #16]
 8002aec:	6023      	str	r3, [r4, #0]
 8002aee:	89a3      	ldrh	r3, [r4, #12]
 8002af0:	f043 0308 	orr.w	r3, r3, #8
 8002af4:	81a3      	strh	r3, [r4, #12]
 8002af6:	6923      	ldr	r3, [r4, #16]
 8002af8:	b94b      	cbnz	r3, 8002b0e <__swsetup_r+0x9a>
 8002afa:	89a3      	ldrh	r3, [r4, #12]
 8002afc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b04:	d003      	beq.n	8002b0e <__swsetup_r+0x9a>
 8002b06:	4621      	mov	r1, r4
 8002b08:	4630      	mov	r0, r6
 8002b0a:	f000 f927 	bl	8002d5c <__smakebuf_r>
 8002b0e:	89a0      	ldrh	r0, [r4, #12]
 8002b10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b14:	f010 0301 	ands.w	r3, r0, #1
 8002b18:	d00a      	beq.n	8002b30 <__swsetup_r+0xbc>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60a3      	str	r3, [r4, #8]
 8002b1e:	6963      	ldr	r3, [r4, #20]
 8002b20:	425b      	negs	r3, r3
 8002b22:	61a3      	str	r3, [r4, #24]
 8002b24:	6923      	ldr	r3, [r4, #16]
 8002b26:	b943      	cbnz	r3, 8002b3a <__swsetup_r+0xc6>
 8002b28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002b2c:	d1ba      	bne.n	8002aa4 <__swsetup_r+0x30>
 8002b2e:	bd70      	pop	{r4, r5, r6, pc}
 8002b30:	0781      	lsls	r1, r0, #30
 8002b32:	bf58      	it	pl
 8002b34:	6963      	ldrpl	r3, [r4, #20]
 8002b36:	60a3      	str	r3, [r4, #8]
 8002b38:	e7f4      	b.n	8002b24 <__swsetup_r+0xb0>
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	e7f7      	b.n	8002b2e <__swsetup_r+0xba>
 8002b3e:	bf00      	nop
 8002b40:	2000000c 	.word	0x2000000c
 8002b44:	08002f84 	.word	0x08002f84
 8002b48:	08002fa4 	.word	0x08002fa4
 8002b4c:	08002f64 	.word	0x08002f64

08002b50 <_close_r>:
 8002b50:	b538      	push	{r3, r4, r5, lr}
 8002b52:	2300      	movs	r3, #0
 8002b54:	4d05      	ldr	r5, [pc, #20]	; (8002b6c <_close_r+0x1c>)
 8002b56:	4604      	mov	r4, r0
 8002b58:	4608      	mov	r0, r1
 8002b5a:	602b      	str	r3, [r5, #0]
 8002b5c:	f7fd fdc8 	bl	80006f0 <_close>
 8002b60:	1c43      	adds	r3, r0, #1
 8002b62:	d102      	bne.n	8002b6a <_close_r+0x1a>
 8002b64:	682b      	ldr	r3, [r5, #0]
 8002b66:	b103      	cbz	r3, 8002b6a <_close_r+0x1a>
 8002b68:	6023      	str	r3, [r4, #0]
 8002b6a:	bd38      	pop	{r3, r4, r5, pc}
 8002b6c:	2000012c 	.word	0x2000012c

08002b70 <__sflush_r>:
 8002b70:	898a      	ldrh	r2, [r1, #12]
 8002b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b74:	4605      	mov	r5, r0
 8002b76:	0710      	lsls	r0, r2, #28
 8002b78:	460c      	mov	r4, r1
 8002b7a:	d457      	bmi.n	8002c2c <__sflush_r+0xbc>
 8002b7c:	684b      	ldr	r3, [r1, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	dc04      	bgt.n	8002b8c <__sflush_r+0x1c>
 8002b82:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	dc01      	bgt.n	8002b8c <__sflush_r+0x1c>
 8002b88:	2000      	movs	r0, #0
 8002b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b8e:	2e00      	cmp	r6, #0
 8002b90:	d0fa      	beq.n	8002b88 <__sflush_r+0x18>
 8002b92:	2300      	movs	r3, #0
 8002b94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002b98:	682f      	ldr	r7, [r5, #0]
 8002b9a:	602b      	str	r3, [r5, #0]
 8002b9c:	d032      	beq.n	8002c04 <__sflush_r+0x94>
 8002b9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ba0:	89a3      	ldrh	r3, [r4, #12]
 8002ba2:	075a      	lsls	r2, r3, #29
 8002ba4:	d505      	bpl.n	8002bb2 <__sflush_r+0x42>
 8002ba6:	6863      	ldr	r3, [r4, #4]
 8002ba8:	1ac0      	subs	r0, r0, r3
 8002baa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002bac:	b10b      	cbz	r3, 8002bb2 <__sflush_r+0x42>
 8002bae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002bb0:	1ac0      	subs	r0, r0, r3
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002bb8:	4628      	mov	r0, r5
 8002bba:	6a21      	ldr	r1, [r4, #32]
 8002bbc:	47b0      	blx	r6
 8002bbe:	1c43      	adds	r3, r0, #1
 8002bc0:	89a3      	ldrh	r3, [r4, #12]
 8002bc2:	d106      	bne.n	8002bd2 <__sflush_r+0x62>
 8002bc4:	6829      	ldr	r1, [r5, #0]
 8002bc6:	291d      	cmp	r1, #29
 8002bc8:	d82c      	bhi.n	8002c24 <__sflush_r+0xb4>
 8002bca:	4a29      	ldr	r2, [pc, #164]	; (8002c70 <__sflush_r+0x100>)
 8002bcc:	40ca      	lsrs	r2, r1
 8002bce:	07d6      	lsls	r6, r2, #31
 8002bd0:	d528      	bpl.n	8002c24 <__sflush_r+0xb4>
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	6062      	str	r2, [r4, #4]
 8002bd6:	6922      	ldr	r2, [r4, #16]
 8002bd8:	04d9      	lsls	r1, r3, #19
 8002bda:	6022      	str	r2, [r4, #0]
 8002bdc:	d504      	bpl.n	8002be8 <__sflush_r+0x78>
 8002bde:	1c42      	adds	r2, r0, #1
 8002be0:	d101      	bne.n	8002be6 <__sflush_r+0x76>
 8002be2:	682b      	ldr	r3, [r5, #0]
 8002be4:	b903      	cbnz	r3, 8002be8 <__sflush_r+0x78>
 8002be6:	6560      	str	r0, [r4, #84]	; 0x54
 8002be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002bea:	602f      	str	r7, [r5, #0]
 8002bec:	2900      	cmp	r1, #0
 8002bee:	d0cb      	beq.n	8002b88 <__sflush_r+0x18>
 8002bf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002bf4:	4299      	cmp	r1, r3
 8002bf6:	d002      	beq.n	8002bfe <__sflush_r+0x8e>
 8002bf8:	4628      	mov	r0, r5
 8002bfa:	f000 f909 	bl	8002e10 <_free_r>
 8002bfe:	2000      	movs	r0, #0
 8002c00:	6360      	str	r0, [r4, #52]	; 0x34
 8002c02:	e7c2      	b.n	8002b8a <__sflush_r+0x1a>
 8002c04:	6a21      	ldr	r1, [r4, #32]
 8002c06:	2301      	movs	r3, #1
 8002c08:	4628      	mov	r0, r5
 8002c0a:	47b0      	blx	r6
 8002c0c:	1c41      	adds	r1, r0, #1
 8002c0e:	d1c7      	bne.n	8002ba0 <__sflush_r+0x30>
 8002c10:	682b      	ldr	r3, [r5, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0c4      	beq.n	8002ba0 <__sflush_r+0x30>
 8002c16:	2b1d      	cmp	r3, #29
 8002c18:	d001      	beq.n	8002c1e <__sflush_r+0xae>
 8002c1a:	2b16      	cmp	r3, #22
 8002c1c:	d101      	bne.n	8002c22 <__sflush_r+0xb2>
 8002c1e:	602f      	str	r7, [r5, #0]
 8002c20:	e7b2      	b.n	8002b88 <__sflush_r+0x18>
 8002c22:	89a3      	ldrh	r3, [r4, #12]
 8002c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c28:	81a3      	strh	r3, [r4, #12]
 8002c2a:	e7ae      	b.n	8002b8a <__sflush_r+0x1a>
 8002c2c:	690f      	ldr	r7, [r1, #16]
 8002c2e:	2f00      	cmp	r7, #0
 8002c30:	d0aa      	beq.n	8002b88 <__sflush_r+0x18>
 8002c32:	0793      	lsls	r3, r2, #30
 8002c34:	bf18      	it	ne
 8002c36:	2300      	movne	r3, #0
 8002c38:	680e      	ldr	r6, [r1, #0]
 8002c3a:	bf08      	it	eq
 8002c3c:	694b      	ldreq	r3, [r1, #20]
 8002c3e:	1bf6      	subs	r6, r6, r7
 8002c40:	600f      	str	r7, [r1, #0]
 8002c42:	608b      	str	r3, [r1, #8]
 8002c44:	2e00      	cmp	r6, #0
 8002c46:	dd9f      	ble.n	8002b88 <__sflush_r+0x18>
 8002c48:	4633      	mov	r3, r6
 8002c4a:	463a      	mov	r2, r7
 8002c4c:	4628      	mov	r0, r5
 8002c4e:	6a21      	ldr	r1, [r4, #32]
 8002c50:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002c54:	47e0      	blx	ip
 8002c56:	2800      	cmp	r0, #0
 8002c58:	dc06      	bgt.n	8002c68 <__sflush_r+0xf8>
 8002c5a:	89a3      	ldrh	r3, [r4, #12]
 8002c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c64:	81a3      	strh	r3, [r4, #12]
 8002c66:	e790      	b.n	8002b8a <__sflush_r+0x1a>
 8002c68:	4407      	add	r7, r0
 8002c6a:	1a36      	subs	r6, r6, r0
 8002c6c:	e7ea      	b.n	8002c44 <__sflush_r+0xd4>
 8002c6e:	bf00      	nop
 8002c70:	20400001 	.word	0x20400001

08002c74 <_fflush_r>:
 8002c74:	b538      	push	{r3, r4, r5, lr}
 8002c76:	690b      	ldr	r3, [r1, #16]
 8002c78:	4605      	mov	r5, r0
 8002c7a:	460c      	mov	r4, r1
 8002c7c:	b913      	cbnz	r3, 8002c84 <_fflush_r+0x10>
 8002c7e:	2500      	movs	r5, #0
 8002c80:	4628      	mov	r0, r5
 8002c82:	bd38      	pop	{r3, r4, r5, pc}
 8002c84:	b118      	cbz	r0, 8002c8e <_fflush_r+0x1a>
 8002c86:	6983      	ldr	r3, [r0, #24]
 8002c88:	b90b      	cbnz	r3, 8002c8e <_fflush_r+0x1a>
 8002c8a:	f7ff fa19 	bl	80020c0 <__sinit>
 8002c8e:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <_fflush_r+0x6c>)
 8002c90:	429c      	cmp	r4, r3
 8002c92:	d11b      	bne.n	8002ccc <_fflush_r+0x58>
 8002c94:	686c      	ldr	r4, [r5, #4]
 8002c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0ef      	beq.n	8002c7e <_fflush_r+0xa>
 8002c9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ca0:	07d0      	lsls	r0, r2, #31
 8002ca2:	d404      	bmi.n	8002cae <_fflush_r+0x3a>
 8002ca4:	0599      	lsls	r1, r3, #22
 8002ca6:	d402      	bmi.n	8002cae <_fflush_r+0x3a>
 8002ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002caa:	f7ff faa7 	bl	80021fc <__retarget_lock_acquire_recursive>
 8002cae:	4628      	mov	r0, r5
 8002cb0:	4621      	mov	r1, r4
 8002cb2:	f7ff ff5d 	bl	8002b70 <__sflush_r>
 8002cb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002cb8:	4605      	mov	r5, r0
 8002cba:	07da      	lsls	r2, r3, #31
 8002cbc:	d4e0      	bmi.n	8002c80 <_fflush_r+0xc>
 8002cbe:	89a3      	ldrh	r3, [r4, #12]
 8002cc0:	059b      	lsls	r3, r3, #22
 8002cc2:	d4dd      	bmi.n	8002c80 <_fflush_r+0xc>
 8002cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cc6:	f7ff fa9a 	bl	80021fe <__retarget_lock_release_recursive>
 8002cca:	e7d9      	b.n	8002c80 <_fflush_r+0xc>
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <_fflush_r+0x70>)
 8002cce:	429c      	cmp	r4, r3
 8002cd0:	d101      	bne.n	8002cd6 <_fflush_r+0x62>
 8002cd2:	68ac      	ldr	r4, [r5, #8]
 8002cd4:	e7df      	b.n	8002c96 <_fflush_r+0x22>
 8002cd6:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <_fflush_r+0x74>)
 8002cd8:	429c      	cmp	r4, r3
 8002cda:	bf08      	it	eq
 8002cdc:	68ec      	ldreq	r4, [r5, #12]
 8002cde:	e7da      	b.n	8002c96 <_fflush_r+0x22>
 8002ce0:	08002f84 	.word	0x08002f84
 8002ce4:	08002fa4 	.word	0x08002fa4
 8002ce8:	08002f64 	.word	0x08002f64

08002cec <_lseek_r>:
 8002cec:	b538      	push	{r3, r4, r5, lr}
 8002cee:	4604      	mov	r4, r0
 8002cf0:	4608      	mov	r0, r1
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	4d05      	ldr	r5, [pc, #20]	; (8002d0c <_lseek_r+0x20>)
 8002cf8:	602a      	str	r2, [r5, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f7fd fd1c 	bl	8000738 <_lseek>
 8002d00:	1c43      	adds	r3, r0, #1
 8002d02:	d102      	bne.n	8002d0a <_lseek_r+0x1e>
 8002d04:	682b      	ldr	r3, [r5, #0]
 8002d06:	b103      	cbz	r3, 8002d0a <_lseek_r+0x1e>
 8002d08:	6023      	str	r3, [r4, #0]
 8002d0a:	bd38      	pop	{r3, r4, r5, pc}
 8002d0c:	2000012c 	.word	0x2000012c

08002d10 <__swhatbuf_r>:
 8002d10:	b570      	push	{r4, r5, r6, lr}
 8002d12:	460e      	mov	r6, r1
 8002d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d18:	4614      	mov	r4, r2
 8002d1a:	2900      	cmp	r1, #0
 8002d1c:	461d      	mov	r5, r3
 8002d1e:	b096      	sub	sp, #88	; 0x58
 8002d20:	da08      	bge.n	8002d34 <__swhatbuf_r+0x24>
 8002d22:	2200      	movs	r2, #0
 8002d24:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002d28:	602a      	str	r2, [r5, #0]
 8002d2a:	061a      	lsls	r2, r3, #24
 8002d2c:	d410      	bmi.n	8002d50 <__swhatbuf_r+0x40>
 8002d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d32:	e00e      	b.n	8002d52 <__swhatbuf_r+0x42>
 8002d34:	466a      	mov	r2, sp
 8002d36:	f000 f8c5 	bl	8002ec4 <_fstat_r>
 8002d3a:	2800      	cmp	r0, #0
 8002d3c:	dbf1      	blt.n	8002d22 <__swhatbuf_r+0x12>
 8002d3e:	9a01      	ldr	r2, [sp, #4]
 8002d40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002d44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002d48:	425a      	negs	r2, r3
 8002d4a:	415a      	adcs	r2, r3
 8002d4c:	602a      	str	r2, [r5, #0]
 8002d4e:	e7ee      	b.n	8002d2e <__swhatbuf_r+0x1e>
 8002d50:	2340      	movs	r3, #64	; 0x40
 8002d52:	2000      	movs	r0, #0
 8002d54:	6023      	str	r3, [r4, #0]
 8002d56:	b016      	add	sp, #88	; 0x58
 8002d58:	bd70      	pop	{r4, r5, r6, pc}
	...

08002d5c <__smakebuf_r>:
 8002d5c:	898b      	ldrh	r3, [r1, #12]
 8002d5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d60:	079d      	lsls	r5, r3, #30
 8002d62:	4606      	mov	r6, r0
 8002d64:	460c      	mov	r4, r1
 8002d66:	d507      	bpl.n	8002d78 <__smakebuf_r+0x1c>
 8002d68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002d6c:	6023      	str	r3, [r4, #0]
 8002d6e:	6123      	str	r3, [r4, #16]
 8002d70:	2301      	movs	r3, #1
 8002d72:	6163      	str	r3, [r4, #20]
 8002d74:	b002      	add	sp, #8
 8002d76:	bd70      	pop	{r4, r5, r6, pc}
 8002d78:	466a      	mov	r2, sp
 8002d7a:	ab01      	add	r3, sp, #4
 8002d7c:	f7ff ffc8 	bl	8002d10 <__swhatbuf_r>
 8002d80:	9900      	ldr	r1, [sp, #0]
 8002d82:	4605      	mov	r5, r0
 8002d84:	4630      	mov	r0, r6
 8002d86:	f7ff fa5b 	bl	8002240 <_malloc_r>
 8002d8a:	b948      	cbnz	r0, 8002da0 <__smakebuf_r+0x44>
 8002d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d90:	059a      	lsls	r2, r3, #22
 8002d92:	d4ef      	bmi.n	8002d74 <__smakebuf_r+0x18>
 8002d94:	f023 0303 	bic.w	r3, r3, #3
 8002d98:	f043 0302 	orr.w	r3, r3, #2
 8002d9c:	81a3      	strh	r3, [r4, #12]
 8002d9e:	e7e3      	b.n	8002d68 <__smakebuf_r+0xc>
 8002da0:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <__smakebuf_r+0x7c>)
 8002da2:	62b3      	str	r3, [r6, #40]	; 0x28
 8002da4:	89a3      	ldrh	r3, [r4, #12]
 8002da6:	6020      	str	r0, [r4, #0]
 8002da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dac:	81a3      	strh	r3, [r4, #12]
 8002dae:	9b00      	ldr	r3, [sp, #0]
 8002db0:	6120      	str	r0, [r4, #16]
 8002db2:	6163      	str	r3, [r4, #20]
 8002db4:	9b01      	ldr	r3, [sp, #4]
 8002db6:	b15b      	cbz	r3, 8002dd0 <__smakebuf_r+0x74>
 8002db8:	4630      	mov	r0, r6
 8002dba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002dbe:	f000 f893 	bl	8002ee8 <_isatty_r>
 8002dc2:	b128      	cbz	r0, 8002dd0 <__smakebuf_r+0x74>
 8002dc4:	89a3      	ldrh	r3, [r4, #12]
 8002dc6:	f023 0303 	bic.w	r3, r3, #3
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	81a3      	strh	r3, [r4, #12]
 8002dd0:	89a0      	ldrh	r0, [r4, #12]
 8002dd2:	4305      	orrs	r5, r0
 8002dd4:	81a5      	strh	r5, [r4, #12]
 8002dd6:	e7cd      	b.n	8002d74 <__smakebuf_r+0x18>
 8002dd8:	08002059 	.word	0x08002059

08002ddc <memchr>:
 8002ddc:	4603      	mov	r3, r0
 8002dde:	b510      	push	{r4, lr}
 8002de0:	b2c9      	uxtb	r1, r1
 8002de2:	4402      	add	r2, r0
 8002de4:	4293      	cmp	r3, r2
 8002de6:	4618      	mov	r0, r3
 8002de8:	d101      	bne.n	8002dee <memchr+0x12>
 8002dea:	2000      	movs	r0, #0
 8002dec:	e003      	b.n	8002df6 <memchr+0x1a>
 8002dee:	7804      	ldrb	r4, [r0, #0]
 8002df0:	3301      	adds	r3, #1
 8002df2:	428c      	cmp	r4, r1
 8002df4:	d1f6      	bne.n	8002de4 <memchr+0x8>
 8002df6:	bd10      	pop	{r4, pc}

08002df8 <__malloc_lock>:
 8002df8:	4801      	ldr	r0, [pc, #4]	; (8002e00 <__malloc_lock+0x8>)
 8002dfa:	f7ff b9ff 	b.w	80021fc <__retarget_lock_acquire_recursive>
 8002dfe:	bf00      	nop
 8002e00:	20000120 	.word	0x20000120

08002e04 <__malloc_unlock>:
 8002e04:	4801      	ldr	r0, [pc, #4]	; (8002e0c <__malloc_unlock+0x8>)
 8002e06:	f7ff b9fa 	b.w	80021fe <__retarget_lock_release_recursive>
 8002e0a:	bf00      	nop
 8002e0c:	20000120 	.word	0x20000120

08002e10 <_free_r>:
 8002e10:	b538      	push	{r3, r4, r5, lr}
 8002e12:	4605      	mov	r5, r0
 8002e14:	2900      	cmp	r1, #0
 8002e16:	d040      	beq.n	8002e9a <_free_r+0x8a>
 8002e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e1c:	1f0c      	subs	r4, r1, #4
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	bfb8      	it	lt
 8002e22:	18e4      	addlt	r4, r4, r3
 8002e24:	f7ff ffe8 	bl	8002df8 <__malloc_lock>
 8002e28:	4a1c      	ldr	r2, [pc, #112]	; (8002e9c <_free_r+0x8c>)
 8002e2a:	6813      	ldr	r3, [r2, #0]
 8002e2c:	b933      	cbnz	r3, 8002e3c <_free_r+0x2c>
 8002e2e:	6063      	str	r3, [r4, #4]
 8002e30:	6014      	str	r4, [r2, #0]
 8002e32:	4628      	mov	r0, r5
 8002e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e38:	f7ff bfe4 	b.w	8002e04 <__malloc_unlock>
 8002e3c:	42a3      	cmp	r3, r4
 8002e3e:	d908      	bls.n	8002e52 <_free_r+0x42>
 8002e40:	6820      	ldr	r0, [r4, #0]
 8002e42:	1821      	adds	r1, r4, r0
 8002e44:	428b      	cmp	r3, r1
 8002e46:	bf01      	itttt	eq
 8002e48:	6819      	ldreq	r1, [r3, #0]
 8002e4a:	685b      	ldreq	r3, [r3, #4]
 8002e4c:	1809      	addeq	r1, r1, r0
 8002e4e:	6021      	streq	r1, [r4, #0]
 8002e50:	e7ed      	b.n	8002e2e <_free_r+0x1e>
 8002e52:	461a      	mov	r2, r3
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	b10b      	cbz	r3, 8002e5c <_free_r+0x4c>
 8002e58:	42a3      	cmp	r3, r4
 8002e5a:	d9fa      	bls.n	8002e52 <_free_r+0x42>
 8002e5c:	6811      	ldr	r1, [r2, #0]
 8002e5e:	1850      	adds	r0, r2, r1
 8002e60:	42a0      	cmp	r0, r4
 8002e62:	d10b      	bne.n	8002e7c <_free_r+0x6c>
 8002e64:	6820      	ldr	r0, [r4, #0]
 8002e66:	4401      	add	r1, r0
 8002e68:	1850      	adds	r0, r2, r1
 8002e6a:	4283      	cmp	r3, r0
 8002e6c:	6011      	str	r1, [r2, #0]
 8002e6e:	d1e0      	bne.n	8002e32 <_free_r+0x22>
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	4401      	add	r1, r0
 8002e76:	6011      	str	r1, [r2, #0]
 8002e78:	6053      	str	r3, [r2, #4]
 8002e7a:	e7da      	b.n	8002e32 <_free_r+0x22>
 8002e7c:	d902      	bls.n	8002e84 <_free_r+0x74>
 8002e7e:	230c      	movs	r3, #12
 8002e80:	602b      	str	r3, [r5, #0]
 8002e82:	e7d6      	b.n	8002e32 <_free_r+0x22>
 8002e84:	6820      	ldr	r0, [r4, #0]
 8002e86:	1821      	adds	r1, r4, r0
 8002e88:	428b      	cmp	r3, r1
 8002e8a:	bf01      	itttt	eq
 8002e8c:	6819      	ldreq	r1, [r3, #0]
 8002e8e:	685b      	ldreq	r3, [r3, #4]
 8002e90:	1809      	addeq	r1, r1, r0
 8002e92:	6021      	streq	r1, [r4, #0]
 8002e94:	6063      	str	r3, [r4, #4]
 8002e96:	6054      	str	r4, [r2, #4]
 8002e98:	e7cb      	b.n	8002e32 <_free_r+0x22>
 8002e9a:	bd38      	pop	{r3, r4, r5, pc}
 8002e9c:	20000124 	.word	0x20000124

08002ea0 <_read_r>:
 8002ea0:	b538      	push	{r3, r4, r5, lr}
 8002ea2:	4604      	mov	r4, r0
 8002ea4:	4608      	mov	r0, r1
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	4d05      	ldr	r5, [pc, #20]	; (8002ec0 <_read_r+0x20>)
 8002eac:	602a      	str	r2, [r5, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f7fd fbe5 	bl	800067e <_read>
 8002eb4:	1c43      	adds	r3, r0, #1
 8002eb6:	d102      	bne.n	8002ebe <_read_r+0x1e>
 8002eb8:	682b      	ldr	r3, [r5, #0]
 8002eba:	b103      	cbz	r3, 8002ebe <_read_r+0x1e>
 8002ebc:	6023      	str	r3, [r4, #0]
 8002ebe:	bd38      	pop	{r3, r4, r5, pc}
 8002ec0:	2000012c 	.word	0x2000012c

08002ec4 <_fstat_r>:
 8002ec4:	b538      	push	{r3, r4, r5, lr}
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	4d06      	ldr	r5, [pc, #24]	; (8002ee4 <_fstat_r+0x20>)
 8002eca:	4604      	mov	r4, r0
 8002ecc:	4608      	mov	r0, r1
 8002ece:	4611      	mov	r1, r2
 8002ed0:	602b      	str	r3, [r5, #0]
 8002ed2:	f7fd fc18 	bl	8000706 <_fstat>
 8002ed6:	1c43      	adds	r3, r0, #1
 8002ed8:	d102      	bne.n	8002ee0 <_fstat_r+0x1c>
 8002eda:	682b      	ldr	r3, [r5, #0]
 8002edc:	b103      	cbz	r3, 8002ee0 <_fstat_r+0x1c>
 8002ede:	6023      	str	r3, [r4, #0]
 8002ee0:	bd38      	pop	{r3, r4, r5, pc}
 8002ee2:	bf00      	nop
 8002ee4:	2000012c 	.word	0x2000012c

08002ee8 <_isatty_r>:
 8002ee8:	b538      	push	{r3, r4, r5, lr}
 8002eea:	2300      	movs	r3, #0
 8002eec:	4d05      	ldr	r5, [pc, #20]	; (8002f04 <_isatty_r+0x1c>)
 8002eee:	4604      	mov	r4, r0
 8002ef0:	4608      	mov	r0, r1
 8002ef2:	602b      	str	r3, [r5, #0]
 8002ef4:	f7fd fc16 	bl	8000724 <_isatty>
 8002ef8:	1c43      	adds	r3, r0, #1
 8002efa:	d102      	bne.n	8002f02 <_isatty_r+0x1a>
 8002efc:	682b      	ldr	r3, [r5, #0]
 8002efe:	b103      	cbz	r3, 8002f02 <_isatty_r+0x1a>
 8002f00:	6023      	str	r3, [r4, #0]
 8002f02:	bd38      	pop	{r3, r4, r5, pc}
 8002f04:	2000012c 	.word	0x2000012c

08002f08 <_init>:
 8002f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0a:	bf00      	nop
 8002f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0e:	bc08      	pop	{r3}
 8002f10:	469e      	mov	lr, r3
 8002f12:	4770      	bx	lr

08002f14 <_fini>:
 8002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f16:	bf00      	nop
 8002f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1a:	bc08      	pop	{r3}
 8002f1c:	469e      	mov	lr, r3
 8002f1e:	4770      	bx	lr
