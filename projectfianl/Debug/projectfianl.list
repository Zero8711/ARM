
projectfianl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e08  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08003f14  08003f14  00013f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ffc  08003ffc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003ffc  08003ffc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ffc  08003ffc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ffc  08003ffc  00013ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004000  08004000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fe4  20000070  08004074  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004054  08004074  00024054  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab10  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf0  00000000  00000000  0002aba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  0002c8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c00  00000000  00000000  0002d558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018595  00000000  00000000  0002e158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ccaa  00000000  00000000  000466ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ba21  00000000  00000000  00053397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dedb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d1c  00000000  00000000  000dee08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003efc 	.word	0x08003efc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003efc 	.word	0x08003efc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08c      	sub	sp, #48	; 0x30
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fdc7 	bl	8000ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f993 	bl	8000480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fac1 	bl	80006e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800015e:	f000 faa1 	bl	80006a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000162:	f000 fa75 	bl	8000650 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000166:	f000 f9cd 	bl	8000504 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800016a:	f000 fa47 	bl	80005fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800016e:	2100      	movs	r1, #0
 8000170:	489f      	ldr	r0, [pc, #636]	; (80003f0 <main+0x2a4>)
 8000172:	f001 ff57 	bl	8002024 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000176:	2104      	movs	r1, #4
 8000178:	489d      	ldr	r0, [pc, #628]	; (80003f0 <main+0x2a4>)
 800017a:	f001 ff53 	bl	8002024 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800017e:	2108      	movs	r1, #8
 8000180:	489b      	ldr	r0, [pc, #620]	; (80003f0 <main+0x2a4>)
 8000182:	f001 ff4f 	bl	8002024 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000186:	210c      	movs	r1, #12
 8000188:	4899      	ldr	r0, [pc, #612]	; (80003f0 <main+0x2a4>)
 800018a:	f001 ff4b 	bl	8002024 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_DMA(&huart1, data, 5);
 800018e:	2205      	movs	r2, #5
 8000190:	4998      	ldr	r1, [pc, #608]	; (80003f4 <main+0x2a8>)
 8000192:	4899      	ldr	r0, [pc, #612]	; (80003f8 <main+0x2ac>)
 8000194:	f002 fbf1 	bl	800297a <HAL_UART_Receive_DMA>
  int end_idx = 0;
 8000198:	2300      	movs	r3, #0
 800019a:	62fb      	str	r3, [r7, #44]	; 0x2c
  int servo[4] ={0};
 800019c:	463b      	mov	r3, r7
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int idx =0; idx <5; idx++){
 80001a8:	2300      	movs	r3, #0
 80001aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80001ac:	e00b      	b.n	80001c6 <main+0x7a>
		  if(data[idx] < 50) {
 80001ae:	4a91      	ldr	r2, [pc, #580]	; (80003f4 <main+0x2a8>)
 80001b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80001b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001b6:	2b31      	cmp	r3, #49	; 0x31
 80001b8:	dc02      	bgt.n	80001c0 <main+0x74>
			  end_idx = idx;
 80001ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80001bc:	62fb      	str	r3, [r7, #44]	; 0x2c
			  break;
 80001be:	e005      	b.n	80001cc <main+0x80>
	  for(int idx =0; idx <5; idx++){
 80001c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80001c2:	3301      	adds	r3, #1
 80001c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80001c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80001c8:	2b04      	cmp	r3, #4
 80001ca:	ddf0      	ble.n	80001ae <main+0x62>
		  }
	  }
	  int compare = data[end_idx];
 80001cc:	4a89      	ldr	r2, [pc, #548]	; (80003f4 <main+0x2a8>)
 80001ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d4:	613b      	str	r3, [r7, #16]

	  for(int idx =3; idx>=0; idx--){
 80001d6:	2303      	movs	r3, #3
 80001d8:	627b      	str	r3, [r7, #36]	; 0x24
 80001da:	e02f      	b.n	800023c <main+0xf0>
		  end_idx -=1;
 80001dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001de:	3b01      	subs	r3, #1
 80001e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		  if(end_idx<0){
 80001e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	da02      	bge.n	80001ee <main+0xa2>
			  end_idx +=5;
 80001e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80001ea:	3305      	adds	r3, #5
 80001ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		  }
		 if(servo[idx] +1<data[end_idx] || servo[idx] -1>data[end_idx] )
 80001ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001f0:	009b      	lsls	r3, r3, #2
 80001f2:	3330      	adds	r3, #48	; 0x30
 80001f4:	443b      	add	r3, r7
 80001f6:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80001fa:	1c5a      	adds	r2, r3, #1
 80001fc:	497d      	ldr	r1, [pc, #500]	; (80003f4 <main+0x2a8>)
 80001fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000200:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000204:	429a      	cmp	r2, r3
 8000206:	db0c      	blt.n	8000222 <main+0xd6>
 8000208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800020a:	009b      	lsls	r3, r3, #2
 800020c:	3330      	adds	r3, #48	; 0x30
 800020e:	443b      	add	r3, r7
 8000210:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000214:	1e5a      	subs	r2, r3, #1
 8000216:	4977      	ldr	r1, [pc, #476]	; (80003f4 <main+0x2a8>)
 8000218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800021a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800021e:	429a      	cmp	r2, r3
 8000220:	dd09      	ble.n	8000236 <main+0xea>
		  servo[idx] = data[end_idx];
 8000222:	4a74      	ldr	r2, [pc, #464]	; (80003f4 <main+0x2a8>)
 8000224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000226:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800022c:	009b      	lsls	r3, r3, #2
 800022e:	3330      	adds	r3, #48	; 0x30
 8000230:	443b      	add	r3, r7
 8000232:	f843 2c30 	str.w	r2, [r3, #-48]
	  for(int idx =3; idx>=0; idx--){
 8000236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000238:	3b01      	subs	r3, #1
 800023a:	627b      	str	r3, [r7, #36]	; 0x24
 800023c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800023e:	2b00      	cmp	r3, #0
 8000240:	dacc      	bge.n	80001dc <main+0x90>
	  }

	  for(int idx =0;idx<4;idx++)
 8000242:	2300      	movs	r3, #0
 8000244:	623b      	str	r3, [r7, #32]
 8000246:	e00c      	b.n	8000262 <main+0x116>
		  printf("%d ", servo[idx]);
 8000248:	6a3b      	ldr	r3, [r7, #32]
 800024a:	009b      	lsls	r3, r3, #2
 800024c:	3330      	adds	r3, #48	; 0x30
 800024e:	443b      	add	r3, r7
 8000250:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8000254:	4619      	mov	r1, r3
 8000256:	4869      	ldr	r0, [pc, #420]	; (80003fc <main+0x2b0>)
 8000258:	f002 fe46 	bl	8002ee8 <iprintf>
	  for(int idx =0;idx<4;idx++)
 800025c:	6a3b      	ldr	r3, [r7, #32]
 800025e:	3301      	adds	r3, #1
 8000260:	623b      	str	r3, [r7, #32]
 8000262:	6a3b      	ldr	r3, [r7, #32]
 8000264:	2b03      	cmp	r3, #3
 8000266:	ddef      	ble.n	8000248 <main+0xfc>

	  printf("\r\n");
 8000268:	4865      	ldr	r0, [pc, #404]	; (8000400 <main+0x2b4>)
 800026a:	f002 fec3 	bl	8002ff4 <puts>

	  if(compare == 0)
 800026e:	693b      	ldr	r3, [r7, #16]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14a      	bne.n	800030a <main+0x1be>
	  {
		  if(state[0][0]>0){
 8000274:	4b63      	ldr	r3, [pc, #396]	; (8000404 <main+0x2b8>)
 8000276:	881b      	ldrh	r3, [r3, #0]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d021      	beq.n	80002c0 <main+0x174>
			  for(int jdx = 0 ; jdx < 4; jdx ++){
 800027c:	2300      	movs	r3, #0
 800027e:	61fb      	str	r3, [r7, #28]
 8000280:	e018      	b.n	80002b4 <main+0x168>
				  for(int kdx = 0; kdx <2000; kdx ++){
 8000282:	2300      	movs	r3, #0
 8000284:	61bb      	str	r3, [r7, #24]
 8000286:	e00e      	b.n	80002a6 <main+0x15a>
					  state[jdx][kdx]=  -1;
 8000288:	495e      	ldr	r1, [pc, #376]	; (8000404 <main+0x2b8>)
 800028a:	69fb      	ldr	r3, [r7, #28]
 800028c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000290:	fb03 f202 	mul.w	r2, r3, r2
 8000294:	69bb      	ldr	r3, [r7, #24]
 8000296:	4413      	add	r3, r2
 8000298:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800029c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				  for(int kdx = 0; kdx <2000; kdx ++){
 80002a0:	69bb      	ldr	r3, [r7, #24]
 80002a2:	3301      	adds	r3, #1
 80002a4:	61bb      	str	r3, [r7, #24]
 80002a6:	69bb      	ldr	r3, [r7, #24]
 80002a8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80002ac:	dbec      	blt.n	8000288 <main+0x13c>
			  for(int jdx = 0 ; jdx < 4; jdx ++){
 80002ae:	69fb      	ldr	r3, [r7, #28]
 80002b0:	3301      	adds	r3, #1
 80002b2:	61fb      	str	r3, [r7, #28]
 80002b4:	69fb      	ldr	r3, [r7, #28]
 80002b6:	2b03      	cmp	r3, #3
 80002b8:	dde3      	ble.n	8000282 <main+0x136>
				  }
			  }
			  idx = 0;
 80002ba:	4b53      	ldr	r3, [pc, #332]	; (8000408 <main+0x2bc>)
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
		  }

		  htim4.Instance -> CCR1 = servo[0] * 10;
 80002c0:	683a      	ldr	r2, [r7, #0]
 80002c2:	4613      	mov	r3, r2
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	4413      	add	r3, r2
 80002c8:	005b      	lsls	r3, r3, #1
 80002ca:	461a      	mov	r2, r3
 80002cc:	4b48      	ldr	r3, [pc, #288]	; (80003f0 <main+0x2a4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	635a      	str	r2, [r3, #52]	; 0x34
		  htim4.Instance -> CCR2 = servo[1] * 10;
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	4613      	mov	r3, r2
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	4413      	add	r3, r2
 80002da:	005b      	lsls	r3, r3, #1
 80002dc:	461a      	mov	r2, r3
 80002de:	4b44      	ldr	r3, [pc, #272]	; (80003f0 <main+0x2a4>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	639a      	str	r2, [r3, #56]	; 0x38
		  htim4.Instance -> CCR3 = servo[2] * 10;
 80002e4:	68ba      	ldr	r2, [r7, #8]
 80002e6:	4613      	mov	r3, r2
 80002e8:	009b      	lsls	r3, r3, #2
 80002ea:	4413      	add	r3, r2
 80002ec:	005b      	lsls	r3, r3, #1
 80002ee:	461a      	mov	r2, r3
 80002f0:	4b3f      	ldr	r3, [pc, #252]	; (80003f0 <main+0x2a4>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	63da      	str	r2, [r3, #60]	; 0x3c
		  htim4.Instance -> CCR4 = servo[3] * 10;
 80002f6:	68fa      	ldr	r2, [r7, #12]
 80002f8:	4613      	mov	r3, r2
 80002fa:	009b      	lsls	r3, r3, #2
 80002fc:	4413      	add	r3, r2
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	461a      	mov	r2, r3
 8000302:	4b3b      	ldr	r3, [pc, #236]	; (80003f0 <main+0x2a4>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	641a      	str	r2, [r3, #64]	; 0x40
 8000308:	e74e      	b.n	80001a8 <main+0x5c>
	  }

	  else if(compare == 1)
 800030a:	693b      	ldr	r3, [r7, #16]
 800030c:	2b01      	cmp	r3, #1
 800030e:	d165      	bne.n	80003dc <main+0x290>
	  {
		  htim4.Instance -> CCR1 = servo[0] * 10;
 8000310:	683a      	ldr	r2, [r7, #0]
 8000312:	4613      	mov	r3, r2
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	4413      	add	r3, r2
 8000318:	005b      	lsls	r3, r3, #1
 800031a:	461a      	mov	r2, r3
 800031c:	4b34      	ldr	r3, [pc, #208]	; (80003f0 <main+0x2a4>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	635a      	str	r2, [r3, #52]	; 0x34
		  htim4.Instance -> CCR2 = servo[1] * 10;
 8000322:	687a      	ldr	r2, [r7, #4]
 8000324:	4613      	mov	r3, r2
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	4413      	add	r3, r2
 800032a:	005b      	lsls	r3, r3, #1
 800032c:	461a      	mov	r2, r3
 800032e:	4b30      	ldr	r3, [pc, #192]	; (80003f0 <main+0x2a4>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	639a      	str	r2, [r3, #56]	; 0x38
		  htim4.Instance -> CCR3 = servo[2] * 10;
 8000334:	68ba      	ldr	r2, [r7, #8]
 8000336:	4613      	mov	r3, r2
 8000338:	009b      	lsls	r3, r3, #2
 800033a:	4413      	add	r3, r2
 800033c:	005b      	lsls	r3, r3, #1
 800033e:	461a      	mov	r2, r3
 8000340:	4b2b      	ldr	r3, [pc, #172]	; (80003f0 <main+0x2a4>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	63da      	str	r2, [r3, #60]	; 0x3c
		  htim4.Instance -> CCR4 = servo[3] * 10;
 8000346:	68fa      	ldr	r2, [r7, #12]
 8000348:	4613      	mov	r3, r2
 800034a:	009b      	lsls	r3, r3, #2
 800034c:	4413      	add	r3, r2
 800034e:	005b      	lsls	r3, r3, #1
 8000350:	461a      	mov	r2, r3
 8000352:	4b27      	ldr	r3, [pc, #156]	; (80003f0 <main+0x2a4>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	641a      	str	r2, [r3, #64]	; 0x40
		  state[0][idx] = servo[0]*10;
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	b29a      	uxth	r2, r3
 800035c:	4b2a      	ldr	r3, [pc, #168]	; (8000408 <main+0x2bc>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4611      	mov	r1, r2
 8000362:	0089      	lsls	r1, r1, #2
 8000364:	440a      	add	r2, r1
 8000366:	0052      	lsls	r2, r2, #1
 8000368:	b291      	uxth	r1, r2
 800036a:	4a26      	ldr	r2, [pc, #152]	; (8000404 <main+0x2b8>)
 800036c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  state[1][idx] = servo[1]*10;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	b29a      	uxth	r2, r3
 8000374:	4b24      	ldr	r3, [pc, #144]	; (8000408 <main+0x2bc>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4611      	mov	r1, r2
 800037a:	0089      	lsls	r1, r1, #2
 800037c:	440a      	add	r2, r1
 800037e:	0052      	lsls	r2, r2, #1
 8000380:	b291      	uxth	r1, r2
 8000382:	4a20      	ldr	r2, [pc, #128]	; (8000404 <main+0x2b8>)
 8000384:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000388:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  state[2][idx] = servo[2]*10;
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	b29a      	uxth	r2, r3
 8000390:	4b1d      	ldr	r3, [pc, #116]	; (8000408 <main+0x2bc>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4611      	mov	r1, r2
 8000396:	0089      	lsls	r1, r1, #2
 8000398:	440a      	add	r2, r1
 800039a:	0052      	lsls	r2, r2, #1
 800039c:	b291      	uxth	r1, r2
 800039e:	4a19      	ldr	r2, [pc, #100]	; (8000404 <main+0x2b8>)
 80003a0:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 80003a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  state[3][idx++] = servo[3]*10;
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	b298      	uxth	r0, r3
 80003ac:	4b16      	ldr	r3, [pc, #88]	; (8000408 <main+0x2bc>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	1c5a      	adds	r2, r3, #1
 80003b2:	4915      	ldr	r1, [pc, #84]	; (8000408 <main+0x2bc>)
 80003b4:	600a      	str	r2, [r1, #0]
 80003b6:	4602      	mov	r2, r0
 80003b8:	4611      	mov	r1, r2
 80003ba:	0089      	lsls	r1, r1, #2
 80003bc:	440a      	add	r2, r1
 80003be:	0052      	lsls	r2, r2, #1
 80003c0:	b291      	uxth	r1, r2
 80003c2:	4a10      	ldr	r2, [pc, #64]	; (8000404 <main+0x2b8>)
 80003c4:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80003c8:	3310      	adds	r3, #16
 80003ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  printf("store....\n\r\n\r");
 80003ce:	480f      	ldr	r0, [pc, #60]	; (800040c <main+0x2c0>)
 80003d0:	f002 fd8a 	bl	8002ee8 <iprintf>
		  HAL_Delay(20);
 80003d4:	2014      	movs	r0, #20
 80003d6:	f000 fce7 	bl	8000da8 <HAL_Delay>
 80003da:	e6e5      	b.n	80001a8 <main+0x5c>
	  }
	  else if(compare ==2){
 80003dc:	693b      	ldr	r3, [r7, #16]
 80003de:	2b02      	cmp	r3, #2
 80003e0:	f47f aee2 	bne.w	80001a8 <main+0x5c>

		  printf("replay....\n\r");
 80003e4:	480a      	ldr	r0, [pc, #40]	; (8000410 <main+0x2c4>)
 80003e6:	f002 fd7f 	bl	8002ee8 <iprintf>
		  for(int jdx= 0; jdx<idx ; jdx++){
 80003ea:	2300      	movs	r3, #0
 80003ec:	617b      	str	r3, [r7, #20]
 80003ee:	e03a      	b.n	8000466 <main+0x31a>
 80003f0:	2000008c 	.word	0x2000008c
 80003f4:	200001a4 	.word	0x200001a4
 80003f8:	200000d4 	.word	0x200000d4
 80003fc:	08003f14 	.word	0x08003f14
 8000400:	08003f18 	.word	0x08003f18
 8000404:	200001bc 	.word	0x200001bc
 8000408:	200001b8 	.word	0x200001b8
 800040c:	08003f1c 	.word	0x08003f1c
 8000410:	08003f2c 	.word	0x08003f2c
			  htim4.Instance -> CCR1 = state[0][jdx];
 8000414:	4a17      	ldr	r2, [pc, #92]	; (8000474 <main+0x328>)
 8000416:	697b      	ldr	r3, [r7, #20]
 8000418:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800041c:	4b16      	ldr	r3, [pc, #88]	; (8000478 <main+0x32c>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	635a      	str	r2, [r3, #52]	; 0x34
			  htim4.Instance -> CCR2 = state[1][jdx];
 8000422:	4a14      	ldr	r2, [pc, #80]	; (8000474 <main+0x328>)
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800042a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800042e:	4b12      	ldr	r3, [pc, #72]	; (8000478 <main+0x32c>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	639a      	str	r2, [r3, #56]	; 0x38
			  htim4.Instance -> CCR3 = state[2][jdx];
 8000434:	4a0f      	ldr	r2, [pc, #60]	; (8000474 <main+0x328>)
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 800043c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000440:	4b0d      	ldr	r3, [pc, #52]	; (8000478 <main+0x32c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	63da      	str	r2, [r3, #60]	; 0x3c
			  htim4.Instance -> CCR4 = state[3][jdx];
 8000446:	4a0b      	ldr	r2, [pc, #44]	; (8000474 <main+0x328>)
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800044e:	3310      	adds	r3, #16
 8000450:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000454:	4b08      	ldr	r3, [pc, #32]	; (8000478 <main+0x32c>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	641a      	str	r2, [r3, #64]	; 0x40
			  HAL_Delay(10);
 800045a:	200a      	movs	r0, #10
 800045c:	f000 fca4 	bl	8000da8 <HAL_Delay>
		  for(int jdx= 0; jdx<idx ; jdx++){
 8000460:	697b      	ldr	r3, [r7, #20]
 8000462:	3301      	adds	r3, #1
 8000464:	617b      	str	r3, [r7, #20]
 8000466:	4b05      	ldr	r3, [pc, #20]	; (800047c <main+0x330>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	697a      	ldr	r2, [r7, #20]
 800046c:	429a      	cmp	r2, r3
 800046e:	dbd1      	blt.n	8000414 <main+0x2c8>
  {
 8000470:	e69a      	b.n	80001a8 <main+0x5c>
 8000472:	bf00      	nop
 8000474:	200001bc 	.word	0x200001bc
 8000478:	2000008c 	.word	0x2000008c
 800047c:	200001b8 	.word	0x200001b8

08000480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b090      	sub	sp, #64	; 0x40
 8000484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000486:	f107 0318 	add.w	r3, r7, #24
 800048a:	2228      	movs	r2, #40	; 0x28
 800048c:	2100      	movs	r1, #0
 800048e:	4618      	mov	r0, r3
 8000490:	f002 fd22 	bl	8002ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]
 80004a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004a2:	2302      	movs	r3, #2
 80004a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a6:	2301      	movs	r3, #1
 80004a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004aa:	2310      	movs	r3, #16
 80004ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ae:	2302      	movs	r3, #2
 80004b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80004b2:	2300      	movs	r3, #0
 80004b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80004b6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80004ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004bc:	f107 0318 	add.w	r3, r7, #24
 80004c0:	4618      	mov	r0, r3
 80004c2:	f001 f945 	bl	8001750 <HAL_RCC_OscConfig>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80004cc:	f000 f9d6 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d0:	230f      	movs	r3, #15
 80004d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d4:	2302      	movs	r3, #2
 80004d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d8:	2300      	movs	r3, #0
 80004da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	2102      	movs	r1, #2
 80004ea:	4618      	mov	r0, r3
 80004ec:	f001 fbb2 	bl	8001c54 <HAL_RCC_ClockConfig>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80004f6:	f000 f9c1 	bl	800087c <Error_Handler>
  }
}
 80004fa:	bf00      	nop
 80004fc:	3740      	adds	r7, #64	; 0x40
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
	...

08000504 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	; 0x28
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800050a:	f107 0320 	add.w	r3, r7, #32
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]
 8000522:	615a      	str	r2, [r3, #20]
 8000524:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000526:	4b33      	ldr	r3, [pc, #204]	; (80005f4 <MX_TIM4_Init+0xf0>)
 8000528:	4a33      	ldr	r2, [pc, #204]	; (80005f8 <MX_TIM4_Init+0xf4>)
 800052a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 800052c:	4b31      	ldr	r3, [pc, #196]	; (80005f4 <MX_TIM4_Init+0xf0>)
 800052e:	223f      	movs	r2, #63	; 0x3f
 8000530:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000532:	4b30      	ldr	r3, [pc, #192]	; (80005f4 <MX_TIM4_Init+0xf0>)
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8000538:	4b2e      	ldr	r3, [pc, #184]	; (80005f4 <MX_TIM4_Init+0xf0>)
 800053a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800053e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000540:	4b2c      	ldr	r3, [pc, #176]	; (80005f4 <MX_TIM4_Init+0xf0>)
 8000542:	2200      	movs	r2, #0
 8000544:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000546:	4b2b      	ldr	r3, [pc, #172]	; (80005f4 <MX_TIM4_Init+0xf0>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800054c:	4829      	ldr	r0, [pc, #164]	; (80005f4 <MX_TIM4_Init+0xf0>)
 800054e:	f001 fd19 	bl	8001f84 <HAL_TIM_PWM_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000558:	f000 f990 	bl	800087c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800055c:	2300      	movs	r3, #0
 800055e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000560:	2300      	movs	r3, #0
 8000562:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000564:	f107 0320 	add.w	r3, r7, #32
 8000568:	4619      	mov	r1, r3
 800056a:	4822      	ldr	r0, [pc, #136]	; (80005f4 <MX_TIM4_Init+0xf0>)
 800056c:	f002 f8c8 	bl	8002700 <HAL_TIMEx_MasterConfigSynchronization>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000576:	f000 f981 	bl	800087c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800057a:	2360      	movs	r3, #96	; 0x60
 800057c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000-1;
 800057e:	f241 3387 	movw	r3, #4999	; 0x1387
 8000582:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2200      	movs	r2, #0
 8000590:	4619      	mov	r1, r3
 8000592:	4818      	ldr	r0, [pc, #96]	; (80005f4 <MX_TIM4_Init+0xf0>)
 8000594:	f001 fde8 	bl	8002168 <HAL_TIM_PWM_ConfigChannel>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800059e:	f000 f96d 	bl	800087c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2204      	movs	r2, #4
 80005a6:	4619      	mov	r1, r3
 80005a8:	4812      	ldr	r0, [pc, #72]	; (80005f4 <MX_TIM4_Init+0xf0>)
 80005aa:	f001 fddd 	bl	8002168 <HAL_TIM_PWM_ConfigChannel>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80005b4:	f000 f962 	bl	800087c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2208      	movs	r2, #8
 80005bc:	4619      	mov	r1, r3
 80005be:	480d      	ldr	r0, [pc, #52]	; (80005f4 <MX_TIM4_Init+0xf0>)
 80005c0:	f001 fdd2 	bl	8002168 <HAL_TIM_PWM_ConfigChannel>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80005ca:	f000 f957 	bl	800087c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	220c      	movs	r2, #12
 80005d2:	4619      	mov	r1, r3
 80005d4:	4807      	ldr	r0, [pc, #28]	; (80005f4 <MX_TIM4_Init+0xf0>)
 80005d6:	f001 fdc7 	bl	8002168 <HAL_TIM_PWM_ConfigChannel>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80005e0:	f000 f94c 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80005e4:	4803      	ldr	r0, [pc, #12]	; (80005f4 <MX_TIM4_Init+0xf0>)
 80005e6:	f000 f99f 	bl	8000928 <HAL_TIM_MspPostInit>

}
 80005ea:	bf00      	nop
 80005ec:	3728      	adds	r7, #40	; 0x28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000008c 	.word	0x2000008c
 80005f8:	40000800 	.word	0x40000800

080005fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <MX_USART1_UART_Init+0x50>)
 8000604:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000608:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800060c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000622:	220c      	movs	r2, #12
 8000624:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_USART1_UART_Init+0x4c>)
 8000634:	f002 f8c2 	bl	80027bc <HAL_UART_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800063e:	f000 f91d 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	200000d4 	.word	0x200000d4
 800064c:	40013800 	.word	0x40013800

08000650 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <MX_USART2_UART_Init+0x50>)
 8000658:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_USART2_UART_Init+0x4c>)
 800065c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000660:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_USART2_UART_Init+0x4c>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000676:	220c      	movs	r2, #12
 8000678:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_USART2_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_USART2_UART_Init+0x4c>)
 8000688:	f002 f898 	bl	80027bc <HAL_UART_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000692:	f000 f8f3 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000118 	.word	0x20000118
 80006a0:	40004400 	.word	0x40004400

080006a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_DMA_Init+0x38>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	4a0b      	ldr	r2, [pc, #44]	; (80006dc <MX_DMA_Init+0x38>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6153      	str	r3, [r2, #20]
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_DMA_Init+0x38>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	200f      	movs	r0, #15
 80006c8:	f000 fc69 	bl	8000f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80006cc:	200f      	movs	r0, #15
 80006ce:	f000 fc82 	bl	8000fd6 <HAL_NVIC_EnableIRQ>

}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40021000 	.word	0x40021000

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f4:	4b2d      	ldr	r3, [pc, #180]	; (80007ac <MX_GPIO_Init+0xcc>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a2c      	ldr	r2, [pc, #176]	; (80007ac <MX_GPIO_Init+0xcc>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b2a      	ldr	r3, [pc, #168]	; (80007ac <MX_GPIO_Init+0xcc>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f003 0310 	and.w	r3, r3, #16
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070c:	4b27      	ldr	r3, [pc, #156]	; (80007ac <MX_GPIO_Init+0xcc>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a26      	ldr	r2, [pc, #152]	; (80007ac <MX_GPIO_Init+0xcc>)
 8000712:	f043 0320 	orr.w	r3, r3, #32
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b24      	ldr	r3, [pc, #144]	; (80007ac <MX_GPIO_Init+0xcc>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f003 0320 	and.w	r3, r3, #32
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000724:	4b21      	ldr	r3, [pc, #132]	; (80007ac <MX_GPIO_Init+0xcc>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a20      	ldr	r2, [pc, #128]	; (80007ac <MX_GPIO_Init+0xcc>)
 800072a:	f043 0304 	orr.w	r3, r3, #4
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <MX_GPIO_Init+0xcc>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0304 	and.w	r3, r3, #4
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <MX_GPIO_Init+0xcc>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a1a      	ldr	r2, [pc, #104]	; (80007ac <MX_GPIO_Init+0xcc>)
 8000742:	f043 0308 	orr.w	r3, r3, #8
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_GPIO_Init+0xcc>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0308 	and.w	r3, r3, #8
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2120      	movs	r1, #32
 8000758:	4815      	ldr	r0, [pc, #84]	; (80007b0 <MX_GPIO_Init+0xd0>)
 800075a:	f000 ffc9 	bl	80016f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800075e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_GPIO_Init+0xd4>)
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	4619      	mov	r1, r3
 8000772:	4811      	ldr	r0, [pc, #68]	; (80007b8 <MX_GPIO_Init+0xd8>)
 8000774:	f000 fe38 	bl	80013e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000778:	2320      	movs	r3, #32
 800077a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2302      	movs	r3, #2
 8000786:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	4619      	mov	r1, r3
 800078e:	4808      	ldr	r0, [pc, #32]	; (80007b0 <MX_GPIO_Init+0xd0>)
 8000790:	f000 fe2a 	bl	80013e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	2100      	movs	r1, #0
 8000798:	2028      	movs	r0, #40	; 0x28
 800079a:	f000 fc00 	bl	8000f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800079e:	2028      	movs	r0, #40	; 0x28
 80007a0:	f000 fc19 	bl	8000fd6 <HAL_NVIC_EnableIRQ>

}
 80007a4:	bf00      	nop
 80007a6:	3720      	adds	r7, #32
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40010800 	.word	0x40010800
 80007b4:	10110000 	.word	0x10110000
 80007b8:	40011000 	.word	0x40011000

080007bc <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2,(uint8_t *)&ch, 1, 0xFFFF);
 80007c4:	1d39      	adds	r1, r7, #4
 80007c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ca:	2201      	movs	r2, #1
 80007cc:	4803      	ldr	r0, [pc, #12]	; (80007dc <__io_putchar+0x20>)
 80007ce:	f002 f842 	bl	8002856 <HAL_UART_Transmit>

  return ch;
 80007d2:	687b      	ldr	r3, [r7, #4]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20000118 	.word	0x20000118

080007e0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_8){
 80007ea:	88fb      	ldrh	r3, [r7, #6]
 80007ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007f0:	d111      	bne.n	8000816 <HAL_GPIO_EXTI_Callback+0x36>
		compare =0;
 80007f2:	4b20      	ldr	r3, [pc, #128]	; (8000874 <HAL_GPIO_EXTI_Callback+0x94>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2108      	movs	r1, #8
 80007fc:	481e      	ldr	r0, [pc, #120]	; (8000878 <HAL_GPIO_EXTI_Callback+0x98>)
 80007fe:	f000 ff77 	bl	80016f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2110      	movs	r1, #16
 8000806:	481c      	ldr	r0, [pc, #112]	; (8000878 <HAL_GPIO_EXTI_Callback+0x98>)
 8000808:	f000 ff72 	bl	80016f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	2120      	movs	r1, #32
 8000810:	4819      	ldr	r0, [pc, #100]	; (8000878 <HAL_GPIO_EXTI_Callback+0x98>)
 8000812:	f000 ff6d 	bl	80016f0 <HAL_GPIO_WritePin>
	}
	if(GPIO_Pin == GPIO_PIN_4){
 8000816:	88fb      	ldrh	r3, [r7, #6]
 8000818:	2b10      	cmp	r3, #16
 800081a:	d111      	bne.n	8000840 <HAL_GPIO_EXTI_Callback+0x60>
		compare = 1;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <HAL_GPIO_EXTI_Callback+0x94>)
 800081e:	2201      	movs	r2, #1
 8000820:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2108      	movs	r1, #8
 8000826:	4814      	ldr	r0, [pc, #80]	; (8000878 <HAL_GPIO_EXTI_Callback+0x98>)
 8000828:	f000 ff62 	bl	80016f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_SET);
 800082c:	2201      	movs	r2, #1
 800082e:	2110      	movs	r1, #16
 8000830:	4811      	ldr	r0, [pc, #68]	; (8000878 <HAL_GPIO_EXTI_Callback+0x98>)
 8000832:	f000 ff5d 	bl	80016f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2120      	movs	r1, #32
 800083a:	480f      	ldr	r0, [pc, #60]	; (8000878 <HAL_GPIO_EXTI_Callback+0x98>)
 800083c:	f000 ff58 	bl	80016f0 <HAL_GPIO_WritePin>
	}
	if(GPIO_Pin == GPIO_PIN_5){
 8000840:	88fb      	ldrh	r3, [r7, #6]
 8000842:	2b20      	cmp	r3, #32
 8000844:	d111      	bne.n	800086a <HAL_GPIO_EXTI_Callback+0x8a>
		compare = 2;
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <HAL_GPIO_EXTI_Callback+0x94>)
 8000848:	2202      	movs	r2, #2
 800084a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2108      	movs	r1, #8
 8000850:	4809      	ldr	r0, [pc, #36]	; (8000878 <HAL_GPIO_EXTI_Callback+0x98>)
 8000852:	f000 ff4d 	bl	80016f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2110      	movs	r1, #16
 800085a:	4807      	ldr	r0, [pc, #28]	; (8000878 <HAL_GPIO_EXTI_Callback+0x98>)
 800085c:	f000 ff48 	bl	80016f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC,GPIO_PIN_5,GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	2120      	movs	r1, #32
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <HAL_GPIO_EXTI_Callback+0x98>)
 8000866:	f000 ff43 	bl	80016f0 <HAL_GPIO_WritePin>
	}
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200001a0 	.word	0x200001a0
 8000878:	40011000 	.word	0x40011000

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	e7fe      	b.n	8000884 <Error_Handler+0x8>
	...

08000888 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b480      	push	{r7}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <HAL_MspInit+0x5c>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	4a14      	ldr	r2, [pc, #80]	; (80008e4 <HAL_MspInit+0x5c>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6193      	str	r3, [r2, #24]
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_MspInit+0x5c>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <HAL_MspInit+0x5c>)
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <HAL_MspInit+0x5c>)
 80008ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b0:	61d3      	str	r3, [r2, #28]
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <HAL_MspInit+0x5c>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <HAL_MspInit+0x60>)
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <HAL_MspInit+0x60>)
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40010000 	.word	0x40010000

080008ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a09      	ldr	r2, [pc, #36]	; (8000920 <HAL_TIM_PWM_MspInit+0x34>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d10b      	bne.n	8000916 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <HAL_TIM_PWM_MspInit+0x38>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	4a08      	ldr	r2, [pc, #32]	; (8000924 <HAL_TIM_PWM_MspInit+0x38>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	61d3      	str	r3, [r2, #28]
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_TIM_PWM_MspInit+0x38>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	40000800 	.word	0x40000800
 8000924:	40021000 	.word	0x40021000

08000928 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a10      	ldr	r2, [pc, #64]	; (8000984 <HAL_TIM_MspPostInit+0x5c>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d118      	bne.n	800097a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <HAL_TIM_MspPostInit+0x60>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <HAL_TIM_MspPostInit+0x60>)
 800094e:	f043 0308 	orr.w	r3, r3, #8
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <HAL_TIM_MspPostInit+0x60>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0308 	and.w	r3, r3, #8
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000960:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000964:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2302      	movs	r3, #2
 800096c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096e:	f107 0310 	add.w	r3, r7, #16
 8000972:	4619      	mov	r1, r3
 8000974:	4805      	ldr	r0, [pc, #20]	; (800098c <HAL_TIM_MspPostInit+0x64>)
 8000976:	f000 fd37 	bl	80013e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800097a:	bf00      	nop
 800097c:	3720      	adds	r7, #32
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40000800 	.word	0x40000800
 8000988:	40021000 	.word	0x40021000
 800098c:	40010c00 	.word	0x40010c00

08000990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0318 	add.w	r3, r7, #24
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a45      	ldr	r2, [pc, #276]	; (8000ac0 <HAL_UART_MspInit+0x130>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d15a      	bne.n	8000a66 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009b0:	4b44      	ldr	r3, [pc, #272]	; (8000ac4 <HAL_UART_MspInit+0x134>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a43      	ldr	r2, [pc, #268]	; (8000ac4 <HAL_UART_MspInit+0x134>)
 80009b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ba:	6193      	str	r3, [r2, #24]
 80009bc:	4b41      	ldr	r3, [pc, #260]	; (8000ac4 <HAL_UART_MspInit+0x134>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c4:	617b      	str	r3, [r7, #20]
 80009c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c8:	4b3e      	ldr	r3, [pc, #248]	; (8000ac4 <HAL_UART_MspInit+0x134>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a3d      	ldr	r2, [pc, #244]	; (8000ac4 <HAL_UART_MspInit+0x134>)
 80009ce:	f043 0304 	orr.w	r3, r3, #4
 80009d2:	6193      	str	r3, [r2, #24]
 80009d4:	4b3b      	ldr	r3, [pc, #236]	; (8000ac4 <HAL_UART_MspInit+0x134>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f003 0304 	and.w	r3, r3, #4
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 0318 	add.w	r3, r7, #24
 80009f2:	4619      	mov	r1, r3
 80009f4:	4834      	ldr	r0, [pc, #208]	; (8000ac8 <HAL_UART_MspInit+0x138>)
 80009f6:	f000 fcf7 	bl	80013e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a08:	f107 0318 	add.w	r3, r7, #24
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	482e      	ldr	r0, [pc, #184]	; (8000ac8 <HAL_UART_MspInit+0x138>)
 8000a10:	f000 fcea 	bl	80013e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000a14:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <HAL_UART_MspInit+0x13c>)
 8000a16:	4a2e      	ldr	r2, [pc, #184]	; (8000ad0 <HAL_UART_MspInit+0x140>)
 8000a18:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a1a:	4b2c      	ldr	r3, [pc, #176]	; (8000acc <HAL_UART_MspInit+0x13c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a20:	4b2a      	ldr	r3, [pc, #168]	; (8000acc <HAL_UART_MspInit+0x13c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a26:	4b29      	ldr	r3, [pc, #164]	; (8000acc <HAL_UART_MspInit+0x13c>)
 8000a28:	2280      	movs	r2, #128	; 0x80
 8000a2a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a2c:	4b27      	ldr	r3, [pc, #156]	; (8000acc <HAL_UART_MspInit+0x13c>)
 8000a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a32:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a34:	4b25      	ldr	r3, [pc, #148]	; (8000acc <HAL_UART_MspInit+0x13c>)
 8000a36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a3a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000a3c:	4b23      	ldr	r3, [pc, #140]	; (8000acc <HAL_UART_MspInit+0x13c>)
 8000a3e:	2220      	movs	r2, #32
 8000a40:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a42:	4b22      	ldr	r3, [pc, #136]	; (8000acc <HAL_UART_MspInit+0x13c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a48:	4820      	ldr	r0, [pc, #128]	; (8000acc <HAL_UART_MspInit+0x13c>)
 8000a4a:	f000 fadf 	bl	800100c <HAL_DMA_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000a54:	f7ff ff12 	bl	800087c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a1c      	ldr	r2, [pc, #112]	; (8000acc <HAL_UART_MspInit+0x13c>)
 8000a5c:	639a      	str	r2, [r3, #56]	; 0x38
 8000a5e:	4a1b      	ldr	r2, [pc, #108]	; (8000acc <HAL_UART_MspInit+0x13c>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a64:	e028      	b.n	8000ab8 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART2)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a1a      	ldr	r2, [pc, #104]	; (8000ad4 <HAL_UART_MspInit+0x144>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d123      	bne.n	8000ab8 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <HAL_UART_MspInit+0x134>)
 8000a72:	69db      	ldr	r3, [r3, #28]
 8000a74:	4a13      	ldr	r2, [pc, #76]	; (8000ac4 <HAL_UART_MspInit+0x134>)
 8000a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7a:	61d3      	str	r3, [r2, #28]
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <HAL_UART_MspInit+0x134>)
 8000a7e:	69db      	ldr	r3, [r3, #28]
 8000a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a88:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <HAL_UART_MspInit+0x134>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ac4 <HAL_UART_MspInit+0x134>)
 8000a8e:	f043 0304 	orr.w	r3, r3, #4
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <HAL_UART_MspInit+0x134>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f003 0304 	and.w	r3, r3, #4
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aa0:	230c      	movs	r3, #12
 8000aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 0318 	add.w	r3, r7, #24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <HAL_UART_MspInit+0x138>)
 8000ab4:	f000 fc98 	bl	80013e8 <HAL_GPIO_Init>
}
 8000ab8:	bf00      	nop
 8000aba:	3728      	adds	r7, #40	; 0x28
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40013800 	.word	0x40013800
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	40010800 	.word	0x40010800
 8000acc:	2000015c 	.word	0x2000015c
 8000ad0:	40020058 	.word	0x40020058
 8000ad4:	40004400 	.word	0x40004400

08000ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <NMI_Handler+0x4>

08000ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <HardFault_Handler+0x4>

08000ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <MemManage_Handler+0x4>

08000aea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <BusFault_Handler+0x4>

08000af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <UsageFault_Handler+0x4>

08000af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr

08000b02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr

08000b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr

08000b1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b1e:	f000 f927 	bl	8000d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <DMA1_Channel5_IRQHandler+0x10>)
 8000b2e:	f000 fb27 	bl	8001180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	2000015c 	.word	0x2000015c

08000b3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b44:	f000 fdec 	bl	8001720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	e00a      	b.n	8000b74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b5e:	f3af 8000 	nop.w
 8000b62:	4601      	mov	r1, r0
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	60ba      	str	r2, [r7, #8]
 8000b6a:	b2ca      	uxtb	r2, r1
 8000b6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	3301      	adds	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697a      	ldr	r2, [r7, #20]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	dbf0      	blt.n	8000b5e <_read+0x12>
	}

return len;
 8000b7c:	687b      	ldr	r3, [r7, #4]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60f8      	str	r0, [r7, #12]
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	e009      	b.n	8000bac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	60ba      	str	r2, [r7, #8]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fe0b 	bl	80007bc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697a      	ldr	r2, [r7, #20]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	dbf1      	blt.n	8000b98 <_write+0x12>
	}
	return len;
 8000bb4:	687b      	ldr	r3, [r7, #4]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <_close>:

int _close(int file)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
	return -1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000be4:	605a      	str	r2, [r3, #4]
	return 0;
 8000be6:	2300      	movs	r3, #0
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr

08000bf2 <_isatty>:

int _isatty(int file)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
	return 1;
 8000bfa:	2301      	movs	r3, #1
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr

08000c06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b085      	sub	sp, #20
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	60f8      	str	r0, [r7, #12]
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
	return 0;
 8000c12:	2300      	movs	r3, #0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
	...

08000c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c28:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <_sbrk+0x5c>)
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <_sbrk+0x60>)
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <_sbrk+0x64>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <_sbrk+0x68>)
 8000c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d207      	bcs.n	8000c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c50:	f002 f918 	bl	8002e84 <__errno>
 8000c54:	4603      	mov	r3, r0
 8000c56:	220c      	movs	r2, #12
 8000c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5e:	e009      	b.n	8000c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <_sbrk+0x64>)
 8000c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c72:	68fb      	ldr	r3, [r7, #12]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20005000 	.word	0x20005000
 8000c80:	00000400 	.word	0x00000400
 8000c84:	2000403c 	.word	0x2000403c
 8000c88:	20004058 	.word	0x20004058

08000c8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c98:	480c      	ldr	r0, [pc, #48]	; (8000ccc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c9a:	490d      	ldr	r1, [pc, #52]	; (8000cd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	; (8000cd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cb0:	4c0a      	ldr	r4, [pc, #40]	; (8000cdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cbe:	f7ff ffe5 	bl	8000c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cc2:	f002 f8e5 	bl	8002e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cc6:	f7ff fa41 	bl	800014c <main>
  bx lr
 8000cca:	4770      	bx	lr
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cd4:	08004004 	.word	0x08004004
  ldr r2, =_sbss
 8000cd8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cdc:	20004054 	.word	0x20004054

08000ce0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC1_2_IRQHandler>
	...

08000ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_Init+0x28>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <HAL_Init+0x28>)
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f000 f947 	bl	8000f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f000 f808 	bl	8000d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d00:	f7ff fdc2 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40022000 	.word	0x40022000

08000d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_InitTick+0x54>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_InitTick+0x58>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f95f 	bl	8000ff2 <HAL_SYSTICK_Config>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00e      	b.n	8000d5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b0f      	cmp	r3, #15
 8000d42:	d80a      	bhi.n	8000d5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d44:	2200      	movs	r2, #0
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	f000 f927 	bl	8000f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d50:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <HAL_InitTick+0x5c>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e000      	b.n	8000d5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	20000004 	.word	0x20000004

08000d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <HAL_IncTick+0x1c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_IncTick+0x20>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a03      	ldr	r2, [pc, #12]	; (8000d90 <HAL_IncTick+0x20>)
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	20004040 	.word	0x20004040

08000d94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b02      	ldr	r3, [pc, #8]	; (8000da4 <HAL_GetTick+0x10>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	20004040 	.word	0x20004040

08000da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db0:	f7ff fff0 	bl	8000d94 <HAL_GetTick>
 8000db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc0:	d005      	beq.n	8000dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_Delay+0x44>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4413      	add	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dce:	bf00      	nop
 8000dd0:	f7ff ffe0 	bl	8000d94 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d8f7      	bhi.n	8000dd0 <HAL_Delay+0x28>
  {
  }
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008

08000df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e22:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	60d3      	str	r3, [r2, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <__NVIC_GetPriorityGrouping+0x18>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	f003 0307 	and.w	r3, r3, #7
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db0b      	blt.n	8000e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 021f 	and.w	r2, r3, #31
 8000e6c:	4906      	ldr	r1, [pc, #24]	; (8000e88 <__NVIC_EnableIRQ+0x34>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	095b      	lsrs	r3, r3, #5
 8000e74:	2001      	movs	r0, #1
 8000e76:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	e000e100 	.word	0xe000e100

08000e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	6039      	str	r1, [r7, #0]
 8000e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	db0a      	blt.n	8000eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	490c      	ldr	r1, [pc, #48]	; (8000ed8 <__NVIC_SetPriority+0x4c>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	0112      	lsls	r2, r2, #4
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	440b      	add	r3, r1
 8000eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb4:	e00a      	b.n	8000ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4908      	ldr	r1, [pc, #32]	; (8000edc <__NVIC_SetPriority+0x50>)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	f003 030f 	and.w	r3, r3, #15
 8000ec2:	3b04      	subs	r3, #4
 8000ec4:	0112      	lsls	r2, r2, #4
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	440b      	add	r3, r1
 8000eca:	761a      	strb	r2, [r3, #24]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000e100 	.word	0xe000e100
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f1c3 0307 	rsb	r3, r3, #7
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	bf28      	it	cs
 8000efe:	2304      	movcs	r3, #4
 8000f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3304      	adds	r3, #4
 8000f06:	2b06      	cmp	r3, #6
 8000f08:	d902      	bls.n	8000f10 <NVIC_EncodePriority+0x30>
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3b03      	subs	r3, #3
 8000f0e:	e000      	b.n	8000f12 <NVIC_EncodePriority+0x32>
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	f04f 32ff 	mov.w	r2, #4294967295
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	401a      	ands	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f28:	f04f 31ff 	mov.w	r1, #4294967295
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	43d9      	mvns	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	4313      	orrs	r3, r2
         );
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3724      	adds	r7, #36	; 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f54:	d301      	bcc.n	8000f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00f      	b.n	8000f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <SysTick_Config+0x40>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f62:	210f      	movs	r1, #15
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f7ff ff90 	bl	8000e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <SysTick_Config+0x40>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <SysTick_Config+0x40>)
 8000f74:	2207      	movs	r2, #7
 8000f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	e000e010 	.word	0xe000e010

08000f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff2d 	bl	8000df0 <__NVIC_SetPriorityGrouping>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb0:	f7ff ff42 	bl	8000e38 <__NVIC_GetPriorityGrouping>
 8000fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	68b9      	ldr	r1, [r7, #8]
 8000fba:	6978      	ldr	r0, [r7, #20]
 8000fbc:	f7ff ff90 	bl	8000ee0 <NVIC_EncodePriority>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff5f 	bl	8000e8c <__NVIC_SetPriority>
}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff35 	bl	8000e54 <__NVIC_EnableIRQ>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ffa2 	bl	8000f44 <SysTick_Config>
 8001000:	4603      	mov	r3, r0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e043      	b.n	80010aa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <HAL_DMA_Init+0xa8>)
 800102a:	4413      	add	r3, r2
 800102c:	4a22      	ldr	r2, [pc, #136]	; (80010b8 <HAL_DMA_Init+0xac>)
 800102e:	fba2 2303 	umull	r2, r3, r2, r3
 8001032:	091b      	lsrs	r3, r3, #4
 8001034:	009a      	lsls	r2, r3, #2
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a1f      	ldr	r2, [pc, #124]	; (80010bc <HAL_DMA_Init+0xb0>)
 800103e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2202      	movs	r2, #2
 8001044:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001056:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800105a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001064:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001070:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800107c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	4313      	orrs	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2201      	movs	r2, #1
 800109c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	bffdfff8 	.word	0xbffdfff8
 80010b8:	cccccccd 	.word	0xcccccccd
 80010bc:	40020000 	.word	0x40020000

080010c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d101      	bne.n	80010e0 <HAL_DMA_Start_IT+0x20>
 80010dc:	2302      	movs	r3, #2
 80010de:	e04a      	b.n	8001176 <HAL_DMA_Start_IT+0xb6>
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d13a      	bne.n	8001168 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2202      	movs	r2, #2
 80010f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2200      	movs	r2, #0
 80010fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0201 	bic.w	r2, r2, #1
 800110e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f000 f938 	bl	800138c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001120:	2b00      	cmp	r3, #0
 8001122:	d008      	beq.n	8001136 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 020e 	orr.w	r2, r2, #14
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	e00f      	b.n	8001156 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0204 	bic.w	r2, r2, #4
 8001144:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f042 020a 	orr.w	r2, r2, #10
 8001154:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f042 0201 	orr.w	r2, r2, #1
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	e005      	b.n	8001174 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001170:	2302      	movs	r3, #2
 8001172:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001174:	7dfb      	ldrb	r3, [r7, #23]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	2204      	movs	r2, #4
 800119e:	409a      	lsls	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4013      	ands	r3, r2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d04f      	beq.n	8001248 <HAL_DMA_IRQHandler+0xc8>
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d04a      	beq.n	8001248 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0320 	and.w	r3, r3, #32
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d107      	bne.n	80011d0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 0204 	bic.w	r2, r2, #4
 80011ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a66      	ldr	r2, [pc, #408]	; (8001370 <HAL_DMA_IRQHandler+0x1f0>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d029      	beq.n	800122e <HAL_DMA_IRQHandler+0xae>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a65      	ldr	r2, [pc, #404]	; (8001374 <HAL_DMA_IRQHandler+0x1f4>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d022      	beq.n	800122a <HAL_DMA_IRQHandler+0xaa>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a63      	ldr	r2, [pc, #396]	; (8001378 <HAL_DMA_IRQHandler+0x1f8>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d01a      	beq.n	8001224 <HAL_DMA_IRQHandler+0xa4>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a62      	ldr	r2, [pc, #392]	; (800137c <HAL_DMA_IRQHandler+0x1fc>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d012      	beq.n	800121e <HAL_DMA_IRQHandler+0x9e>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a60      	ldr	r2, [pc, #384]	; (8001380 <HAL_DMA_IRQHandler+0x200>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d00a      	beq.n	8001218 <HAL_DMA_IRQHandler+0x98>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a5f      	ldr	r2, [pc, #380]	; (8001384 <HAL_DMA_IRQHandler+0x204>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d102      	bne.n	8001212 <HAL_DMA_IRQHandler+0x92>
 800120c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001210:	e00e      	b.n	8001230 <HAL_DMA_IRQHandler+0xb0>
 8001212:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001216:	e00b      	b.n	8001230 <HAL_DMA_IRQHandler+0xb0>
 8001218:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800121c:	e008      	b.n	8001230 <HAL_DMA_IRQHandler+0xb0>
 800121e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001222:	e005      	b.n	8001230 <HAL_DMA_IRQHandler+0xb0>
 8001224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001228:	e002      	b.n	8001230 <HAL_DMA_IRQHandler+0xb0>
 800122a:	2340      	movs	r3, #64	; 0x40
 800122c:	e000      	b.n	8001230 <HAL_DMA_IRQHandler+0xb0>
 800122e:	2304      	movs	r3, #4
 8001230:	4a55      	ldr	r2, [pc, #340]	; (8001388 <HAL_DMA_IRQHandler+0x208>)
 8001232:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 8094 	beq.w	8001366 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001246:	e08e      	b.n	8001366 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124c:	2202      	movs	r2, #2
 800124e:	409a      	lsls	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4013      	ands	r3, r2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d056      	beq.n	8001306 <HAL_DMA_IRQHandler+0x186>
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d051      	beq.n	8001306 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0320 	and.w	r3, r3, #32
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10b      	bne.n	8001288 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 020a 	bic.w	r2, r2, #10
 800127e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a38      	ldr	r2, [pc, #224]	; (8001370 <HAL_DMA_IRQHandler+0x1f0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d029      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x166>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a37      	ldr	r2, [pc, #220]	; (8001374 <HAL_DMA_IRQHandler+0x1f4>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d022      	beq.n	80012e2 <HAL_DMA_IRQHandler+0x162>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a35      	ldr	r2, [pc, #212]	; (8001378 <HAL_DMA_IRQHandler+0x1f8>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d01a      	beq.n	80012dc <HAL_DMA_IRQHandler+0x15c>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a34      	ldr	r2, [pc, #208]	; (800137c <HAL_DMA_IRQHandler+0x1fc>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d012      	beq.n	80012d6 <HAL_DMA_IRQHandler+0x156>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a32      	ldr	r2, [pc, #200]	; (8001380 <HAL_DMA_IRQHandler+0x200>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d00a      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x150>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a31      	ldr	r2, [pc, #196]	; (8001384 <HAL_DMA_IRQHandler+0x204>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d102      	bne.n	80012ca <HAL_DMA_IRQHandler+0x14a>
 80012c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012c8:	e00e      	b.n	80012e8 <HAL_DMA_IRQHandler+0x168>
 80012ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012ce:	e00b      	b.n	80012e8 <HAL_DMA_IRQHandler+0x168>
 80012d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012d4:	e008      	b.n	80012e8 <HAL_DMA_IRQHandler+0x168>
 80012d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012da:	e005      	b.n	80012e8 <HAL_DMA_IRQHandler+0x168>
 80012dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012e0:	e002      	b.n	80012e8 <HAL_DMA_IRQHandler+0x168>
 80012e2:	2320      	movs	r3, #32
 80012e4:	e000      	b.n	80012e8 <HAL_DMA_IRQHandler+0x168>
 80012e6:	2302      	movs	r3, #2
 80012e8:	4a27      	ldr	r2, [pc, #156]	; (8001388 <HAL_DMA_IRQHandler+0x208>)
 80012ea:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d034      	beq.n	8001366 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001304:	e02f      	b.n	8001366 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	2208      	movs	r2, #8
 800130c:	409a      	lsls	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4013      	ands	r3, r2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d028      	beq.n	8001368 <HAL_DMA_IRQHandler+0x1e8>
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	f003 0308 	and.w	r3, r3, #8
 800131c:	2b00      	cmp	r3, #0
 800131e:	d023      	beq.n	8001368 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 020e 	bic.w	r2, r2, #14
 800132e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001338:	2101      	movs	r1, #1
 800133a:	fa01 f202 	lsl.w	r2, r1, r2
 800133e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	2b00      	cmp	r3, #0
 800135c:	d004      	beq.n	8001368 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	4798      	blx	r3
    }
  }
  return;
 8001366:	bf00      	nop
 8001368:	bf00      	nop
}
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40020008 	.word	0x40020008
 8001374:	4002001c 	.word	0x4002001c
 8001378:	40020030 	.word	0x40020030
 800137c:	40020044 	.word	0x40020044
 8001380:	40020058 	.word	0x40020058
 8001384:	4002006c 	.word	0x4002006c
 8001388:	40020000 	.word	0x40020000

0800138c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
 8001398:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a2:	2101      	movs	r1, #1
 80013a4:	fa01 f202 	lsl.w	r2, r1, r2
 80013a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b10      	cmp	r3, #16
 80013b8:	d108      	bne.n	80013cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013ca:	e007      	b.n	80013dc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	60da      	str	r2, [r3, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
	...

080013e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b08b      	sub	sp, #44	; 0x2c
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013f2:	2300      	movs	r3, #0
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013f6:	2300      	movs	r3, #0
 80013f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fa:	e169      	b.n	80016d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013fc:	2201      	movs	r2, #1
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	69fa      	ldr	r2, [r7, #28]
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	429a      	cmp	r2, r3
 8001416:	f040 8158 	bne.w	80016ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	4a9a      	ldr	r2, [pc, #616]	; (8001688 <HAL_GPIO_Init+0x2a0>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d05e      	beq.n	80014e2 <HAL_GPIO_Init+0xfa>
 8001424:	4a98      	ldr	r2, [pc, #608]	; (8001688 <HAL_GPIO_Init+0x2a0>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d875      	bhi.n	8001516 <HAL_GPIO_Init+0x12e>
 800142a:	4a98      	ldr	r2, [pc, #608]	; (800168c <HAL_GPIO_Init+0x2a4>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d058      	beq.n	80014e2 <HAL_GPIO_Init+0xfa>
 8001430:	4a96      	ldr	r2, [pc, #600]	; (800168c <HAL_GPIO_Init+0x2a4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d86f      	bhi.n	8001516 <HAL_GPIO_Init+0x12e>
 8001436:	4a96      	ldr	r2, [pc, #600]	; (8001690 <HAL_GPIO_Init+0x2a8>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d052      	beq.n	80014e2 <HAL_GPIO_Init+0xfa>
 800143c:	4a94      	ldr	r2, [pc, #592]	; (8001690 <HAL_GPIO_Init+0x2a8>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d869      	bhi.n	8001516 <HAL_GPIO_Init+0x12e>
 8001442:	4a94      	ldr	r2, [pc, #592]	; (8001694 <HAL_GPIO_Init+0x2ac>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d04c      	beq.n	80014e2 <HAL_GPIO_Init+0xfa>
 8001448:	4a92      	ldr	r2, [pc, #584]	; (8001694 <HAL_GPIO_Init+0x2ac>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d863      	bhi.n	8001516 <HAL_GPIO_Init+0x12e>
 800144e:	4a92      	ldr	r2, [pc, #584]	; (8001698 <HAL_GPIO_Init+0x2b0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d046      	beq.n	80014e2 <HAL_GPIO_Init+0xfa>
 8001454:	4a90      	ldr	r2, [pc, #576]	; (8001698 <HAL_GPIO_Init+0x2b0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d85d      	bhi.n	8001516 <HAL_GPIO_Init+0x12e>
 800145a:	2b12      	cmp	r3, #18
 800145c:	d82a      	bhi.n	80014b4 <HAL_GPIO_Init+0xcc>
 800145e:	2b12      	cmp	r3, #18
 8001460:	d859      	bhi.n	8001516 <HAL_GPIO_Init+0x12e>
 8001462:	a201      	add	r2, pc, #4	; (adr r2, 8001468 <HAL_GPIO_Init+0x80>)
 8001464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001468:	080014e3 	.word	0x080014e3
 800146c:	080014bd 	.word	0x080014bd
 8001470:	080014cf 	.word	0x080014cf
 8001474:	08001511 	.word	0x08001511
 8001478:	08001517 	.word	0x08001517
 800147c:	08001517 	.word	0x08001517
 8001480:	08001517 	.word	0x08001517
 8001484:	08001517 	.word	0x08001517
 8001488:	08001517 	.word	0x08001517
 800148c:	08001517 	.word	0x08001517
 8001490:	08001517 	.word	0x08001517
 8001494:	08001517 	.word	0x08001517
 8001498:	08001517 	.word	0x08001517
 800149c:	08001517 	.word	0x08001517
 80014a0:	08001517 	.word	0x08001517
 80014a4:	08001517 	.word	0x08001517
 80014a8:	08001517 	.word	0x08001517
 80014ac:	080014c5 	.word	0x080014c5
 80014b0:	080014d9 	.word	0x080014d9
 80014b4:	4a79      	ldr	r2, [pc, #484]	; (800169c <HAL_GPIO_Init+0x2b4>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d013      	beq.n	80014e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ba:	e02c      	b.n	8001516 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	623b      	str	r3, [r7, #32]
          break;
 80014c2:	e029      	b.n	8001518 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	3304      	adds	r3, #4
 80014ca:	623b      	str	r3, [r7, #32]
          break;
 80014cc:	e024      	b.n	8001518 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	3308      	adds	r3, #8
 80014d4:	623b      	str	r3, [r7, #32]
          break;
 80014d6:	e01f      	b.n	8001518 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	330c      	adds	r3, #12
 80014de:	623b      	str	r3, [r7, #32]
          break;
 80014e0:	e01a      	b.n	8001518 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d102      	bne.n	80014f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014ea:	2304      	movs	r3, #4
 80014ec:	623b      	str	r3, [r7, #32]
          break;
 80014ee:	e013      	b.n	8001518 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d105      	bne.n	8001504 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014f8:	2308      	movs	r3, #8
 80014fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	611a      	str	r2, [r3, #16]
          break;
 8001502:	e009      	b.n	8001518 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001504:	2308      	movs	r3, #8
 8001506:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	615a      	str	r2, [r3, #20]
          break;
 800150e:	e003      	b.n	8001518 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
          break;
 8001514:	e000      	b.n	8001518 <HAL_GPIO_Init+0x130>
          break;
 8001516:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	2bff      	cmp	r3, #255	; 0xff
 800151c:	d801      	bhi.n	8001522 <HAL_GPIO_Init+0x13a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	e001      	b.n	8001526 <HAL_GPIO_Init+0x13e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3304      	adds	r3, #4
 8001526:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	2bff      	cmp	r3, #255	; 0xff
 800152c:	d802      	bhi.n	8001534 <HAL_GPIO_Init+0x14c>
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	e002      	b.n	800153a <HAL_GPIO_Init+0x152>
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	3b08      	subs	r3, #8
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	210f      	movs	r1, #15
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	fa01 f303 	lsl.w	r3, r1, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	401a      	ands	r2, r3
 800154c:	6a39      	ldr	r1, [r7, #32]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	fa01 f303 	lsl.w	r3, r1, r3
 8001554:	431a      	orrs	r2, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 80b1 	beq.w	80016ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001568:	4b4d      	ldr	r3, [pc, #308]	; (80016a0 <HAL_GPIO_Init+0x2b8>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a4c      	ldr	r2, [pc, #304]	; (80016a0 <HAL_GPIO_Init+0x2b8>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <HAL_GPIO_Init+0x2b8>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001580:	4a48      	ldr	r2, [pc, #288]	; (80016a4 <HAL_GPIO_Init+0x2bc>)
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	089b      	lsrs	r3, r3, #2
 8001586:	3302      	adds	r3, #2
 8001588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	220f      	movs	r2, #15
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	4013      	ands	r3, r2
 80015a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a40      	ldr	r2, [pc, #256]	; (80016a8 <HAL_GPIO_Init+0x2c0>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d013      	beq.n	80015d4 <HAL_GPIO_Init+0x1ec>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a3f      	ldr	r2, [pc, #252]	; (80016ac <HAL_GPIO_Init+0x2c4>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d00d      	beq.n	80015d0 <HAL_GPIO_Init+0x1e8>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a3e      	ldr	r2, [pc, #248]	; (80016b0 <HAL_GPIO_Init+0x2c8>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d007      	beq.n	80015cc <HAL_GPIO_Init+0x1e4>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a3d      	ldr	r2, [pc, #244]	; (80016b4 <HAL_GPIO_Init+0x2cc>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d101      	bne.n	80015c8 <HAL_GPIO_Init+0x1e0>
 80015c4:	2303      	movs	r3, #3
 80015c6:	e006      	b.n	80015d6 <HAL_GPIO_Init+0x1ee>
 80015c8:	2304      	movs	r3, #4
 80015ca:	e004      	b.n	80015d6 <HAL_GPIO_Init+0x1ee>
 80015cc:	2302      	movs	r3, #2
 80015ce:	e002      	b.n	80015d6 <HAL_GPIO_Init+0x1ee>
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <HAL_GPIO_Init+0x1ee>
 80015d4:	2300      	movs	r3, #0
 80015d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d8:	f002 0203 	and.w	r2, r2, #3
 80015dc:	0092      	lsls	r2, r2, #2
 80015de:	4093      	lsls	r3, r2
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015e6:	492f      	ldr	r1, [pc, #188]	; (80016a4 <HAL_GPIO_Init+0x2bc>)
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	089b      	lsrs	r3, r3, #2
 80015ec:	3302      	adds	r3, #2
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d006      	beq.n	800160e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001600:	4b2d      	ldr	r3, [pc, #180]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	492c      	ldr	r1, [pc, #176]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	600b      	str	r3, [r1, #0]
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800160e:	4b2a      	ldr	r3, [pc, #168]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	43db      	mvns	r3, r3
 8001616:	4928      	ldr	r1, [pc, #160]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001618:	4013      	ands	r3, r2
 800161a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d006      	beq.n	8001636 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001628:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	4922      	ldr	r1, [pc, #136]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
 8001634:	e006      	b.n	8001644 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001636:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	43db      	mvns	r3, r3
 800163e:	491e      	ldr	r1, [pc, #120]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001640:	4013      	ands	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d006      	beq.n	800165e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001650:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	4918      	ldr	r1, [pc, #96]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	608b      	str	r3, [r1, #8]
 800165c:	e006      	b.n	800166c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800165e:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	43db      	mvns	r3, r3
 8001666:	4914      	ldr	r1, [pc, #80]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 8001668:	4013      	ands	r3, r2
 800166a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d021      	beq.n	80016bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	490e      	ldr	r1, [pc, #56]	; (80016b8 <HAL_GPIO_Init+0x2d0>)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	60cb      	str	r3, [r1, #12]
 8001684:	e021      	b.n	80016ca <HAL_GPIO_Init+0x2e2>
 8001686:	bf00      	nop
 8001688:	10320000 	.word	0x10320000
 800168c:	10310000 	.word	0x10310000
 8001690:	10220000 	.word	0x10220000
 8001694:	10210000 	.word	0x10210000
 8001698:	10120000 	.word	0x10120000
 800169c:	10110000 	.word	0x10110000
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40010000 	.word	0x40010000
 80016a8:	40010800 	.word	0x40010800
 80016ac:	40010c00 	.word	0x40010c00
 80016b0:	40011000 	.word	0x40011000
 80016b4:	40011400 	.word	0x40011400
 80016b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_GPIO_Init+0x304>)
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	4909      	ldr	r1, [pc, #36]	; (80016ec <HAL_GPIO_Init+0x304>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	3301      	adds	r3, #1
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	fa22 f303 	lsr.w	r3, r2, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f47f ae8e 	bne.w	80013fc <HAL_GPIO_Init+0x14>
  }
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	372c      	adds	r7, #44	; 0x2c
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	40010400 	.word	0x40010400

080016f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	807b      	strh	r3, [r7, #2]
 80016fc:	4613      	mov	r3, r2
 80016fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001700:	787b      	ldrb	r3, [r7, #1]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001706:	887a      	ldrh	r2, [r7, #2]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800170c:	e003      	b.n	8001716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800170e:	887b      	ldrh	r3, [r7, #2]
 8001710:	041a      	lsls	r2, r3, #16
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	611a      	str	r2, [r3, #16]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800172c:	695a      	ldr	r2, [r3, #20]
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	4013      	ands	r3, r2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d006      	beq.n	8001744 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001736:	4a05      	ldr	r2, [pc, #20]	; (800174c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff f84e 	bl	80007e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40010400 	.word	0x40010400

08001750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e272      	b.n	8001c48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 8087 	beq.w	800187e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001770:	4b92      	ldr	r3, [pc, #584]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b04      	cmp	r3, #4
 800177a:	d00c      	beq.n	8001796 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800177c:	4b8f      	ldr	r3, [pc, #572]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 030c 	and.w	r3, r3, #12
 8001784:	2b08      	cmp	r3, #8
 8001786:	d112      	bne.n	80017ae <HAL_RCC_OscConfig+0x5e>
 8001788:	4b8c      	ldr	r3, [pc, #560]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001794:	d10b      	bne.n	80017ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001796:	4b89      	ldr	r3, [pc, #548]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d06c      	beq.n	800187c <HAL_RCC_OscConfig+0x12c>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d168      	bne.n	800187c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e24c      	b.n	8001c48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b6:	d106      	bne.n	80017c6 <HAL_RCC_OscConfig+0x76>
 80017b8:	4b80      	ldr	r3, [pc, #512]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a7f      	ldr	r2, [pc, #508]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 80017be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	e02e      	b.n	8001824 <HAL_RCC_OscConfig+0xd4>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x98>
 80017ce:	4b7b      	ldr	r3, [pc, #492]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a7a      	ldr	r2, [pc, #488]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 80017d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	4b78      	ldr	r3, [pc, #480]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a77      	ldr	r2, [pc, #476]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 80017e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	e01d      	b.n	8001824 <HAL_RCC_OscConfig+0xd4>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017f0:	d10c      	bne.n	800180c <HAL_RCC_OscConfig+0xbc>
 80017f2:	4b72      	ldr	r3, [pc, #456]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a71      	ldr	r2, [pc, #452]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 80017f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	4b6f      	ldr	r3, [pc, #444]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a6e      	ldr	r2, [pc, #440]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	e00b      	b.n	8001824 <HAL_RCC_OscConfig+0xd4>
 800180c:	4b6b      	ldr	r3, [pc, #428]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a6a      	ldr	r2, [pc, #424]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b68      	ldr	r3, [pc, #416]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a67      	ldr	r2, [pc, #412]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 800181e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001822:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d013      	beq.n	8001854 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff fab2 	bl	8000d94 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001834:	f7ff faae 	bl	8000d94 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b64      	cmp	r3, #100	; 0x64
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e200      	b.n	8001c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	4b5d      	ldr	r3, [pc, #372]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0xe4>
 8001852:	e014      	b.n	800187e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001854:	f7ff fa9e 	bl	8000d94 <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800185c:	f7ff fa9a 	bl	8000d94 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b64      	cmp	r3, #100	; 0x64
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e1ec      	b.n	8001c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186e:	4b53      	ldr	r3, [pc, #332]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x10c>
 800187a:	e000      	b.n	800187e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800187c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d063      	beq.n	8001952 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800188a:	4b4c      	ldr	r3, [pc, #304]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 030c 	and.w	r3, r3, #12
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00b      	beq.n	80018ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001896:	4b49      	ldr	r3, [pc, #292]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d11c      	bne.n	80018dc <HAL_RCC_OscConfig+0x18c>
 80018a2:	4b46      	ldr	r3, [pc, #280]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d116      	bne.n	80018dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ae:	4b43      	ldr	r3, [pc, #268]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d005      	beq.n	80018c6 <HAL_RCC_OscConfig+0x176>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d001      	beq.n	80018c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e1c0      	b.n	8001c48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c6:	4b3d      	ldr	r3, [pc, #244]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4939      	ldr	r1, [pc, #228]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018da:	e03a      	b.n	8001952 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d020      	beq.n	8001926 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e4:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ea:	f7ff fa53 	bl	8000d94 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f2:	f7ff fa4f 	bl	8000d94 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e1a1      	b.n	8001c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001904:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001910:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	4927      	ldr	r1, [pc, #156]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001920:	4313      	orrs	r3, r2
 8001922:	600b      	str	r3, [r1, #0]
 8001924:	e015      	b.n	8001952 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001926:	4b26      	ldr	r3, [pc, #152]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff fa32 	bl	8000d94 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001934:	f7ff fa2e 	bl	8000d94 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e180      	b.n	8001c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001946:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d03a      	beq.n	80019d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d019      	beq.n	800199a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001966:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <HAL_RCC_OscConfig+0x274>)
 8001968:	2201      	movs	r2, #1
 800196a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196c:	f7ff fa12 	bl	8000d94 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001974:	f7ff fa0e 	bl	8000d94 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e160      	b.n	8001c48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001986:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001992:	2001      	movs	r0, #1
 8001994:	f000 fad8 	bl	8001f48 <RCC_Delay>
 8001998:	e01c      	b.n	80019d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_RCC_OscConfig+0x274>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a0:	f7ff f9f8 	bl	8000d94 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a6:	e00f      	b.n	80019c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a8:	f7ff f9f4 	bl	8000d94 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d908      	bls.n	80019c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e146      	b.n	8001c48 <HAL_RCC_OscConfig+0x4f8>
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000
 80019c0:	42420000 	.word	0x42420000
 80019c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c8:	4b92      	ldr	r3, [pc, #584]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1e9      	bne.n	80019a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 80a6 	beq.w	8001b2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019e2:	2300      	movs	r3, #0
 80019e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e6:	4b8b      	ldr	r3, [pc, #556]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10d      	bne.n	8001a0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	4b88      	ldr	r3, [pc, #544]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	4a87      	ldr	r2, [pc, #540]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fc:	61d3      	str	r3, [r2, #28]
 80019fe:	4b85      	ldr	r3, [pc, #532]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0e:	4b82      	ldr	r3, [pc, #520]	; (8001c18 <HAL_RCC_OscConfig+0x4c8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d118      	bne.n	8001a4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a1a:	4b7f      	ldr	r3, [pc, #508]	; (8001c18 <HAL_RCC_OscConfig+0x4c8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a7e      	ldr	r2, [pc, #504]	; (8001c18 <HAL_RCC_OscConfig+0x4c8>)
 8001a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a26:	f7ff f9b5 	bl	8000d94 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a2e:	f7ff f9b1 	bl	8000d94 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b64      	cmp	r3, #100	; 0x64
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e103      	b.n	8001c48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a40:	4b75      	ldr	r3, [pc, #468]	; (8001c18 <HAL_RCC_OscConfig+0x4c8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d106      	bne.n	8001a62 <HAL_RCC_OscConfig+0x312>
 8001a54:	4b6f      	ldr	r3, [pc, #444]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	4a6e      	ldr	r2, [pc, #440]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	6213      	str	r3, [r2, #32]
 8001a60:	e02d      	b.n	8001abe <HAL_RCC_OscConfig+0x36e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10c      	bne.n	8001a84 <HAL_RCC_OscConfig+0x334>
 8001a6a:	4b6a      	ldr	r3, [pc, #424]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	4a69      	ldr	r2, [pc, #420]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	f023 0301 	bic.w	r3, r3, #1
 8001a74:	6213      	str	r3, [r2, #32]
 8001a76:	4b67      	ldr	r3, [pc, #412]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	4a66      	ldr	r2, [pc, #408]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001a7c:	f023 0304 	bic.w	r3, r3, #4
 8001a80:	6213      	str	r3, [r2, #32]
 8001a82:	e01c      	b.n	8001abe <HAL_RCC_OscConfig+0x36e>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	2b05      	cmp	r3, #5
 8001a8a:	d10c      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x356>
 8001a8c:	4b61      	ldr	r3, [pc, #388]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	4a60      	ldr	r2, [pc, #384]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	f043 0304 	orr.w	r3, r3, #4
 8001a96:	6213      	str	r3, [r2, #32]
 8001a98:	4b5e      	ldr	r3, [pc, #376]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	4a5d      	ldr	r2, [pc, #372]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6213      	str	r3, [r2, #32]
 8001aa4:	e00b      	b.n	8001abe <HAL_RCC_OscConfig+0x36e>
 8001aa6:	4b5b      	ldr	r3, [pc, #364]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	4a5a      	ldr	r2, [pc, #360]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	6213      	str	r3, [r2, #32]
 8001ab2:	4b58      	ldr	r3, [pc, #352]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	4a57      	ldr	r2, [pc, #348]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001ab8:	f023 0304 	bic.w	r3, r3, #4
 8001abc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d015      	beq.n	8001af2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff f965 	bl	8000d94 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001acc:	e00a      	b.n	8001ae4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ace:	f7ff f961 	bl	8000d94 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e0b1      	b.n	8001c48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae4:	4b4b      	ldr	r3, [pc, #300]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0ee      	beq.n	8001ace <HAL_RCC_OscConfig+0x37e>
 8001af0:	e014      	b.n	8001b1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af2:	f7ff f94f 	bl	8000d94 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af8:	e00a      	b.n	8001b10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001afa:	f7ff f94b 	bl	8000d94 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e09b      	b.n	8001c48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b10:	4b40      	ldr	r3, [pc, #256]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1ee      	bne.n	8001afa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b1c:	7dfb      	ldrb	r3, [r7, #23]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d105      	bne.n	8001b2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b22:	4b3c      	ldr	r3, [pc, #240]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	4a3b      	ldr	r2, [pc, #236]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 8087 	beq.w	8001c46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b38:	4b36      	ldr	r3, [pc, #216]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 030c 	and.w	r3, r3, #12
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d061      	beq.n	8001c08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d146      	bne.n	8001bda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4c:	4b33      	ldr	r3, [pc, #204]	; (8001c1c <HAL_RCC_OscConfig+0x4cc>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b52:	f7ff f91f 	bl	8000d94 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5a:	f7ff f91b 	bl	8000d94 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e06d      	b.n	8001c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6c:	4b29      	ldr	r3, [pc, #164]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1f0      	bne.n	8001b5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b80:	d108      	bne.n	8001b94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b82:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	4921      	ldr	r1, [pc, #132]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b94:	4b1f      	ldr	r3, [pc, #124]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a19      	ldr	r1, [r3, #32]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	491b      	ldr	r1, [pc, #108]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bac:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <HAL_RCC_OscConfig+0x4cc>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb2:	f7ff f8ef 	bl	8000d94 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bba:	f7ff f8eb 	bl	8000d94 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e03d      	b.n	8001c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x46a>
 8001bd8:	e035      	b.n	8001c46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bda:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <HAL_RCC_OscConfig+0x4cc>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff f8d8 	bl	8000d94 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be8:	f7ff f8d4 	bl	8000d94 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e026      	b.n	8001c48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_RCC_OscConfig+0x4c4>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x498>
 8001c06:	e01e      	b.n	8001c46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d107      	bne.n	8001c20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e019      	b.n	8001c48 <HAL_RCC_OscConfig+0x4f8>
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40007000 	.word	0x40007000
 8001c1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <HAL_RCC_OscConfig+0x500>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d106      	bne.n	8001c42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d001      	beq.n	8001c46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40021000 	.word	0x40021000

08001c54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e0d0      	b.n	8001e0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c68:	4b6a      	ldr	r3, [pc, #424]	; (8001e14 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d910      	bls.n	8001c98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c76:	4b67      	ldr	r3, [pc, #412]	; (8001e14 <HAL_RCC_ClockConfig+0x1c0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f023 0207 	bic.w	r2, r3, #7
 8001c7e:	4965      	ldr	r1, [pc, #404]	; (8001e14 <HAL_RCC_ClockConfig+0x1c0>)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c86:	4b63      	ldr	r3, [pc, #396]	; (8001e14 <HAL_RCC_ClockConfig+0x1c0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d001      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0b8      	b.n	8001e0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d020      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cb0:	4b59      	ldr	r3, [pc, #356]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4a58      	ldr	r2, [pc, #352]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cc8:	4b53      	ldr	r3, [pc, #332]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	4a52      	ldr	r2, [pc, #328]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001cce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cd2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd4:	4b50      	ldr	r3, [pc, #320]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	494d      	ldr	r1, [pc, #308]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d040      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d107      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfa:	4b47      	ldr	r3, [pc, #284]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d115      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e07f      	b.n	8001e0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d107      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d12:	4b41      	ldr	r3, [pc, #260]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e073      	b.n	8001e0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d22:	4b3d      	ldr	r3, [pc, #244]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e06b      	b.n	8001e0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d32:	4b39      	ldr	r3, [pc, #228]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f023 0203 	bic.w	r2, r3, #3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	4936      	ldr	r1, [pc, #216]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d44:	f7ff f826 	bl	8000d94 <HAL_GetTick>
 8001d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	e00a      	b.n	8001d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d4c:	f7ff f822 	bl	8000d94 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e053      	b.n	8001e0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d62:	4b2d      	ldr	r3, [pc, #180]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 020c 	and.w	r2, r3, #12
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d1eb      	bne.n	8001d4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d74:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <HAL_RCC_ClockConfig+0x1c0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d210      	bcs.n	8001da4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d82:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <HAL_RCC_ClockConfig+0x1c0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f023 0207 	bic.w	r2, r3, #7
 8001d8a:	4922      	ldr	r1, [pc, #136]	; (8001e14 <HAL_RCC_ClockConfig+0x1c0>)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d92:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <HAL_RCC_ClockConfig+0x1c0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d001      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e032      	b.n	8001e0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d008      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001db0:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	4916      	ldr	r1, [pc, #88]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d009      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dce:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	490e      	ldr	r1, [pc, #56]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001de2:	f000 f821 	bl	8001e28 <HAL_RCC_GetSysClockFreq>
 8001de6:	4602      	mov	r2, r0
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	091b      	lsrs	r3, r3, #4
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	490a      	ldr	r1, [pc, #40]	; (8001e1c <HAL_RCC_ClockConfig+0x1c8>)
 8001df4:	5ccb      	ldrb	r3, [r1, r3]
 8001df6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfa:	4a09      	ldr	r2, [pc, #36]	; (8001e20 <HAL_RCC_ClockConfig+0x1cc>)
 8001dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <HAL_RCC_ClockConfig+0x1d0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe ff84 	bl	8000d10 <HAL_InitTick>

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40022000 	.word	0x40022000
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	08003f4c 	.word	0x08003f4c
 8001e20:	20000000 	.word	0x20000000
 8001e24:	20000004 	.word	0x20000004

08001e28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e28:	b490      	push	{r4, r7}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001e2e:	4b29      	ldr	r3, [pc, #164]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001e30:	1d3c      	adds	r4, r7, #4
 8001e32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001e38:	f240 2301 	movw	r3, #513	; 0x201
 8001e3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
 8001e46:	2300      	movs	r3, #0
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e52:	4b21      	ldr	r3, [pc, #132]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d002      	beq.n	8001e68 <HAL_RCC_GetSysClockFreq+0x40>
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d003      	beq.n	8001e6e <HAL_RCC_GetSysClockFreq+0x46>
 8001e66:	e02b      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e68:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e6a:	623b      	str	r3, [r7, #32]
      break;
 8001e6c:	e02b      	b.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	0c9b      	lsrs	r3, r3, #18
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	3328      	adds	r3, #40	; 0x28
 8001e78:	443b      	add	r3, r7
 8001e7a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e7e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d012      	beq.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e8a:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	0c5b      	lsrs	r3, r3, #17
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	3328      	adds	r3, #40	; 0x28
 8001e96:	443b      	add	r3, r7
 8001e98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ea2:	fb03 f202 	mul.w	r2, r3, r2
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
 8001eae:	e004      	b.n	8001eba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	4a0b      	ldr	r2, [pc, #44]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eb4:	fb02 f303 	mul.w	r3, r2, r3
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	623b      	str	r3, [r7, #32]
      break;
 8001ebe:	e002      	b.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ec2:	623b      	str	r3, [r7, #32]
      break;
 8001ec4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3728      	adds	r7, #40	; 0x28
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc90      	pop	{r4, r7}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	08003f3c 	.word	0x08003f3c
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	007a1200 	.word	0x007a1200
 8001ee0:	003d0900 	.word	0x003d0900

08001ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee8:	4b02      	ldr	r3, [pc, #8]	; (8001ef4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr
 8001ef4:	20000000 	.word	0x20000000

08001ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001efc:	f7ff fff2 	bl	8001ee4 <HAL_RCC_GetHCLKFreq>
 8001f00:	4602      	mov	r2, r0
 8001f02:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	0a1b      	lsrs	r3, r3, #8
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	4903      	ldr	r1, [pc, #12]	; (8001f1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f0e:	5ccb      	ldrb	r3, [r1, r3]
 8001f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	08003f5c 	.word	0x08003f5c

08001f20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f24:	f7ff ffde 	bl	8001ee4 <HAL_RCC_GetHCLKFreq>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	0adb      	lsrs	r3, r3, #11
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	4903      	ldr	r1, [pc, #12]	; (8001f44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f36:	5ccb      	ldrb	r3, [r1, r3]
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	08003f5c 	.word	0x08003f5c

08001f48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f50:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <RCC_Delay+0x34>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <RCC_Delay+0x38>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	0a5b      	lsrs	r3, r3, #9
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	fb02 f303 	mul.w	r3, r2, r3
 8001f62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f64:	bf00      	nop
  }
  while (Delay --);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1e5a      	subs	r2, r3, #1
 8001f6a:	60fa      	str	r2, [r7, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1f9      	bne.n	8001f64 <RCC_Delay+0x1c>
}
 8001f70:	bf00      	nop
 8001f72:	bf00      	nop
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	10624dd3 	.word	0x10624dd3

08001f84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e041      	b.n	800201a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d106      	bne.n	8001fb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7fe fc9e 	bl	80008ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	f000 f98e 	bl	80022e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d109      	bne.n	8002048 <HAL_TIM_PWM_Start+0x24>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b01      	cmp	r3, #1
 800203e:	bf14      	ite	ne
 8002040:	2301      	movne	r3, #1
 8002042:	2300      	moveq	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	e022      	b.n	800208e <HAL_TIM_PWM_Start+0x6a>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	2b04      	cmp	r3, #4
 800204c:	d109      	bne.n	8002062 <HAL_TIM_PWM_Start+0x3e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b01      	cmp	r3, #1
 8002058:	bf14      	ite	ne
 800205a:	2301      	movne	r3, #1
 800205c:	2300      	moveq	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	e015      	b.n	800208e <HAL_TIM_PWM_Start+0x6a>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	2b08      	cmp	r3, #8
 8002066:	d109      	bne.n	800207c <HAL_TIM_PWM_Start+0x58>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b01      	cmp	r3, #1
 8002072:	bf14      	ite	ne
 8002074:	2301      	movne	r3, #1
 8002076:	2300      	moveq	r3, #0
 8002078:	b2db      	uxtb	r3, r3
 800207a:	e008      	b.n	800208e <HAL_TIM_PWM_Start+0x6a>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b01      	cmp	r3, #1
 8002086:	bf14      	ite	ne
 8002088:	2301      	movne	r3, #1
 800208a:	2300      	moveq	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e05e      	b.n	8002154 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d104      	bne.n	80020a6 <HAL_TIM_PWM_Start+0x82>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2202      	movs	r2, #2
 80020a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020a4:	e013      	b.n	80020ce <HAL_TIM_PWM_Start+0xaa>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d104      	bne.n	80020b6 <HAL_TIM_PWM_Start+0x92>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020b4:	e00b      	b.n	80020ce <HAL_TIM_PWM_Start+0xaa>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d104      	bne.n	80020c6 <HAL_TIM_PWM_Start+0xa2>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020c4:	e003      	b.n	80020ce <HAL_TIM_PWM_Start+0xaa>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2202      	movs	r2, #2
 80020ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2201      	movs	r2, #1
 80020d4:	6839      	ldr	r1, [r7, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 faee 	bl	80026b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a1e      	ldr	r2, [pc, #120]	; (800215c <HAL_TIM_PWM_Start+0x138>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d107      	bne.n	80020f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a18      	ldr	r2, [pc, #96]	; (800215c <HAL_TIM_PWM_Start+0x138>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d00e      	beq.n	800211e <HAL_TIM_PWM_Start+0xfa>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002108:	d009      	beq.n	800211e <HAL_TIM_PWM_Start+0xfa>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a14      	ldr	r2, [pc, #80]	; (8002160 <HAL_TIM_PWM_Start+0x13c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d004      	beq.n	800211e <HAL_TIM_PWM_Start+0xfa>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a12      	ldr	r2, [pc, #72]	; (8002164 <HAL_TIM_PWM_Start+0x140>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d111      	bne.n	8002142 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b06      	cmp	r3, #6
 800212e:	d010      	beq.n	8002152 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002140:	e007      	b.n	8002152 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f042 0201 	orr.w	r2, r2, #1
 8002150:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40012c00 	.word	0x40012c00
 8002160:	40000400 	.word	0x40000400
 8002164:	40000800 	.word	0x40000800

08002168 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800217e:	2302      	movs	r3, #2
 8002180:	e0ac      	b.n	80022dc <HAL_TIM_PWM_ConfigChannel+0x174>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b0c      	cmp	r3, #12
 800218e:	f200 809f 	bhi.w	80022d0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002192:	a201      	add	r2, pc, #4	; (adr r2, 8002198 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002198:	080021cd 	.word	0x080021cd
 800219c:	080022d1 	.word	0x080022d1
 80021a0:	080022d1 	.word	0x080022d1
 80021a4:	080022d1 	.word	0x080022d1
 80021a8:	0800220d 	.word	0x0800220d
 80021ac:	080022d1 	.word	0x080022d1
 80021b0:	080022d1 	.word	0x080022d1
 80021b4:	080022d1 	.word	0x080022d1
 80021b8:	0800224f 	.word	0x0800224f
 80021bc:	080022d1 	.word	0x080022d1
 80021c0:	080022d1 	.word	0x080022d1
 80021c4:	080022d1 	.word	0x080022d1
 80021c8:	0800228f 	.word	0x0800228f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68b9      	ldr	r1, [r7, #8]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 f8e8 	bl	80023a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699a      	ldr	r2, [r3, #24]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0208 	orr.w	r2, r2, #8
 80021e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	699a      	ldr	r2, [r3, #24]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0204 	bic.w	r2, r2, #4
 80021f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6999      	ldr	r1, [r3, #24]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	691a      	ldr	r2, [r3, #16]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	619a      	str	r2, [r3, #24]
      break;
 800220a:	e062      	b.n	80022d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68b9      	ldr	r1, [r7, #8]
 8002212:	4618      	mov	r0, r3
 8002214:	f000 f92e 	bl	8002474 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699a      	ldr	r2, [r3, #24]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6999      	ldr	r1, [r3, #24]
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	021a      	lsls	r2, r3, #8
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	619a      	str	r2, [r3, #24]
      break;
 800224c:	e041      	b.n	80022d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68b9      	ldr	r1, [r7, #8]
 8002254:	4618      	mov	r0, r3
 8002256:	f000 f977 	bl	8002548 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	69da      	ldr	r2, [r3, #28]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f042 0208 	orr.w	r2, r2, #8
 8002268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	69da      	ldr	r2, [r3, #28]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0204 	bic.w	r2, r2, #4
 8002278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	69d9      	ldr	r1, [r3, #28]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	61da      	str	r2, [r3, #28]
      break;
 800228c:	e021      	b.n	80022d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68b9      	ldr	r1, [r7, #8]
 8002294:	4618      	mov	r0, r3
 8002296:	f000 f9c1 	bl	800261c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	69da      	ldr	r2, [r3, #28]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	69da      	ldr	r2, [r3, #28]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	69d9      	ldr	r1, [r3, #28]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	021a      	lsls	r2, r3, #8
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	61da      	str	r2, [r3, #28]
      break;
 80022ce:	e000      	b.n	80022d2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80022d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a29      	ldr	r2, [pc, #164]	; (800239c <TIM_Base_SetConfig+0xb8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d00b      	beq.n	8002314 <TIM_Base_SetConfig+0x30>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002302:	d007      	beq.n	8002314 <TIM_Base_SetConfig+0x30>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a26      	ldr	r2, [pc, #152]	; (80023a0 <TIM_Base_SetConfig+0xbc>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d003      	beq.n	8002314 <TIM_Base_SetConfig+0x30>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a25      	ldr	r2, [pc, #148]	; (80023a4 <TIM_Base_SetConfig+0xc0>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d108      	bne.n	8002326 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800231a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4313      	orrs	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a1c      	ldr	r2, [pc, #112]	; (800239c <TIM_Base_SetConfig+0xb8>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d00b      	beq.n	8002346 <TIM_Base_SetConfig+0x62>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002334:	d007      	beq.n	8002346 <TIM_Base_SetConfig+0x62>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a19      	ldr	r2, [pc, #100]	; (80023a0 <TIM_Base_SetConfig+0xbc>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d003      	beq.n	8002346 <TIM_Base_SetConfig+0x62>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <TIM_Base_SetConfig+0xc0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d108      	bne.n	8002358 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800234c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	4313      	orrs	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	4313      	orrs	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a07      	ldr	r2, [pc, #28]	; (800239c <TIM_Base_SetConfig+0xb8>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d103      	bne.n	800238c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	691a      	ldr	r2, [r3, #16]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	615a      	str	r2, [r3, #20]
}
 8002392:	bf00      	nop
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	40012c00 	.word	0x40012c00
 80023a0:	40000400 	.word	0x40000400
 80023a4:	40000800 	.word	0x40000800

080023a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	f023 0201 	bic.w	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f023 0303 	bic.w	r3, r3, #3
 80023de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f023 0302 	bic.w	r3, r3, #2
 80023f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a1c      	ldr	r2, [pc, #112]	; (8002470 <TIM_OC1_SetConfig+0xc8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d10c      	bne.n	800241e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f023 0308 	bic.w	r3, r3, #8
 800240a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	4313      	orrs	r3, r2
 8002414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f023 0304 	bic.w	r3, r3, #4
 800241c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a13      	ldr	r2, [pc, #76]	; (8002470 <TIM_OC1_SetConfig+0xc8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d111      	bne.n	800244a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800242c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	621a      	str	r2, [r3, #32]
}
 8002464:	bf00      	nop
 8002466:	371c      	adds	r7, #28
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40012c00 	.word	0x40012c00

08002474 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002474:	b480      	push	{r7}
 8002476:	b087      	sub	sp, #28
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	f023 0210 	bic.w	r2, r3, #16
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	021b      	lsls	r3, r3, #8
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f023 0320 	bic.w	r3, r3, #32
 80024be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a1d      	ldr	r2, [pc, #116]	; (8002544 <TIM_OC2_SetConfig+0xd0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d10d      	bne.n	80024f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a14      	ldr	r2, [pc, #80]	; (8002544 <TIM_OC2_SetConfig+0xd0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d113      	bne.n	8002520 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002506:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	621a      	str	r2, [r3, #32]
}
 800253a:	bf00      	nop
 800253c:	371c      	adds	r7, #28
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr
 8002544:	40012c00 	.word	0x40012c00

08002548 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 0303 	bic.w	r3, r3, #3
 800257e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	4313      	orrs	r3, r2
 800259c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a1d      	ldr	r2, [pc, #116]	; (8002618 <TIM_OC3_SetConfig+0xd0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d10d      	bne.n	80025c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a14      	ldr	r2, [pc, #80]	; (8002618 <TIM_OC3_SetConfig+0xd0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d113      	bne.n	80025f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	621a      	str	r2, [r3, #32]
}
 800260c:	bf00      	nop
 800260e:	371c      	adds	r7, #28
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40012c00 	.word	0x40012c00

0800261c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800261c:	b480      	push	{r7}
 800261e:	b087      	sub	sp, #28
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800264a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	021b      	lsls	r3, r3, #8
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4313      	orrs	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002666:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	031b      	lsls	r3, r3, #12
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	4313      	orrs	r3, r2
 8002672:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a0f      	ldr	r2, [pc, #60]	; (80026b4 <TIM_OC4_SetConfig+0x98>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d109      	bne.n	8002690 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002682:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	019b      	lsls	r3, r3, #6
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	4313      	orrs	r3, r2
 800268e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	621a      	str	r2, [r3, #32]
}
 80026aa:	bf00      	nop
 80026ac:	371c      	adds	r7, #28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr
 80026b4:	40012c00 	.word	0x40012c00

080026b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	2201      	movs	r2, #1
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a1a      	ldr	r2, [r3, #32]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	43db      	mvns	r3, r3
 80026da:	401a      	ands	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a1a      	ldr	r2, [r3, #32]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f003 031f 	and.w	r3, r3, #31
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	fa01 f303 	lsl.w	r3, r1, r3
 80026f0:	431a      	orrs	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	621a      	str	r2, [r3, #32]
}
 80026f6:	bf00      	nop
 80026f8:	371c      	adds	r7, #28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002714:	2302      	movs	r3, #2
 8002716:	e046      	b.n	80027a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a16      	ldr	r2, [pc, #88]	; (80027b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d00e      	beq.n	800277a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002764:	d009      	beq.n	800277a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d004      	beq.n	800277a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a10      	ldr	r2, [pc, #64]	; (80027b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d10c      	bne.n	8002794 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002780:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	4313      	orrs	r3, r2
 800278a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	40012c00 	.word	0x40012c00
 80027b4:	40000400 	.word	0x40000400
 80027b8:	40000800 	.word	0x40000800

080027bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e03f      	b.n	800284e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d106      	bne.n	80027e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7fe f8d4 	bl	8000990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2224      	movs	r2, #36	; 0x24
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 fab1 	bl	8002d68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002814:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002824:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002834:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2220      	movs	r2, #32
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b08a      	sub	sp, #40	; 0x28
 800285a:	af02      	add	r7, sp, #8
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	603b      	str	r3, [r7, #0]
 8002862:	4613      	mov	r3, r2
 8002864:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b20      	cmp	r3, #32
 8002874:	d17c      	bne.n	8002970 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <HAL_UART_Transmit+0x2c>
 800287c:	88fb      	ldrh	r3, [r7, #6]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e075      	b.n	8002972 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_UART_Transmit+0x3e>
 8002890:	2302      	movs	r3, #2
 8002892:	e06e      	b.n	8002972 <HAL_UART_Transmit+0x11c>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2221      	movs	r2, #33	; 0x21
 80028a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028aa:	f7fe fa73 	bl	8000d94 <HAL_GetTick>
 80028ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	88fa      	ldrh	r2, [r7, #6]
 80028b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	88fa      	ldrh	r2, [r7, #6]
 80028ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c4:	d108      	bne.n	80028d8 <HAL_UART_Transmit+0x82>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d104      	bne.n	80028d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	61bb      	str	r3, [r7, #24]
 80028d6:	e003      	b.n	80028e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80028e8:	e02a      	b.n	8002940 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2200      	movs	r2, #0
 80028f2:	2180      	movs	r1, #128	; 0x80
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f946 	bl	8002b86 <UART_WaitOnFlagUntilTimeout>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e036      	b.n	8002972 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10b      	bne.n	8002922 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002918:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	3302      	adds	r3, #2
 800291e:	61bb      	str	r3, [r7, #24]
 8002920:	e007      	b.n	8002932 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	781a      	ldrb	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	3301      	adds	r3, #1
 8002930:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002936:	b29b      	uxth	r3, r3
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002944:	b29b      	uxth	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1cf      	bne.n	80028ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2200      	movs	r2, #0
 8002952:	2140      	movs	r1, #64	; 0x40
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f916 	bl	8002b86 <UART_WaitOnFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e006      	b.n	8002972 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	e000      	b.n	8002972 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002970:	2302      	movs	r3, #2
  }
}
 8002972:	4618      	mov	r0, r3
 8002974:	3720      	adds	r7, #32
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b084      	sub	sp, #16
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	4613      	mov	r3, r2
 8002986:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b20      	cmp	r3, #32
 8002992:	d11d      	bne.n	80029d0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <HAL_UART_Receive_DMA+0x26>
 800299a:	88fb      	ldrh	r3, [r7, #6]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e016      	b.n	80029d2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_UART_Receive_DMA+0x38>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e00f      	b.n	80029d2 <HAL_UART_Receive_DMA+0x58>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	461a      	mov	r2, r3
 80029c4:	68b9      	ldr	r1, [r7, #8]
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 f928 	bl	8002c1c <UART_Start_Receive_DMA>
 80029cc:	4603      	mov	r3, r0
 80029ce:	e000      	b.n	80029d2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80029d0:	2302      	movs	r3, #2
  }
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d12a      	bne.n	8002a98 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a56:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0201 	bic.w	r2, r2, #1
 8002a66:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a76:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d107      	bne.n	8002a98 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0210 	bic.w	r2, r2, #16
 8002a96:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d106      	bne.n	8002aae <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f7ff ffb2 	bl	8002a10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002aac:	e002      	b.n	8002ab4 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f7ff ff93 	bl	80029da <HAL_UART_RxCpltCallback>
}
 8002ab4:	bf00      	nop
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d108      	bne.n	8002ae4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ad6:	085b      	lsrs	r3, r3, #1
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	4619      	mov	r1, r3
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f7ff ff97 	bl	8002a10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002ae2:	e002      	b.n	8002aea <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f7ff ff81 	bl	80029ec <HAL_UART_RxHalfCpltCallback>
}
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b084      	sub	sp, #16
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	bf14      	ite	ne
 8002b12:	2301      	movne	r3, #1
 8002b14:	2300      	moveq	r3, #0
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b21      	cmp	r3, #33	; 0x21
 8002b24:	d108      	bne.n	8002b38 <UART_DMAError+0x46>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002b32:	68b8      	ldr	r0, [r7, #8]
 8002b34:	f000 f8d6 	bl	8002ce4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	bf14      	ite	ne
 8002b46:	2301      	movne	r3, #1
 8002b48:	2300      	moveq	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b22      	cmp	r3, #34	; 0x22
 8002b58:	d108      	bne.n	8002b6c <UART_DMAError+0x7a>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2200      	movs	r2, #0
 8002b64:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002b66:	68b8      	ldr	r0, [r7, #8]
 8002b68:	f000 f8d1 	bl	8002d0e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	f043 0210 	orr.w	r2, r3, #16
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b78:	68b8      	ldr	r0, [r7, #8]
 8002b7a:	f7ff ff40 	bl	80029fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b7e:	bf00      	nop
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b084      	sub	sp, #16
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	603b      	str	r3, [r7, #0]
 8002b92:	4613      	mov	r3, r2
 8002b94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b96:	e02c      	b.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b9e:	d028      	beq.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d007      	beq.n	8002bb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ba6:	f7fe f8f5 	bl	8000d94 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d21d      	bcs.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bc4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695a      	ldr	r2, [r3, #20]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 0201 	bic.w	r2, r2, #1
 8002bd4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2220      	movs	r2, #32
 8002bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e00f      	b.n	8002c12 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	68ba      	ldr	r2, [r7, #8]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	bf0c      	ite	eq
 8002c02:	2301      	moveq	r3, #1
 8002c04:	2300      	movne	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	461a      	mov	r2, r3
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d0c3      	beq.n	8002b98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	4613      	mov	r3, r2
 8002c28:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	88fa      	ldrh	r2, [r7, #6]
 8002c34:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2222      	movs	r2, #34	; 0x22
 8002c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c48:	4a23      	ldr	r2, [pc, #140]	; (8002cd8 <UART_Start_Receive_DMA+0xbc>)
 8002c4a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c50:	4a22      	ldr	r2, [pc, #136]	; (8002cdc <UART_Start_Receive_DMA+0xc0>)
 8002c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c58:	4a21      	ldr	r2, [pc, #132]	; (8002ce0 <UART_Start_Receive_DMA+0xc4>)
 8002c5a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	2200      	movs	r2, #0
 8002c62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002c64:	f107 0308 	add.w	r3, r7, #8
 8002c68:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	3304      	adds	r3, #4
 8002c74:	4619      	mov	r1, r3
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	f7fe fa20 	bl	80010c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002c80:	2300      	movs	r3, #0
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cac:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	695a      	ldr	r2, [r3, #20]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 0201 	orr.w	r2, r2, #1
 8002cbc:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ccc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	08002a27 	.word	0x08002a27
 8002cdc:	08002abd 	.word	0x08002abd
 8002ce0:	08002af3 	.word	0x08002af3

08002ce4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002cfa:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr

08002d0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d24:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695a      	ldr	r2, [r3, #20]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0201 	bic.w	r2, r2, #1
 8002d34:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d107      	bne.n	8002d4e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0210 	bic.w	r2, r2, #16
 8002d4c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr
	...

08002d68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002da2:	f023 030c 	bic.w	r3, r3, #12
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6812      	ldr	r2, [r2, #0]
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	430b      	orrs	r3, r1
 8002dae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699a      	ldr	r2, [r3, #24]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a2c      	ldr	r2, [pc, #176]	; (8002e7c <UART_SetConfig+0x114>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d103      	bne.n	8002dd8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002dd0:	f7ff f8a6 	bl	8001f20 <HAL_RCC_GetPCLK2Freq>
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	e002      	b.n	8002dde <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002dd8:	f7ff f88e 	bl	8001ef8 <HAL_RCC_GetPCLK1Freq>
 8002ddc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	009a      	lsls	r2, r3, #2
 8002de8:	441a      	add	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df4:	4a22      	ldr	r2, [pc, #136]	; (8002e80 <UART_SetConfig+0x118>)
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	0119      	lsls	r1, r3, #4
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	009a      	lsls	r2, r3, #2
 8002e08:	441a      	add	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e14:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <UART_SetConfig+0x118>)
 8002e16:	fba3 0302 	umull	r0, r3, r3, r2
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	2064      	movs	r0, #100	; 0x64
 8002e1e:	fb00 f303 	mul.w	r3, r0, r3
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	3332      	adds	r3, #50	; 0x32
 8002e28:	4a15      	ldr	r2, [pc, #84]	; (8002e80 <UART_SetConfig+0x118>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e34:	4419      	add	r1, r3
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009a      	lsls	r2, r3, #2
 8002e40:	441a      	add	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <UART_SetConfig+0x118>)
 8002e4e:	fba3 0302 	umull	r0, r3, r3, r2
 8002e52:	095b      	lsrs	r3, r3, #5
 8002e54:	2064      	movs	r0, #100	; 0x64
 8002e56:	fb00 f303 	mul.w	r3, r0, r3
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	011b      	lsls	r3, r3, #4
 8002e5e:	3332      	adds	r3, #50	; 0x32
 8002e60:	4a07      	ldr	r2, [pc, #28]	; (8002e80 <UART_SetConfig+0x118>)
 8002e62:	fba2 2303 	umull	r2, r3, r2, r3
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	f003 020f 	and.w	r2, r3, #15
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	440a      	add	r2, r1
 8002e72:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e74:	bf00      	nop
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40013800 	.word	0x40013800
 8002e80:	51eb851f 	.word	0x51eb851f

08002e84 <__errno>:
 8002e84:	4b01      	ldr	r3, [pc, #4]	; (8002e8c <__errno+0x8>)
 8002e86:	6818      	ldr	r0, [r3, #0]
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	2000000c 	.word	0x2000000c

08002e90 <__libc_init_array>:
 8002e90:	b570      	push	{r4, r5, r6, lr}
 8002e92:	2600      	movs	r6, #0
 8002e94:	4d0c      	ldr	r5, [pc, #48]	; (8002ec8 <__libc_init_array+0x38>)
 8002e96:	4c0d      	ldr	r4, [pc, #52]	; (8002ecc <__libc_init_array+0x3c>)
 8002e98:	1b64      	subs	r4, r4, r5
 8002e9a:	10a4      	asrs	r4, r4, #2
 8002e9c:	42a6      	cmp	r6, r4
 8002e9e:	d109      	bne.n	8002eb4 <__libc_init_array+0x24>
 8002ea0:	f001 f82c 	bl	8003efc <_init>
 8002ea4:	2600      	movs	r6, #0
 8002ea6:	4d0a      	ldr	r5, [pc, #40]	; (8002ed0 <__libc_init_array+0x40>)
 8002ea8:	4c0a      	ldr	r4, [pc, #40]	; (8002ed4 <__libc_init_array+0x44>)
 8002eaa:	1b64      	subs	r4, r4, r5
 8002eac:	10a4      	asrs	r4, r4, #2
 8002eae:	42a6      	cmp	r6, r4
 8002eb0:	d105      	bne.n	8002ebe <__libc_init_array+0x2e>
 8002eb2:	bd70      	pop	{r4, r5, r6, pc}
 8002eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eb8:	4798      	blx	r3
 8002eba:	3601      	adds	r6, #1
 8002ebc:	e7ee      	b.n	8002e9c <__libc_init_array+0xc>
 8002ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec2:	4798      	blx	r3
 8002ec4:	3601      	adds	r6, #1
 8002ec6:	e7f2      	b.n	8002eae <__libc_init_array+0x1e>
 8002ec8:	08003ffc 	.word	0x08003ffc
 8002ecc:	08003ffc 	.word	0x08003ffc
 8002ed0:	08003ffc 	.word	0x08003ffc
 8002ed4:	08004000 	.word	0x08004000

08002ed8 <memset>:
 8002ed8:	4603      	mov	r3, r0
 8002eda:	4402      	add	r2, r0
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d100      	bne.n	8002ee2 <memset+0xa>
 8002ee0:	4770      	bx	lr
 8002ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ee6:	e7f9      	b.n	8002edc <memset+0x4>

08002ee8 <iprintf>:
 8002ee8:	b40f      	push	{r0, r1, r2, r3}
 8002eea:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <iprintf+0x2c>)
 8002eec:	b513      	push	{r0, r1, r4, lr}
 8002eee:	681c      	ldr	r4, [r3, #0]
 8002ef0:	b124      	cbz	r4, 8002efc <iprintf+0x14>
 8002ef2:	69a3      	ldr	r3, [r4, #24]
 8002ef4:	b913      	cbnz	r3, 8002efc <iprintf+0x14>
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	f000 fa5a 	bl	80033b0 <__sinit>
 8002efc:	ab05      	add	r3, sp, #20
 8002efe:	4620      	mov	r0, r4
 8002f00:	9a04      	ldr	r2, [sp, #16]
 8002f02:	68a1      	ldr	r1, [r4, #8]
 8002f04:	9301      	str	r3, [sp, #4]
 8002f06:	f000 fc5d 	bl	80037c4 <_vfiprintf_r>
 8002f0a:	b002      	add	sp, #8
 8002f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f10:	b004      	add	sp, #16
 8002f12:	4770      	bx	lr
 8002f14:	2000000c 	.word	0x2000000c

08002f18 <_puts_r>:
 8002f18:	b570      	push	{r4, r5, r6, lr}
 8002f1a:	460e      	mov	r6, r1
 8002f1c:	4605      	mov	r5, r0
 8002f1e:	b118      	cbz	r0, 8002f28 <_puts_r+0x10>
 8002f20:	6983      	ldr	r3, [r0, #24]
 8002f22:	b90b      	cbnz	r3, 8002f28 <_puts_r+0x10>
 8002f24:	f000 fa44 	bl	80033b0 <__sinit>
 8002f28:	69ab      	ldr	r3, [r5, #24]
 8002f2a:	68ac      	ldr	r4, [r5, #8]
 8002f2c:	b913      	cbnz	r3, 8002f34 <_puts_r+0x1c>
 8002f2e:	4628      	mov	r0, r5
 8002f30:	f000 fa3e 	bl	80033b0 <__sinit>
 8002f34:	4b2c      	ldr	r3, [pc, #176]	; (8002fe8 <_puts_r+0xd0>)
 8002f36:	429c      	cmp	r4, r3
 8002f38:	d120      	bne.n	8002f7c <_puts_r+0x64>
 8002f3a:	686c      	ldr	r4, [r5, #4]
 8002f3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f3e:	07db      	lsls	r3, r3, #31
 8002f40:	d405      	bmi.n	8002f4e <_puts_r+0x36>
 8002f42:	89a3      	ldrh	r3, [r4, #12]
 8002f44:	0598      	lsls	r0, r3, #22
 8002f46:	d402      	bmi.n	8002f4e <_puts_r+0x36>
 8002f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f4a:	f000 facf 	bl	80034ec <__retarget_lock_acquire_recursive>
 8002f4e:	89a3      	ldrh	r3, [r4, #12]
 8002f50:	0719      	lsls	r1, r3, #28
 8002f52:	d51d      	bpl.n	8002f90 <_puts_r+0x78>
 8002f54:	6923      	ldr	r3, [r4, #16]
 8002f56:	b1db      	cbz	r3, 8002f90 <_puts_r+0x78>
 8002f58:	3e01      	subs	r6, #1
 8002f5a:	68a3      	ldr	r3, [r4, #8]
 8002f5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002f60:	3b01      	subs	r3, #1
 8002f62:	60a3      	str	r3, [r4, #8]
 8002f64:	bb39      	cbnz	r1, 8002fb6 <_puts_r+0x9e>
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	da38      	bge.n	8002fdc <_puts_r+0xc4>
 8002f6a:	4622      	mov	r2, r4
 8002f6c:	210a      	movs	r1, #10
 8002f6e:	4628      	mov	r0, r5
 8002f70:	f000 f848 	bl	8003004 <__swbuf_r>
 8002f74:	3001      	adds	r0, #1
 8002f76:	d011      	beq.n	8002f9c <_puts_r+0x84>
 8002f78:	250a      	movs	r5, #10
 8002f7a:	e011      	b.n	8002fa0 <_puts_r+0x88>
 8002f7c:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <_puts_r+0xd4>)
 8002f7e:	429c      	cmp	r4, r3
 8002f80:	d101      	bne.n	8002f86 <_puts_r+0x6e>
 8002f82:	68ac      	ldr	r4, [r5, #8]
 8002f84:	e7da      	b.n	8002f3c <_puts_r+0x24>
 8002f86:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <_puts_r+0xd8>)
 8002f88:	429c      	cmp	r4, r3
 8002f8a:	bf08      	it	eq
 8002f8c:	68ec      	ldreq	r4, [r5, #12]
 8002f8e:	e7d5      	b.n	8002f3c <_puts_r+0x24>
 8002f90:	4621      	mov	r1, r4
 8002f92:	4628      	mov	r0, r5
 8002f94:	f000 f888 	bl	80030a8 <__swsetup_r>
 8002f98:	2800      	cmp	r0, #0
 8002f9a:	d0dd      	beq.n	8002f58 <_puts_r+0x40>
 8002f9c:	f04f 35ff 	mov.w	r5, #4294967295
 8002fa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002fa2:	07da      	lsls	r2, r3, #31
 8002fa4:	d405      	bmi.n	8002fb2 <_puts_r+0x9a>
 8002fa6:	89a3      	ldrh	r3, [r4, #12]
 8002fa8:	059b      	lsls	r3, r3, #22
 8002faa:	d402      	bmi.n	8002fb2 <_puts_r+0x9a>
 8002fac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002fae:	f000 fa9e 	bl	80034ee <__retarget_lock_release_recursive>
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	bd70      	pop	{r4, r5, r6, pc}
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	da04      	bge.n	8002fc4 <_puts_r+0xac>
 8002fba:	69a2      	ldr	r2, [r4, #24]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	dc06      	bgt.n	8002fce <_puts_r+0xb6>
 8002fc0:	290a      	cmp	r1, #10
 8002fc2:	d004      	beq.n	8002fce <_puts_r+0xb6>
 8002fc4:	6823      	ldr	r3, [r4, #0]
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	6022      	str	r2, [r4, #0]
 8002fca:	7019      	strb	r1, [r3, #0]
 8002fcc:	e7c5      	b.n	8002f5a <_puts_r+0x42>
 8002fce:	4622      	mov	r2, r4
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	f000 f817 	bl	8003004 <__swbuf_r>
 8002fd6:	3001      	adds	r0, #1
 8002fd8:	d1bf      	bne.n	8002f5a <_puts_r+0x42>
 8002fda:	e7df      	b.n	8002f9c <_puts_r+0x84>
 8002fdc:	250a      	movs	r5, #10
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	6022      	str	r2, [r4, #0]
 8002fe4:	701d      	strb	r5, [r3, #0]
 8002fe6:	e7db      	b.n	8002fa0 <_puts_r+0x88>
 8002fe8:	08003f88 	.word	0x08003f88
 8002fec:	08003fa8 	.word	0x08003fa8
 8002ff0:	08003f68 	.word	0x08003f68

08002ff4 <puts>:
 8002ff4:	4b02      	ldr	r3, [pc, #8]	; (8003000 <puts+0xc>)
 8002ff6:	4601      	mov	r1, r0
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	f7ff bf8d 	b.w	8002f18 <_puts_r>
 8002ffe:	bf00      	nop
 8003000:	2000000c 	.word	0x2000000c

08003004 <__swbuf_r>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	460e      	mov	r6, r1
 8003008:	4614      	mov	r4, r2
 800300a:	4605      	mov	r5, r0
 800300c:	b118      	cbz	r0, 8003016 <__swbuf_r+0x12>
 800300e:	6983      	ldr	r3, [r0, #24]
 8003010:	b90b      	cbnz	r3, 8003016 <__swbuf_r+0x12>
 8003012:	f000 f9cd 	bl	80033b0 <__sinit>
 8003016:	4b21      	ldr	r3, [pc, #132]	; (800309c <__swbuf_r+0x98>)
 8003018:	429c      	cmp	r4, r3
 800301a:	d12b      	bne.n	8003074 <__swbuf_r+0x70>
 800301c:	686c      	ldr	r4, [r5, #4]
 800301e:	69a3      	ldr	r3, [r4, #24]
 8003020:	60a3      	str	r3, [r4, #8]
 8003022:	89a3      	ldrh	r3, [r4, #12]
 8003024:	071a      	lsls	r2, r3, #28
 8003026:	d52f      	bpl.n	8003088 <__swbuf_r+0x84>
 8003028:	6923      	ldr	r3, [r4, #16]
 800302a:	b36b      	cbz	r3, 8003088 <__swbuf_r+0x84>
 800302c:	6923      	ldr	r3, [r4, #16]
 800302e:	6820      	ldr	r0, [r4, #0]
 8003030:	b2f6      	uxtb	r6, r6
 8003032:	1ac0      	subs	r0, r0, r3
 8003034:	6963      	ldr	r3, [r4, #20]
 8003036:	4637      	mov	r7, r6
 8003038:	4283      	cmp	r3, r0
 800303a:	dc04      	bgt.n	8003046 <__swbuf_r+0x42>
 800303c:	4621      	mov	r1, r4
 800303e:	4628      	mov	r0, r5
 8003040:	f000 f922 	bl	8003288 <_fflush_r>
 8003044:	bb30      	cbnz	r0, 8003094 <__swbuf_r+0x90>
 8003046:	68a3      	ldr	r3, [r4, #8]
 8003048:	3001      	adds	r0, #1
 800304a:	3b01      	subs	r3, #1
 800304c:	60a3      	str	r3, [r4, #8]
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	6022      	str	r2, [r4, #0]
 8003054:	701e      	strb	r6, [r3, #0]
 8003056:	6963      	ldr	r3, [r4, #20]
 8003058:	4283      	cmp	r3, r0
 800305a:	d004      	beq.n	8003066 <__swbuf_r+0x62>
 800305c:	89a3      	ldrh	r3, [r4, #12]
 800305e:	07db      	lsls	r3, r3, #31
 8003060:	d506      	bpl.n	8003070 <__swbuf_r+0x6c>
 8003062:	2e0a      	cmp	r6, #10
 8003064:	d104      	bne.n	8003070 <__swbuf_r+0x6c>
 8003066:	4621      	mov	r1, r4
 8003068:	4628      	mov	r0, r5
 800306a:	f000 f90d 	bl	8003288 <_fflush_r>
 800306e:	b988      	cbnz	r0, 8003094 <__swbuf_r+0x90>
 8003070:	4638      	mov	r0, r7
 8003072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003074:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <__swbuf_r+0x9c>)
 8003076:	429c      	cmp	r4, r3
 8003078:	d101      	bne.n	800307e <__swbuf_r+0x7a>
 800307a:	68ac      	ldr	r4, [r5, #8]
 800307c:	e7cf      	b.n	800301e <__swbuf_r+0x1a>
 800307e:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <__swbuf_r+0xa0>)
 8003080:	429c      	cmp	r4, r3
 8003082:	bf08      	it	eq
 8003084:	68ec      	ldreq	r4, [r5, #12]
 8003086:	e7ca      	b.n	800301e <__swbuf_r+0x1a>
 8003088:	4621      	mov	r1, r4
 800308a:	4628      	mov	r0, r5
 800308c:	f000 f80c 	bl	80030a8 <__swsetup_r>
 8003090:	2800      	cmp	r0, #0
 8003092:	d0cb      	beq.n	800302c <__swbuf_r+0x28>
 8003094:	f04f 37ff 	mov.w	r7, #4294967295
 8003098:	e7ea      	b.n	8003070 <__swbuf_r+0x6c>
 800309a:	bf00      	nop
 800309c:	08003f88 	.word	0x08003f88
 80030a0:	08003fa8 	.word	0x08003fa8
 80030a4:	08003f68 	.word	0x08003f68

080030a8 <__swsetup_r>:
 80030a8:	4b32      	ldr	r3, [pc, #200]	; (8003174 <__swsetup_r+0xcc>)
 80030aa:	b570      	push	{r4, r5, r6, lr}
 80030ac:	681d      	ldr	r5, [r3, #0]
 80030ae:	4606      	mov	r6, r0
 80030b0:	460c      	mov	r4, r1
 80030b2:	b125      	cbz	r5, 80030be <__swsetup_r+0x16>
 80030b4:	69ab      	ldr	r3, [r5, #24]
 80030b6:	b913      	cbnz	r3, 80030be <__swsetup_r+0x16>
 80030b8:	4628      	mov	r0, r5
 80030ba:	f000 f979 	bl	80033b0 <__sinit>
 80030be:	4b2e      	ldr	r3, [pc, #184]	; (8003178 <__swsetup_r+0xd0>)
 80030c0:	429c      	cmp	r4, r3
 80030c2:	d10f      	bne.n	80030e4 <__swsetup_r+0x3c>
 80030c4:	686c      	ldr	r4, [r5, #4]
 80030c6:	89a3      	ldrh	r3, [r4, #12]
 80030c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030cc:	0719      	lsls	r1, r3, #28
 80030ce:	d42c      	bmi.n	800312a <__swsetup_r+0x82>
 80030d0:	06dd      	lsls	r5, r3, #27
 80030d2:	d411      	bmi.n	80030f8 <__swsetup_r+0x50>
 80030d4:	2309      	movs	r3, #9
 80030d6:	6033      	str	r3, [r6, #0]
 80030d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80030dc:	f04f 30ff 	mov.w	r0, #4294967295
 80030e0:	81a3      	strh	r3, [r4, #12]
 80030e2:	e03e      	b.n	8003162 <__swsetup_r+0xba>
 80030e4:	4b25      	ldr	r3, [pc, #148]	; (800317c <__swsetup_r+0xd4>)
 80030e6:	429c      	cmp	r4, r3
 80030e8:	d101      	bne.n	80030ee <__swsetup_r+0x46>
 80030ea:	68ac      	ldr	r4, [r5, #8]
 80030ec:	e7eb      	b.n	80030c6 <__swsetup_r+0x1e>
 80030ee:	4b24      	ldr	r3, [pc, #144]	; (8003180 <__swsetup_r+0xd8>)
 80030f0:	429c      	cmp	r4, r3
 80030f2:	bf08      	it	eq
 80030f4:	68ec      	ldreq	r4, [r5, #12]
 80030f6:	e7e6      	b.n	80030c6 <__swsetup_r+0x1e>
 80030f8:	0758      	lsls	r0, r3, #29
 80030fa:	d512      	bpl.n	8003122 <__swsetup_r+0x7a>
 80030fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030fe:	b141      	cbz	r1, 8003112 <__swsetup_r+0x6a>
 8003100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003104:	4299      	cmp	r1, r3
 8003106:	d002      	beq.n	800310e <__swsetup_r+0x66>
 8003108:	4630      	mov	r0, r6
 800310a:	f000 fa57 	bl	80035bc <_free_r>
 800310e:	2300      	movs	r3, #0
 8003110:	6363      	str	r3, [r4, #52]	; 0x34
 8003112:	89a3      	ldrh	r3, [r4, #12]
 8003114:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003118:	81a3      	strh	r3, [r4, #12]
 800311a:	2300      	movs	r3, #0
 800311c:	6063      	str	r3, [r4, #4]
 800311e:	6923      	ldr	r3, [r4, #16]
 8003120:	6023      	str	r3, [r4, #0]
 8003122:	89a3      	ldrh	r3, [r4, #12]
 8003124:	f043 0308 	orr.w	r3, r3, #8
 8003128:	81a3      	strh	r3, [r4, #12]
 800312a:	6923      	ldr	r3, [r4, #16]
 800312c:	b94b      	cbnz	r3, 8003142 <__swsetup_r+0x9a>
 800312e:	89a3      	ldrh	r3, [r4, #12]
 8003130:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003138:	d003      	beq.n	8003142 <__swsetup_r+0x9a>
 800313a:	4621      	mov	r1, r4
 800313c:	4630      	mov	r0, r6
 800313e:	f000 f9fd 	bl	800353c <__smakebuf_r>
 8003142:	89a0      	ldrh	r0, [r4, #12]
 8003144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003148:	f010 0301 	ands.w	r3, r0, #1
 800314c:	d00a      	beq.n	8003164 <__swsetup_r+0xbc>
 800314e:	2300      	movs	r3, #0
 8003150:	60a3      	str	r3, [r4, #8]
 8003152:	6963      	ldr	r3, [r4, #20]
 8003154:	425b      	negs	r3, r3
 8003156:	61a3      	str	r3, [r4, #24]
 8003158:	6923      	ldr	r3, [r4, #16]
 800315a:	b943      	cbnz	r3, 800316e <__swsetup_r+0xc6>
 800315c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003160:	d1ba      	bne.n	80030d8 <__swsetup_r+0x30>
 8003162:	bd70      	pop	{r4, r5, r6, pc}
 8003164:	0781      	lsls	r1, r0, #30
 8003166:	bf58      	it	pl
 8003168:	6963      	ldrpl	r3, [r4, #20]
 800316a:	60a3      	str	r3, [r4, #8]
 800316c:	e7f4      	b.n	8003158 <__swsetup_r+0xb0>
 800316e:	2000      	movs	r0, #0
 8003170:	e7f7      	b.n	8003162 <__swsetup_r+0xba>
 8003172:	bf00      	nop
 8003174:	2000000c 	.word	0x2000000c
 8003178:	08003f88 	.word	0x08003f88
 800317c:	08003fa8 	.word	0x08003fa8
 8003180:	08003f68 	.word	0x08003f68

08003184 <__sflush_r>:
 8003184:	898a      	ldrh	r2, [r1, #12]
 8003186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003188:	4605      	mov	r5, r0
 800318a:	0710      	lsls	r0, r2, #28
 800318c:	460c      	mov	r4, r1
 800318e:	d457      	bmi.n	8003240 <__sflush_r+0xbc>
 8003190:	684b      	ldr	r3, [r1, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	dc04      	bgt.n	80031a0 <__sflush_r+0x1c>
 8003196:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003198:	2b00      	cmp	r3, #0
 800319a:	dc01      	bgt.n	80031a0 <__sflush_r+0x1c>
 800319c:	2000      	movs	r0, #0
 800319e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031a2:	2e00      	cmp	r6, #0
 80031a4:	d0fa      	beq.n	800319c <__sflush_r+0x18>
 80031a6:	2300      	movs	r3, #0
 80031a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80031ac:	682f      	ldr	r7, [r5, #0]
 80031ae:	602b      	str	r3, [r5, #0]
 80031b0:	d032      	beq.n	8003218 <__sflush_r+0x94>
 80031b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80031b4:	89a3      	ldrh	r3, [r4, #12]
 80031b6:	075a      	lsls	r2, r3, #29
 80031b8:	d505      	bpl.n	80031c6 <__sflush_r+0x42>
 80031ba:	6863      	ldr	r3, [r4, #4]
 80031bc:	1ac0      	subs	r0, r0, r3
 80031be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80031c0:	b10b      	cbz	r3, 80031c6 <__sflush_r+0x42>
 80031c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031c4:	1ac0      	subs	r0, r0, r3
 80031c6:	2300      	movs	r3, #0
 80031c8:	4602      	mov	r2, r0
 80031ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80031cc:	4628      	mov	r0, r5
 80031ce:	6a21      	ldr	r1, [r4, #32]
 80031d0:	47b0      	blx	r6
 80031d2:	1c43      	adds	r3, r0, #1
 80031d4:	89a3      	ldrh	r3, [r4, #12]
 80031d6:	d106      	bne.n	80031e6 <__sflush_r+0x62>
 80031d8:	6829      	ldr	r1, [r5, #0]
 80031da:	291d      	cmp	r1, #29
 80031dc:	d82c      	bhi.n	8003238 <__sflush_r+0xb4>
 80031de:	4a29      	ldr	r2, [pc, #164]	; (8003284 <__sflush_r+0x100>)
 80031e0:	40ca      	lsrs	r2, r1
 80031e2:	07d6      	lsls	r6, r2, #31
 80031e4:	d528      	bpl.n	8003238 <__sflush_r+0xb4>
 80031e6:	2200      	movs	r2, #0
 80031e8:	6062      	str	r2, [r4, #4]
 80031ea:	6922      	ldr	r2, [r4, #16]
 80031ec:	04d9      	lsls	r1, r3, #19
 80031ee:	6022      	str	r2, [r4, #0]
 80031f0:	d504      	bpl.n	80031fc <__sflush_r+0x78>
 80031f2:	1c42      	adds	r2, r0, #1
 80031f4:	d101      	bne.n	80031fa <__sflush_r+0x76>
 80031f6:	682b      	ldr	r3, [r5, #0]
 80031f8:	b903      	cbnz	r3, 80031fc <__sflush_r+0x78>
 80031fa:	6560      	str	r0, [r4, #84]	; 0x54
 80031fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031fe:	602f      	str	r7, [r5, #0]
 8003200:	2900      	cmp	r1, #0
 8003202:	d0cb      	beq.n	800319c <__sflush_r+0x18>
 8003204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003208:	4299      	cmp	r1, r3
 800320a:	d002      	beq.n	8003212 <__sflush_r+0x8e>
 800320c:	4628      	mov	r0, r5
 800320e:	f000 f9d5 	bl	80035bc <_free_r>
 8003212:	2000      	movs	r0, #0
 8003214:	6360      	str	r0, [r4, #52]	; 0x34
 8003216:	e7c2      	b.n	800319e <__sflush_r+0x1a>
 8003218:	6a21      	ldr	r1, [r4, #32]
 800321a:	2301      	movs	r3, #1
 800321c:	4628      	mov	r0, r5
 800321e:	47b0      	blx	r6
 8003220:	1c41      	adds	r1, r0, #1
 8003222:	d1c7      	bne.n	80031b4 <__sflush_r+0x30>
 8003224:	682b      	ldr	r3, [r5, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0c4      	beq.n	80031b4 <__sflush_r+0x30>
 800322a:	2b1d      	cmp	r3, #29
 800322c:	d001      	beq.n	8003232 <__sflush_r+0xae>
 800322e:	2b16      	cmp	r3, #22
 8003230:	d101      	bne.n	8003236 <__sflush_r+0xb2>
 8003232:	602f      	str	r7, [r5, #0]
 8003234:	e7b2      	b.n	800319c <__sflush_r+0x18>
 8003236:	89a3      	ldrh	r3, [r4, #12]
 8003238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800323c:	81a3      	strh	r3, [r4, #12]
 800323e:	e7ae      	b.n	800319e <__sflush_r+0x1a>
 8003240:	690f      	ldr	r7, [r1, #16]
 8003242:	2f00      	cmp	r7, #0
 8003244:	d0aa      	beq.n	800319c <__sflush_r+0x18>
 8003246:	0793      	lsls	r3, r2, #30
 8003248:	bf18      	it	ne
 800324a:	2300      	movne	r3, #0
 800324c:	680e      	ldr	r6, [r1, #0]
 800324e:	bf08      	it	eq
 8003250:	694b      	ldreq	r3, [r1, #20]
 8003252:	1bf6      	subs	r6, r6, r7
 8003254:	600f      	str	r7, [r1, #0]
 8003256:	608b      	str	r3, [r1, #8]
 8003258:	2e00      	cmp	r6, #0
 800325a:	dd9f      	ble.n	800319c <__sflush_r+0x18>
 800325c:	4633      	mov	r3, r6
 800325e:	463a      	mov	r2, r7
 8003260:	4628      	mov	r0, r5
 8003262:	6a21      	ldr	r1, [r4, #32]
 8003264:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003268:	47e0      	blx	ip
 800326a:	2800      	cmp	r0, #0
 800326c:	dc06      	bgt.n	800327c <__sflush_r+0xf8>
 800326e:	89a3      	ldrh	r3, [r4, #12]
 8003270:	f04f 30ff 	mov.w	r0, #4294967295
 8003274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003278:	81a3      	strh	r3, [r4, #12]
 800327a:	e790      	b.n	800319e <__sflush_r+0x1a>
 800327c:	4407      	add	r7, r0
 800327e:	1a36      	subs	r6, r6, r0
 8003280:	e7ea      	b.n	8003258 <__sflush_r+0xd4>
 8003282:	bf00      	nop
 8003284:	20400001 	.word	0x20400001

08003288 <_fflush_r>:
 8003288:	b538      	push	{r3, r4, r5, lr}
 800328a:	690b      	ldr	r3, [r1, #16]
 800328c:	4605      	mov	r5, r0
 800328e:	460c      	mov	r4, r1
 8003290:	b913      	cbnz	r3, 8003298 <_fflush_r+0x10>
 8003292:	2500      	movs	r5, #0
 8003294:	4628      	mov	r0, r5
 8003296:	bd38      	pop	{r3, r4, r5, pc}
 8003298:	b118      	cbz	r0, 80032a2 <_fflush_r+0x1a>
 800329a:	6983      	ldr	r3, [r0, #24]
 800329c:	b90b      	cbnz	r3, 80032a2 <_fflush_r+0x1a>
 800329e:	f000 f887 	bl	80033b0 <__sinit>
 80032a2:	4b14      	ldr	r3, [pc, #80]	; (80032f4 <_fflush_r+0x6c>)
 80032a4:	429c      	cmp	r4, r3
 80032a6:	d11b      	bne.n	80032e0 <_fflush_r+0x58>
 80032a8:	686c      	ldr	r4, [r5, #4]
 80032aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0ef      	beq.n	8003292 <_fflush_r+0xa>
 80032b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80032b4:	07d0      	lsls	r0, r2, #31
 80032b6:	d404      	bmi.n	80032c2 <_fflush_r+0x3a>
 80032b8:	0599      	lsls	r1, r3, #22
 80032ba:	d402      	bmi.n	80032c2 <_fflush_r+0x3a>
 80032bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032be:	f000 f915 	bl	80034ec <__retarget_lock_acquire_recursive>
 80032c2:	4628      	mov	r0, r5
 80032c4:	4621      	mov	r1, r4
 80032c6:	f7ff ff5d 	bl	8003184 <__sflush_r>
 80032ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032cc:	4605      	mov	r5, r0
 80032ce:	07da      	lsls	r2, r3, #31
 80032d0:	d4e0      	bmi.n	8003294 <_fflush_r+0xc>
 80032d2:	89a3      	ldrh	r3, [r4, #12]
 80032d4:	059b      	lsls	r3, r3, #22
 80032d6:	d4dd      	bmi.n	8003294 <_fflush_r+0xc>
 80032d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032da:	f000 f908 	bl	80034ee <__retarget_lock_release_recursive>
 80032de:	e7d9      	b.n	8003294 <_fflush_r+0xc>
 80032e0:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <_fflush_r+0x70>)
 80032e2:	429c      	cmp	r4, r3
 80032e4:	d101      	bne.n	80032ea <_fflush_r+0x62>
 80032e6:	68ac      	ldr	r4, [r5, #8]
 80032e8:	e7df      	b.n	80032aa <_fflush_r+0x22>
 80032ea:	4b04      	ldr	r3, [pc, #16]	; (80032fc <_fflush_r+0x74>)
 80032ec:	429c      	cmp	r4, r3
 80032ee:	bf08      	it	eq
 80032f0:	68ec      	ldreq	r4, [r5, #12]
 80032f2:	e7da      	b.n	80032aa <_fflush_r+0x22>
 80032f4:	08003f88 	.word	0x08003f88
 80032f8:	08003fa8 	.word	0x08003fa8
 80032fc:	08003f68 	.word	0x08003f68

08003300 <std>:
 8003300:	2300      	movs	r3, #0
 8003302:	b510      	push	{r4, lr}
 8003304:	4604      	mov	r4, r0
 8003306:	e9c0 3300 	strd	r3, r3, [r0]
 800330a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800330e:	6083      	str	r3, [r0, #8]
 8003310:	8181      	strh	r1, [r0, #12]
 8003312:	6643      	str	r3, [r0, #100]	; 0x64
 8003314:	81c2      	strh	r2, [r0, #14]
 8003316:	6183      	str	r3, [r0, #24]
 8003318:	4619      	mov	r1, r3
 800331a:	2208      	movs	r2, #8
 800331c:	305c      	adds	r0, #92	; 0x5c
 800331e:	f7ff fddb 	bl	8002ed8 <memset>
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <std+0x38>)
 8003324:	6224      	str	r4, [r4, #32]
 8003326:	6263      	str	r3, [r4, #36]	; 0x24
 8003328:	4b04      	ldr	r3, [pc, #16]	; (800333c <std+0x3c>)
 800332a:	62a3      	str	r3, [r4, #40]	; 0x28
 800332c:	4b04      	ldr	r3, [pc, #16]	; (8003340 <std+0x40>)
 800332e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003330:	4b04      	ldr	r3, [pc, #16]	; (8003344 <std+0x44>)
 8003332:	6323      	str	r3, [r4, #48]	; 0x30
 8003334:	bd10      	pop	{r4, pc}
 8003336:	bf00      	nop
 8003338:	08003d71 	.word	0x08003d71
 800333c:	08003d93 	.word	0x08003d93
 8003340:	08003dcb 	.word	0x08003dcb
 8003344:	08003def 	.word	0x08003def

08003348 <_cleanup_r>:
 8003348:	4901      	ldr	r1, [pc, #4]	; (8003350 <_cleanup_r+0x8>)
 800334a:	f000 b8af 	b.w	80034ac <_fwalk_reent>
 800334e:	bf00      	nop
 8003350:	08003289 	.word	0x08003289

08003354 <__sfmoreglue>:
 8003354:	2268      	movs	r2, #104	; 0x68
 8003356:	b570      	push	{r4, r5, r6, lr}
 8003358:	1e4d      	subs	r5, r1, #1
 800335a:	4355      	muls	r5, r2
 800335c:	460e      	mov	r6, r1
 800335e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003362:	f000 f993 	bl	800368c <_malloc_r>
 8003366:	4604      	mov	r4, r0
 8003368:	b140      	cbz	r0, 800337c <__sfmoreglue+0x28>
 800336a:	2100      	movs	r1, #0
 800336c:	e9c0 1600 	strd	r1, r6, [r0]
 8003370:	300c      	adds	r0, #12
 8003372:	60a0      	str	r0, [r4, #8]
 8003374:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003378:	f7ff fdae 	bl	8002ed8 <memset>
 800337c:	4620      	mov	r0, r4
 800337e:	bd70      	pop	{r4, r5, r6, pc}

08003380 <__sfp_lock_acquire>:
 8003380:	4801      	ldr	r0, [pc, #4]	; (8003388 <__sfp_lock_acquire+0x8>)
 8003382:	f000 b8b3 	b.w	80034ec <__retarget_lock_acquire_recursive>
 8003386:	bf00      	nop
 8003388:	20004045 	.word	0x20004045

0800338c <__sfp_lock_release>:
 800338c:	4801      	ldr	r0, [pc, #4]	; (8003394 <__sfp_lock_release+0x8>)
 800338e:	f000 b8ae 	b.w	80034ee <__retarget_lock_release_recursive>
 8003392:	bf00      	nop
 8003394:	20004045 	.word	0x20004045

08003398 <__sinit_lock_acquire>:
 8003398:	4801      	ldr	r0, [pc, #4]	; (80033a0 <__sinit_lock_acquire+0x8>)
 800339a:	f000 b8a7 	b.w	80034ec <__retarget_lock_acquire_recursive>
 800339e:	bf00      	nop
 80033a0:	20004046 	.word	0x20004046

080033a4 <__sinit_lock_release>:
 80033a4:	4801      	ldr	r0, [pc, #4]	; (80033ac <__sinit_lock_release+0x8>)
 80033a6:	f000 b8a2 	b.w	80034ee <__retarget_lock_release_recursive>
 80033aa:	bf00      	nop
 80033ac:	20004046 	.word	0x20004046

080033b0 <__sinit>:
 80033b0:	b510      	push	{r4, lr}
 80033b2:	4604      	mov	r4, r0
 80033b4:	f7ff fff0 	bl	8003398 <__sinit_lock_acquire>
 80033b8:	69a3      	ldr	r3, [r4, #24]
 80033ba:	b11b      	cbz	r3, 80033c4 <__sinit+0x14>
 80033bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033c0:	f7ff bff0 	b.w	80033a4 <__sinit_lock_release>
 80033c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80033c8:	6523      	str	r3, [r4, #80]	; 0x50
 80033ca:	4b13      	ldr	r3, [pc, #76]	; (8003418 <__sinit+0x68>)
 80033cc:	4a13      	ldr	r2, [pc, #76]	; (800341c <__sinit+0x6c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80033d2:	42a3      	cmp	r3, r4
 80033d4:	bf08      	it	eq
 80033d6:	2301      	moveq	r3, #1
 80033d8:	4620      	mov	r0, r4
 80033da:	bf08      	it	eq
 80033dc:	61a3      	streq	r3, [r4, #24]
 80033de:	f000 f81f 	bl	8003420 <__sfp>
 80033e2:	6060      	str	r0, [r4, #4]
 80033e4:	4620      	mov	r0, r4
 80033e6:	f000 f81b 	bl	8003420 <__sfp>
 80033ea:	60a0      	str	r0, [r4, #8]
 80033ec:	4620      	mov	r0, r4
 80033ee:	f000 f817 	bl	8003420 <__sfp>
 80033f2:	2200      	movs	r2, #0
 80033f4:	2104      	movs	r1, #4
 80033f6:	60e0      	str	r0, [r4, #12]
 80033f8:	6860      	ldr	r0, [r4, #4]
 80033fa:	f7ff ff81 	bl	8003300 <std>
 80033fe:	2201      	movs	r2, #1
 8003400:	2109      	movs	r1, #9
 8003402:	68a0      	ldr	r0, [r4, #8]
 8003404:	f7ff ff7c 	bl	8003300 <std>
 8003408:	2202      	movs	r2, #2
 800340a:	2112      	movs	r1, #18
 800340c:	68e0      	ldr	r0, [r4, #12]
 800340e:	f7ff ff77 	bl	8003300 <std>
 8003412:	2301      	movs	r3, #1
 8003414:	61a3      	str	r3, [r4, #24]
 8003416:	e7d1      	b.n	80033bc <__sinit+0xc>
 8003418:	08003f64 	.word	0x08003f64
 800341c:	08003349 	.word	0x08003349

08003420 <__sfp>:
 8003420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003422:	4607      	mov	r7, r0
 8003424:	f7ff ffac 	bl	8003380 <__sfp_lock_acquire>
 8003428:	4b1e      	ldr	r3, [pc, #120]	; (80034a4 <__sfp+0x84>)
 800342a:	681e      	ldr	r6, [r3, #0]
 800342c:	69b3      	ldr	r3, [r6, #24]
 800342e:	b913      	cbnz	r3, 8003436 <__sfp+0x16>
 8003430:	4630      	mov	r0, r6
 8003432:	f7ff ffbd 	bl	80033b0 <__sinit>
 8003436:	3648      	adds	r6, #72	; 0x48
 8003438:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800343c:	3b01      	subs	r3, #1
 800343e:	d503      	bpl.n	8003448 <__sfp+0x28>
 8003440:	6833      	ldr	r3, [r6, #0]
 8003442:	b30b      	cbz	r3, 8003488 <__sfp+0x68>
 8003444:	6836      	ldr	r6, [r6, #0]
 8003446:	e7f7      	b.n	8003438 <__sfp+0x18>
 8003448:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800344c:	b9d5      	cbnz	r5, 8003484 <__sfp+0x64>
 800344e:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <__sfp+0x88>)
 8003450:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003454:	60e3      	str	r3, [r4, #12]
 8003456:	6665      	str	r5, [r4, #100]	; 0x64
 8003458:	f000 f847 	bl	80034ea <__retarget_lock_init_recursive>
 800345c:	f7ff ff96 	bl	800338c <__sfp_lock_release>
 8003460:	2208      	movs	r2, #8
 8003462:	4629      	mov	r1, r5
 8003464:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003468:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800346c:	6025      	str	r5, [r4, #0]
 800346e:	61a5      	str	r5, [r4, #24]
 8003470:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003474:	f7ff fd30 	bl	8002ed8 <memset>
 8003478:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800347c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003480:	4620      	mov	r0, r4
 8003482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003484:	3468      	adds	r4, #104	; 0x68
 8003486:	e7d9      	b.n	800343c <__sfp+0x1c>
 8003488:	2104      	movs	r1, #4
 800348a:	4638      	mov	r0, r7
 800348c:	f7ff ff62 	bl	8003354 <__sfmoreglue>
 8003490:	4604      	mov	r4, r0
 8003492:	6030      	str	r0, [r6, #0]
 8003494:	2800      	cmp	r0, #0
 8003496:	d1d5      	bne.n	8003444 <__sfp+0x24>
 8003498:	f7ff ff78 	bl	800338c <__sfp_lock_release>
 800349c:	230c      	movs	r3, #12
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	e7ee      	b.n	8003480 <__sfp+0x60>
 80034a2:	bf00      	nop
 80034a4:	08003f64 	.word	0x08003f64
 80034a8:	ffff0001 	.word	0xffff0001

080034ac <_fwalk_reent>:
 80034ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034b0:	4606      	mov	r6, r0
 80034b2:	4688      	mov	r8, r1
 80034b4:	2700      	movs	r7, #0
 80034b6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80034ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034be:	f1b9 0901 	subs.w	r9, r9, #1
 80034c2:	d505      	bpl.n	80034d0 <_fwalk_reent+0x24>
 80034c4:	6824      	ldr	r4, [r4, #0]
 80034c6:	2c00      	cmp	r4, #0
 80034c8:	d1f7      	bne.n	80034ba <_fwalk_reent+0xe>
 80034ca:	4638      	mov	r0, r7
 80034cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034d0:	89ab      	ldrh	r3, [r5, #12]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d907      	bls.n	80034e6 <_fwalk_reent+0x3a>
 80034d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034da:	3301      	adds	r3, #1
 80034dc:	d003      	beq.n	80034e6 <_fwalk_reent+0x3a>
 80034de:	4629      	mov	r1, r5
 80034e0:	4630      	mov	r0, r6
 80034e2:	47c0      	blx	r8
 80034e4:	4307      	orrs	r7, r0
 80034e6:	3568      	adds	r5, #104	; 0x68
 80034e8:	e7e9      	b.n	80034be <_fwalk_reent+0x12>

080034ea <__retarget_lock_init_recursive>:
 80034ea:	4770      	bx	lr

080034ec <__retarget_lock_acquire_recursive>:
 80034ec:	4770      	bx	lr

080034ee <__retarget_lock_release_recursive>:
 80034ee:	4770      	bx	lr

080034f0 <__swhatbuf_r>:
 80034f0:	b570      	push	{r4, r5, r6, lr}
 80034f2:	460e      	mov	r6, r1
 80034f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034f8:	4614      	mov	r4, r2
 80034fa:	2900      	cmp	r1, #0
 80034fc:	461d      	mov	r5, r3
 80034fe:	b096      	sub	sp, #88	; 0x58
 8003500:	da08      	bge.n	8003514 <__swhatbuf_r+0x24>
 8003502:	2200      	movs	r2, #0
 8003504:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003508:	602a      	str	r2, [r5, #0]
 800350a:	061a      	lsls	r2, r3, #24
 800350c:	d410      	bmi.n	8003530 <__swhatbuf_r+0x40>
 800350e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003512:	e00e      	b.n	8003532 <__swhatbuf_r+0x42>
 8003514:	466a      	mov	r2, sp
 8003516:	f000 fc91 	bl	8003e3c <_fstat_r>
 800351a:	2800      	cmp	r0, #0
 800351c:	dbf1      	blt.n	8003502 <__swhatbuf_r+0x12>
 800351e:	9a01      	ldr	r2, [sp, #4]
 8003520:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003524:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003528:	425a      	negs	r2, r3
 800352a:	415a      	adcs	r2, r3
 800352c:	602a      	str	r2, [r5, #0]
 800352e:	e7ee      	b.n	800350e <__swhatbuf_r+0x1e>
 8003530:	2340      	movs	r3, #64	; 0x40
 8003532:	2000      	movs	r0, #0
 8003534:	6023      	str	r3, [r4, #0]
 8003536:	b016      	add	sp, #88	; 0x58
 8003538:	bd70      	pop	{r4, r5, r6, pc}
	...

0800353c <__smakebuf_r>:
 800353c:	898b      	ldrh	r3, [r1, #12]
 800353e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003540:	079d      	lsls	r5, r3, #30
 8003542:	4606      	mov	r6, r0
 8003544:	460c      	mov	r4, r1
 8003546:	d507      	bpl.n	8003558 <__smakebuf_r+0x1c>
 8003548:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800354c:	6023      	str	r3, [r4, #0]
 800354e:	6123      	str	r3, [r4, #16]
 8003550:	2301      	movs	r3, #1
 8003552:	6163      	str	r3, [r4, #20]
 8003554:	b002      	add	sp, #8
 8003556:	bd70      	pop	{r4, r5, r6, pc}
 8003558:	466a      	mov	r2, sp
 800355a:	ab01      	add	r3, sp, #4
 800355c:	f7ff ffc8 	bl	80034f0 <__swhatbuf_r>
 8003560:	9900      	ldr	r1, [sp, #0]
 8003562:	4605      	mov	r5, r0
 8003564:	4630      	mov	r0, r6
 8003566:	f000 f891 	bl	800368c <_malloc_r>
 800356a:	b948      	cbnz	r0, 8003580 <__smakebuf_r+0x44>
 800356c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003570:	059a      	lsls	r2, r3, #22
 8003572:	d4ef      	bmi.n	8003554 <__smakebuf_r+0x18>
 8003574:	f023 0303 	bic.w	r3, r3, #3
 8003578:	f043 0302 	orr.w	r3, r3, #2
 800357c:	81a3      	strh	r3, [r4, #12]
 800357e:	e7e3      	b.n	8003548 <__smakebuf_r+0xc>
 8003580:	4b0d      	ldr	r3, [pc, #52]	; (80035b8 <__smakebuf_r+0x7c>)
 8003582:	62b3      	str	r3, [r6, #40]	; 0x28
 8003584:	89a3      	ldrh	r3, [r4, #12]
 8003586:	6020      	str	r0, [r4, #0]
 8003588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800358c:	81a3      	strh	r3, [r4, #12]
 800358e:	9b00      	ldr	r3, [sp, #0]
 8003590:	6120      	str	r0, [r4, #16]
 8003592:	6163      	str	r3, [r4, #20]
 8003594:	9b01      	ldr	r3, [sp, #4]
 8003596:	b15b      	cbz	r3, 80035b0 <__smakebuf_r+0x74>
 8003598:	4630      	mov	r0, r6
 800359a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800359e:	f000 fc5f 	bl	8003e60 <_isatty_r>
 80035a2:	b128      	cbz	r0, 80035b0 <__smakebuf_r+0x74>
 80035a4:	89a3      	ldrh	r3, [r4, #12]
 80035a6:	f023 0303 	bic.w	r3, r3, #3
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	81a3      	strh	r3, [r4, #12]
 80035b0:	89a0      	ldrh	r0, [r4, #12]
 80035b2:	4305      	orrs	r5, r0
 80035b4:	81a5      	strh	r5, [r4, #12]
 80035b6:	e7cd      	b.n	8003554 <__smakebuf_r+0x18>
 80035b8:	08003349 	.word	0x08003349

080035bc <_free_r>:
 80035bc:	b538      	push	{r3, r4, r5, lr}
 80035be:	4605      	mov	r5, r0
 80035c0:	2900      	cmp	r1, #0
 80035c2:	d040      	beq.n	8003646 <_free_r+0x8a>
 80035c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035c8:	1f0c      	subs	r4, r1, #4
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	bfb8      	it	lt
 80035ce:	18e4      	addlt	r4, r4, r3
 80035d0:	f000 fc76 	bl	8003ec0 <__malloc_lock>
 80035d4:	4a1c      	ldr	r2, [pc, #112]	; (8003648 <_free_r+0x8c>)
 80035d6:	6813      	ldr	r3, [r2, #0]
 80035d8:	b933      	cbnz	r3, 80035e8 <_free_r+0x2c>
 80035da:	6063      	str	r3, [r4, #4]
 80035dc:	6014      	str	r4, [r2, #0]
 80035de:	4628      	mov	r0, r5
 80035e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035e4:	f000 bc72 	b.w	8003ecc <__malloc_unlock>
 80035e8:	42a3      	cmp	r3, r4
 80035ea:	d908      	bls.n	80035fe <_free_r+0x42>
 80035ec:	6820      	ldr	r0, [r4, #0]
 80035ee:	1821      	adds	r1, r4, r0
 80035f0:	428b      	cmp	r3, r1
 80035f2:	bf01      	itttt	eq
 80035f4:	6819      	ldreq	r1, [r3, #0]
 80035f6:	685b      	ldreq	r3, [r3, #4]
 80035f8:	1809      	addeq	r1, r1, r0
 80035fa:	6021      	streq	r1, [r4, #0]
 80035fc:	e7ed      	b.n	80035da <_free_r+0x1e>
 80035fe:	461a      	mov	r2, r3
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	b10b      	cbz	r3, 8003608 <_free_r+0x4c>
 8003604:	42a3      	cmp	r3, r4
 8003606:	d9fa      	bls.n	80035fe <_free_r+0x42>
 8003608:	6811      	ldr	r1, [r2, #0]
 800360a:	1850      	adds	r0, r2, r1
 800360c:	42a0      	cmp	r0, r4
 800360e:	d10b      	bne.n	8003628 <_free_r+0x6c>
 8003610:	6820      	ldr	r0, [r4, #0]
 8003612:	4401      	add	r1, r0
 8003614:	1850      	adds	r0, r2, r1
 8003616:	4283      	cmp	r3, r0
 8003618:	6011      	str	r1, [r2, #0]
 800361a:	d1e0      	bne.n	80035de <_free_r+0x22>
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	4401      	add	r1, r0
 8003622:	6011      	str	r1, [r2, #0]
 8003624:	6053      	str	r3, [r2, #4]
 8003626:	e7da      	b.n	80035de <_free_r+0x22>
 8003628:	d902      	bls.n	8003630 <_free_r+0x74>
 800362a:	230c      	movs	r3, #12
 800362c:	602b      	str	r3, [r5, #0]
 800362e:	e7d6      	b.n	80035de <_free_r+0x22>
 8003630:	6820      	ldr	r0, [r4, #0]
 8003632:	1821      	adds	r1, r4, r0
 8003634:	428b      	cmp	r3, r1
 8003636:	bf01      	itttt	eq
 8003638:	6819      	ldreq	r1, [r3, #0]
 800363a:	685b      	ldreq	r3, [r3, #4]
 800363c:	1809      	addeq	r1, r1, r0
 800363e:	6021      	streq	r1, [r4, #0]
 8003640:	6063      	str	r3, [r4, #4]
 8003642:	6054      	str	r4, [r2, #4]
 8003644:	e7cb      	b.n	80035de <_free_r+0x22>
 8003646:	bd38      	pop	{r3, r4, r5, pc}
 8003648:	20004048 	.word	0x20004048

0800364c <sbrk_aligned>:
 800364c:	b570      	push	{r4, r5, r6, lr}
 800364e:	4e0e      	ldr	r6, [pc, #56]	; (8003688 <sbrk_aligned+0x3c>)
 8003650:	460c      	mov	r4, r1
 8003652:	6831      	ldr	r1, [r6, #0]
 8003654:	4605      	mov	r5, r0
 8003656:	b911      	cbnz	r1, 800365e <sbrk_aligned+0x12>
 8003658:	f000 fb7a 	bl	8003d50 <_sbrk_r>
 800365c:	6030      	str	r0, [r6, #0]
 800365e:	4621      	mov	r1, r4
 8003660:	4628      	mov	r0, r5
 8003662:	f000 fb75 	bl	8003d50 <_sbrk_r>
 8003666:	1c43      	adds	r3, r0, #1
 8003668:	d00a      	beq.n	8003680 <sbrk_aligned+0x34>
 800366a:	1cc4      	adds	r4, r0, #3
 800366c:	f024 0403 	bic.w	r4, r4, #3
 8003670:	42a0      	cmp	r0, r4
 8003672:	d007      	beq.n	8003684 <sbrk_aligned+0x38>
 8003674:	1a21      	subs	r1, r4, r0
 8003676:	4628      	mov	r0, r5
 8003678:	f000 fb6a 	bl	8003d50 <_sbrk_r>
 800367c:	3001      	adds	r0, #1
 800367e:	d101      	bne.n	8003684 <sbrk_aligned+0x38>
 8003680:	f04f 34ff 	mov.w	r4, #4294967295
 8003684:	4620      	mov	r0, r4
 8003686:	bd70      	pop	{r4, r5, r6, pc}
 8003688:	2000404c 	.word	0x2000404c

0800368c <_malloc_r>:
 800368c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003690:	1ccd      	adds	r5, r1, #3
 8003692:	f025 0503 	bic.w	r5, r5, #3
 8003696:	3508      	adds	r5, #8
 8003698:	2d0c      	cmp	r5, #12
 800369a:	bf38      	it	cc
 800369c:	250c      	movcc	r5, #12
 800369e:	2d00      	cmp	r5, #0
 80036a0:	4607      	mov	r7, r0
 80036a2:	db01      	blt.n	80036a8 <_malloc_r+0x1c>
 80036a4:	42a9      	cmp	r1, r5
 80036a6:	d905      	bls.n	80036b4 <_malloc_r+0x28>
 80036a8:	230c      	movs	r3, #12
 80036aa:	2600      	movs	r6, #0
 80036ac:	603b      	str	r3, [r7, #0]
 80036ae:	4630      	mov	r0, r6
 80036b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036b4:	4e2e      	ldr	r6, [pc, #184]	; (8003770 <_malloc_r+0xe4>)
 80036b6:	f000 fc03 	bl	8003ec0 <__malloc_lock>
 80036ba:	6833      	ldr	r3, [r6, #0]
 80036bc:	461c      	mov	r4, r3
 80036be:	bb34      	cbnz	r4, 800370e <_malloc_r+0x82>
 80036c0:	4629      	mov	r1, r5
 80036c2:	4638      	mov	r0, r7
 80036c4:	f7ff ffc2 	bl	800364c <sbrk_aligned>
 80036c8:	1c43      	adds	r3, r0, #1
 80036ca:	4604      	mov	r4, r0
 80036cc:	d14d      	bne.n	800376a <_malloc_r+0xde>
 80036ce:	6834      	ldr	r4, [r6, #0]
 80036d0:	4626      	mov	r6, r4
 80036d2:	2e00      	cmp	r6, #0
 80036d4:	d140      	bne.n	8003758 <_malloc_r+0xcc>
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	4631      	mov	r1, r6
 80036da:	4638      	mov	r0, r7
 80036dc:	eb04 0803 	add.w	r8, r4, r3
 80036e0:	f000 fb36 	bl	8003d50 <_sbrk_r>
 80036e4:	4580      	cmp	r8, r0
 80036e6:	d13a      	bne.n	800375e <_malloc_r+0xd2>
 80036e8:	6821      	ldr	r1, [r4, #0]
 80036ea:	3503      	adds	r5, #3
 80036ec:	1a6d      	subs	r5, r5, r1
 80036ee:	f025 0503 	bic.w	r5, r5, #3
 80036f2:	3508      	adds	r5, #8
 80036f4:	2d0c      	cmp	r5, #12
 80036f6:	bf38      	it	cc
 80036f8:	250c      	movcc	r5, #12
 80036fa:	4638      	mov	r0, r7
 80036fc:	4629      	mov	r1, r5
 80036fe:	f7ff ffa5 	bl	800364c <sbrk_aligned>
 8003702:	3001      	adds	r0, #1
 8003704:	d02b      	beq.n	800375e <_malloc_r+0xd2>
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	442b      	add	r3, r5
 800370a:	6023      	str	r3, [r4, #0]
 800370c:	e00e      	b.n	800372c <_malloc_r+0xa0>
 800370e:	6822      	ldr	r2, [r4, #0]
 8003710:	1b52      	subs	r2, r2, r5
 8003712:	d41e      	bmi.n	8003752 <_malloc_r+0xc6>
 8003714:	2a0b      	cmp	r2, #11
 8003716:	d916      	bls.n	8003746 <_malloc_r+0xba>
 8003718:	1961      	adds	r1, r4, r5
 800371a:	42a3      	cmp	r3, r4
 800371c:	6025      	str	r5, [r4, #0]
 800371e:	bf18      	it	ne
 8003720:	6059      	strne	r1, [r3, #4]
 8003722:	6863      	ldr	r3, [r4, #4]
 8003724:	bf08      	it	eq
 8003726:	6031      	streq	r1, [r6, #0]
 8003728:	5162      	str	r2, [r4, r5]
 800372a:	604b      	str	r3, [r1, #4]
 800372c:	4638      	mov	r0, r7
 800372e:	f104 060b 	add.w	r6, r4, #11
 8003732:	f000 fbcb 	bl	8003ecc <__malloc_unlock>
 8003736:	f026 0607 	bic.w	r6, r6, #7
 800373a:	1d23      	adds	r3, r4, #4
 800373c:	1af2      	subs	r2, r6, r3
 800373e:	d0b6      	beq.n	80036ae <_malloc_r+0x22>
 8003740:	1b9b      	subs	r3, r3, r6
 8003742:	50a3      	str	r3, [r4, r2]
 8003744:	e7b3      	b.n	80036ae <_malloc_r+0x22>
 8003746:	6862      	ldr	r2, [r4, #4]
 8003748:	42a3      	cmp	r3, r4
 800374a:	bf0c      	ite	eq
 800374c:	6032      	streq	r2, [r6, #0]
 800374e:	605a      	strne	r2, [r3, #4]
 8003750:	e7ec      	b.n	800372c <_malloc_r+0xa0>
 8003752:	4623      	mov	r3, r4
 8003754:	6864      	ldr	r4, [r4, #4]
 8003756:	e7b2      	b.n	80036be <_malloc_r+0x32>
 8003758:	4634      	mov	r4, r6
 800375a:	6876      	ldr	r6, [r6, #4]
 800375c:	e7b9      	b.n	80036d2 <_malloc_r+0x46>
 800375e:	230c      	movs	r3, #12
 8003760:	4638      	mov	r0, r7
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	f000 fbb2 	bl	8003ecc <__malloc_unlock>
 8003768:	e7a1      	b.n	80036ae <_malloc_r+0x22>
 800376a:	6025      	str	r5, [r4, #0]
 800376c:	e7de      	b.n	800372c <_malloc_r+0xa0>
 800376e:	bf00      	nop
 8003770:	20004048 	.word	0x20004048

08003774 <__sfputc_r>:
 8003774:	6893      	ldr	r3, [r2, #8]
 8003776:	b410      	push	{r4}
 8003778:	3b01      	subs	r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	6093      	str	r3, [r2, #8]
 800377e:	da07      	bge.n	8003790 <__sfputc_r+0x1c>
 8003780:	6994      	ldr	r4, [r2, #24]
 8003782:	42a3      	cmp	r3, r4
 8003784:	db01      	blt.n	800378a <__sfputc_r+0x16>
 8003786:	290a      	cmp	r1, #10
 8003788:	d102      	bne.n	8003790 <__sfputc_r+0x1c>
 800378a:	bc10      	pop	{r4}
 800378c:	f7ff bc3a 	b.w	8003004 <__swbuf_r>
 8003790:	6813      	ldr	r3, [r2, #0]
 8003792:	1c58      	adds	r0, r3, #1
 8003794:	6010      	str	r0, [r2, #0]
 8003796:	7019      	strb	r1, [r3, #0]
 8003798:	4608      	mov	r0, r1
 800379a:	bc10      	pop	{r4}
 800379c:	4770      	bx	lr

0800379e <__sfputs_r>:
 800379e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a0:	4606      	mov	r6, r0
 80037a2:	460f      	mov	r7, r1
 80037a4:	4614      	mov	r4, r2
 80037a6:	18d5      	adds	r5, r2, r3
 80037a8:	42ac      	cmp	r4, r5
 80037aa:	d101      	bne.n	80037b0 <__sfputs_r+0x12>
 80037ac:	2000      	movs	r0, #0
 80037ae:	e007      	b.n	80037c0 <__sfputs_r+0x22>
 80037b0:	463a      	mov	r2, r7
 80037b2:	4630      	mov	r0, r6
 80037b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037b8:	f7ff ffdc 	bl	8003774 <__sfputc_r>
 80037bc:	1c43      	adds	r3, r0, #1
 80037be:	d1f3      	bne.n	80037a8 <__sfputs_r+0xa>
 80037c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080037c4 <_vfiprintf_r>:
 80037c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c8:	460d      	mov	r5, r1
 80037ca:	4614      	mov	r4, r2
 80037cc:	4698      	mov	r8, r3
 80037ce:	4606      	mov	r6, r0
 80037d0:	b09d      	sub	sp, #116	; 0x74
 80037d2:	b118      	cbz	r0, 80037dc <_vfiprintf_r+0x18>
 80037d4:	6983      	ldr	r3, [r0, #24]
 80037d6:	b90b      	cbnz	r3, 80037dc <_vfiprintf_r+0x18>
 80037d8:	f7ff fdea 	bl	80033b0 <__sinit>
 80037dc:	4b89      	ldr	r3, [pc, #548]	; (8003a04 <_vfiprintf_r+0x240>)
 80037de:	429d      	cmp	r5, r3
 80037e0:	d11b      	bne.n	800381a <_vfiprintf_r+0x56>
 80037e2:	6875      	ldr	r5, [r6, #4]
 80037e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80037e6:	07d9      	lsls	r1, r3, #31
 80037e8:	d405      	bmi.n	80037f6 <_vfiprintf_r+0x32>
 80037ea:	89ab      	ldrh	r3, [r5, #12]
 80037ec:	059a      	lsls	r2, r3, #22
 80037ee:	d402      	bmi.n	80037f6 <_vfiprintf_r+0x32>
 80037f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037f2:	f7ff fe7b 	bl	80034ec <__retarget_lock_acquire_recursive>
 80037f6:	89ab      	ldrh	r3, [r5, #12]
 80037f8:	071b      	lsls	r3, r3, #28
 80037fa:	d501      	bpl.n	8003800 <_vfiprintf_r+0x3c>
 80037fc:	692b      	ldr	r3, [r5, #16]
 80037fe:	b9eb      	cbnz	r3, 800383c <_vfiprintf_r+0x78>
 8003800:	4629      	mov	r1, r5
 8003802:	4630      	mov	r0, r6
 8003804:	f7ff fc50 	bl	80030a8 <__swsetup_r>
 8003808:	b1c0      	cbz	r0, 800383c <_vfiprintf_r+0x78>
 800380a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800380c:	07dc      	lsls	r4, r3, #31
 800380e:	d50e      	bpl.n	800382e <_vfiprintf_r+0x6a>
 8003810:	f04f 30ff 	mov.w	r0, #4294967295
 8003814:	b01d      	add	sp, #116	; 0x74
 8003816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800381a:	4b7b      	ldr	r3, [pc, #492]	; (8003a08 <_vfiprintf_r+0x244>)
 800381c:	429d      	cmp	r5, r3
 800381e:	d101      	bne.n	8003824 <_vfiprintf_r+0x60>
 8003820:	68b5      	ldr	r5, [r6, #8]
 8003822:	e7df      	b.n	80037e4 <_vfiprintf_r+0x20>
 8003824:	4b79      	ldr	r3, [pc, #484]	; (8003a0c <_vfiprintf_r+0x248>)
 8003826:	429d      	cmp	r5, r3
 8003828:	bf08      	it	eq
 800382a:	68f5      	ldreq	r5, [r6, #12]
 800382c:	e7da      	b.n	80037e4 <_vfiprintf_r+0x20>
 800382e:	89ab      	ldrh	r3, [r5, #12]
 8003830:	0598      	lsls	r0, r3, #22
 8003832:	d4ed      	bmi.n	8003810 <_vfiprintf_r+0x4c>
 8003834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003836:	f7ff fe5a 	bl	80034ee <__retarget_lock_release_recursive>
 800383a:	e7e9      	b.n	8003810 <_vfiprintf_r+0x4c>
 800383c:	2300      	movs	r3, #0
 800383e:	9309      	str	r3, [sp, #36]	; 0x24
 8003840:	2320      	movs	r3, #32
 8003842:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003846:	2330      	movs	r3, #48	; 0x30
 8003848:	f04f 0901 	mov.w	r9, #1
 800384c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003850:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003a10 <_vfiprintf_r+0x24c>
 8003854:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003858:	4623      	mov	r3, r4
 800385a:	469a      	mov	sl, r3
 800385c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003860:	b10a      	cbz	r2, 8003866 <_vfiprintf_r+0xa2>
 8003862:	2a25      	cmp	r2, #37	; 0x25
 8003864:	d1f9      	bne.n	800385a <_vfiprintf_r+0x96>
 8003866:	ebba 0b04 	subs.w	fp, sl, r4
 800386a:	d00b      	beq.n	8003884 <_vfiprintf_r+0xc0>
 800386c:	465b      	mov	r3, fp
 800386e:	4622      	mov	r2, r4
 8003870:	4629      	mov	r1, r5
 8003872:	4630      	mov	r0, r6
 8003874:	f7ff ff93 	bl	800379e <__sfputs_r>
 8003878:	3001      	adds	r0, #1
 800387a:	f000 80aa 	beq.w	80039d2 <_vfiprintf_r+0x20e>
 800387e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003880:	445a      	add	r2, fp
 8003882:	9209      	str	r2, [sp, #36]	; 0x24
 8003884:	f89a 3000 	ldrb.w	r3, [sl]
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 80a2 	beq.w	80039d2 <_vfiprintf_r+0x20e>
 800388e:	2300      	movs	r3, #0
 8003890:	f04f 32ff 	mov.w	r2, #4294967295
 8003894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003898:	f10a 0a01 	add.w	sl, sl, #1
 800389c:	9304      	str	r3, [sp, #16]
 800389e:	9307      	str	r3, [sp, #28]
 80038a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038a4:	931a      	str	r3, [sp, #104]	; 0x68
 80038a6:	4654      	mov	r4, sl
 80038a8:	2205      	movs	r2, #5
 80038aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038ae:	4858      	ldr	r0, [pc, #352]	; (8003a10 <_vfiprintf_r+0x24c>)
 80038b0:	f000 faf8 	bl	8003ea4 <memchr>
 80038b4:	9a04      	ldr	r2, [sp, #16]
 80038b6:	b9d8      	cbnz	r0, 80038f0 <_vfiprintf_r+0x12c>
 80038b8:	06d1      	lsls	r1, r2, #27
 80038ba:	bf44      	itt	mi
 80038bc:	2320      	movmi	r3, #32
 80038be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038c2:	0713      	lsls	r3, r2, #28
 80038c4:	bf44      	itt	mi
 80038c6:	232b      	movmi	r3, #43	; 0x2b
 80038c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038cc:	f89a 3000 	ldrb.w	r3, [sl]
 80038d0:	2b2a      	cmp	r3, #42	; 0x2a
 80038d2:	d015      	beq.n	8003900 <_vfiprintf_r+0x13c>
 80038d4:	4654      	mov	r4, sl
 80038d6:	2000      	movs	r0, #0
 80038d8:	f04f 0c0a 	mov.w	ip, #10
 80038dc:	9a07      	ldr	r2, [sp, #28]
 80038de:	4621      	mov	r1, r4
 80038e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038e4:	3b30      	subs	r3, #48	; 0x30
 80038e6:	2b09      	cmp	r3, #9
 80038e8:	d94e      	bls.n	8003988 <_vfiprintf_r+0x1c4>
 80038ea:	b1b0      	cbz	r0, 800391a <_vfiprintf_r+0x156>
 80038ec:	9207      	str	r2, [sp, #28]
 80038ee:	e014      	b.n	800391a <_vfiprintf_r+0x156>
 80038f0:	eba0 0308 	sub.w	r3, r0, r8
 80038f4:	fa09 f303 	lsl.w	r3, r9, r3
 80038f8:	4313      	orrs	r3, r2
 80038fa:	46a2      	mov	sl, r4
 80038fc:	9304      	str	r3, [sp, #16]
 80038fe:	e7d2      	b.n	80038a6 <_vfiprintf_r+0xe2>
 8003900:	9b03      	ldr	r3, [sp, #12]
 8003902:	1d19      	adds	r1, r3, #4
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	9103      	str	r1, [sp, #12]
 8003908:	2b00      	cmp	r3, #0
 800390a:	bfbb      	ittet	lt
 800390c:	425b      	neglt	r3, r3
 800390e:	f042 0202 	orrlt.w	r2, r2, #2
 8003912:	9307      	strge	r3, [sp, #28]
 8003914:	9307      	strlt	r3, [sp, #28]
 8003916:	bfb8      	it	lt
 8003918:	9204      	strlt	r2, [sp, #16]
 800391a:	7823      	ldrb	r3, [r4, #0]
 800391c:	2b2e      	cmp	r3, #46	; 0x2e
 800391e:	d10c      	bne.n	800393a <_vfiprintf_r+0x176>
 8003920:	7863      	ldrb	r3, [r4, #1]
 8003922:	2b2a      	cmp	r3, #42	; 0x2a
 8003924:	d135      	bne.n	8003992 <_vfiprintf_r+0x1ce>
 8003926:	9b03      	ldr	r3, [sp, #12]
 8003928:	3402      	adds	r4, #2
 800392a:	1d1a      	adds	r2, r3, #4
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	9203      	str	r2, [sp, #12]
 8003930:	2b00      	cmp	r3, #0
 8003932:	bfb8      	it	lt
 8003934:	f04f 33ff 	movlt.w	r3, #4294967295
 8003938:	9305      	str	r3, [sp, #20]
 800393a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003a14 <_vfiprintf_r+0x250>
 800393e:	2203      	movs	r2, #3
 8003940:	4650      	mov	r0, sl
 8003942:	7821      	ldrb	r1, [r4, #0]
 8003944:	f000 faae 	bl	8003ea4 <memchr>
 8003948:	b140      	cbz	r0, 800395c <_vfiprintf_r+0x198>
 800394a:	2340      	movs	r3, #64	; 0x40
 800394c:	eba0 000a 	sub.w	r0, r0, sl
 8003950:	fa03 f000 	lsl.w	r0, r3, r0
 8003954:	9b04      	ldr	r3, [sp, #16]
 8003956:	3401      	adds	r4, #1
 8003958:	4303      	orrs	r3, r0
 800395a:	9304      	str	r3, [sp, #16]
 800395c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003960:	2206      	movs	r2, #6
 8003962:	482d      	ldr	r0, [pc, #180]	; (8003a18 <_vfiprintf_r+0x254>)
 8003964:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003968:	f000 fa9c 	bl	8003ea4 <memchr>
 800396c:	2800      	cmp	r0, #0
 800396e:	d03f      	beq.n	80039f0 <_vfiprintf_r+0x22c>
 8003970:	4b2a      	ldr	r3, [pc, #168]	; (8003a1c <_vfiprintf_r+0x258>)
 8003972:	bb1b      	cbnz	r3, 80039bc <_vfiprintf_r+0x1f8>
 8003974:	9b03      	ldr	r3, [sp, #12]
 8003976:	3307      	adds	r3, #7
 8003978:	f023 0307 	bic.w	r3, r3, #7
 800397c:	3308      	adds	r3, #8
 800397e:	9303      	str	r3, [sp, #12]
 8003980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003982:	443b      	add	r3, r7
 8003984:	9309      	str	r3, [sp, #36]	; 0x24
 8003986:	e767      	b.n	8003858 <_vfiprintf_r+0x94>
 8003988:	460c      	mov	r4, r1
 800398a:	2001      	movs	r0, #1
 800398c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003990:	e7a5      	b.n	80038de <_vfiprintf_r+0x11a>
 8003992:	2300      	movs	r3, #0
 8003994:	f04f 0c0a 	mov.w	ip, #10
 8003998:	4619      	mov	r1, r3
 800399a:	3401      	adds	r4, #1
 800399c:	9305      	str	r3, [sp, #20]
 800399e:	4620      	mov	r0, r4
 80039a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039a4:	3a30      	subs	r2, #48	; 0x30
 80039a6:	2a09      	cmp	r2, #9
 80039a8:	d903      	bls.n	80039b2 <_vfiprintf_r+0x1ee>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0c5      	beq.n	800393a <_vfiprintf_r+0x176>
 80039ae:	9105      	str	r1, [sp, #20]
 80039b0:	e7c3      	b.n	800393a <_vfiprintf_r+0x176>
 80039b2:	4604      	mov	r4, r0
 80039b4:	2301      	movs	r3, #1
 80039b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80039ba:	e7f0      	b.n	800399e <_vfiprintf_r+0x1da>
 80039bc:	ab03      	add	r3, sp, #12
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	462a      	mov	r2, r5
 80039c2:	4630      	mov	r0, r6
 80039c4:	4b16      	ldr	r3, [pc, #88]	; (8003a20 <_vfiprintf_r+0x25c>)
 80039c6:	a904      	add	r1, sp, #16
 80039c8:	f3af 8000 	nop.w
 80039cc:	4607      	mov	r7, r0
 80039ce:	1c78      	adds	r0, r7, #1
 80039d0:	d1d6      	bne.n	8003980 <_vfiprintf_r+0x1bc>
 80039d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039d4:	07d9      	lsls	r1, r3, #31
 80039d6:	d405      	bmi.n	80039e4 <_vfiprintf_r+0x220>
 80039d8:	89ab      	ldrh	r3, [r5, #12]
 80039da:	059a      	lsls	r2, r3, #22
 80039dc:	d402      	bmi.n	80039e4 <_vfiprintf_r+0x220>
 80039de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039e0:	f7ff fd85 	bl	80034ee <__retarget_lock_release_recursive>
 80039e4:	89ab      	ldrh	r3, [r5, #12]
 80039e6:	065b      	lsls	r3, r3, #25
 80039e8:	f53f af12 	bmi.w	8003810 <_vfiprintf_r+0x4c>
 80039ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039ee:	e711      	b.n	8003814 <_vfiprintf_r+0x50>
 80039f0:	ab03      	add	r3, sp, #12
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	462a      	mov	r2, r5
 80039f6:	4630      	mov	r0, r6
 80039f8:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <_vfiprintf_r+0x25c>)
 80039fa:	a904      	add	r1, sp, #16
 80039fc:	f000 f882 	bl	8003b04 <_printf_i>
 8003a00:	e7e4      	b.n	80039cc <_vfiprintf_r+0x208>
 8003a02:	bf00      	nop
 8003a04:	08003f88 	.word	0x08003f88
 8003a08:	08003fa8 	.word	0x08003fa8
 8003a0c:	08003f68 	.word	0x08003f68
 8003a10:	08003fc8 	.word	0x08003fc8
 8003a14:	08003fce 	.word	0x08003fce
 8003a18:	08003fd2 	.word	0x08003fd2
 8003a1c:	00000000 	.word	0x00000000
 8003a20:	0800379f 	.word	0x0800379f

08003a24 <_printf_common>:
 8003a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a28:	4616      	mov	r6, r2
 8003a2a:	4699      	mov	r9, r3
 8003a2c:	688a      	ldr	r2, [r1, #8]
 8003a2e:	690b      	ldr	r3, [r1, #16]
 8003a30:	4607      	mov	r7, r0
 8003a32:	4293      	cmp	r3, r2
 8003a34:	bfb8      	it	lt
 8003a36:	4613      	movlt	r3, r2
 8003a38:	6033      	str	r3, [r6, #0]
 8003a3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a3e:	460c      	mov	r4, r1
 8003a40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a44:	b10a      	cbz	r2, 8003a4a <_printf_common+0x26>
 8003a46:	3301      	adds	r3, #1
 8003a48:	6033      	str	r3, [r6, #0]
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	0699      	lsls	r1, r3, #26
 8003a4e:	bf42      	ittt	mi
 8003a50:	6833      	ldrmi	r3, [r6, #0]
 8003a52:	3302      	addmi	r3, #2
 8003a54:	6033      	strmi	r3, [r6, #0]
 8003a56:	6825      	ldr	r5, [r4, #0]
 8003a58:	f015 0506 	ands.w	r5, r5, #6
 8003a5c:	d106      	bne.n	8003a6c <_printf_common+0x48>
 8003a5e:	f104 0a19 	add.w	sl, r4, #25
 8003a62:	68e3      	ldr	r3, [r4, #12]
 8003a64:	6832      	ldr	r2, [r6, #0]
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	42ab      	cmp	r3, r5
 8003a6a:	dc28      	bgt.n	8003abe <_printf_common+0x9a>
 8003a6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a70:	1e13      	subs	r3, r2, #0
 8003a72:	6822      	ldr	r2, [r4, #0]
 8003a74:	bf18      	it	ne
 8003a76:	2301      	movne	r3, #1
 8003a78:	0692      	lsls	r2, r2, #26
 8003a7a:	d42d      	bmi.n	8003ad8 <_printf_common+0xb4>
 8003a7c:	4649      	mov	r1, r9
 8003a7e:	4638      	mov	r0, r7
 8003a80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a84:	47c0      	blx	r8
 8003a86:	3001      	adds	r0, #1
 8003a88:	d020      	beq.n	8003acc <_printf_common+0xa8>
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	68e5      	ldr	r5, [r4, #12]
 8003a8e:	f003 0306 	and.w	r3, r3, #6
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	bf18      	it	ne
 8003a96:	2500      	movne	r5, #0
 8003a98:	6832      	ldr	r2, [r6, #0]
 8003a9a:	f04f 0600 	mov.w	r6, #0
 8003a9e:	68a3      	ldr	r3, [r4, #8]
 8003aa0:	bf08      	it	eq
 8003aa2:	1aad      	subeq	r5, r5, r2
 8003aa4:	6922      	ldr	r2, [r4, #16]
 8003aa6:	bf08      	it	eq
 8003aa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003aac:	4293      	cmp	r3, r2
 8003aae:	bfc4      	itt	gt
 8003ab0:	1a9b      	subgt	r3, r3, r2
 8003ab2:	18ed      	addgt	r5, r5, r3
 8003ab4:	341a      	adds	r4, #26
 8003ab6:	42b5      	cmp	r5, r6
 8003ab8:	d11a      	bne.n	8003af0 <_printf_common+0xcc>
 8003aba:	2000      	movs	r0, #0
 8003abc:	e008      	b.n	8003ad0 <_printf_common+0xac>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	4652      	mov	r2, sl
 8003ac2:	4649      	mov	r1, r9
 8003ac4:	4638      	mov	r0, r7
 8003ac6:	47c0      	blx	r8
 8003ac8:	3001      	adds	r0, #1
 8003aca:	d103      	bne.n	8003ad4 <_printf_common+0xb0>
 8003acc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ad4:	3501      	adds	r5, #1
 8003ad6:	e7c4      	b.n	8003a62 <_printf_common+0x3e>
 8003ad8:	2030      	movs	r0, #48	; 0x30
 8003ada:	18e1      	adds	r1, r4, r3
 8003adc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ae6:	4422      	add	r2, r4
 8003ae8:	3302      	adds	r3, #2
 8003aea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003aee:	e7c5      	b.n	8003a7c <_printf_common+0x58>
 8003af0:	2301      	movs	r3, #1
 8003af2:	4622      	mov	r2, r4
 8003af4:	4649      	mov	r1, r9
 8003af6:	4638      	mov	r0, r7
 8003af8:	47c0      	blx	r8
 8003afa:	3001      	adds	r0, #1
 8003afc:	d0e6      	beq.n	8003acc <_printf_common+0xa8>
 8003afe:	3601      	adds	r6, #1
 8003b00:	e7d9      	b.n	8003ab6 <_printf_common+0x92>
	...

08003b04 <_printf_i>:
 8003b04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b08:	7e0f      	ldrb	r7, [r1, #24]
 8003b0a:	4691      	mov	r9, r2
 8003b0c:	2f78      	cmp	r7, #120	; 0x78
 8003b0e:	4680      	mov	r8, r0
 8003b10:	460c      	mov	r4, r1
 8003b12:	469a      	mov	sl, r3
 8003b14:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b1a:	d807      	bhi.n	8003b2c <_printf_i+0x28>
 8003b1c:	2f62      	cmp	r7, #98	; 0x62
 8003b1e:	d80a      	bhi.n	8003b36 <_printf_i+0x32>
 8003b20:	2f00      	cmp	r7, #0
 8003b22:	f000 80d9 	beq.w	8003cd8 <_printf_i+0x1d4>
 8003b26:	2f58      	cmp	r7, #88	; 0x58
 8003b28:	f000 80a4 	beq.w	8003c74 <_printf_i+0x170>
 8003b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b34:	e03a      	b.n	8003bac <_printf_i+0xa8>
 8003b36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b3a:	2b15      	cmp	r3, #21
 8003b3c:	d8f6      	bhi.n	8003b2c <_printf_i+0x28>
 8003b3e:	a101      	add	r1, pc, #4	; (adr r1, 8003b44 <_printf_i+0x40>)
 8003b40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b44:	08003b9d 	.word	0x08003b9d
 8003b48:	08003bb1 	.word	0x08003bb1
 8003b4c:	08003b2d 	.word	0x08003b2d
 8003b50:	08003b2d 	.word	0x08003b2d
 8003b54:	08003b2d 	.word	0x08003b2d
 8003b58:	08003b2d 	.word	0x08003b2d
 8003b5c:	08003bb1 	.word	0x08003bb1
 8003b60:	08003b2d 	.word	0x08003b2d
 8003b64:	08003b2d 	.word	0x08003b2d
 8003b68:	08003b2d 	.word	0x08003b2d
 8003b6c:	08003b2d 	.word	0x08003b2d
 8003b70:	08003cbf 	.word	0x08003cbf
 8003b74:	08003be1 	.word	0x08003be1
 8003b78:	08003ca1 	.word	0x08003ca1
 8003b7c:	08003b2d 	.word	0x08003b2d
 8003b80:	08003b2d 	.word	0x08003b2d
 8003b84:	08003ce1 	.word	0x08003ce1
 8003b88:	08003b2d 	.word	0x08003b2d
 8003b8c:	08003be1 	.word	0x08003be1
 8003b90:	08003b2d 	.word	0x08003b2d
 8003b94:	08003b2d 	.word	0x08003b2d
 8003b98:	08003ca9 	.word	0x08003ca9
 8003b9c:	682b      	ldr	r3, [r5, #0]
 8003b9e:	1d1a      	adds	r2, r3, #4
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	602a      	str	r2, [r5, #0]
 8003ba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0a4      	b.n	8003cfa <_printf_i+0x1f6>
 8003bb0:	6820      	ldr	r0, [r4, #0]
 8003bb2:	6829      	ldr	r1, [r5, #0]
 8003bb4:	0606      	lsls	r6, r0, #24
 8003bb6:	f101 0304 	add.w	r3, r1, #4
 8003bba:	d50a      	bpl.n	8003bd2 <_printf_i+0xce>
 8003bbc:	680e      	ldr	r6, [r1, #0]
 8003bbe:	602b      	str	r3, [r5, #0]
 8003bc0:	2e00      	cmp	r6, #0
 8003bc2:	da03      	bge.n	8003bcc <_printf_i+0xc8>
 8003bc4:	232d      	movs	r3, #45	; 0x2d
 8003bc6:	4276      	negs	r6, r6
 8003bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bcc:	230a      	movs	r3, #10
 8003bce:	485e      	ldr	r0, [pc, #376]	; (8003d48 <_printf_i+0x244>)
 8003bd0:	e019      	b.n	8003c06 <_printf_i+0x102>
 8003bd2:	680e      	ldr	r6, [r1, #0]
 8003bd4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003bd8:	602b      	str	r3, [r5, #0]
 8003bda:	bf18      	it	ne
 8003bdc:	b236      	sxthne	r6, r6
 8003bde:	e7ef      	b.n	8003bc0 <_printf_i+0xbc>
 8003be0:	682b      	ldr	r3, [r5, #0]
 8003be2:	6820      	ldr	r0, [r4, #0]
 8003be4:	1d19      	adds	r1, r3, #4
 8003be6:	6029      	str	r1, [r5, #0]
 8003be8:	0601      	lsls	r1, r0, #24
 8003bea:	d501      	bpl.n	8003bf0 <_printf_i+0xec>
 8003bec:	681e      	ldr	r6, [r3, #0]
 8003bee:	e002      	b.n	8003bf6 <_printf_i+0xf2>
 8003bf0:	0646      	lsls	r6, r0, #25
 8003bf2:	d5fb      	bpl.n	8003bec <_printf_i+0xe8>
 8003bf4:	881e      	ldrh	r6, [r3, #0]
 8003bf6:	2f6f      	cmp	r7, #111	; 0x6f
 8003bf8:	bf0c      	ite	eq
 8003bfa:	2308      	moveq	r3, #8
 8003bfc:	230a      	movne	r3, #10
 8003bfe:	4852      	ldr	r0, [pc, #328]	; (8003d48 <_printf_i+0x244>)
 8003c00:	2100      	movs	r1, #0
 8003c02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c06:	6865      	ldr	r5, [r4, #4]
 8003c08:	2d00      	cmp	r5, #0
 8003c0a:	bfa8      	it	ge
 8003c0c:	6821      	ldrge	r1, [r4, #0]
 8003c0e:	60a5      	str	r5, [r4, #8]
 8003c10:	bfa4      	itt	ge
 8003c12:	f021 0104 	bicge.w	r1, r1, #4
 8003c16:	6021      	strge	r1, [r4, #0]
 8003c18:	b90e      	cbnz	r6, 8003c1e <_printf_i+0x11a>
 8003c1a:	2d00      	cmp	r5, #0
 8003c1c:	d04d      	beq.n	8003cba <_printf_i+0x1b6>
 8003c1e:	4615      	mov	r5, r2
 8003c20:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c24:	fb03 6711 	mls	r7, r3, r1, r6
 8003c28:	5dc7      	ldrb	r7, [r0, r7]
 8003c2a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c2e:	4637      	mov	r7, r6
 8003c30:	42bb      	cmp	r3, r7
 8003c32:	460e      	mov	r6, r1
 8003c34:	d9f4      	bls.n	8003c20 <_printf_i+0x11c>
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d10b      	bne.n	8003c52 <_printf_i+0x14e>
 8003c3a:	6823      	ldr	r3, [r4, #0]
 8003c3c:	07de      	lsls	r6, r3, #31
 8003c3e:	d508      	bpl.n	8003c52 <_printf_i+0x14e>
 8003c40:	6923      	ldr	r3, [r4, #16]
 8003c42:	6861      	ldr	r1, [r4, #4]
 8003c44:	4299      	cmp	r1, r3
 8003c46:	bfde      	ittt	le
 8003c48:	2330      	movle	r3, #48	; 0x30
 8003c4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c52:	1b52      	subs	r2, r2, r5
 8003c54:	6122      	str	r2, [r4, #16]
 8003c56:	464b      	mov	r3, r9
 8003c58:	4621      	mov	r1, r4
 8003c5a:	4640      	mov	r0, r8
 8003c5c:	f8cd a000 	str.w	sl, [sp]
 8003c60:	aa03      	add	r2, sp, #12
 8003c62:	f7ff fedf 	bl	8003a24 <_printf_common>
 8003c66:	3001      	adds	r0, #1
 8003c68:	d14c      	bne.n	8003d04 <_printf_i+0x200>
 8003c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c6e:	b004      	add	sp, #16
 8003c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c74:	4834      	ldr	r0, [pc, #208]	; (8003d48 <_printf_i+0x244>)
 8003c76:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003c7a:	6829      	ldr	r1, [r5, #0]
 8003c7c:	6823      	ldr	r3, [r4, #0]
 8003c7e:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c82:	6029      	str	r1, [r5, #0]
 8003c84:	061d      	lsls	r5, r3, #24
 8003c86:	d514      	bpl.n	8003cb2 <_printf_i+0x1ae>
 8003c88:	07df      	lsls	r7, r3, #31
 8003c8a:	bf44      	itt	mi
 8003c8c:	f043 0320 	orrmi.w	r3, r3, #32
 8003c90:	6023      	strmi	r3, [r4, #0]
 8003c92:	b91e      	cbnz	r6, 8003c9c <_printf_i+0x198>
 8003c94:	6823      	ldr	r3, [r4, #0]
 8003c96:	f023 0320 	bic.w	r3, r3, #32
 8003c9a:	6023      	str	r3, [r4, #0]
 8003c9c:	2310      	movs	r3, #16
 8003c9e:	e7af      	b.n	8003c00 <_printf_i+0xfc>
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	f043 0320 	orr.w	r3, r3, #32
 8003ca6:	6023      	str	r3, [r4, #0]
 8003ca8:	2378      	movs	r3, #120	; 0x78
 8003caa:	4828      	ldr	r0, [pc, #160]	; (8003d4c <_printf_i+0x248>)
 8003cac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003cb0:	e7e3      	b.n	8003c7a <_printf_i+0x176>
 8003cb2:	0659      	lsls	r1, r3, #25
 8003cb4:	bf48      	it	mi
 8003cb6:	b2b6      	uxthmi	r6, r6
 8003cb8:	e7e6      	b.n	8003c88 <_printf_i+0x184>
 8003cba:	4615      	mov	r5, r2
 8003cbc:	e7bb      	b.n	8003c36 <_printf_i+0x132>
 8003cbe:	682b      	ldr	r3, [r5, #0]
 8003cc0:	6826      	ldr	r6, [r4, #0]
 8003cc2:	1d18      	adds	r0, r3, #4
 8003cc4:	6961      	ldr	r1, [r4, #20]
 8003cc6:	6028      	str	r0, [r5, #0]
 8003cc8:	0635      	lsls	r5, r6, #24
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	d501      	bpl.n	8003cd2 <_printf_i+0x1ce>
 8003cce:	6019      	str	r1, [r3, #0]
 8003cd0:	e002      	b.n	8003cd8 <_printf_i+0x1d4>
 8003cd2:	0670      	lsls	r0, r6, #25
 8003cd4:	d5fb      	bpl.n	8003cce <_printf_i+0x1ca>
 8003cd6:	8019      	strh	r1, [r3, #0]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	4615      	mov	r5, r2
 8003cdc:	6123      	str	r3, [r4, #16]
 8003cde:	e7ba      	b.n	8003c56 <_printf_i+0x152>
 8003ce0:	682b      	ldr	r3, [r5, #0]
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	1d1a      	adds	r2, r3, #4
 8003ce6:	602a      	str	r2, [r5, #0]
 8003ce8:	681d      	ldr	r5, [r3, #0]
 8003cea:	6862      	ldr	r2, [r4, #4]
 8003cec:	4628      	mov	r0, r5
 8003cee:	f000 f8d9 	bl	8003ea4 <memchr>
 8003cf2:	b108      	cbz	r0, 8003cf8 <_printf_i+0x1f4>
 8003cf4:	1b40      	subs	r0, r0, r5
 8003cf6:	6060      	str	r0, [r4, #4]
 8003cf8:	6863      	ldr	r3, [r4, #4]
 8003cfa:	6123      	str	r3, [r4, #16]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d02:	e7a8      	b.n	8003c56 <_printf_i+0x152>
 8003d04:	462a      	mov	r2, r5
 8003d06:	4649      	mov	r1, r9
 8003d08:	4640      	mov	r0, r8
 8003d0a:	6923      	ldr	r3, [r4, #16]
 8003d0c:	47d0      	blx	sl
 8003d0e:	3001      	adds	r0, #1
 8003d10:	d0ab      	beq.n	8003c6a <_printf_i+0x166>
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	079b      	lsls	r3, r3, #30
 8003d16:	d413      	bmi.n	8003d40 <_printf_i+0x23c>
 8003d18:	68e0      	ldr	r0, [r4, #12]
 8003d1a:	9b03      	ldr	r3, [sp, #12]
 8003d1c:	4298      	cmp	r0, r3
 8003d1e:	bfb8      	it	lt
 8003d20:	4618      	movlt	r0, r3
 8003d22:	e7a4      	b.n	8003c6e <_printf_i+0x16a>
 8003d24:	2301      	movs	r3, #1
 8003d26:	4632      	mov	r2, r6
 8003d28:	4649      	mov	r1, r9
 8003d2a:	4640      	mov	r0, r8
 8003d2c:	47d0      	blx	sl
 8003d2e:	3001      	adds	r0, #1
 8003d30:	d09b      	beq.n	8003c6a <_printf_i+0x166>
 8003d32:	3501      	adds	r5, #1
 8003d34:	68e3      	ldr	r3, [r4, #12]
 8003d36:	9903      	ldr	r1, [sp, #12]
 8003d38:	1a5b      	subs	r3, r3, r1
 8003d3a:	42ab      	cmp	r3, r5
 8003d3c:	dcf2      	bgt.n	8003d24 <_printf_i+0x220>
 8003d3e:	e7eb      	b.n	8003d18 <_printf_i+0x214>
 8003d40:	2500      	movs	r5, #0
 8003d42:	f104 0619 	add.w	r6, r4, #25
 8003d46:	e7f5      	b.n	8003d34 <_printf_i+0x230>
 8003d48:	08003fd9 	.word	0x08003fd9
 8003d4c:	08003fea 	.word	0x08003fea

08003d50 <_sbrk_r>:
 8003d50:	b538      	push	{r3, r4, r5, lr}
 8003d52:	2300      	movs	r3, #0
 8003d54:	4d05      	ldr	r5, [pc, #20]	; (8003d6c <_sbrk_r+0x1c>)
 8003d56:	4604      	mov	r4, r0
 8003d58:	4608      	mov	r0, r1
 8003d5a:	602b      	str	r3, [r5, #0]
 8003d5c:	f7fc ff60 	bl	8000c20 <_sbrk>
 8003d60:	1c43      	adds	r3, r0, #1
 8003d62:	d102      	bne.n	8003d6a <_sbrk_r+0x1a>
 8003d64:	682b      	ldr	r3, [r5, #0]
 8003d66:	b103      	cbz	r3, 8003d6a <_sbrk_r+0x1a>
 8003d68:	6023      	str	r3, [r4, #0]
 8003d6a:	bd38      	pop	{r3, r4, r5, pc}
 8003d6c:	20004050 	.word	0x20004050

08003d70 <__sread>:
 8003d70:	b510      	push	{r4, lr}
 8003d72:	460c      	mov	r4, r1
 8003d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d78:	f000 f8ae 	bl	8003ed8 <_read_r>
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	bfab      	itete	ge
 8003d80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d82:	89a3      	ldrhlt	r3, [r4, #12]
 8003d84:	181b      	addge	r3, r3, r0
 8003d86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d8a:	bfac      	ite	ge
 8003d8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d8e:	81a3      	strhlt	r3, [r4, #12]
 8003d90:	bd10      	pop	{r4, pc}

08003d92 <__swrite>:
 8003d92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d96:	461f      	mov	r7, r3
 8003d98:	898b      	ldrh	r3, [r1, #12]
 8003d9a:	4605      	mov	r5, r0
 8003d9c:	05db      	lsls	r3, r3, #23
 8003d9e:	460c      	mov	r4, r1
 8003da0:	4616      	mov	r6, r2
 8003da2:	d505      	bpl.n	8003db0 <__swrite+0x1e>
 8003da4:	2302      	movs	r3, #2
 8003da6:	2200      	movs	r2, #0
 8003da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dac:	f000 f868 	bl	8003e80 <_lseek_r>
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	4632      	mov	r2, r6
 8003db4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003db8:	81a3      	strh	r3, [r4, #12]
 8003dba:	4628      	mov	r0, r5
 8003dbc:	463b      	mov	r3, r7
 8003dbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dc6:	f000 b817 	b.w	8003df8 <_write_r>

08003dca <__sseek>:
 8003dca:	b510      	push	{r4, lr}
 8003dcc:	460c      	mov	r4, r1
 8003dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dd2:	f000 f855 	bl	8003e80 <_lseek_r>
 8003dd6:	1c43      	adds	r3, r0, #1
 8003dd8:	89a3      	ldrh	r3, [r4, #12]
 8003dda:	bf15      	itete	ne
 8003ddc:	6560      	strne	r0, [r4, #84]	; 0x54
 8003dde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003de2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003de6:	81a3      	strheq	r3, [r4, #12]
 8003de8:	bf18      	it	ne
 8003dea:	81a3      	strhne	r3, [r4, #12]
 8003dec:	bd10      	pop	{r4, pc}

08003dee <__sclose>:
 8003dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003df2:	f000 b813 	b.w	8003e1c <_close_r>
	...

08003df8 <_write_r>:
 8003df8:	b538      	push	{r3, r4, r5, lr}
 8003dfa:	4604      	mov	r4, r0
 8003dfc:	4608      	mov	r0, r1
 8003dfe:	4611      	mov	r1, r2
 8003e00:	2200      	movs	r2, #0
 8003e02:	4d05      	ldr	r5, [pc, #20]	; (8003e18 <_write_r+0x20>)
 8003e04:	602a      	str	r2, [r5, #0]
 8003e06:	461a      	mov	r2, r3
 8003e08:	f7fc febd 	bl	8000b86 <_write>
 8003e0c:	1c43      	adds	r3, r0, #1
 8003e0e:	d102      	bne.n	8003e16 <_write_r+0x1e>
 8003e10:	682b      	ldr	r3, [r5, #0]
 8003e12:	b103      	cbz	r3, 8003e16 <_write_r+0x1e>
 8003e14:	6023      	str	r3, [r4, #0]
 8003e16:	bd38      	pop	{r3, r4, r5, pc}
 8003e18:	20004050 	.word	0x20004050

08003e1c <_close_r>:
 8003e1c:	b538      	push	{r3, r4, r5, lr}
 8003e1e:	2300      	movs	r3, #0
 8003e20:	4d05      	ldr	r5, [pc, #20]	; (8003e38 <_close_r+0x1c>)
 8003e22:	4604      	mov	r4, r0
 8003e24:	4608      	mov	r0, r1
 8003e26:	602b      	str	r3, [r5, #0]
 8003e28:	f7fc fec9 	bl	8000bbe <_close>
 8003e2c:	1c43      	adds	r3, r0, #1
 8003e2e:	d102      	bne.n	8003e36 <_close_r+0x1a>
 8003e30:	682b      	ldr	r3, [r5, #0]
 8003e32:	b103      	cbz	r3, 8003e36 <_close_r+0x1a>
 8003e34:	6023      	str	r3, [r4, #0]
 8003e36:	bd38      	pop	{r3, r4, r5, pc}
 8003e38:	20004050 	.word	0x20004050

08003e3c <_fstat_r>:
 8003e3c:	b538      	push	{r3, r4, r5, lr}
 8003e3e:	2300      	movs	r3, #0
 8003e40:	4d06      	ldr	r5, [pc, #24]	; (8003e5c <_fstat_r+0x20>)
 8003e42:	4604      	mov	r4, r0
 8003e44:	4608      	mov	r0, r1
 8003e46:	4611      	mov	r1, r2
 8003e48:	602b      	str	r3, [r5, #0]
 8003e4a:	f7fc fec3 	bl	8000bd4 <_fstat>
 8003e4e:	1c43      	adds	r3, r0, #1
 8003e50:	d102      	bne.n	8003e58 <_fstat_r+0x1c>
 8003e52:	682b      	ldr	r3, [r5, #0]
 8003e54:	b103      	cbz	r3, 8003e58 <_fstat_r+0x1c>
 8003e56:	6023      	str	r3, [r4, #0]
 8003e58:	bd38      	pop	{r3, r4, r5, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20004050 	.word	0x20004050

08003e60 <_isatty_r>:
 8003e60:	b538      	push	{r3, r4, r5, lr}
 8003e62:	2300      	movs	r3, #0
 8003e64:	4d05      	ldr	r5, [pc, #20]	; (8003e7c <_isatty_r+0x1c>)
 8003e66:	4604      	mov	r4, r0
 8003e68:	4608      	mov	r0, r1
 8003e6a:	602b      	str	r3, [r5, #0]
 8003e6c:	f7fc fec1 	bl	8000bf2 <_isatty>
 8003e70:	1c43      	adds	r3, r0, #1
 8003e72:	d102      	bne.n	8003e7a <_isatty_r+0x1a>
 8003e74:	682b      	ldr	r3, [r5, #0]
 8003e76:	b103      	cbz	r3, 8003e7a <_isatty_r+0x1a>
 8003e78:	6023      	str	r3, [r4, #0]
 8003e7a:	bd38      	pop	{r3, r4, r5, pc}
 8003e7c:	20004050 	.word	0x20004050

08003e80 <_lseek_r>:
 8003e80:	b538      	push	{r3, r4, r5, lr}
 8003e82:	4604      	mov	r4, r0
 8003e84:	4608      	mov	r0, r1
 8003e86:	4611      	mov	r1, r2
 8003e88:	2200      	movs	r2, #0
 8003e8a:	4d05      	ldr	r5, [pc, #20]	; (8003ea0 <_lseek_r+0x20>)
 8003e8c:	602a      	str	r2, [r5, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f7fc feb9 	bl	8000c06 <_lseek>
 8003e94:	1c43      	adds	r3, r0, #1
 8003e96:	d102      	bne.n	8003e9e <_lseek_r+0x1e>
 8003e98:	682b      	ldr	r3, [r5, #0]
 8003e9a:	b103      	cbz	r3, 8003e9e <_lseek_r+0x1e>
 8003e9c:	6023      	str	r3, [r4, #0]
 8003e9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ea0:	20004050 	.word	0x20004050

08003ea4 <memchr>:
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	b510      	push	{r4, lr}
 8003ea8:	b2c9      	uxtb	r1, r1
 8003eaa:	4402      	add	r2, r0
 8003eac:	4293      	cmp	r3, r2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	d101      	bne.n	8003eb6 <memchr+0x12>
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	e003      	b.n	8003ebe <memchr+0x1a>
 8003eb6:	7804      	ldrb	r4, [r0, #0]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	428c      	cmp	r4, r1
 8003ebc:	d1f6      	bne.n	8003eac <memchr+0x8>
 8003ebe:	bd10      	pop	{r4, pc}

08003ec0 <__malloc_lock>:
 8003ec0:	4801      	ldr	r0, [pc, #4]	; (8003ec8 <__malloc_lock+0x8>)
 8003ec2:	f7ff bb13 	b.w	80034ec <__retarget_lock_acquire_recursive>
 8003ec6:	bf00      	nop
 8003ec8:	20004044 	.word	0x20004044

08003ecc <__malloc_unlock>:
 8003ecc:	4801      	ldr	r0, [pc, #4]	; (8003ed4 <__malloc_unlock+0x8>)
 8003ece:	f7ff bb0e 	b.w	80034ee <__retarget_lock_release_recursive>
 8003ed2:	bf00      	nop
 8003ed4:	20004044 	.word	0x20004044

08003ed8 <_read_r>:
 8003ed8:	b538      	push	{r3, r4, r5, lr}
 8003eda:	4604      	mov	r4, r0
 8003edc:	4608      	mov	r0, r1
 8003ede:	4611      	mov	r1, r2
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	4d05      	ldr	r5, [pc, #20]	; (8003ef8 <_read_r+0x20>)
 8003ee4:	602a      	str	r2, [r5, #0]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	f7fc fe30 	bl	8000b4c <_read>
 8003eec:	1c43      	adds	r3, r0, #1
 8003eee:	d102      	bne.n	8003ef6 <_read_r+0x1e>
 8003ef0:	682b      	ldr	r3, [r5, #0]
 8003ef2:	b103      	cbz	r3, 8003ef6 <_read_r+0x1e>
 8003ef4:	6023      	str	r3, [r4, #0]
 8003ef6:	bd38      	pop	{r3, r4, r5, pc}
 8003ef8:	20004050 	.word	0x20004050

08003efc <_init>:
 8003efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efe:	bf00      	nop
 8003f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f02:	bc08      	pop	{r3}
 8003f04:	469e      	mov	lr, r3
 8003f06:	4770      	bx	lr

08003f08 <_fini>:
 8003f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f0a:	bf00      	nop
 8003f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f0e:	bc08      	pop	{r3}
 8003f10:	469e      	mov	lr, r3
 8003f12:	4770      	bx	lr
