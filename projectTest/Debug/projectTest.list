
projectTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003104  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08003210  08003210  00013210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032d8  080032d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080032d8  080032d8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032d8  080032d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032d8  080032d8  000132d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032dc  080032dc  000132dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080032e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  08003350  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08003350  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006290  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017b4  00000000  00000000  00026329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  00027ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c0  00000000  00000000  00028238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176de  00000000  00000000  000288f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007b59  00000000  00000000  0003ffd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000837a9  00000000  00000000  00047b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb2d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002470  00000000  00000000  000cb328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080031f8 	.word	0x080031f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080031f8 	.word	0x080031f8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fb7b 	bl	800084c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f863 	bl	8000220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f915 	bl	8000388 <MX_GPIO_Init>
  MX_DMA_Init();
 800015e:	f000 f8f5 	bl	800034c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000162:	f000 f8c9 	bl	80002f8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000166:	f000 f89d 	bl	80002a4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, data, 5);
 800016a:	2205      	movs	r2, #5
 800016c:	4928      	ldr	r1, [pc, #160]	; (8000210 <main+0xc4>)
 800016e:	4829      	ldr	r0, [pc, #164]	; (8000214 <main+0xc8>)
 8000170:	f001 fd81 	bl	8001c76 <HAL_UART_Receive_DMA>
  int end_idx = 0;
 8000174:	2300      	movs	r3, #0
 8000176:	61fb      	str	r3, [r7, #28]
  int servo[4] ={0};
 8000178:	463b      	mov	r3, r7
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
 800017e:	605a      	str	r2, [r3, #4]
 8000180:	609a      	str	r2, [r3, #8]
 8000182:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  for(int idx =0; idx <5; idx++){
 8000184:	2300      	movs	r3, #0
 8000186:	61bb      	str	r3, [r7, #24]
 8000188:	e00b      	b.n	80001a2 <main+0x56>
		  if(data[idx] < 50) {
 800018a:	4a21      	ldr	r2, [pc, #132]	; (8000210 <main+0xc4>)
 800018c:	69bb      	ldr	r3, [r7, #24]
 800018e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000192:	2b31      	cmp	r3, #49	; 0x31
 8000194:	dc02      	bgt.n	800019c <main+0x50>
			  end_idx = idx;
 8000196:	69bb      	ldr	r3, [r7, #24]
 8000198:	61fb      	str	r3, [r7, #28]
			  break;
 800019a:	e005      	b.n	80001a8 <main+0x5c>
	  for(int idx =0; idx <5; idx++){
 800019c:	69bb      	ldr	r3, [r7, #24]
 800019e:	3301      	adds	r3, #1
 80001a0:	61bb      	str	r3, [r7, #24]
 80001a2:	69bb      	ldr	r3, [r7, #24]
 80001a4:	2b04      	cmp	r3, #4
 80001a6:	ddf0      	ble.n	800018a <main+0x3e>
		  }
	  }

	  for(int idx =3; idx>=0; idx--){
 80001a8:	2303      	movs	r3, #3
 80001aa:	617b      	str	r3, [r7, #20]
 80001ac:	e015      	b.n	80001da <main+0x8e>
		  end_idx -=1;
 80001ae:	69fb      	ldr	r3, [r7, #28]
 80001b0:	3b01      	subs	r3, #1
 80001b2:	61fb      	str	r3, [r7, #28]
		  if(end_idx<0){
 80001b4:	69fb      	ldr	r3, [r7, #28]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	da02      	bge.n	80001c0 <main+0x74>
			  end_idx +=5;
 80001ba:	69fb      	ldr	r3, [r7, #28]
 80001bc:	3305      	adds	r3, #5
 80001be:	61fb      	str	r3, [r7, #28]
		  }
		  servo[idx] = data[end_idx];
 80001c0:	4a13      	ldr	r2, [pc, #76]	; (8000210 <main+0xc4>)
 80001c2:	69fb      	ldr	r3, [r7, #28]
 80001c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c8:	697b      	ldr	r3, [r7, #20]
 80001ca:	009b      	lsls	r3, r3, #2
 80001cc:	3320      	adds	r3, #32
 80001ce:	443b      	add	r3, r7
 80001d0:	f843 2c20 	str.w	r2, [r3, #-32]
	  for(int idx =3; idx>=0; idx--){
 80001d4:	697b      	ldr	r3, [r7, #20]
 80001d6:	3b01      	subs	r3, #1
 80001d8:	617b      	str	r3, [r7, #20]
 80001da:	697b      	ldr	r3, [r7, #20]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	dae6      	bge.n	80001ae <main+0x62>
	  }

	  for(int idx =0;idx<4;idx++)
 80001e0:	2300      	movs	r3, #0
 80001e2:	613b      	str	r3, [r7, #16]
 80001e4:	e00c      	b.n	8000200 <main+0xb4>
		  printf("%d ", servo[idx]);
 80001e6:	693b      	ldr	r3, [r7, #16]
 80001e8:	009b      	lsls	r3, r3, #2
 80001ea:	3320      	adds	r3, #32
 80001ec:	443b      	add	r3, r7
 80001ee:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80001f2:	4619      	mov	r1, r3
 80001f4:	4808      	ldr	r0, [pc, #32]	; (8000218 <main+0xcc>)
 80001f6:	f001 fff5 	bl	80021e4 <iprintf>
	  for(int idx =0;idx<4;idx++)
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	3301      	adds	r3, #1
 80001fe:	613b      	str	r3, [r7, #16]
 8000200:	693b      	ldr	r3, [r7, #16]
 8000202:	2b03      	cmp	r3, #3
 8000204:	ddef      	ble.n	80001e6 <main+0x9a>

	  printf("\r\n");
 8000206:	4805      	ldr	r0, [pc, #20]	; (800021c <main+0xd0>)
 8000208:	f002 f872 	bl	80022f0 <puts>
  {
 800020c:	e7ba      	b.n	8000184 <main+0x38>
 800020e:	bf00      	nop
 8000210:	20000158 	.word	0x20000158
 8000214:	2000008c 	.word	0x2000008c
 8000218:	08003210 	.word	0x08003210
 800021c:	08003214 	.word	0x08003214

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b090      	sub	sp, #64	; 0x40
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0318 	add.w	r3, r7, #24
 800022a:	2228      	movs	r2, #40	; 0x28
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f001 ffd0 	bl	80021d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
 8000240:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000242:	2302      	movs	r3, #2
 8000244:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000246:	2301      	movs	r3, #1
 8000248:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024a:	2310      	movs	r3, #16
 800024c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024e:	2302      	movs	r3, #2
 8000250:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000252:	2300      	movs	r3, #0
 8000254:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000256:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800025a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025c:	f107 0318 	add.w	r3, r7, #24
 8000260:	4618      	mov	r0, r3
 8000262:	f001 f80f 	bl	8001284 <HAL_RCC_OscConfig>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800026c:	f000 f90c 	bl	8000488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000270:	230f      	movs	r3, #15
 8000272:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000274:	2302      	movs	r3, #2
 8000276:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000280:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2102      	movs	r1, #2
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fa7c 	bl	8001788 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000296:	f000 f8f7 	bl	8000488 <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3740      	adds	r7, #64	; 0x40
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002a8:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <MX_USART1_UART_Init+0x4c>)
 80002aa:	4a12      	ldr	r2, [pc, #72]	; (80002f4 <MX_USART1_UART_Init+0x50>)
 80002ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002ae:	4b10      	ldr	r3, [pc, #64]	; (80002f0 <MX_USART1_UART_Init+0x4c>)
 80002b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002b6:	4b0e      	ldr	r3, [pc, #56]	; (80002f0 <MX_USART1_UART_Init+0x4c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <MX_USART1_UART_Init+0x4c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002c2:	4b0b      	ldr	r3, [pc, #44]	; (80002f0 <MX_USART1_UART_Init+0x4c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002c8:	4b09      	ldr	r3, [pc, #36]	; (80002f0 <MX_USART1_UART_Init+0x4c>)
 80002ca:	220c      	movs	r2, #12
 80002cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ce:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <MX_USART1_UART_Init+0x4c>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <MX_USART1_UART_Init+0x4c>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002da:	4805      	ldr	r0, [pc, #20]	; (80002f0 <MX_USART1_UART_Init+0x4c>)
 80002dc:	f001 fbec 	bl	8001ab8 <HAL_UART_Init>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002e6:	f000 f8cf 	bl	8000488 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	2000008c 	.word	0x2000008c
 80002f4:	40013800 	.word	0x40013800

080002f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002fc:	4b11      	ldr	r3, [pc, #68]	; (8000344 <MX_USART2_UART_Init+0x4c>)
 80002fe:	4a12      	ldr	r2, [pc, #72]	; (8000348 <MX_USART2_UART_Init+0x50>)
 8000300:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000302:	4b10      	ldr	r3, [pc, #64]	; (8000344 <MX_USART2_UART_Init+0x4c>)
 8000304:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000308:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <MX_USART2_UART_Init+0x4c>)
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <MX_USART2_UART_Init+0x4c>)
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000316:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <MX_USART2_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_USART2_UART_Init+0x4c>)
 800031e:	220c      	movs	r2, #12
 8000320:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <MX_USART2_UART_Init+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <MX_USART2_UART_Init+0x4c>)
 800032a:	2200      	movs	r2, #0
 800032c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800032e:	4805      	ldr	r0, [pc, #20]	; (8000344 <MX_USART2_UART_Init+0x4c>)
 8000330:	f001 fbc2 	bl	8001ab8 <HAL_UART_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800033a:	f000 f8a5 	bl	8000488 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	200000d0 	.word	0x200000d0
 8000348:	40004400 	.word	0x40004400

0800034c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000352:	4b0c      	ldr	r3, [pc, #48]	; (8000384 <MX_DMA_Init+0x38>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	4a0b      	ldr	r2, [pc, #44]	; (8000384 <MX_DMA_Init+0x38>)
 8000358:	f043 0301 	orr.w	r3, r3, #1
 800035c:	6153      	str	r3, [r2, #20]
 800035e:	4b09      	ldr	r3, [pc, #36]	; (8000384 <MX_DMA_Init+0x38>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	f003 0301 	and.w	r3, r3, #1
 8000366:	607b      	str	r3, [r7, #4]
 8000368:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800036a:	2200      	movs	r2, #0
 800036c:	2100      	movs	r1, #0
 800036e:	200f      	movs	r0, #15
 8000370:	f000 fba5 	bl	8000abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000374:	200f      	movs	r0, #15
 8000376:	f000 fbbe 	bl	8000af6 <HAL_NVIC_EnableIRQ>

}
 800037a:	bf00      	nop
 800037c:	3708      	adds	r7, #8
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40021000 	.word	0x40021000

08000388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b088      	sub	sp, #32
 800038c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	f107 0310 	add.w	r3, r7, #16
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
 8000396:	605a      	str	r2, [r3, #4]
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800039c:	4b2d      	ldr	r3, [pc, #180]	; (8000454 <MX_GPIO_Init+0xcc>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a2c      	ldr	r2, [pc, #176]	; (8000454 <MX_GPIO_Init+0xcc>)
 80003a2:	f043 0310 	orr.w	r3, r3, #16
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b2a      	ldr	r3, [pc, #168]	; (8000454 <MX_GPIO_Init+0xcc>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0310 	and.w	r3, r3, #16
 80003b0:	60fb      	str	r3, [r7, #12]
 80003b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003b4:	4b27      	ldr	r3, [pc, #156]	; (8000454 <MX_GPIO_Init+0xcc>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a26      	ldr	r2, [pc, #152]	; (8000454 <MX_GPIO_Init+0xcc>)
 80003ba:	f043 0320 	orr.w	r3, r3, #32
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b24      	ldr	r3, [pc, #144]	; (8000454 <MX_GPIO_Init+0xcc>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0320 	and.w	r3, r3, #32
 80003c8:	60bb      	str	r3, [r7, #8]
 80003ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003cc:	4b21      	ldr	r3, [pc, #132]	; (8000454 <MX_GPIO_Init+0xcc>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a20      	ldr	r2, [pc, #128]	; (8000454 <MX_GPIO_Init+0xcc>)
 80003d2:	f043 0304 	orr.w	r3, r3, #4
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b1e      	ldr	r3, [pc, #120]	; (8000454 <MX_GPIO_Init+0xcc>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f003 0304 	and.w	r3, r3, #4
 80003e0:	607b      	str	r3, [r7, #4]
 80003e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e4:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <MX_GPIO_Init+0xcc>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a1a      	ldr	r2, [pc, #104]	; (8000454 <MX_GPIO_Init+0xcc>)
 80003ea:	f043 0308 	orr.w	r3, r3, #8
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b18      	ldr	r3, [pc, #96]	; (8000454 <MX_GPIO_Init+0xcc>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0308 	and.w	r3, r3, #8
 80003f8:	603b      	str	r3, [r7, #0]
 80003fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2120      	movs	r1, #32
 8000400:	4815      	ldr	r0, [pc, #84]	; (8000458 <MX_GPIO_Init+0xd0>)
 8000402:	f000 ff05 	bl	8001210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000406:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800040a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800040c:	4b13      	ldr	r3, [pc, #76]	; (800045c <MX_GPIO_Init+0xd4>)
 800040e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000410:	2300      	movs	r3, #0
 8000412:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000414:	f107 0310 	add.w	r3, r7, #16
 8000418:	4619      	mov	r1, r3
 800041a:	4811      	ldr	r0, [pc, #68]	; (8000460 <MX_GPIO_Init+0xd8>)
 800041c:	f000 fd74 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000420:	2320      	movs	r3, #32
 8000422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000424:	2301      	movs	r3, #1
 8000426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000428:	2300      	movs	r3, #0
 800042a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042c:	2302      	movs	r3, #2
 800042e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000430:	f107 0310 	add.w	r3, r7, #16
 8000434:	4619      	mov	r1, r3
 8000436:	4808      	ldr	r0, [pc, #32]	; (8000458 <MX_GPIO_Init+0xd0>)
 8000438:	f000 fd66 	bl	8000f08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800043c:	2200      	movs	r2, #0
 800043e:	2100      	movs	r1, #0
 8000440:	2028      	movs	r0, #40	; 0x28
 8000442:	f000 fb3c 	bl	8000abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000446:	2028      	movs	r0, #40	; 0x28
 8000448:	f000 fb55 	bl	8000af6 <HAL_NVIC_EnableIRQ>

}
 800044c:	bf00      	nop
 800044e:	3720      	adds	r7, #32
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	40021000 	.word	0x40021000
 8000458:	40010800 	.word	0x40010800
 800045c:	10110000 	.word	0x10110000
 8000460:	40011000 	.word	0x40011000

08000464 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2,(uint8_t *)&ch, 1, 0xFFFF);
 800046c:	1d39      	adds	r1, r7, #4
 800046e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000472:	2201      	movs	r2, #1
 8000474:	4803      	ldr	r0, [pc, #12]	; (8000484 <__io_putchar+0x20>)
 8000476:	f001 fb6c 	bl	8001b52 <HAL_UART_Transmit>

  return ch;
 800047a:	687b      	ldr	r3, [r7, #4]
}
 800047c:	4618      	mov	r0, r3
 800047e:	3708      	adds	r7, #8
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	200000d0 	.word	0x200000d0

08000488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048c:	b672      	cpsid	i
}
 800048e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000490:	e7fe      	b.n	8000490 <Error_Handler+0x8>
	...

08000494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800049a:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <HAL_MspInit+0x5c>)
 800049c:	699b      	ldr	r3, [r3, #24]
 800049e:	4a14      	ldr	r2, [pc, #80]	; (80004f0 <HAL_MspInit+0x5c>)
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	6193      	str	r3, [r2, #24]
 80004a6:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <HAL_MspInit+0x5c>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	60bb      	str	r3, [r7, #8]
 80004b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b2:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <HAL_MspInit+0x5c>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4a0e      	ldr	r2, [pc, #56]	; (80004f0 <HAL_MspInit+0x5c>)
 80004b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004bc:	61d3      	str	r3, [r2, #28]
 80004be:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <HAL_MspInit+0x5c>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ca:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <HAL_MspInit+0x60>)
 80004cc:	685b      	ldr	r3, [r3, #4]
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <HAL_MspInit+0x60>)
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e6:	bf00      	nop
 80004e8:	3714      	adds	r7, #20
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr
 80004f0:	40021000 	.word	0x40021000
 80004f4:	40010000 	.word	0x40010000

080004f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08a      	sub	sp, #40	; 0x28
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000500:	f107 0318 	add.w	r3, r7, #24
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a45      	ldr	r2, [pc, #276]	; (8000628 <HAL_UART_MspInit+0x130>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d15a      	bne.n	80005ce <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000518:	4b44      	ldr	r3, [pc, #272]	; (800062c <HAL_UART_MspInit+0x134>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a43      	ldr	r2, [pc, #268]	; (800062c <HAL_UART_MspInit+0x134>)
 800051e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b41      	ldr	r3, [pc, #260]	; (800062c <HAL_UART_MspInit+0x134>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800052c:	617b      	str	r3, [r7, #20]
 800052e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000530:	4b3e      	ldr	r3, [pc, #248]	; (800062c <HAL_UART_MspInit+0x134>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a3d      	ldr	r2, [pc, #244]	; (800062c <HAL_UART_MspInit+0x134>)
 8000536:	f043 0304 	orr.w	r3, r3, #4
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b3b      	ldr	r3, [pc, #236]	; (800062c <HAL_UART_MspInit+0x134>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f003 0304 	and.w	r3, r3, #4
 8000544:	613b      	str	r3, [r7, #16]
 8000546:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000548:	f44f 7300 	mov.w	r3, #512	; 0x200
 800054c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054e:	2302      	movs	r3, #2
 8000550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000552:	2303      	movs	r3, #3
 8000554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000556:	f107 0318 	add.w	r3, r7, #24
 800055a:	4619      	mov	r1, r3
 800055c:	4834      	ldr	r0, [pc, #208]	; (8000630 <HAL_UART_MspInit+0x138>)
 800055e:	f000 fcd3 	bl	8000f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000568:	2300      	movs	r3, #0
 800056a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000570:	f107 0318 	add.w	r3, r7, #24
 8000574:	4619      	mov	r1, r3
 8000576:	482e      	ldr	r0, [pc, #184]	; (8000630 <HAL_UART_MspInit+0x138>)
 8000578:	f000 fcc6 	bl	8000f08 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800057c:	4b2d      	ldr	r3, [pc, #180]	; (8000634 <HAL_UART_MspInit+0x13c>)
 800057e:	4a2e      	ldr	r2, [pc, #184]	; (8000638 <HAL_UART_MspInit+0x140>)
 8000580:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000582:	4b2c      	ldr	r3, [pc, #176]	; (8000634 <HAL_UART_MspInit+0x13c>)
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000588:	4b2a      	ldr	r3, [pc, #168]	; (8000634 <HAL_UART_MspInit+0x13c>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800058e:	4b29      	ldr	r3, [pc, #164]	; (8000634 <HAL_UART_MspInit+0x13c>)
 8000590:	2280      	movs	r2, #128	; 0x80
 8000592:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000594:	4b27      	ldr	r3, [pc, #156]	; (8000634 <HAL_UART_MspInit+0x13c>)
 8000596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800059a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800059c:	4b25      	ldr	r3, [pc, #148]	; (8000634 <HAL_UART_MspInit+0x13c>)
 800059e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005a2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <HAL_UART_MspInit+0x13c>)
 80005a6:	2220      	movs	r2, #32
 80005a8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005aa:	4b22      	ldr	r3, [pc, #136]	; (8000634 <HAL_UART_MspInit+0x13c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80005b0:	4820      	ldr	r0, [pc, #128]	; (8000634 <HAL_UART_MspInit+0x13c>)
 80005b2:	f000 fabb 	bl	8000b2c <HAL_DMA_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80005bc:	f7ff ff64 	bl	8000488 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a1c      	ldr	r2, [pc, #112]	; (8000634 <HAL_UART_MspInit+0x13c>)
 80005c4:	639a      	str	r2, [r3, #56]	; 0x38
 80005c6:	4a1b      	ldr	r2, [pc, #108]	; (8000634 <HAL_UART_MspInit+0x13c>)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005cc:	e028      	b.n	8000620 <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART2)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a1a      	ldr	r2, [pc, #104]	; (800063c <HAL_UART_MspInit+0x144>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d123      	bne.n	8000620 <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART2_CLK_ENABLE();
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <HAL_UART_MspInit+0x134>)
 80005da:	69db      	ldr	r3, [r3, #28]
 80005dc:	4a13      	ldr	r2, [pc, #76]	; (800062c <HAL_UART_MspInit+0x134>)
 80005de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e2:	61d3      	str	r3, [r2, #28]
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <HAL_UART_MspInit+0x134>)
 80005e6:	69db      	ldr	r3, [r3, #28]
 80005e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f0:	4b0e      	ldr	r3, [pc, #56]	; (800062c <HAL_UART_MspInit+0x134>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a0d      	ldr	r2, [pc, #52]	; (800062c <HAL_UART_MspInit+0x134>)
 80005f6:	f043 0304 	orr.w	r3, r3, #4
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <HAL_UART_MspInit+0x134>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f003 0304 	and.w	r3, r3, #4
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000608:	230c      	movs	r3, #12
 800060a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060c:	2302      	movs	r3, #2
 800060e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000610:	2302      	movs	r3, #2
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000614:	f107 0318 	add.w	r3, r7, #24
 8000618:	4619      	mov	r1, r3
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <HAL_UART_MspInit+0x138>)
 800061c:	f000 fc74 	bl	8000f08 <HAL_GPIO_Init>
}
 8000620:	bf00      	nop
 8000622:	3728      	adds	r7, #40	; 0x28
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40013800 	.word	0x40013800
 800062c:	40021000 	.word	0x40021000
 8000630:	40010800 	.word	0x40010800
 8000634:	20000114 	.word	0x20000114
 8000638:	40020058 	.word	0x40020058
 800063c:	40004400 	.word	0x40004400

08000640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000644:	e7fe      	b.n	8000644 <NMI_Handler+0x4>

08000646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064a:	e7fe      	b.n	800064a <HardFault_Handler+0x4>

0800064c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000650:	e7fe      	b.n	8000650 <MemManage_Handler+0x4>

08000652 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000656:	e7fe      	b.n	8000656 <BusFault_Handler+0x4>

08000658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800065c:	e7fe      	b.n	800065c <UsageFault_Handler+0x4>

0800065e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr

0800066a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr

08000676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr

08000682 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000686:	f000 f927 	bl	80008d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000694:	4802      	ldr	r0, [pc, #8]	; (80006a0 <DMA1_Channel5_IRQHandler+0x10>)
 8000696:	f000 fb03 	bl	8000ca0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000114 	.word	0x20000114

080006a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80006a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006ac:	f000 fdc8 	bl	8001240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	e00a      	b.n	80006dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80006c6:	f3af 8000 	nop.w
 80006ca:	4601      	mov	r1, r0
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	1c5a      	adds	r2, r3, #1
 80006d0:	60ba      	str	r2, [r7, #8]
 80006d2:	b2ca      	uxtb	r2, r1
 80006d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	3301      	adds	r3, #1
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	697a      	ldr	r2, [r7, #20]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	dbf0      	blt.n	80006c6 <_read+0x12>
	}

return len;
 80006e4:	687b      	ldr	r3, [r7, #4]
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3718      	adds	r7, #24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b086      	sub	sp, #24
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	60f8      	str	r0, [r7, #12]
 80006f6:	60b9      	str	r1, [r7, #8]
 80006f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
 80006fe:	e009      	b.n	8000714 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	60ba      	str	r2, [r7, #8]
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff feab 	bl	8000464 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	3301      	adds	r3, #1
 8000712:	617b      	str	r3, [r7, #20]
 8000714:	697a      	ldr	r2, [r7, #20]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	429a      	cmp	r2, r3
 800071a:	dbf1      	blt.n	8000700 <_write+0x12>
	}
	return len;
 800071c:	687b      	ldr	r3, [r7, #4]
}
 800071e:	4618      	mov	r0, r3
 8000720:	3718      	adds	r7, #24
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <_close>:

int _close(int file)
{
 8000726:	b480      	push	{r7}
 8000728:	b083      	sub	sp, #12
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
	return -1;
 800072e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000732:	4618      	mov	r0, r3
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800074c:	605a      	str	r2, [r3, #4]
	return 0;
 800074e:	2300      	movs	r3, #0
}
 8000750:	4618      	mov	r0, r3
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr

0800075a <_isatty>:

int _isatty(int file)
{
 800075a:	b480      	push	{r7}
 800075c:	b083      	sub	sp, #12
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
	return 1;
 8000762:	2301      	movs	r3, #1
}
 8000764:	4618      	mov	r0, r3
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr

0800076e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800076e:	b480      	push	{r7}
 8000770:	b085      	sub	sp, #20
 8000772:	af00      	add	r7, sp, #0
 8000774:	60f8      	str	r0, [r7, #12]
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
	return 0;
 800077a:	2300      	movs	r3, #0
}
 800077c:	4618      	mov	r0, r3
 800077e:	3714      	adds	r7, #20
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr
	...

08000788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000790:	4a14      	ldr	r2, [pc, #80]	; (80007e4 <_sbrk+0x5c>)
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <_sbrk+0x60>)
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800079c:	4b13      	ldr	r3, [pc, #76]	; (80007ec <_sbrk+0x64>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d102      	bne.n	80007aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <_sbrk+0x64>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <_sbrk+0x68>)
 80007a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <_sbrk+0x64>)
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4413      	add	r3, r2
 80007b2:	693a      	ldr	r2, [r7, #16]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d207      	bcs.n	80007c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b8:	f001 fce2 	bl	8002180 <__errno>
 80007bc:	4603      	mov	r3, r0
 80007be:	220c      	movs	r2, #12
 80007c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007c2:	f04f 33ff 	mov.w	r3, #4294967295
 80007c6:	e009      	b.n	80007dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <_sbrk+0x64>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007ce:	4b07      	ldr	r3, [pc, #28]	; (80007ec <_sbrk+0x64>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	4a05      	ldr	r2, [pc, #20]	; (80007ec <_sbrk+0x64>)
 80007d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007da:	68fb      	ldr	r3, [r7, #12]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3718      	adds	r7, #24
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20005000 	.word	0x20005000
 80007e8:	00000400 	.word	0x00000400
 80007ec:	2000016c 	.word	0x2000016c
 80007f0:	20000188 	.word	0x20000188

080007f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr

08000800 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000800:	480c      	ldr	r0, [pc, #48]	; (8000834 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000802:	490d      	ldr	r1, [pc, #52]	; (8000838 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000804:	4a0d      	ldr	r2, [pc, #52]	; (800083c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000808:	e002      	b.n	8000810 <LoopCopyDataInit>

0800080a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800080c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080e:	3304      	adds	r3, #4

08000810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000814:	d3f9      	bcc.n	800080a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000818:	4c0a      	ldr	r4, [pc, #40]	; (8000844 <LoopFillZerobss+0x22>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800081c:	e001      	b.n	8000822 <LoopFillZerobss>

0800081e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000820:	3204      	adds	r2, #4

08000822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000824:	d3fb      	bcc.n	800081e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000826:	f7ff ffe5 	bl	80007f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800082a:	f001 fcaf 	bl	800218c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800082e:	f7ff fc8d 	bl	800014c <main>
  bx lr
 8000832:	4770      	bx	lr
  ldr r0, =_sdata
 8000834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000838:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800083c:	080032e0 	.word	0x080032e0
  ldr r2, =_sbss
 8000840:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000844:	20000184 	.word	0x20000184

08000848 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000848:	e7fe      	b.n	8000848 <ADC1_2_IRQHandler>
	...

0800084c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_Init+0x28>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a07      	ldr	r2, [pc, #28]	; (8000874 <HAL_Init+0x28>)
 8000856:	f043 0310 	orr.w	r3, r3, #16
 800085a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800085c:	2003      	movs	r0, #3
 800085e:	f000 f923 	bl	8000aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000862:	2000      	movs	r0, #0
 8000864:	f000 f808 	bl	8000878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000868:	f7ff fe14 	bl	8000494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40022000 	.word	0x40022000

08000878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_InitTick+0x54>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <HAL_InitTick+0x58>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4619      	mov	r1, r3
 800088a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000892:	fbb2 f3f3 	udiv	r3, r2, r3
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f93b 	bl	8000b12 <HAL_SYSTICK_Config>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e00e      	b.n	80008c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b0f      	cmp	r3, #15
 80008aa:	d80a      	bhi.n	80008c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ac:	2200      	movs	r2, #0
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	f000 f903 	bl	8000abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b8:	4a06      	ldr	r2, [pc, #24]	; (80008d4 <HAL_InitTick+0x5c>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008be:	2300      	movs	r3, #0
 80008c0:	e000      	b.n	80008c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000000 	.word	0x20000000
 80008d0:	20000008 	.word	0x20000008
 80008d4:	20000004 	.word	0x20000004

080008d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <HAL_IncTick+0x1c>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <HAL_IncTick+0x20>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4413      	add	r3, r2
 80008e8:	4a03      	ldr	r2, [pc, #12]	; (80008f8 <HAL_IncTick+0x20>)
 80008ea:	6013      	str	r3, [r2, #0]
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	20000008 	.word	0x20000008
 80008f8:	20000170 	.word	0x20000170

080008fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000900:	4b02      	ldr	r3, [pc, #8]	; (800090c <HAL_GetTick+0x10>)
 8000902:	681b      	ldr	r3, [r3, #0]
}
 8000904:	4618      	mov	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	20000170 	.word	0x20000170

08000910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800092c:	4013      	ands	r3, r2
 800092e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800093c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000942:	4a04      	ldr	r2, [pc, #16]	; (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	60d3      	str	r3, [r2, #12]
}
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800095c:	4b04      	ldr	r3, [pc, #16]	; (8000970 <__NVIC_GetPriorityGrouping+0x18>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	0a1b      	lsrs	r3, r3, #8
 8000962:	f003 0307 	and.w	r3, r3, #7
}
 8000966:	4618      	mov	r0, r3
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	2b00      	cmp	r3, #0
 8000984:	db0b      	blt.n	800099e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	f003 021f 	and.w	r2, r3, #31
 800098c:	4906      	ldr	r1, [pc, #24]	; (80009a8 <__NVIC_EnableIRQ+0x34>)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	095b      	lsrs	r3, r3, #5
 8000994:	2001      	movs	r0, #1
 8000996:	fa00 f202 	lsl.w	r2, r0, r2
 800099a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	e000e100 	.word	0xe000e100

080009ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	6039      	str	r1, [r7, #0]
 80009b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	db0a      	blt.n	80009d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	490c      	ldr	r1, [pc, #48]	; (80009f8 <__NVIC_SetPriority+0x4c>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	0112      	lsls	r2, r2, #4
 80009cc:	b2d2      	uxtb	r2, r2
 80009ce:	440b      	add	r3, r1
 80009d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d4:	e00a      	b.n	80009ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4908      	ldr	r1, [pc, #32]	; (80009fc <__NVIC_SetPriority+0x50>)
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	f003 030f 	and.w	r3, r3, #15
 80009e2:	3b04      	subs	r3, #4
 80009e4:	0112      	lsls	r2, r2, #4
 80009e6:	b2d2      	uxtb	r2, r2
 80009e8:	440b      	add	r3, r1
 80009ea:	761a      	strb	r2, [r3, #24]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000e100 	.word	0xe000e100
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b089      	sub	sp, #36	; 0x24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	f1c3 0307 	rsb	r3, r3, #7
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	bf28      	it	cs
 8000a1e:	2304      	movcs	r3, #4
 8000a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3304      	adds	r3, #4
 8000a26:	2b06      	cmp	r3, #6
 8000a28:	d902      	bls.n	8000a30 <NVIC_EncodePriority+0x30>
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3b03      	subs	r3, #3
 8000a2e:	e000      	b.n	8000a32 <NVIC_EncodePriority+0x32>
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a34:	f04f 32ff 	mov.w	r2, #4294967295
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43da      	mvns	r2, r3
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	401a      	ands	r2, r3
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a48:	f04f 31ff 	mov.w	r1, #4294967295
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a52:	43d9      	mvns	r1, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a58:	4313      	orrs	r3, r2
         );
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3724      	adds	r7, #36	; 0x24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a74:	d301      	bcc.n	8000a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a76:	2301      	movs	r3, #1
 8000a78:	e00f      	b.n	8000a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <SysTick_Config+0x40>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a82:	210f      	movs	r1, #15
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	f7ff ff90 	bl	80009ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <SysTick_Config+0x40>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a92:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <SysTick_Config+0x40>)
 8000a94:	2207      	movs	r2, #7
 8000a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	e000e010 	.word	0xe000e010

08000aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff ff2d 	bl	8000910 <__NVIC_SetPriorityGrouping>
}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b086      	sub	sp, #24
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	60b9      	str	r1, [r7, #8]
 8000ac8:	607a      	str	r2, [r7, #4]
 8000aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad0:	f7ff ff42 	bl	8000958 <__NVIC_GetPriorityGrouping>
 8000ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	68b9      	ldr	r1, [r7, #8]
 8000ada:	6978      	ldr	r0, [r7, #20]
 8000adc:	f7ff ff90 	bl	8000a00 <NVIC_EncodePriority>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff5f 	bl	80009ac <__NVIC_SetPriority>
}
 8000aee:	bf00      	nop
 8000af0:	3718      	adds	r7, #24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	4603      	mov	r3, r0
 8000afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff35 	bl	8000974 <__NVIC_EnableIRQ>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ffa2 	bl	8000a64 <SysTick_Config>
 8000b20:	4603      	mov	r3, r0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e043      	b.n	8000bca <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	4b22      	ldr	r3, [pc, #136]	; (8000bd4 <HAL_DMA_Init+0xa8>)
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a22      	ldr	r2, [pc, #136]	; (8000bd8 <HAL_DMA_Init+0xac>)
 8000b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b52:	091b      	lsrs	r3, r3, #4
 8000b54:	009a      	lsls	r2, r3, #2
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a1f      	ldr	r2, [pc, #124]	; (8000bdc <HAL_DMA_Init+0xb0>)
 8000b5e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2202      	movs	r2, #2
 8000b64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000b76:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ba4:	68fa      	ldr	r2, [r7, #12]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2201      	movs	r2, #1
 8000bbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	bffdfff8 	.word	0xbffdfff8
 8000bd8:	cccccccd 	.word	0xcccccccd
 8000bdc:	40020000 	.word	0x40020000

08000be0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
 8000bec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d101      	bne.n	8000c00 <HAL_DMA_Start_IT+0x20>
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	e04a      	b.n	8000c96 <HAL_DMA_Start_IT+0xb6>
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2201      	movs	r2, #1
 8000c04:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d13a      	bne.n	8000c88 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	2202      	movs	r2, #2
 8000c16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f022 0201 	bic.w	r2, r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	68b9      	ldr	r1, [r7, #8]
 8000c36:	68f8      	ldr	r0, [r7, #12]
 8000c38:	f000 f938 	bl	8000eac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d008      	beq.n	8000c56 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f042 020e 	orr.w	r2, r2, #14
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	e00f      	b.n	8000c76 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f022 0204 	bic.w	r2, r2, #4
 8000c64:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f042 020a 	orr.w	r2, r2, #10
 8000c74:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f042 0201 	orr.w	r2, r2, #1
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	e005      	b.n	8000c94 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000c90:	2302      	movs	r3, #2
 8000c92:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	2204      	movs	r2, #4
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d04f      	beq.n	8000d68 <HAL_DMA_IRQHandler+0xc8>
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	f003 0304 	and.w	r3, r3, #4
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d04a      	beq.n	8000d68 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 0320 	and.w	r3, r3, #32
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d107      	bne.n	8000cf0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f022 0204 	bic.w	r2, r2, #4
 8000cee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a66      	ldr	r2, [pc, #408]	; (8000e90 <HAL_DMA_IRQHandler+0x1f0>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d029      	beq.n	8000d4e <HAL_DMA_IRQHandler+0xae>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a65      	ldr	r2, [pc, #404]	; (8000e94 <HAL_DMA_IRQHandler+0x1f4>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d022      	beq.n	8000d4a <HAL_DMA_IRQHandler+0xaa>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a63      	ldr	r2, [pc, #396]	; (8000e98 <HAL_DMA_IRQHandler+0x1f8>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d01a      	beq.n	8000d44 <HAL_DMA_IRQHandler+0xa4>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a62      	ldr	r2, [pc, #392]	; (8000e9c <HAL_DMA_IRQHandler+0x1fc>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d012      	beq.n	8000d3e <HAL_DMA_IRQHandler+0x9e>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a60      	ldr	r2, [pc, #384]	; (8000ea0 <HAL_DMA_IRQHandler+0x200>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d00a      	beq.n	8000d38 <HAL_DMA_IRQHandler+0x98>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a5f      	ldr	r2, [pc, #380]	; (8000ea4 <HAL_DMA_IRQHandler+0x204>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d102      	bne.n	8000d32 <HAL_DMA_IRQHandler+0x92>
 8000d2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d30:	e00e      	b.n	8000d50 <HAL_DMA_IRQHandler+0xb0>
 8000d32:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d36:	e00b      	b.n	8000d50 <HAL_DMA_IRQHandler+0xb0>
 8000d38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d3c:	e008      	b.n	8000d50 <HAL_DMA_IRQHandler+0xb0>
 8000d3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d42:	e005      	b.n	8000d50 <HAL_DMA_IRQHandler+0xb0>
 8000d44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d48:	e002      	b.n	8000d50 <HAL_DMA_IRQHandler+0xb0>
 8000d4a:	2340      	movs	r3, #64	; 0x40
 8000d4c:	e000      	b.n	8000d50 <HAL_DMA_IRQHandler+0xb0>
 8000d4e:	2304      	movs	r3, #4
 8000d50:	4a55      	ldr	r2, [pc, #340]	; (8000ea8 <HAL_DMA_IRQHandler+0x208>)
 8000d52:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f000 8094 	beq.w	8000e86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000d66:	e08e      	b.n	8000e86 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	2202      	movs	r2, #2
 8000d6e:	409a      	lsls	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4013      	ands	r3, r2
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d056      	beq.n	8000e26 <HAL_DMA_IRQHandler+0x186>
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d051      	beq.n	8000e26 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 0320 	and.w	r3, r3, #32
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d10b      	bne.n	8000da8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f022 020a 	bic.w	r2, r2, #10
 8000d9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2201      	movs	r2, #1
 8000da4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a38      	ldr	r2, [pc, #224]	; (8000e90 <HAL_DMA_IRQHandler+0x1f0>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d029      	beq.n	8000e06 <HAL_DMA_IRQHandler+0x166>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a37      	ldr	r2, [pc, #220]	; (8000e94 <HAL_DMA_IRQHandler+0x1f4>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d022      	beq.n	8000e02 <HAL_DMA_IRQHandler+0x162>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a35      	ldr	r2, [pc, #212]	; (8000e98 <HAL_DMA_IRQHandler+0x1f8>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d01a      	beq.n	8000dfc <HAL_DMA_IRQHandler+0x15c>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a34      	ldr	r2, [pc, #208]	; (8000e9c <HAL_DMA_IRQHandler+0x1fc>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d012      	beq.n	8000df6 <HAL_DMA_IRQHandler+0x156>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a32      	ldr	r2, [pc, #200]	; (8000ea0 <HAL_DMA_IRQHandler+0x200>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d00a      	beq.n	8000df0 <HAL_DMA_IRQHandler+0x150>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a31      	ldr	r2, [pc, #196]	; (8000ea4 <HAL_DMA_IRQHandler+0x204>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d102      	bne.n	8000dea <HAL_DMA_IRQHandler+0x14a>
 8000de4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000de8:	e00e      	b.n	8000e08 <HAL_DMA_IRQHandler+0x168>
 8000dea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dee:	e00b      	b.n	8000e08 <HAL_DMA_IRQHandler+0x168>
 8000df0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000df4:	e008      	b.n	8000e08 <HAL_DMA_IRQHandler+0x168>
 8000df6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dfa:	e005      	b.n	8000e08 <HAL_DMA_IRQHandler+0x168>
 8000dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e00:	e002      	b.n	8000e08 <HAL_DMA_IRQHandler+0x168>
 8000e02:	2320      	movs	r3, #32
 8000e04:	e000      	b.n	8000e08 <HAL_DMA_IRQHandler+0x168>
 8000e06:	2302      	movs	r3, #2
 8000e08:	4a27      	ldr	r2, [pc, #156]	; (8000ea8 <HAL_DMA_IRQHandler+0x208>)
 8000e0a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d034      	beq.n	8000e86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000e24:	e02f      	b.n	8000e86 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	2208      	movs	r2, #8
 8000e2c:	409a      	lsls	r2, r3
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	4013      	ands	r3, r2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d028      	beq.n	8000e88 <HAL_DMA_IRQHandler+0x1e8>
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	f003 0308 	and.w	r3, r3, #8
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d023      	beq.n	8000e88 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f022 020e 	bic.w	r2, r2, #14
 8000e4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e58:	2101      	movs	r1, #1
 8000e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2201      	movs	r2, #1
 8000e64:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d004      	beq.n	8000e88 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	4798      	blx	r3
    }
  }
  return;
 8000e86:	bf00      	nop
 8000e88:	bf00      	nop
}
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40020008 	.word	0x40020008
 8000e94:	4002001c 	.word	0x4002001c
 8000e98:	40020030 	.word	0x40020030
 8000e9c:	40020044 	.word	0x40020044
 8000ea0:	40020058 	.word	0x40020058
 8000ea4:	4002006c 	.word	0x4002006c
 8000ea8:	40020000 	.word	0x40020000

08000eac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
 8000eb8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	2b10      	cmp	r3, #16
 8000ed8:	d108      	bne.n	8000eec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000eea:	e007      	b.n	8000efc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	68ba      	ldr	r2, [r7, #8]
 8000ef2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	60da      	str	r2, [r3, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
	...

08000f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b08b      	sub	sp, #44	; 0x2c
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f16:	2300      	movs	r3, #0
 8000f18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f1a:	e169      	b.n	80011f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	69fa      	ldr	r2, [r7, #28]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	f040 8158 	bne.w	80011ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	4a9a      	ldr	r2, [pc, #616]	; (80011a8 <HAL_GPIO_Init+0x2a0>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d05e      	beq.n	8001002 <HAL_GPIO_Init+0xfa>
 8000f44:	4a98      	ldr	r2, [pc, #608]	; (80011a8 <HAL_GPIO_Init+0x2a0>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d875      	bhi.n	8001036 <HAL_GPIO_Init+0x12e>
 8000f4a:	4a98      	ldr	r2, [pc, #608]	; (80011ac <HAL_GPIO_Init+0x2a4>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d058      	beq.n	8001002 <HAL_GPIO_Init+0xfa>
 8000f50:	4a96      	ldr	r2, [pc, #600]	; (80011ac <HAL_GPIO_Init+0x2a4>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d86f      	bhi.n	8001036 <HAL_GPIO_Init+0x12e>
 8000f56:	4a96      	ldr	r2, [pc, #600]	; (80011b0 <HAL_GPIO_Init+0x2a8>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d052      	beq.n	8001002 <HAL_GPIO_Init+0xfa>
 8000f5c:	4a94      	ldr	r2, [pc, #592]	; (80011b0 <HAL_GPIO_Init+0x2a8>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d869      	bhi.n	8001036 <HAL_GPIO_Init+0x12e>
 8000f62:	4a94      	ldr	r2, [pc, #592]	; (80011b4 <HAL_GPIO_Init+0x2ac>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d04c      	beq.n	8001002 <HAL_GPIO_Init+0xfa>
 8000f68:	4a92      	ldr	r2, [pc, #584]	; (80011b4 <HAL_GPIO_Init+0x2ac>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d863      	bhi.n	8001036 <HAL_GPIO_Init+0x12e>
 8000f6e:	4a92      	ldr	r2, [pc, #584]	; (80011b8 <HAL_GPIO_Init+0x2b0>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d046      	beq.n	8001002 <HAL_GPIO_Init+0xfa>
 8000f74:	4a90      	ldr	r2, [pc, #576]	; (80011b8 <HAL_GPIO_Init+0x2b0>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d85d      	bhi.n	8001036 <HAL_GPIO_Init+0x12e>
 8000f7a:	2b12      	cmp	r3, #18
 8000f7c:	d82a      	bhi.n	8000fd4 <HAL_GPIO_Init+0xcc>
 8000f7e:	2b12      	cmp	r3, #18
 8000f80:	d859      	bhi.n	8001036 <HAL_GPIO_Init+0x12e>
 8000f82:	a201      	add	r2, pc, #4	; (adr r2, 8000f88 <HAL_GPIO_Init+0x80>)
 8000f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f88:	08001003 	.word	0x08001003
 8000f8c:	08000fdd 	.word	0x08000fdd
 8000f90:	08000fef 	.word	0x08000fef
 8000f94:	08001031 	.word	0x08001031
 8000f98:	08001037 	.word	0x08001037
 8000f9c:	08001037 	.word	0x08001037
 8000fa0:	08001037 	.word	0x08001037
 8000fa4:	08001037 	.word	0x08001037
 8000fa8:	08001037 	.word	0x08001037
 8000fac:	08001037 	.word	0x08001037
 8000fb0:	08001037 	.word	0x08001037
 8000fb4:	08001037 	.word	0x08001037
 8000fb8:	08001037 	.word	0x08001037
 8000fbc:	08001037 	.word	0x08001037
 8000fc0:	08001037 	.word	0x08001037
 8000fc4:	08001037 	.word	0x08001037
 8000fc8:	08001037 	.word	0x08001037
 8000fcc:	08000fe5 	.word	0x08000fe5
 8000fd0:	08000ff9 	.word	0x08000ff9
 8000fd4:	4a79      	ldr	r2, [pc, #484]	; (80011bc <HAL_GPIO_Init+0x2b4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d013      	beq.n	8001002 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fda:	e02c      	b.n	8001036 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	623b      	str	r3, [r7, #32]
          break;
 8000fe2:	e029      	b.n	8001038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	623b      	str	r3, [r7, #32]
          break;
 8000fec:	e024      	b.n	8001038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	3308      	adds	r3, #8
 8000ff4:	623b      	str	r3, [r7, #32]
          break;
 8000ff6:	e01f      	b.n	8001038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	330c      	adds	r3, #12
 8000ffe:	623b      	str	r3, [r7, #32]
          break;
 8001000:	e01a      	b.n	8001038 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d102      	bne.n	8001010 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800100a:	2304      	movs	r3, #4
 800100c:	623b      	str	r3, [r7, #32]
          break;
 800100e:	e013      	b.n	8001038 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d105      	bne.n	8001024 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001018:	2308      	movs	r3, #8
 800101a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69fa      	ldr	r2, [r7, #28]
 8001020:	611a      	str	r2, [r3, #16]
          break;
 8001022:	e009      	b.n	8001038 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001024:	2308      	movs	r3, #8
 8001026:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	69fa      	ldr	r2, [r7, #28]
 800102c:	615a      	str	r2, [r3, #20]
          break;
 800102e:	e003      	b.n	8001038 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
          break;
 8001034:	e000      	b.n	8001038 <HAL_GPIO_Init+0x130>
          break;
 8001036:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	2bff      	cmp	r3, #255	; 0xff
 800103c:	d801      	bhi.n	8001042 <HAL_GPIO_Init+0x13a>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	e001      	b.n	8001046 <HAL_GPIO_Init+0x13e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3304      	adds	r3, #4
 8001046:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	2bff      	cmp	r3, #255	; 0xff
 800104c:	d802      	bhi.n	8001054 <HAL_GPIO_Init+0x14c>
 800104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	e002      	b.n	800105a <HAL_GPIO_Init+0x152>
 8001054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001056:	3b08      	subs	r3, #8
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	210f      	movs	r1, #15
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	fa01 f303 	lsl.w	r3, r1, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	401a      	ands	r2, r3
 800106c:	6a39      	ldr	r1, [r7, #32]
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	fa01 f303 	lsl.w	r3, r1, r3
 8001074:	431a      	orrs	r2, r3
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001082:	2b00      	cmp	r3, #0
 8001084:	f000 80b1 	beq.w	80011ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001088:	4b4d      	ldr	r3, [pc, #308]	; (80011c0 <HAL_GPIO_Init+0x2b8>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a4c      	ldr	r2, [pc, #304]	; (80011c0 <HAL_GPIO_Init+0x2b8>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b4a      	ldr	r3, [pc, #296]	; (80011c0 <HAL_GPIO_Init+0x2b8>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010a0:	4a48      	ldr	r2, [pc, #288]	; (80011c4 <HAL_GPIO_Init+0x2bc>)
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	089b      	lsrs	r3, r3, #2
 80010a6:	3302      	adds	r3, #2
 80010a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	220f      	movs	r2, #15
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	4013      	ands	r3, r2
 80010c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a40      	ldr	r2, [pc, #256]	; (80011c8 <HAL_GPIO_Init+0x2c0>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d013      	beq.n	80010f4 <HAL_GPIO_Init+0x1ec>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a3f      	ldr	r2, [pc, #252]	; (80011cc <HAL_GPIO_Init+0x2c4>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d00d      	beq.n	80010f0 <HAL_GPIO_Init+0x1e8>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a3e      	ldr	r2, [pc, #248]	; (80011d0 <HAL_GPIO_Init+0x2c8>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d007      	beq.n	80010ec <HAL_GPIO_Init+0x1e4>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a3d      	ldr	r2, [pc, #244]	; (80011d4 <HAL_GPIO_Init+0x2cc>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d101      	bne.n	80010e8 <HAL_GPIO_Init+0x1e0>
 80010e4:	2303      	movs	r3, #3
 80010e6:	e006      	b.n	80010f6 <HAL_GPIO_Init+0x1ee>
 80010e8:	2304      	movs	r3, #4
 80010ea:	e004      	b.n	80010f6 <HAL_GPIO_Init+0x1ee>
 80010ec:	2302      	movs	r3, #2
 80010ee:	e002      	b.n	80010f6 <HAL_GPIO_Init+0x1ee>
 80010f0:	2301      	movs	r3, #1
 80010f2:	e000      	b.n	80010f6 <HAL_GPIO_Init+0x1ee>
 80010f4:	2300      	movs	r3, #0
 80010f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010f8:	f002 0203 	and.w	r2, r2, #3
 80010fc:	0092      	lsls	r2, r2, #2
 80010fe:	4093      	lsls	r3, r2
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	4313      	orrs	r3, r2
 8001104:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001106:	492f      	ldr	r1, [pc, #188]	; (80011c4 <HAL_GPIO_Init+0x2bc>)
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	3302      	adds	r3, #2
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d006      	beq.n	800112e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001120:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	492c      	ldr	r1, [pc, #176]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	600b      	str	r3, [r1, #0]
 800112c:	e006      	b.n	800113c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800112e:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	43db      	mvns	r3, r3
 8001136:	4928      	ldr	r1, [pc, #160]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001138:	4013      	ands	r3, r2
 800113a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d006      	beq.n	8001156 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001148:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	4922      	ldr	r1, [pc, #136]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	604b      	str	r3, [r1, #4]
 8001154:	e006      	b.n	8001164 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001156:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	43db      	mvns	r3, r3
 800115e:	491e      	ldr	r1, [pc, #120]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001160:	4013      	ands	r3, r2
 8001162:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d006      	beq.n	800117e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001170:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	4918      	ldr	r1, [pc, #96]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	608b      	str	r3, [r1, #8]
 800117c:	e006      	b.n	800118c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	43db      	mvns	r3, r3
 8001186:	4914      	ldr	r1, [pc, #80]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 8001188:	4013      	ands	r3, r2
 800118a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d021      	beq.n	80011dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 800119a:	68da      	ldr	r2, [r3, #12]
 800119c:	490e      	ldr	r1, [pc, #56]	; (80011d8 <HAL_GPIO_Init+0x2d0>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	60cb      	str	r3, [r1, #12]
 80011a4:	e021      	b.n	80011ea <HAL_GPIO_Init+0x2e2>
 80011a6:	bf00      	nop
 80011a8:	10320000 	.word	0x10320000
 80011ac:	10310000 	.word	0x10310000
 80011b0:	10220000 	.word	0x10220000
 80011b4:	10210000 	.word	0x10210000
 80011b8:	10120000 	.word	0x10120000
 80011bc:	10110000 	.word	0x10110000
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40010000 	.word	0x40010000
 80011c8:	40010800 	.word	0x40010800
 80011cc:	40010c00 	.word	0x40010c00
 80011d0:	40011000 	.word	0x40011000
 80011d4:	40011400 	.word	0x40011400
 80011d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_GPIO_Init+0x304>)
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	4909      	ldr	r1, [pc, #36]	; (800120c <HAL_GPIO_Init+0x304>)
 80011e6:	4013      	ands	r3, r2
 80011e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	3301      	adds	r3, #1
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	fa22 f303 	lsr.w	r3, r2, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f47f ae8e 	bne.w	8000f1c <HAL_GPIO_Init+0x14>
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	372c      	adds	r7, #44	; 0x2c
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	40010400 	.word	0x40010400

08001210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	807b      	strh	r3, [r7, #2]
 800121c:	4613      	mov	r3, r2
 800121e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001220:	787b      	ldrb	r3, [r7, #1]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001226:	887a      	ldrh	r2, [r7, #2]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800122c:	e003      	b.n	8001236 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800122e:	887b      	ldrh	r3, [r7, #2]
 8001230:	041a      	lsls	r2, r3, #16
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	611a      	str	r2, [r3, #16]
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800124c:	695a      	ldr	r2, [r3, #20]
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	4013      	ands	r3, r2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d006      	beq.n	8001264 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	4618      	mov	r0, r3
 8001260:	f000 f806 	bl	8001270 <HAL_GPIO_EXTI_Callback>
  }
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40010400 	.word	0x40010400

08001270 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e272      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 8087 	beq.w	80013b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012a4:	4b92      	ldr	r3, [pc, #584]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 030c 	and.w	r3, r3, #12
 80012ac:	2b04      	cmp	r3, #4
 80012ae:	d00c      	beq.n	80012ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012b0:	4b8f      	ldr	r3, [pc, #572]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d112      	bne.n	80012e2 <HAL_RCC_OscConfig+0x5e>
 80012bc:	4b8c      	ldr	r3, [pc, #560]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c8:	d10b      	bne.n	80012e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ca:	4b89      	ldr	r3, [pc, #548]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d06c      	beq.n	80013b0 <HAL_RCC_OscConfig+0x12c>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d168      	bne.n	80013b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e24c      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ea:	d106      	bne.n	80012fa <HAL_RCC_OscConfig+0x76>
 80012ec:	4b80      	ldr	r3, [pc, #512]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a7f      	ldr	r2, [pc, #508]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80012f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	e02e      	b.n	8001358 <HAL_RCC_OscConfig+0xd4>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10c      	bne.n	800131c <HAL_RCC_OscConfig+0x98>
 8001302:	4b7b      	ldr	r3, [pc, #492]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a7a      	ldr	r2, [pc, #488]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	4b78      	ldr	r3, [pc, #480]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a77      	ldr	r2, [pc, #476]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001314:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e01d      	b.n	8001358 <HAL_RCC_OscConfig+0xd4>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001324:	d10c      	bne.n	8001340 <HAL_RCC_OscConfig+0xbc>
 8001326:	4b72      	ldr	r3, [pc, #456]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a71      	ldr	r2, [pc, #452]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 800132c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	4b6f      	ldr	r3, [pc, #444]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a6e      	ldr	r2, [pc, #440]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e00b      	b.n	8001358 <HAL_RCC_OscConfig+0xd4>
 8001340:	4b6b      	ldr	r3, [pc, #428]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a6a      	ldr	r2, [pc, #424]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4b68      	ldr	r3, [pc, #416]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a67      	ldr	r2, [pc, #412]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001356:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d013      	beq.n	8001388 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001360:	f7ff facc 	bl	80008fc <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001368:	f7ff fac8 	bl	80008fc <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b64      	cmp	r3, #100	; 0x64
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e200      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	4b5d      	ldr	r3, [pc, #372]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0xe4>
 8001386:	e014      	b.n	80013b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fab8 	bl	80008fc <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001390:	f7ff fab4 	bl	80008fc <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	; 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e1ec      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	4b53      	ldr	r3, [pc, #332]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x10c>
 80013ae:	e000      	b.n	80013b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d063      	beq.n	8001486 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013be:	4b4c      	ldr	r3, [pc, #304]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00b      	beq.n	80013e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013ca:	4b49      	ldr	r3, [pc, #292]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d11c      	bne.n	8001410 <HAL_RCC_OscConfig+0x18c>
 80013d6:	4b46      	ldr	r3, [pc, #280]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d116      	bne.n	8001410 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e2:	4b43      	ldr	r3, [pc, #268]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <HAL_RCC_OscConfig+0x176>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d001      	beq.n	80013fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e1c0      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fa:	4b3d      	ldr	r3, [pc, #244]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	4939      	ldr	r1, [pc, #228]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 800140a:	4313      	orrs	r3, r2
 800140c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140e:	e03a      	b.n	8001486 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d020      	beq.n	800145a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001418:	4b36      	ldr	r3, [pc, #216]	; (80014f4 <HAL_RCC_OscConfig+0x270>)
 800141a:	2201      	movs	r2, #1
 800141c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141e:	f7ff fa6d 	bl	80008fc <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001426:	f7ff fa69 	bl	80008fc <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e1a1      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d0f0      	beq.n	8001426 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001444:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	4927      	ldr	r1, [pc, #156]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 8001454:	4313      	orrs	r3, r2
 8001456:	600b      	str	r3, [r1, #0]
 8001458:	e015      	b.n	8001486 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800145a:	4b26      	ldr	r3, [pc, #152]	; (80014f4 <HAL_RCC_OscConfig+0x270>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fa4c 	bl	80008fc <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001468:	f7ff fa48 	bl	80008fc <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e180      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d03a      	beq.n	8001508 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d019      	beq.n	80014ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <HAL_RCC_OscConfig+0x274>)
 800149c:	2201      	movs	r2, #1
 800149e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a0:	f7ff fa2c 	bl	80008fc <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a8:	f7ff fa28 	bl	80008fc <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e160      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f0      	beq.n	80014a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014c6:	2001      	movs	r0, #1
 80014c8:	f000 fad8 	bl	8001a7c <RCC_Delay>
 80014cc:	e01c      	b.n	8001508 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_RCC_OscConfig+0x274>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d4:	f7ff fa12 	bl	80008fc <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014da:	e00f      	b.n	80014fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014dc:	f7ff fa0e 	bl	80008fc <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d908      	bls.n	80014fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e146      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000
 80014f4:	42420000 	.word	0x42420000
 80014f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fc:	4b92      	ldr	r3, [pc, #584]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80014fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1e9      	bne.n	80014dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 80a6 	beq.w	8001662 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001516:	2300      	movs	r3, #0
 8001518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800151a:	4b8b      	ldr	r3, [pc, #556]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10d      	bne.n	8001542 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001526:	4b88      	ldr	r3, [pc, #544]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	4a87      	ldr	r2, [pc, #540]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 800152c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001530:	61d3      	str	r3, [r2, #28]
 8001532:	4b85      	ldr	r3, [pc, #532]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800153e:	2301      	movs	r3, #1
 8001540:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001542:	4b82      	ldr	r3, [pc, #520]	; (800174c <HAL_RCC_OscConfig+0x4c8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154a:	2b00      	cmp	r3, #0
 800154c:	d118      	bne.n	8001580 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154e:	4b7f      	ldr	r3, [pc, #508]	; (800174c <HAL_RCC_OscConfig+0x4c8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a7e      	ldr	r2, [pc, #504]	; (800174c <HAL_RCC_OscConfig+0x4c8>)
 8001554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800155a:	f7ff f9cf 	bl	80008fc <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001562:	f7ff f9cb 	bl	80008fc <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b64      	cmp	r3, #100	; 0x64
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e103      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001574:	4b75      	ldr	r3, [pc, #468]	; (800174c <HAL_RCC_OscConfig+0x4c8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d106      	bne.n	8001596 <HAL_RCC_OscConfig+0x312>
 8001588:	4b6f      	ldr	r3, [pc, #444]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	4a6e      	ldr	r2, [pc, #440]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6213      	str	r3, [r2, #32]
 8001594:	e02d      	b.n	80015f2 <HAL_RCC_OscConfig+0x36e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0x334>
 800159e:	4b6a      	ldr	r3, [pc, #424]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	4a69      	ldr	r2, [pc, #420]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	f023 0301 	bic.w	r3, r3, #1
 80015a8:	6213      	str	r3, [r2, #32]
 80015aa:	4b67      	ldr	r3, [pc, #412]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	4a66      	ldr	r2, [pc, #408]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80015b0:	f023 0304 	bic.w	r3, r3, #4
 80015b4:	6213      	str	r3, [r2, #32]
 80015b6:	e01c      	b.n	80015f2 <HAL_RCC_OscConfig+0x36e>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b05      	cmp	r3, #5
 80015be:	d10c      	bne.n	80015da <HAL_RCC_OscConfig+0x356>
 80015c0:	4b61      	ldr	r3, [pc, #388]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	4a60      	ldr	r2, [pc, #384]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80015c6:	f043 0304 	orr.w	r3, r3, #4
 80015ca:	6213      	str	r3, [r2, #32]
 80015cc:	4b5e      	ldr	r3, [pc, #376]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	4a5d      	ldr	r2, [pc, #372]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6213      	str	r3, [r2, #32]
 80015d8:	e00b      	b.n	80015f2 <HAL_RCC_OscConfig+0x36e>
 80015da:	4b5b      	ldr	r3, [pc, #364]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	4a5a      	ldr	r2, [pc, #360]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80015e0:	f023 0301 	bic.w	r3, r3, #1
 80015e4:	6213      	str	r3, [r2, #32]
 80015e6:	4b58      	ldr	r3, [pc, #352]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	4a57      	ldr	r2, [pc, #348]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80015ec:	f023 0304 	bic.w	r3, r3, #4
 80015f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d015      	beq.n	8001626 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fa:	f7ff f97f 	bl	80008fc <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001600:	e00a      	b.n	8001618 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001602:	f7ff f97b 	bl	80008fc <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001610:	4293      	cmp	r3, r2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e0b1      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001618:	4b4b      	ldr	r3, [pc, #300]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0ee      	beq.n	8001602 <HAL_RCC_OscConfig+0x37e>
 8001624:	e014      	b.n	8001650 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001626:	f7ff f969 	bl	80008fc <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162c:	e00a      	b.n	8001644 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800162e:	f7ff f965 	bl	80008fc <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	f241 3288 	movw	r2, #5000	; 0x1388
 800163c:	4293      	cmp	r3, r2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e09b      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001644:	4b40      	ldr	r3, [pc, #256]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1ee      	bne.n	800162e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001650:	7dfb      	ldrb	r3, [r7, #23]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d105      	bne.n	8001662 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001656:	4b3c      	ldr	r3, [pc, #240]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	4a3b      	ldr	r2, [pc, #236]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001660:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 8087 	beq.w	800177a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800166c:	4b36      	ldr	r3, [pc, #216]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	2b08      	cmp	r3, #8
 8001676:	d061      	beq.n	800173c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d146      	bne.n	800170e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001680:	4b33      	ldr	r3, [pc, #204]	; (8001750 <HAL_RCC_OscConfig+0x4cc>)
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001686:	f7ff f939 	bl	80008fc <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800168e:	f7ff f935 	bl	80008fc <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e06d      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a0:	4b29      	ldr	r3, [pc, #164]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f0      	bne.n	800168e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b4:	d108      	bne.n	80016c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016b6:	4b24      	ldr	r3, [pc, #144]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	4921      	ldr	r1, [pc, #132]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c8:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a19      	ldr	r1, [r3, #32]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	430b      	orrs	r3, r1
 80016da:	491b      	ldr	r1, [pc, #108]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <HAL_RCC_OscConfig+0x4cc>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e6:	f7ff f909 	bl	80008fc <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ee:	f7ff f905 	bl	80008fc <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e03d      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x46a>
 800170c:	e035      	b.n	800177a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <HAL_RCC_OscConfig+0x4cc>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff f8f2 	bl	80008fc <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171c:	f7ff f8ee 	bl	80008fc <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e026      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_RCC_OscConfig+0x4c4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x498>
 800173a:	e01e      	b.n	800177a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d107      	bne.n	8001754 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e019      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
 8001748:	40021000 	.word	0x40021000
 800174c:	40007000 	.word	0x40007000
 8001750:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <HAL_RCC_OscConfig+0x500>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	429a      	cmp	r2, r3
 8001766:	d106      	bne.n	8001776 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001772:	429a      	cmp	r2, r3
 8001774:	d001      	beq.n	800177a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40021000 	.word	0x40021000

08001788 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e0d0      	b.n	800193e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800179c:	4b6a      	ldr	r3, [pc, #424]	; (8001948 <HAL_RCC_ClockConfig+0x1c0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d910      	bls.n	80017cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017aa:	4b67      	ldr	r3, [pc, #412]	; (8001948 <HAL_RCC_ClockConfig+0x1c0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f023 0207 	bic.w	r2, r3, #7
 80017b2:	4965      	ldr	r1, [pc, #404]	; (8001948 <HAL_RCC_ClockConfig+0x1c0>)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ba:	4b63      	ldr	r3, [pc, #396]	; (8001948 <HAL_RCC_ClockConfig+0x1c0>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0b8      	b.n	800193e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d020      	beq.n	800181a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e4:	4b59      	ldr	r3, [pc, #356]	; (800194c <HAL_RCC_ClockConfig+0x1c4>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	4a58      	ldr	r2, [pc, #352]	; (800194c <HAL_RCC_ClockConfig+0x1c4>)
 80017ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0308 	and.w	r3, r3, #8
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017fc:	4b53      	ldr	r3, [pc, #332]	; (800194c <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	4a52      	ldr	r2, [pc, #328]	; (800194c <HAL_RCC_ClockConfig+0x1c4>)
 8001802:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001806:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001808:	4b50      	ldr	r3, [pc, #320]	; (800194c <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	494d      	ldr	r1, [pc, #308]	; (800194c <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	4313      	orrs	r3, r2
 8001818:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d040      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d107      	bne.n	800183e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182e:	4b47      	ldr	r3, [pc, #284]	; (800194c <HAL_RCC_ClockConfig+0x1c4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d115      	bne.n	8001866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e07f      	b.n	800193e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d107      	bne.n	8001856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001846:	4b41      	ldr	r3, [pc, #260]	; (800194c <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d109      	bne.n	8001866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e073      	b.n	800193e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001856:	4b3d      	ldr	r3, [pc, #244]	; (800194c <HAL_RCC_ClockConfig+0x1c4>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e06b      	b.n	800193e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001866:	4b39      	ldr	r3, [pc, #228]	; (800194c <HAL_RCC_ClockConfig+0x1c4>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f023 0203 	bic.w	r2, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	4936      	ldr	r1, [pc, #216]	; (800194c <HAL_RCC_ClockConfig+0x1c4>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001878:	f7ff f840 	bl	80008fc <HAL_GetTick>
 800187c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187e:	e00a      	b.n	8001896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001880:	f7ff f83c 	bl	80008fc <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f241 3288 	movw	r2, #5000	; 0x1388
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e053      	b.n	800193e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001896:	4b2d      	ldr	r3, [pc, #180]	; (800194c <HAL_RCC_ClockConfig+0x1c4>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 020c 	and.w	r2, r3, #12
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d1eb      	bne.n	8001880 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018a8:	4b27      	ldr	r3, [pc, #156]	; (8001948 <HAL_RCC_ClockConfig+0x1c0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d210      	bcs.n	80018d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b6:	4b24      	ldr	r3, [pc, #144]	; (8001948 <HAL_RCC_ClockConfig+0x1c0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f023 0207 	bic.w	r2, r3, #7
 80018be:	4922      	ldr	r1, [pc, #136]	; (8001948 <HAL_RCC_ClockConfig+0x1c0>)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c6:	4b20      	ldr	r3, [pc, #128]	; (8001948 <HAL_RCC_ClockConfig+0x1c0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e032      	b.n	800193e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d008      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_RCC_ClockConfig+0x1c4>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	4916      	ldr	r1, [pc, #88]	; (800194c <HAL_RCC_ClockConfig+0x1c4>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d009      	beq.n	8001916 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001902:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_RCC_ClockConfig+0x1c4>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	490e      	ldr	r1, [pc, #56]	; (800194c <HAL_RCC_ClockConfig+0x1c4>)
 8001912:	4313      	orrs	r3, r2
 8001914:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001916:	f000 f821 	bl	800195c <HAL_RCC_GetSysClockFreq>
 800191a:	4602      	mov	r2, r0
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_RCC_ClockConfig+0x1c4>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	490a      	ldr	r1, [pc, #40]	; (8001950 <HAL_RCC_ClockConfig+0x1c8>)
 8001928:	5ccb      	ldrb	r3, [r1, r3]
 800192a:	fa22 f303 	lsr.w	r3, r2, r3
 800192e:	4a09      	ldr	r2, [pc, #36]	; (8001954 <HAL_RCC_ClockConfig+0x1cc>)
 8001930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_RCC_ClockConfig+0x1d0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe ff9e 	bl	8000878 <HAL_InitTick>

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40022000 	.word	0x40022000
 800194c:	40021000 	.word	0x40021000
 8001950:	08003228 	.word	0x08003228
 8001954:	20000000 	.word	0x20000000
 8001958:	20000004 	.word	0x20000004

0800195c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800195c:	b490      	push	{r4, r7}
 800195e:	b08a      	sub	sp, #40	; 0x28
 8001960:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001962:	4b29      	ldr	r3, [pc, #164]	; (8001a08 <HAL_RCC_GetSysClockFreq+0xac>)
 8001964:	1d3c      	adds	r4, r7, #4
 8001966:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001968:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800196c:	f240 2301 	movw	r3, #513	; 0x201
 8001970:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
 800197a:	2300      	movs	r3, #0
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001986:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b04      	cmp	r3, #4
 8001994:	d002      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x40>
 8001996:	2b08      	cmp	r3, #8
 8001998:	d003      	beq.n	80019a2 <HAL_RCC_GetSysClockFreq+0x46>
 800199a:	e02b      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800199c:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xb4>)
 800199e:	623b      	str	r3, [r7, #32]
      break;
 80019a0:	e02b      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	0c9b      	lsrs	r3, r3, #18
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	3328      	adds	r3, #40	; 0x28
 80019ac:	443b      	add	r3, r7
 80019ae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80019b2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d012      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019be:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xb0>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	0c5b      	lsrs	r3, r3, #17
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	3328      	adds	r3, #40	; 0x28
 80019ca:	443b      	add	r3, r7
 80019cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	4a0e      	ldr	r2, [pc, #56]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019d6:	fb03 f202 	mul.w	r2, r3, r2
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
 80019e2:	e004      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	4a0b      	ldr	r2, [pc, #44]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019e8:	fb02 f303 	mul.w	r3, r2, r3
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	623b      	str	r3, [r7, #32]
      break;
 80019f2:	e002      	b.n	80019fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019f6:	623b      	str	r3, [r7, #32]
      break;
 80019f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019fa:	6a3b      	ldr	r3, [r7, #32]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3728      	adds	r7, #40	; 0x28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc90      	pop	{r4, r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	08003218 	.word	0x08003218
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	007a1200 	.word	0x007a1200
 8001a14:	003d0900 	.word	0x003d0900

08001a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a1c:	4b02      	ldr	r3, [pc, #8]	; (8001a28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr
 8001a28:	20000000 	.word	0x20000000

08001a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a30:	f7ff fff2 	bl	8001a18 <HAL_RCC_GetHCLKFreq>
 8001a34:	4602      	mov	r2, r0
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	0a1b      	lsrs	r3, r3, #8
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	4903      	ldr	r1, [pc, #12]	; (8001a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a42:	5ccb      	ldrb	r3, [r1, r3]
 8001a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	08003238 	.word	0x08003238

08001a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a58:	f7ff ffde 	bl	8001a18 <HAL_RCC_GetHCLKFreq>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	0adb      	lsrs	r3, r3, #11
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	4903      	ldr	r1, [pc, #12]	; (8001a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a6a:	5ccb      	ldrb	r3, [r1, r3]
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40021000 	.word	0x40021000
 8001a78:	08003238 	.word	0x08003238

08001a7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a84:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <RCC_Delay+0x34>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <RCC_Delay+0x38>)
 8001a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8e:	0a5b      	lsrs	r3, r3, #9
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	fb02 f303 	mul.w	r3, r2, r3
 8001a96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a98:	bf00      	nop
  }
  while (Delay --);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1e5a      	subs	r2, r3, #1
 8001a9e:	60fa      	str	r2, [r7, #12]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f9      	bne.n	8001a98 <RCC_Delay+0x1c>
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	10624dd3 	.word	0x10624dd3

08001ab8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e03f      	b.n	8001b4a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d106      	bne.n	8001ae4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7fe fd0a 	bl	80004f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2224      	movs	r2, #36	; 0x24
 8001ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001afa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 fab1 	bl	8002064 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	691a      	ldr	r2, [r3, #16]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	695a      	ldr	r2, [r3, #20]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2220      	movs	r2, #32
 8001b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b08a      	sub	sp, #40	; 0x28
 8001b56:	af02      	add	r7, sp, #8
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	603b      	str	r3, [r7, #0]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b20      	cmp	r3, #32
 8001b70:	d17c      	bne.n	8001c6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d002      	beq.n	8001b7e <HAL_UART_Transmit+0x2c>
 8001b78:	88fb      	ldrh	r3, [r7, #6]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e075      	b.n	8001c6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d101      	bne.n	8001b90 <HAL_UART_Transmit+0x3e>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e06e      	b.n	8001c6e <HAL_UART_Transmit+0x11c>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2221      	movs	r2, #33	; 0x21
 8001ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ba6:	f7fe fea9 	bl	80008fc <HAL_GetTick>
 8001baa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	88fa      	ldrh	r2, [r7, #6]
 8001bb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	88fa      	ldrh	r2, [r7, #6]
 8001bb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bc0:	d108      	bne.n	8001bd4 <HAL_UART_Transmit+0x82>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d104      	bne.n	8001bd4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	61bb      	str	r3, [r7, #24]
 8001bd2:	e003      	b.n	8001bdc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001be4:	e02a      	b.n	8001c3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	2200      	movs	r2, #0
 8001bee:	2180      	movs	r1, #128	; 0x80
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f000 f946 	bl	8001e82 <UART_WaitOnFlagUntilTimeout>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e036      	b.n	8001c6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10b      	bne.n	8001c1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	3302      	adds	r3, #2
 8001c1a:	61bb      	str	r3, [r7, #24]
 8001c1c:	e007      	b.n	8001c2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	781a      	ldrb	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	3b01      	subs	r3, #1
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1cf      	bne.n	8001be6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2140      	movs	r1, #64	; 0x40
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f000 f916 	bl	8001e82 <UART_WaitOnFlagUntilTimeout>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e006      	b.n	8001c6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2220      	movs	r2, #32
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e000      	b.n	8001c6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c6c:	2302      	movs	r3, #2
  }
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3720      	adds	r7, #32
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b084      	sub	sp, #16
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	4613      	mov	r3, r2
 8001c82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b20      	cmp	r3, #32
 8001c8e:	d11d      	bne.n	8001ccc <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <HAL_UART_Receive_DMA+0x26>
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e016      	b.n	8001cce <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d101      	bne.n	8001cae <HAL_UART_Receive_DMA+0x38>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e00f      	b.n	8001cce <HAL_UART_Receive_DMA+0x58>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8001cbc:	88fb      	ldrh	r3, [r7, #6]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f000 f928 	bl	8001f18 <UART_Start_Receive_DMA>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	e000      	b.n	8001cce <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001ccc:	2302      	movs	r3, #2
  }
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr

08001cfa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr

08001d0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr

08001d22 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b084      	sub	sp, #16
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0320 	and.w	r3, r3, #32
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d12a      	bne.n	8001d94 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d52:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0201 	bic.w	r2, r2, #1
 8001d62:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d72:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d107      	bne.n	8001d94 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0210 	bic.w	r2, r2, #16
 8001d92:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d106      	bne.n	8001daa <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001da0:	4619      	mov	r1, r3
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f7ff ffb2 	bl	8001d0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001da8:	e002      	b.n	8001db0 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f7ff ff93 	bl	8001cd6 <HAL_UART_RxCpltCallback>
}
 8001db0:	bf00      	nop
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d108      	bne.n	8001de0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001dd2:	085b      	lsrs	r3, r3, #1
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f7ff ff97 	bl	8001d0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8001dde:	e002      	b.n	8001de6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f7ff ff81 	bl	8001ce8 <HAL_UART_RxHalfCpltCallback>
}
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b084      	sub	sp, #16
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	bf14      	ite	ne
 8001e0e:	2301      	movne	r3, #1
 8001e10:	2300      	moveq	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b21      	cmp	r3, #33	; 0x21
 8001e20:	d108      	bne.n	8001e34 <UART_DMAError+0x46>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8001e2e:	68b8      	ldr	r0, [r7, #8]
 8001e30:	f000 f8d6 	bl	8001fe0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	bf14      	ite	ne
 8001e42:	2301      	movne	r3, #1
 8001e44:	2300      	moveq	r3, #0
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b22      	cmp	r3, #34	; 0x22
 8001e54:	d108      	bne.n	8001e68 <UART_DMAError+0x7a>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001e62:	68b8      	ldr	r0, [r7, #8]
 8001e64:	f000 f8d1 	bl	800200a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	f043 0210 	orr.w	r2, r3, #16
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001e74:	68b8      	ldr	r0, [r7, #8]
 8001e76:	f7ff ff40 	bl	8001cfa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b084      	sub	sp, #16
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	603b      	str	r3, [r7, #0]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e92:	e02c      	b.n	8001eee <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9a:	d028      	beq.n	8001eee <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d007      	beq.n	8001eb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001ea2:	f7fe fd2b 	bl	80008fc <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d21d      	bcs.n	8001eee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ec0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695a      	ldr	r2, [r3, #20]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0201 	bic.w	r2, r2, #1
 8001ed0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2220      	movs	r2, #32
 8001ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e00f      	b.n	8001f0e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	bf0c      	ite	eq
 8001efe:	2301      	moveq	r3, #1
 8001f00:	2300      	movne	r3, #0
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	461a      	mov	r2, r3
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d0c3      	beq.n	8001e94 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	4613      	mov	r3, r2
 8001f24:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	88fa      	ldrh	r2, [r7, #6]
 8001f30:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2222      	movs	r2, #34	; 0x22
 8001f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f44:	4a23      	ldr	r2, [pc, #140]	; (8001fd4 <UART_Start_Receive_DMA+0xbc>)
 8001f46:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4c:	4a22      	ldr	r2, [pc, #136]	; (8001fd8 <UART_Start_Receive_DMA+0xc0>)
 8001f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f54:	4a21      	ldr	r2, [pc, #132]	; (8001fdc <UART_Start_Receive_DMA+0xc4>)
 8001f56:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8001f60:	f107 0308 	add.w	r3, r7, #8
 8001f64:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	3304      	adds	r3, #4
 8001f70:	4619      	mov	r1, r3
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	f7fe fe32 	bl	8000be0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	613b      	str	r3, [r7, #16]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fa8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0201 	orr.w	r2, r2, #1
 8001fb8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695a      	ldr	r2, [r3, #20]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fc8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	08001d23 	.word	0x08001d23
 8001fd8:	08001db9 	.word	0x08001db9
 8001fdc:	08001def 	.word	0x08001def

08001fe0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001ff6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr

0800200a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002020:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	695a      	ldr	r2, [r3, #20]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0201 	bic.w	r2, r2, #1
 8002030:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	2b01      	cmp	r3, #1
 8002038:	d107      	bne.n	800204a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0210 	bic.w	r2, r2, #16
 8002048:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2220      	movs	r2, #32
 800204e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
	...

08002064 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	4313      	orrs	r3, r2
 8002092:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800209e:	f023 030c 	bic.w	r3, r3, #12
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	68b9      	ldr	r1, [r7, #8]
 80020a8:	430b      	orrs	r3, r1
 80020aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699a      	ldr	r2, [r3, #24]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a2c      	ldr	r2, [pc, #176]	; (8002178 <UART_SetConfig+0x114>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d103      	bne.n	80020d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020cc:	f7ff fcc2 	bl	8001a54 <HAL_RCC_GetPCLK2Freq>
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	e002      	b.n	80020da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80020d4:	f7ff fcaa 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 80020d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	009a      	lsls	r2, r3, #2
 80020e4:	441a      	add	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f0:	4a22      	ldr	r2, [pc, #136]	; (800217c <UART_SetConfig+0x118>)
 80020f2:	fba2 2303 	umull	r2, r3, r2, r3
 80020f6:	095b      	lsrs	r3, r3, #5
 80020f8:	0119      	lsls	r1, r3, #4
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	009a      	lsls	r2, r3, #2
 8002104:	441a      	add	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <UART_SetConfig+0x118>)
 8002112:	fba3 0302 	umull	r0, r3, r3, r2
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	2064      	movs	r0, #100	; 0x64
 800211a:	fb00 f303 	mul.w	r3, r0, r3
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	3332      	adds	r3, #50	; 0x32
 8002124:	4a15      	ldr	r2, [pc, #84]	; (800217c <UART_SetConfig+0x118>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002130:	4419      	add	r1, r3
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	009a      	lsls	r2, r3, #2
 800213c:	441a      	add	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	fbb2 f2f3 	udiv	r2, r2, r3
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <UART_SetConfig+0x118>)
 800214a:	fba3 0302 	umull	r0, r3, r3, r2
 800214e:	095b      	lsrs	r3, r3, #5
 8002150:	2064      	movs	r0, #100	; 0x64
 8002152:	fb00 f303 	mul.w	r3, r0, r3
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	3332      	adds	r3, #50	; 0x32
 800215c:	4a07      	ldr	r2, [pc, #28]	; (800217c <UART_SetConfig+0x118>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	f003 020f 	and.w	r2, r3, #15
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	440a      	add	r2, r1
 800216e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40013800 	.word	0x40013800
 800217c:	51eb851f 	.word	0x51eb851f

08002180 <__errno>:
 8002180:	4b01      	ldr	r3, [pc, #4]	; (8002188 <__errno+0x8>)
 8002182:	6818      	ldr	r0, [r3, #0]
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	2000000c 	.word	0x2000000c

0800218c <__libc_init_array>:
 800218c:	b570      	push	{r4, r5, r6, lr}
 800218e:	2600      	movs	r6, #0
 8002190:	4d0c      	ldr	r5, [pc, #48]	; (80021c4 <__libc_init_array+0x38>)
 8002192:	4c0d      	ldr	r4, [pc, #52]	; (80021c8 <__libc_init_array+0x3c>)
 8002194:	1b64      	subs	r4, r4, r5
 8002196:	10a4      	asrs	r4, r4, #2
 8002198:	42a6      	cmp	r6, r4
 800219a:	d109      	bne.n	80021b0 <__libc_init_array+0x24>
 800219c:	f001 f82c 	bl	80031f8 <_init>
 80021a0:	2600      	movs	r6, #0
 80021a2:	4d0a      	ldr	r5, [pc, #40]	; (80021cc <__libc_init_array+0x40>)
 80021a4:	4c0a      	ldr	r4, [pc, #40]	; (80021d0 <__libc_init_array+0x44>)
 80021a6:	1b64      	subs	r4, r4, r5
 80021a8:	10a4      	asrs	r4, r4, #2
 80021aa:	42a6      	cmp	r6, r4
 80021ac:	d105      	bne.n	80021ba <__libc_init_array+0x2e>
 80021ae:	bd70      	pop	{r4, r5, r6, pc}
 80021b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80021b4:	4798      	blx	r3
 80021b6:	3601      	adds	r6, #1
 80021b8:	e7ee      	b.n	8002198 <__libc_init_array+0xc>
 80021ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80021be:	4798      	blx	r3
 80021c0:	3601      	adds	r6, #1
 80021c2:	e7f2      	b.n	80021aa <__libc_init_array+0x1e>
 80021c4:	080032d8 	.word	0x080032d8
 80021c8:	080032d8 	.word	0x080032d8
 80021cc:	080032d8 	.word	0x080032d8
 80021d0:	080032dc 	.word	0x080032dc

080021d4 <memset>:
 80021d4:	4603      	mov	r3, r0
 80021d6:	4402      	add	r2, r0
 80021d8:	4293      	cmp	r3, r2
 80021da:	d100      	bne.n	80021de <memset+0xa>
 80021dc:	4770      	bx	lr
 80021de:	f803 1b01 	strb.w	r1, [r3], #1
 80021e2:	e7f9      	b.n	80021d8 <memset+0x4>

080021e4 <iprintf>:
 80021e4:	b40f      	push	{r0, r1, r2, r3}
 80021e6:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <iprintf+0x2c>)
 80021e8:	b513      	push	{r0, r1, r4, lr}
 80021ea:	681c      	ldr	r4, [r3, #0]
 80021ec:	b124      	cbz	r4, 80021f8 <iprintf+0x14>
 80021ee:	69a3      	ldr	r3, [r4, #24]
 80021f0:	b913      	cbnz	r3, 80021f8 <iprintf+0x14>
 80021f2:	4620      	mov	r0, r4
 80021f4:	f000 fa5a 	bl	80026ac <__sinit>
 80021f8:	ab05      	add	r3, sp, #20
 80021fa:	4620      	mov	r0, r4
 80021fc:	9a04      	ldr	r2, [sp, #16]
 80021fe:	68a1      	ldr	r1, [r4, #8]
 8002200:	9301      	str	r3, [sp, #4]
 8002202:	f000 fc5d 	bl	8002ac0 <_vfiprintf_r>
 8002206:	b002      	add	sp, #8
 8002208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800220c:	b004      	add	sp, #16
 800220e:	4770      	bx	lr
 8002210:	2000000c 	.word	0x2000000c

08002214 <_puts_r>:
 8002214:	b570      	push	{r4, r5, r6, lr}
 8002216:	460e      	mov	r6, r1
 8002218:	4605      	mov	r5, r0
 800221a:	b118      	cbz	r0, 8002224 <_puts_r+0x10>
 800221c:	6983      	ldr	r3, [r0, #24]
 800221e:	b90b      	cbnz	r3, 8002224 <_puts_r+0x10>
 8002220:	f000 fa44 	bl	80026ac <__sinit>
 8002224:	69ab      	ldr	r3, [r5, #24]
 8002226:	68ac      	ldr	r4, [r5, #8]
 8002228:	b913      	cbnz	r3, 8002230 <_puts_r+0x1c>
 800222a:	4628      	mov	r0, r5
 800222c:	f000 fa3e 	bl	80026ac <__sinit>
 8002230:	4b2c      	ldr	r3, [pc, #176]	; (80022e4 <_puts_r+0xd0>)
 8002232:	429c      	cmp	r4, r3
 8002234:	d120      	bne.n	8002278 <_puts_r+0x64>
 8002236:	686c      	ldr	r4, [r5, #4]
 8002238:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800223a:	07db      	lsls	r3, r3, #31
 800223c:	d405      	bmi.n	800224a <_puts_r+0x36>
 800223e:	89a3      	ldrh	r3, [r4, #12]
 8002240:	0598      	lsls	r0, r3, #22
 8002242:	d402      	bmi.n	800224a <_puts_r+0x36>
 8002244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002246:	f000 facf 	bl	80027e8 <__retarget_lock_acquire_recursive>
 800224a:	89a3      	ldrh	r3, [r4, #12]
 800224c:	0719      	lsls	r1, r3, #28
 800224e:	d51d      	bpl.n	800228c <_puts_r+0x78>
 8002250:	6923      	ldr	r3, [r4, #16]
 8002252:	b1db      	cbz	r3, 800228c <_puts_r+0x78>
 8002254:	3e01      	subs	r6, #1
 8002256:	68a3      	ldr	r3, [r4, #8]
 8002258:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800225c:	3b01      	subs	r3, #1
 800225e:	60a3      	str	r3, [r4, #8]
 8002260:	bb39      	cbnz	r1, 80022b2 <_puts_r+0x9e>
 8002262:	2b00      	cmp	r3, #0
 8002264:	da38      	bge.n	80022d8 <_puts_r+0xc4>
 8002266:	4622      	mov	r2, r4
 8002268:	210a      	movs	r1, #10
 800226a:	4628      	mov	r0, r5
 800226c:	f000 f848 	bl	8002300 <__swbuf_r>
 8002270:	3001      	adds	r0, #1
 8002272:	d011      	beq.n	8002298 <_puts_r+0x84>
 8002274:	250a      	movs	r5, #10
 8002276:	e011      	b.n	800229c <_puts_r+0x88>
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <_puts_r+0xd4>)
 800227a:	429c      	cmp	r4, r3
 800227c:	d101      	bne.n	8002282 <_puts_r+0x6e>
 800227e:	68ac      	ldr	r4, [r5, #8]
 8002280:	e7da      	b.n	8002238 <_puts_r+0x24>
 8002282:	4b1a      	ldr	r3, [pc, #104]	; (80022ec <_puts_r+0xd8>)
 8002284:	429c      	cmp	r4, r3
 8002286:	bf08      	it	eq
 8002288:	68ec      	ldreq	r4, [r5, #12]
 800228a:	e7d5      	b.n	8002238 <_puts_r+0x24>
 800228c:	4621      	mov	r1, r4
 800228e:	4628      	mov	r0, r5
 8002290:	f000 f888 	bl	80023a4 <__swsetup_r>
 8002294:	2800      	cmp	r0, #0
 8002296:	d0dd      	beq.n	8002254 <_puts_r+0x40>
 8002298:	f04f 35ff 	mov.w	r5, #4294967295
 800229c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800229e:	07da      	lsls	r2, r3, #31
 80022a0:	d405      	bmi.n	80022ae <_puts_r+0x9a>
 80022a2:	89a3      	ldrh	r3, [r4, #12]
 80022a4:	059b      	lsls	r3, r3, #22
 80022a6:	d402      	bmi.n	80022ae <_puts_r+0x9a>
 80022a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022aa:	f000 fa9e 	bl	80027ea <__retarget_lock_release_recursive>
 80022ae:	4628      	mov	r0, r5
 80022b0:	bd70      	pop	{r4, r5, r6, pc}
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	da04      	bge.n	80022c0 <_puts_r+0xac>
 80022b6:	69a2      	ldr	r2, [r4, #24]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	dc06      	bgt.n	80022ca <_puts_r+0xb6>
 80022bc:	290a      	cmp	r1, #10
 80022be:	d004      	beq.n	80022ca <_puts_r+0xb6>
 80022c0:	6823      	ldr	r3, [r4, #0]
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	6022      	str	r2, [r4, #0]
 80022c6:	7019      	strb	r1, [r3, #0]
 80022c8:	e7c5      	b.n	8002256 <_puts_r+0x42>
 80022ca:	4622      	mov	r2, r4
 80022cc:	4628      	mov	r0, r5
 80022ce:	f000 f817 	bl	8002300 <__swbuf_r>
 80022d2:	3001      	adds	r0, #1
 80022d4:	d1bf      	bne.n	8002256 <_puts_r+0x42>
 80022d6:	e7df      	b.n	8002298 <_puts_r+0x84>
 80022d8:	250a      	movs	r5, #10
 80022da:	6823      	ldr	r3, [r4, #0]
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	6022      	str	r2, [r4, #0]
 80022e0:	701d      	strb	r5, [r3, #0]
 80022e2:	e7db      	b.n	800229c <_puts_r+0x88>
 80022e4:	08003264 	.word	0x08003264
 80022e8:	08003284 	.word	0x08003284
 80022ec:	08003244 	.word	0x08003244

080022f0 <puts>:
 80022f0:	4b02      	ldr	r3, [pc, #8]	; (80022fc <puts+0xc>)
 80022f2:	4601      	mov	r1, r0
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	f7ff bf8d 	b.w	8002214 <_puts_r>
 80022fa:	bf00      	nop
 80022fc:	2000000c 	.word	0x2000000c

08002300 <__swbuf_r>:
 8002300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002302:	460e      	mov	r6, r1
 8002304:	4614      	mov	r4, r2
 8002306:	4605      	mov	r5, r0
 8002308:	b118      	cbz	r0, 8002312 <__swbuf_r+0x12>
 800230a:	6983      	ldr	r3, [r0, #24]
 800230c:	b90b      	cbnz	r3, 8002312 <__swbuf_r+0x12>
 800230e:	f000 f9cd 	bl	80026ac <__sinit>
 8002312:	4b21      	ldr	r3, [pc, #132]	; (8002398 <__swbuf_r+0x98>)
 8002314:	429c      	cmp	r4, r3
 8002316:	d12b      	bne.n	8002370 <__swbuf_r+0x70>
 8002318:	686c      	ldr	r4, [r5, #4]
 800231a:	69a3      	ldr	r3, [r4, #24]
 800231c:	60a3      	str	r3, [r4, #8]
 800231e:	89a3      	ldrh	r3, [r4, #12]
 8002320:	071a      	lsls	r2, r3, #28
 8002322:	d52f      	bpl.n	8002384 <__swbuf_r+0x84>
 8002324:	6923      	ldr	r3, [r4, #16]
 8002326:	b36b      	cbz	r3, 8002384 <__swbuf_r+0x84>
 8002328:	6923      	ldr	r3, [r4, #16]
 800232a:	6820      	ldr	r0, [r4, #0]
 800232c:	b2f6      	uxtb	r6, r6
 800232e:	1ac0      	subs	r0, r0, r3
 8002330:	6963      	ldr	r3, [r4, #20]
 8002332:	4637      	mov	r7, r6
 8002334:	4283      	cmp	r3, r0
 8002336:	dc04      	bgt.n	8002342 <__swbuf_r+0x42>
 8002338:	4621      	mov	r1, r4
 800233a:	4628      	mov	r0, r5
 800233c:	f000 f922 	bl	8002584 <_fflush_r>
 8002340:	bb30      	cbnz	r0, 8002390 <__swbuf_r+0x90>
 8002342:	68a3      	ldr	r3, [r4, #8]
 8002344:	3001      	adds	r0, #1
 8002346:	3b01      	subs	r3, #1
 8002348:	60a3      	str	r3, [r4, #8]
 800234a:	6823      	ldr	r3, [r4, #0]
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	6022      	str	r2, [r4, #0]
 8002350:	701e      	strb	r6, [r3, #0]
 8002352:	6963      	ldr	r3, [r4, #20]
 8002354:	4283      	cmp	r3, r0
 8002356:	d004      	beq.n	8002362 <__swbuf_r+0x62>
 8002358:	89a3      	ldrh	r3, [r4, #12]
 800235a:	07db      	lsls	r3, r3, #31
 800235c:	d506      	bpl.n	800236c <__swbuf_r+0x6c>
 800235e:	2e0a      	cmp	r6, #10
 8002360:	d104      	bne.n	800236c <__swbuf_r+0x6c>
 8002362:	4621      	mov	r1, r4
 8002364:	4628      	mov	r0, r5
 8002366:	f000 f90d 	bl	8002584 <_fflush_r>
 800236a:	b988      	cbnz	r0, 8002390 <__swbuf_r+0x90>
 800236c:	4638      	mov	r0, r7
 800236e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002370:	4b0a      	ldr	r3, [pc, #40]	; (800239c <__swbuf_r+0x9c>)
 8002372:	429c      	cmp	r4, r3
 8002374:	d101      	bne.n	800237a <__swbuf_r+0x7a>
 8002376:	68ac      	ldr	r4, [r5, #8]
 8002378:	e7cf      	b.n	800231a <__swbuf_r+0x1a>
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <__swbuf_r+0xa0>)
 800237c:	429c      	cmp	r4, r3
 800237e:	bf08      	it	eq
 8002380:	68ec      	ldreq	r4, [r5, #12]
 8002382:	e7ca      	b.n	800231a <__swbuf_r+0x1a>
 8002384:	4621      	mov	r1, r4
 8002386:	4628      	mov	r0, r5
 8002388:	f000 f80c 	bl	80023a4 <__swsetup_r>
 800238c:	2800      	cmp	r0, #0
 800238e:	d0cb      	beq.n	8002328 <__swbuf_r+0x28>
 8002390:	f04f 37ff 	mov.w	r7, #4294967295
 8002394:	e7ea      	b.n	800236c <__swbuf_r+0x6c>
 8002396:	bf00      	nop
 8002398:	08003264 	.word	0x08003264
 800239c:	08003284 	.word	0x08003284
 80023a0:	08003244 	.word	0x08003244

080023a4 <__swsetup_r>:
 80023a4:	4b32      	ldr	r3, [pc, #200]	; (8002470 <__swsetup_r+0xcc>)
 80023a6:	b570      	push	{r4, r5, r6, lr}
 80023a8:	681d      	ldr	r5, [r3, #0]
 80023aa:	4606      	mov	r6, r0
 80023ac:	460c      	mov	r4, r1
 80023ae:	b125      	cbz	r5, 80023ba <__swsetup_r+0x16>
 80023b0:	69ab      	ldr	r3, [r5, #24]
 80023b2:	b913      	cbnz	r3, 80023ba <__swsetup_r+0x16>
 80023b4:	4628      	mov	r0, r5
 80023b6:	f000 f979 	bl	80026ac <__sinit>
 80023ba:	4b2e      	ldr	r3, [pc, #184]	; (8002474 <__swsetup_r+0xd0>)
 80023bc:	429c      	cmp	r4, r3
 80023be:	d10f      	bne.n	80023e0 <__swsetup_r+0x3c>
 80023c0:	686c      	ldr	r4, [r5, #4]
 80023c2:	89a3      	ldrh	r3, [r4, #12]
 80023c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80023c8:	0719      	lsls	r1, r3, #28
 80023ca:	d42c      	bmi.n	8002426 <__swsetup_r+0x82>
 80023cc:	06dd      	lsls	r5, r3, #27
 80023ce:	d411      	bmi.n	80023f4 <__swsetup_r+0x50>
 80023d0:	2309      	movs	r3, #9
 80023d2:	6033      	str	r3, [r6, #0]
 80023d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80023d8:	f04f 30ff 	mov.w	r0, #4294967295
 80023dc:	81a3      	strh	r3, [r4, #12]
 80023de:	e03e      	b.n	800245e <__swsetup_r+0xba>
 80023e0:	4b25      	ldr	r3, [pc, #148]	; (8002478 <__swsetup_r+0xd4>)
 80023e2:	429c      	cmp	r4, r3
 80023e4:	d101      	bne.n	80023ea <__swsetup_r+0x46>
 80023e6:	68ac      	ldr	r4, [r5, #8]
 80023e8:	e7eb      	b.n	80023c2 <__swsetup_r+0x1e>
 80023ea:	4b24      	ldr	r3, [pc, #144]	; (800247c <__swsetup_r+0xd8>)
 80023ec:	429c      	cmp	r4, r3
 80023ee:	bf08      	it	eq
 80023f0:	68ec      	ldreq	r4, [r5, #12]
 80023f2:	e7e6      	b.n	80023c2 <__swsetup_r+0x1e>
 80023f4:	0758      	lsls	r0, r3, #29
 80023f6:	d512      	bpl.n	800241e <__swsetup_r+0x7a>
 80023f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80023fa:	b141      	cbz	r1, 800240e <__swsetup_r+0x6a>
 80023fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002400:	4299      	cmp	r1, r3
 8002402:	d002      	beq.n	800240a <__swsetup_r+0x66>
 8002404:	4630      	mov	r0, r6
 8002406:	f000 fa57 	bl	80028b8 <_free_r>
 800240a:	2300      	movs	r3, #0
 800240c:	6363      	str	r3, [r4, #52]	; 0x34
 800240e:	89a3      	ldrh	r3, [r4, #12]
 8002410:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002414:	81a3      	strh	r3, [r4, #12]
 8002416:	2300      	movs	r3, #0
 8002418:	6063      	str	r3, [r4, #4]
 800241a:	6923      	ldr	r3, [r4, #16]
 800241c:	6023      	str	r3, [r4, #0]
 800241e:	89a3      	ldrh	r3, [r4, #12]
 8002420:	f043 0308 	orr.w	r3, r3, #8
 8002424:	81a3      	strh	r3, [r4, #12]
 8002426:	6923      	ldr	r3, [r4, #16]
 8002428:	b94b      	cbnz	r3, 800243e <__swsetup_r+0x9a>
 800242a:	89a3      	ldrh	r3, [r4, #12]
 800242c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002434:	d003      	beq.n	800243e <__swsetup_r+0x9a>
 8002436:	4621      	mov	r1, r4
 8002438:	4630      	mov	r0, r6
 800243a:	f000 f9fd 	bl	8002838 <__smakebuf_r>
 800243e:	89a0      	ldrh	r0, [r4, #12]
 8002440:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002444:	f010 0301 	ands.w	r3, r0, #1
 8002448:	d00a      	beq.n	8002460 <__swsetup_r+0xbc>
 800244a:	2300      	movs	r3, #0
 800244c:	60a3      	str	r3, [r4, #8]
 800244e:	6963      	ldr	r3, [r4, #20]
 8002450:	425b      	negs	r3, r3
 8002452:	61a3      	str	r3, [r4, #24]
 8002454:	6923      	ldr	r3, [r4, #16]
 8002456:	b943      	cbnz	r3, 800246a <__swsetup_r+0xc6>
 8002458:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800245c:	d1ba      	bne.n	80023d4 <__swsetup_r+0x30>
 800245e:	bd70      	pop	{r4, r5, r6, pc}
 8002460:	0781      	lsls	r1, r0, #30
 8002462:	bf58      	it	pl
 8002464:	6963      	ldrpl	r3, [r4, #20]
 8002466:	60a3      	str	r3, [r4, #8]
 8002468:	e7f4      	b.n	8002454 <__swsetup_r+0xb0>
 800246a:	2000      	movs	r0, #0
 800246c:	e7f7      	b.n	800245e <__swsetup_r+0xba>
 800246e:	bf00      	nop
 8002470:	2000000c 	.word	0x2000000c
 8002474:	08003264 	.word	0x08003264
 8002478:	08003284 	.word	0x08003284
 800247c:	08003244 	.word	0x08003244

08002480 <__sflush_r>:
 8002480:	898a      	ldrh	r2, [r1, #12]
 8002482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002484:	4605      	mov	r5, r0
 8002486:	0710      	lsls	r0, r2, #28
 8002488:	460c      	mov	r4, r1
 800248a:	d457      	bmi.n	800253c <__sflush_r+0xbc>
 800248c:	684b      	ldr	r3, [r1, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	dc04      	bgt.n	800249c <__sflush_r+0x1c>
 8002492:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002494:	2b00      	cmp	r3, #0
 8002496:	dc01      	bgt.n	800249c <__sflush_r+0x1c>
 8002498:	2000      	movs	r0, #0
 800249a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800249c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800249e:	2e00      	cmp	r6, #0
 80024a0:	d0fa      	beq.n	8002498 <__sflush_r+0x18>
 80024a2:	2300      	movs	r3, #0
 80024a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80024a8:	682f      	ldr	r7, [r5, #0]
 80024aa:	602b      	str	r3, [r5, #0]
 80024ac:	d032      	beq.n	8002514 <__sflush_r+0x94>
 80024ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80024b0:	89a3      	ldrh	r3, [r4, #12]
 80024b2:	075a      	lsls	r2, r3, #29
 80024b4:	d505      	bpl.n	80024c2 <__sflush_r+0x42>
 80024b6:	6863      	ldr	r3, [r4, #4]
 80024b8:	1ac0      	subs	r0, r0, r3
 80024ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80024bc:	b10b      	cbz	r3, 80024c2 <__sflush_r+0x42>
 80024be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80024c0:	1ac0      	subs	r0, r0, r3
 80024c2:	2300      	movs	r3, #0
 80024c4:	4602      	mov	r2, r0
 80024c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80024c8:	4628      	mov	r0, r5
 80024ca:	6a21      	ldr	r1, [r4, #32]
 80024cc:	47b0      	blx	r6
 80024ce:	1c43      	adds	r3, r0, #1
 80024d0:	89a3      	ldrh	r3, [r4, #12]
 80024d2:	d106      	bne.n	80024e2 <__sflush_r+0x62>
 80024d4:	6829      	ldr	r1, [r5, #0]
 80024d6:	291d      	cmp	r1, #29
 80024d8:	d82c      	bhi.n	8002534 <__sflush_r+0xb4>
 80024da:	4a29      	ldr	r2, [pc, #164]	; (8002580 <__sflush_r+0x100>)
 80024dc:	40ca      	lsrs	r2, r1
 80024de:	07d6      	lsls	r6, r2, #31
 80024e0:	d528      	bpl.n	8002534 <__sflush_r+0xb4>
 80024e2:	2200      	movs	r2, #0
 80024e4:	6062      	str	r2, [r4, #4]
 80024e6:	6922      	ldr	r2, [r4, #16]
 80024e8:	04d9      	lsls	r1, r3, #19
 80024ea:	6022      	str	r2, [r4, #0]
 80024ec:	d504      	bpl.n	80024f8 <__sflush_r+0x78>
 80024ee:	1c42      	adds	r2, r0, #1
 80024f0:	d101      	bne.n	80024f6 <__sflush_r+0x76>
 80024f2:	682b      	ldr	r3, [r5, #0]
 80024f4:	b903      	cbnz	r3, 80024f8 <__sflush_r+0x78>
 80024f6:	6560      	str	r0, [r4, #84]	; 0x54
 80024f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024fa:	602f      	str	r7, [r5, #0]
 80024fc:	2900      	cmp	r1, #0
 80024fe:	d0cb      	beq.n	8002498 <__sflush_r+0x18>
 8002500:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002504:	4299      	cmp	r1, r3
 8002506:	d002      	beq.n	800250e <__sflush_r+0x8e>
 8002508:	4628      	mov	r0, r5
 800250a:	f000 f9d5 	bl	80028b8 <_free_r>
 800250e:	2000      	movs	r0, #0
 8002510:	6360      	str	r0, [r4, #52]	; 0x34
 8002512:	e7c2      	b.n	800249a <__sflush_r+0x1a>
 8002514:	6a21      	ldr	r1, [r4, #32]
 8002516:	2301      	movs	r3, #1
 8002518:	4628      	mov	r0, r5
 800251a:	47b0      	blx	r6
 800251c:	1c41      	adds	r1, r0, #1
 800251e:	d1c7      	bne.n	80024b0 <__sflush_r+0x30>
 8002520:	682b      	ldr	r3, [r5, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0c4      	beq.n	80024b0 <__sflush_r+0x30>
 8002526:	2b1d      	cmp	r3, #29
 8002528:	d001      	beq.n	800252e <__sflush_r+0xae>
 800252a:	2b16      	cmp	r3, #22
 800252c:	d101      	bne.n	8002532 <__sflush_r+0xb2>
 800252e:	602f      	str	r7, [r5, #0]
 8002530:	e7b2      	b.n	8002498 <__sflush_r+0x18>
 8002532:	89a3      	ldrh	r3, [r4, #12]
 8002534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002538:	81a3      	strh	r3, [r4, #12]
 800253a:	e7ae      	b.n	800249a <__sflush_r+0x1a>
 800253c:	690f      	ldr	r7, [r1, #16]
 800253e:	2f00      	cmp	r7, #0
 8002540:	d0aa      	beq.n	8002498 <__sflush_r+0x18>
 8002542:	0793      	lsls	r3, r2, #30
 8002544:	bf18      	it	ne
 8002546:	2300      	movne	r3, #0
 8002548:	680e      	ldr	r6, [r1, #0]
 800254a:	bf08      	it	eq
 800254c:	694b      	ldreq	r3, [r1, #20]
 800254e:	1bf6      	subs	r6, r6, r7
 8002550:	600f      	str	r7, [r1, #0]
 8002552:	608b      	str	r3, [r1, #8]
 8002554:	2e00      	cmp	r6, #0
 8002556:	dd9f      	ble.n	8002498 <__sflush_r+0x18>
 8002558:	4633      	mov	r3, r6
 800255a:	463a      	mov	r2, r7
 800255c:	4628      	mov	r0, r5
 800255e:	6a21      	ldr	r1, [r4, #32]
 8002560:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002564:	47e0      	blx	ip
 8002566:	2800      	cmp	r0, #0
 8002568:	dc06      	bgt.n	8002578 <__sflush_r+0xf8>
 800256a:	89a3      	ldrh	r3, [r4, #12]
 800256c:	f04f 30ff 	mov.w	r0, #4294967295
 8002570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002574:	81a3      	strh	r3, [r4, #12]
 8002576:	e790      	b.n	800249a <__sflush_r+0x1a>
 8002578:	4407      	add	r7, r0
 800257a:	1a36      	subs	r6, r6, r0
 800257c:	e7ea      	b.n	8002554 <__sflush_r+0xd4>
 800257e:	bf00      	nop
 8002580:	20400001 	.word	0x20400001

08002584 <_fflush_r>:
 8002584:	b538      	push	{r3, r4, r5, lr}
 8002586:	690b      	ldr	r3, [r1, #16]
 8002588:	4605      	mov	r5, r0
 800258a:	460c      	mov	r4, r1
 800258c:	b913      	cbnz	r3, 8002594 <_fflush_r+0x10>
 800258e:	2500      	movs	r5, #0
 8002590:	4628      	mov	r0, r5
 8002592:	bd38      	pop	{r3, r4, r5, pc}
 8002594:	b118      	cbz	r0, 800259e <_fflush_r+0x1a>
 8002596:	6983      	ldr	r3, [r0, #24]
 8002598:	b90b      	cbnz	r3, 800259e <_fflush_r+0x1a>
 800259a:	f000 f887 	bl	80026ac <__sinit>
 800259e:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <_fflush_r+0x6c>)
 80025a0:	429c      	cmp	r4, r3
 80025a2:	d11b      	bne.n	80025dc <_fflush_r+0x58>
 80025a4:	686c      	ldr	r4, [r5, #4]
 80025a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0ef      	beq.n	800258e <_fflush_r+0xa>
 80025ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80025b0:	07d0      	lsls	r0, r2, #31
 80025b2:	d404      	bmi.n	80025be <_fflush_r+0x3a>
 80025b4:	0599      	lsls	r1, r3, #22
 80025b6:	d402      	bmi.n	80025be <_fflush_r+0x3a>
 80025b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025ba:	f000 f915 	bl	80027e8 <__retarget_lock_acquire_recursive>
 80025be:	4628      	mov	r0, r5
 80025c0:	4621      	mov	r1, r4
 80025c2:	f7ff ff5d 	bl	8002480 <__sflush_r>
 80025c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80025c8:	4605      	mov	r5, r0
 80025ca:	07da      	lsls	r2, r3, #31
 80025cc:	d4e0      	bmi.n	8002590 <_fflush_r+0xc>
 80025ce:	89a3      	ldrh	r3, [r4, #12]
 80025d0:	059b      	lsls	r3, r3, #22
 80025d2:	d4dd      	bmi.n	8002590 <_fflush_r+0xc>
 80025d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025d6:	f000 f908 	bl	80027ea <__retarget_lock_release_recursive>
 80025da:	e7d9      	b.n	8002590 <_fflush_r+0xc>
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <_fflush_r+0x70>)
 80025de:	429c      	cmp	r4, r3
 80025e0:	d101      	bne.n	80025e6 <_fflush_r+0x62>
 80025e2:	68ac      	ldr	r4, [r5, #8]
 80025e4:	e7df      	b.n	80025a6 <_fflush_r+0x22>
 80025e6:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <_fflush_r+0x74>)
 80025e8:	429c      	cmp	r4, r3
 80025ea:	bf08      	it	eq
 80025ec:	68ec      	ldreq	r4, [r5, #12]
 80025ee:	e7da      	b.n	80025a6 <_fflush_r+0x22>
 80025f0:	08003264 	.word	0x08003264
 80025f4:	08003284 	.word	0x08003284
 80025f8:	08003244 	.word	0x08003244

080025fc <std>:
 80025fc:	2300      	movs	r3, #0
 80025fe:	b510      	push	{r4, lr}
 8002600:	4604      	mov	r4, r0
 8002602:	e9c0 3300 	strd	r3, r3, [r0]
 8002606:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800260a:	6083      	str	r3, [r0, #8]
 800260c:	8181      	strh	r1, [r0, #12]
 800260e:	6643      	str	r3, [r0, #100]	; 0x64
 8002610:	81c2      	strh	r2, [r0, #14]
 8002612:	6183      	str	r3, [r0, #24]
 8002614:	4619      	mov	r1, r3
 8002616:	2208      	movs	r2, #8
 8002618:	305c      	adds	r0, #92	; 0x5c
 800261a:	f7ff fddb 	bl	80021d4 <memset>
 800261e:	4b05      	ldr	r3, [pc, #20]	; (8002634 <std+0x38>)
 8002620:	6224      	str	r4, [r4, #32]
 8002622:	6263      	str	r3, [r4, #36]	; 0x24
 8002624:	4b04      	ldr	r3, [pc, #16]	; (8002638 <std+0x3c>)
 8002626:	62a3      	str	r3, [r4, #40]	; 0x28
 8002628:	4b04      	ldr	r3, [pc, #16]	; (800263c <std+0x40>)
 800262a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <std+0x44>)
 800262e:	6323      	str	r3, [r4, #48]	; 0x30
 8002630:	bd10      	pop	{r4, pc}
 8002632:	bf00      	nop
 8002634:	0800306d 	.word	0x0800306d
 8002638:	0800308f 	.word	0x0800308f
 800263c:	080030c7 	.word	0x080030c7
 8002640:	080030eb 	.word	0x080030eb

08002644 <_cleanup_r>:
 8002644:	4901      	ldr	r1, [pc, #4]	; (800264c <_cleanup_r+0x8>)
 8002646:	f000 b8af 	b.w	80027a8 <_fwalk_reent>
 800264a:	bf00      	nop
 800264c:	08002585 	.word	0x08002585

08002650 <__sfmoreglue>:
 8002650:	2268      	movs	r2, #104	; 0x68
 8002652:	b570      	push	{r4, r5, r6, lr}
 8002654:	1e4d      	subs	r5, r1, #1
 8002656:	4355      	muls	r5, r2
 8002658:	460e      	mov	r6, r1
 800265a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800265e:	f000 f993 	bl	8002988 <_malloc_r>
 8002662:	4604      	mov	r4, r0
 8002664:	b140      	cbz	r0, 8002678 <__sfmoreglue+0x28>
 8002666:	2100      	movs	r1, #0
 8002668:	e9c0 1600 	strd	r1, r6, [r0]
 800266c:	300c      	adds	r0, #12
 800266e:	60a0      	str	r0, [r4, #8]
 8002670:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002674:	f7ff fdae 	bl	80021d4 <memset>
 8002678:	4620      	mov	r0, r4
 800267a:	bd70      	pop	{r4, r5, r6, pc}

0800267c <__sfp_lock_acquire>:
 800267c:	4801      	ldr	r0, [pc, #4]	; (8002684 <__sfp_lock_acquire+0x8>)
 800267e:	f000 b8b3 	b.w	80027e8 <__retarget_lock_acquire_recursive>
 8002682:	bf00      	nop
 8002684:	20000175 	.word	0x20000175

08002688 <__sfp_lock_release>:
 8002688:	4801      	ldr	r0, [pc, #4]	; (8002690 <__sfp_lock_release+0x8>)
 800268a:	f000 b8ae 	b.w	80027ea <__retarget_lock_release_recursive>
 800268e:	bf00      	nop
 8002690:	20000175 	.word	0x20000175

08002694 <__sinit_lock_acquire>:
 8002694:	4801      	ldr	r0, [pc, #4]	; (800269c <__sinit_lock_acquire+0x8>)
 8002696:	f000 b8a7 	b.w	80027e8 <__retarget_lock_acquire_recursive>
 800269a:	bf00      	nop
 800269c:	20000176 	.word	0x20000176

080026a0 <__sinit_lock_release>:
 80026a0:	4801      	ldr	r0, [pc, #4]	; (80026a8 <__sinit_lock_release+0x8>)
 80026a2:	f000 b8a2 	b.w	80027ea <__retarget_lock_release_recursive>
 80026a6:	bf00      	nop
 80026a8:	20000176 	.word	0x20000176

080026ac <__sinit>:
 80026ac:	b510      	push	{r4, lr}
 80026ae:	4604      	mov	r4, r0
 80026b0:	f7ff fff0 	bl	8002694 <__sinit_lock_acquire>
 80026b4:	69a3      	ldr	r3, [r4, #24]
 80026b6:	b11b      	cbz	r3, 80026c0 <__sinit+0x14>
 80026b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026bc:	f7ff bff0 	b.w	80026a0 <__sinit_lock_release>
 80026c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80026c4:	6523      	str	r3, [r4, #80]	; 0x50
 80026c6:	4b13      	ldr	r3, [pc, #76]	; (8002714 <__sinit+0x68>)
 80026c8:	4a13      	ldr	r2, [pc, #76]	; (8002718 <__sinit+0x6c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80026ce:	42a3      	cmp	r3, r4
 80026d0:	bf08      	it	eq
 80026d2:	2301      	moveq	r3, #1
 80026d4:	4620      	mov	r0, r4
 80026d6:	bf08      	it	eq
 80026d8:	61a3      	streq	r3, [r4, #24]
 80026da:	f000 f81f 	bl	800271c <__sfp>
 80026de:	6060      	str	r0, [r4, #4]
 80026e0:	4620      	mov	r0, r4
 80026e2:	f000 f81b 	bl	800271c <__sfp>
 80026e6:	60a0      	str	r0, [r4, #8]
 80026e8:	4620      	mov	r0, r4
 80026ea:	f000 f817 	bl	800271c <__sfp>
 80026ee:	2200      	movs	r2, #0
 80026f0:	2104      	movs	r1, #4
 80026f2:	60e0      	str	r0, [r4, #12]
 80026f4:	6860      	ldr	r0, [r4, #4]
 80026f6:	f7ff ff81 	bl	80025fc <std>
 80026fa:	2201      	movs	r2, #1
 80026fc:	2109      	movs	r1, #9
 80026fe:	68a0      	ldr	r0, [r4, #8]
 8002700:	f7ff ff7c 	bl	80025fc <std>
 8002704:	2202      	movs	r2, #2
 8002706:	2112      	movs	r1, #18
 8002708:	68e0      	ldr	r0, [r4, #12]
 800270a:	f7ff ff77 	bl	80025fc <std>
 800270e:	2301      	movs	r3, #1
 8002710:	61a3      	str	r3, [r4, #24]
 8002712:	e7d1      	b.n	80026b8 <__sinit+0xc>
 8002714:	08003240 	.word	0x08003240
 8002718:	08002645 	.word	0x08002645

0800271c <__sfp>:
 800271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271e:	4607      	mov	r7, r0
 8002720:	f7ff ffac 	bl	800267c <__sfp_lock_acquire>
 8002724:	4b1e      	ldr	r3, [pc, #120]	; (80027a0 <__sfp+0x84>)
 8002726:	681e      	ldr	r6, [r3, #0]
 8002728:	69b3      	ldr	r3, [r6, #24]
 800272a:	b913      	cbnz	r3, 8002732 <__sfp+0x16>
 800272c:	4630      	mov	r0, r6
 800272e:	f7ff ffbd 	bl	80026ac <__sinit>
 8002732:	3648      	adds	r6, #72	; 0x48
 8002734:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002738:	3b01      	subs	r3, #1
 800273a:	d503      	bpl.n	8002744 <__sfp+0x28>
 800273c:	6833      	ldr	r3, [r6, #0]
 800273e:	b30b      	cbz	r3, 8002784 <__sfp+0x68>
 8002740:	6836      	ldr	r6, [r6, #0]
 8002742:	e7f7      	b.n	8002734 <__sfp+0x18>
 8002744:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002748:	b9d5      	cbnz	r5, 8002780 <__sfp+0x64>
 800274a:	4b16      	ldr	r3, [pc, #88]	; (80027a4 <__sfp+0x88>)
 800274c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002750:	60e3      	str	r3, [r4, #12]
 8002752:	6665      	str	r5, [r4, #100]	; 0x64
 8002754:	f000 f847 	bl	80027e6 <__retarget_lock_init_recursive>
 8002758:	f7ff ff96 	bl	8002688 <__sfp_lock_release>
 800275c:	2208      	movs	r2, #8
 800275e:	4629      	mov	r1, r5
 8002760:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002764:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002768:	6025      	str	r5, [r4, #0]
 800276a:	61a5      	str	r5, [r4, #24]
 800276c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002770:	f7ff fd30 	bl	80021d4 <memset>
 8002774:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002778:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800277c:	4620      	mov	r0, r4
 800277e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002780:	3468      	adds	r4, #104	; 0x68
 8002782:	e7d9      	b.n	8002738 <__sfp+0x1c>
 8002784:	2104      	movs	r1, #4
 8002786:	4638      	mov	r0, r7
 8002788:	f7ff ff62 	bl	8002650 <__sfmoreglue>
 800278c:	4604      	mov	r4, r0
 800278e:	6030      	str	r0, [r6, #0]
 8002790:	2800      	cmp	r0, #0
 8002792:	d1d5      	bne.n	8002740 <__sfp+0x24>
 8002794:	f7ff ff78 	bl	8002688 <__sfp_lock_release>
 8002798:	230c      	movs	r3, #12
 800279a:	603b      	str	r3, [r7, #0]
 800279c:	e7ee      	b.n	800277c <__sfp+0x60>
 800279e:	bf00      	nop
 80027a0:	08003240 	.word	0x08003240
 80027a4:	ffff0001 	.word	0xffff0001

080027a8 <_fwalk_reent>:
 80027a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027ac:	4606      	mov	r6, r0
 80027ae:	4688      	mov	r8, r1
 80027b0:	2700      	movs	r7, #0
 80027b2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80027b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80027ba:	f1b9 0901 	subs.w	r9, r9, #1
 80027be:	d505      	bpl.n	80027cc <_fwalk_reent+0x24>
 80027c0:	6824      	ldr	r4, [r4, #0]
 80027c2:	2c00      	cmp	r4, #0
 80027c4:	d1f7      	bne.n	80027b6 <_fwalk_reent+0xe>
 80027c6:	4638      	mov	r0, r7
 80027c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027cc:	89ab      	ldrh	r3, [r5, #12]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d907      	bls.n	80027e2 <_fwalk_reent+0x3a>
 80027d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80027d6:	3301      	adds	r3, #1
 80027d8:	d003      	beq.n	80027e2 <_fwalk_reent+0x3a>
 80027da:	4629      	mov	r1, r5
 80027dc:	4630      	mov	r0, r6
 80027de:	47c0      	blx	r8
 80027e0:	4307      	orrs	r7, r0
 80027e2:	3568      	adds	r5, #104	; 0x68
 80027e4:	e7e9      	b.n	80027ba <_fwalk_reent+0x12>

080027e6 <__retarget_lock_init_recursive>:
 80027e6:	4770      	bx	lr

080027e8 <__retarget_lock_acquire_recursive>:
 80027e8:	4770      	bx	lr

080027ea <__retarget_lock_release_recursive>:
 80027ea:	4770      	bx	lr

080027ec <__swhatbuf_r>:
 80027ec:	b570      	push	{r4, r5, r6, lr}
 80027ee:	460e      	mov	r6, r1
 80027f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027f4:	4614      	mov	r4, r2
 80027f6:	2900      	cmp	r1, #0
 80027f8:	461d      	mov	r5, r3
 80027fa:	b096      	sub	sp, #88	; 0x58
 80027fc:	da08      	bge.n	8002810 <__swhatbuf_r+0x24>
 80027fe:	2200      	movs	r2, #0
 8002800:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002804:	602a      	str	r2, [r5, #0]
 8002806:	061a      	lsls	r2, r3, #24
 8002808:	d410      	bmi.n	800282c <__swhatbuf_r+0x40>
 800280a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800280e:	e00e      	b.n	800282e <__swhatbuf_r+0x42>
 8002810:	466a      	mov	r2, sp
 8002812:	f000 fc91 	bl	8003138 <_fstat_r>
 8002816:	2800      	cmp	r0, #0
 8002818:	dbf1      	blt.n	80027fe <__swhatbuf_r+0x12>
 800281a:	9a01      	ldr	r2, [sp, #4]
 800281c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002820:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002824:	425a      	negs	r2, r3
 8002826:	415a      	adcs	r2, r3
 8002828:	602a      	str	r2, [r5, #0]
 800282a:	e7ee      	b.n	800280a <__swhatbuf_r+0x1e>
 800282c:	2340      	movs	r3, #64	; 0x40
 800282e:	2000      	movs	r0, #0
 8002830:	6023      	str	r3, [r4, #0]
 8002832:	b016      	add	sp, #88	; 0x58
 8002834:	bd70      	pop	{r4, r5, r6, pc}
	...

08002838 <__smakebuf_r>:
 8002838:	898b      	ldrh	r3, [r1, #12]
 800283a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800283c:	079d      	lsls	r5, r3, #30
 800283e:	4606      	mov	r6, r0
 8002840:	460c      	mov	r4, r1
 8002842:	d507      	bpl.n	8002854 <__smakebuf_r+0x1c>
 8002844:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002848:	6023      	str	r3, [r4, #0]
 800284a:	6123      	str	r3, [r4, #16]
 800284c:	2301      	movs	r3, #1
 800284e:	6163      	str	r3, [r4, #20]
 8002850:	b002      	add	sp, #8
 8002852:	bd70      	pop	{r4, r5, r6, pc}
 8002854:	466a      	mov	r2, sp
 8002856:	ab01      	add	r3, sp, #4
 8002858:	f7ff ffc8 	bl	80027ec <__swhatbuf_r>
 800285c:	9900      	ldr	r1, [sp, #0]
 800285e:	4605      	mov	r5, r0
 8002860:	4630      	mov	r0, r6
 8002862:	f000 f891 	bl	8002988 <_malloc_r>
 8002866:	b948      	cbnz	r0, 800287c <__smakebuf_r+0x44>
 8002868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800286c:	059a      	lsls	r2, r3, #22
 800286e:	d4ef      	bmi.n	8002850 <__smakebuf_r+0x18>
 8002870:	f023 0303 	bic.w	r3, r3, #3
 8002874:	f043 0302 	orr.w	r3, r3, #2
 8002878:	81a3      	strh	r3, [r4, #12]
 800287a:	e7e3      	b.n	8002844 <__smakebuf_r+0xc>
 800287c:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <__smakebuf_r+0x7c>)
 800287e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002880:	89a3      	ldrh	r3, [r4, #12]
 8002882:	6020      	str	r0, [r4, #0]
 8002884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002888:	81a3      	strh	r3, [r4, #12]
 800288a:	9b00      	ldr	r3, [sp, #0]
 800288c:	6120      	str	r0, [r4, #16]
 800288e:	6163      	str	r3, [r4, #20]
 8002890:	9b01      	ldr	r3, [sp, #4]
 8002892:	b15b      	cbz	r3, 80028ac <__smakebuf_r+0x74>
 8002894:	4630      	mov	r0, r6
 8002896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800289a:	f000 fc5f 	bl	800315c <_isatty_r>
 800289e:	b128      	cbz	r0, 80028ac <__smakebuf_r+0x74>
 80028a0:	89a3      	ldrh	r3, [r4, #12]
 80028a2:	f023 0303 	bic.w	r3, r3, #3
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	81a3      	strh	r3, [r4, #12]
 80028ac:	89a0      	ldrh	r0, [r4, #12]
 80028ae:	4305      	orrs	r5, r0
 80028b0:	81a5      	strh	r5, [r4, #12]
 80028b2:	e7cd      	b.n	8002850 <__smakebuf_r+0x18>
 80028b4:	08002645 	.word	0x08002645

080028b8 <_free_r>:
 80028b8:	b538      	push	{r3, r4, r5, lr}
 80028ba:	4605      	mov	r5, r0
 80028bc:	2900      	cmp	r1, #0
 80028be:	d040      	beq.n	8002942 <_free_r+0x8a>
 80028c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028c4:	1f0c      	subs	r4, r1, #4
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	bfb8      	it	lt
 80028ca:	18e4      	addlt	r4, r4, r3
 80028cc:	f000 fc76 	bl	80031bc <__malloc_lock>
 80028d0:	4a1c      	ldr	r2, [pc, #112]	; (8002944 <_free_r+0x8c>)
 80028d2:	6813      	ldr	r3, [r2, #0]
 80028d4:	b933      	cbnz	r3, 80028e4 <_free_r+0x2c>
 80028d6:	6063      	str	r3, [r4, #4]
 80028d8:	6014      	str	r4, [r2, #0]
 80028da:	4628      	mov	r0, r5
 80028dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028e0:	f000 bc72 	b.w	80031c8 <__malloc_unlock>
 80028e4:	42a3      	cmp	r3, r4
 80028e6:	d908      	bls.n	80028fa <_free_r+0x42>
 80028e8:	6820      	ldr	r0, [r4, #0]
 80028ea:	1821      	adds	r1, r4, r0
 80028ec:	428b      	cmp	r3, r1
 80028ee:	bf01      	itttt	eq
 80028f0:	6819      	ldreq	r1, [r3, #0]
 80028f2:	685b      	ldreq	r3, [r3, #4]
 80028f4:	1809      	addeq	r1, r1, r0
 80028f6:	6021      	streq	r1, [r4, #0]
 80028f8:	e7ed      	b.n	80028d6 <_free_r+0x1e>
 80028fa:	461a      	mov	r2, r3
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	b10b      	cbz	r3, 8002904 <_free_r+0x4c>
 8002900:	42a3      	cmp	r3, r4
 8002902:	d9fa      	bls.n	80028fa <_free_r+0x42>
 8002904:	6811      	ldr	r1, [r2, #0]
 8002906:	1850      	adds	r0, r2, r1
 8002908:	42a0      	cmp	r0, r4
 800290a:	d10b      	bne.n	8002924 <_free_r+0x6c>
 800290c:	6820      	ldr	r0, [r4, #0]
 800290e:	4401      	add	r1, r0
 8002910:	1850      	adds	r0, r2, r1
 8002912:	4283      	cmp	r3, r0
 8002914:	6011      	str	r1, [r2, #0]
 8002916:	d1e0      	bne.n	80028da <_free_r+0x22>
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4401      	add	r1, r0
 800291e:	6011      	str	r1, [r2, #0]
 8002920:	6053      	str	r3, [r2, #4]
 8002922:	e7da      	b.n	80028da <_free_r+0x22>
 8002924:	d902      	bls.n	800292c <_free_r+0x74>
 8002926:	230c      	movs	r3, #12
 8002928:	602b      	str	r3, [r5, #0]
 800292a:	e7d6      	b.n	80028da <_free_r+0x22>
 800292c:	6820      	ldr	r0, [r4, #0]
 800292e:	1821      	adds	r1, r4, r0
 8002930:	428b      	cmp	r3, r1
 8002932:	bf01      	itttt	eq
 8002934:	6819      	ldreq	r1, [r3, #0]
 8002936:	685b      	ldreq	r3, [r3, #4]
 8002938:	1809      	addeq	r1, r1, r0
 800293a:	6021      	streq	r1, [r4, #0]
 800293c:	6063      	str	r3, [r4, #4]
 800293e:	6054      	str	r4, [r2, #4]
 8002940:	e7cb      	b.n	80028da <_free_r+0x22>
 8002942:	bd38      	pop	{r3, r4, r5, pc}
 8002944:	20000178 	.word	0x20000178

08002948 <sbrk_aligned>:
 8002948:	b570      	push	{r4, r5, r6, lr}
 800294a:	4e0e      	ldr	r6, [pc, #56]	; (8002984 <sbrk_aligned+0x3c>)
 800294c:	460c      	mov	r4, r1
 800294e:	6831      	ldr	r1, [r6, #0]
 8002950:	4605      	mov	r5, r0
 8002952:	b911      	cbnz	r1, 800295a <sbrk_aligned+0x12>
 8002954:	f000 fb7a 	bl	800304c <_sbrk_r>
 8002958:	6030      	str	r0, [r6, #0]
 800295a:	4621      	mov	r1, r4
 800295c:	4628      	mov	r0, r5
 800295e:	f000 fb75 	bl	800304c <_sbrk_r>
 8002962:	1c43      	adds	r3, r0, #1
 8002964:	d00a      	beq.n	800297c <sbrk_aligned+0x34>
 8002966:	1cc4      	adds	r4, r0, #3
 8002968:	f024 0403 	bic.w	r4, r4, #3
 800296c:	42a0      	cmp	r0, r4
 800296e:	d007      	beq.n	8002980 <sbrk_aligned+0x38>
 8002970:	1a21      	subs	r1, r4, r0
 8002972:	4628      	mov	r0, r5
 8002974:	f000 fb6a 	bl	800304c <_sbrk_r>
 8002978:	3001      	adds	r0, #1
 800297a:	d101      	bne.n	8002980 <sbrk_aligned+0x38>
 800297c:	f04f 34ff 	mov.w	r4, #4294967295
 8002980:	4620      	mov	r0, r4
 8002982:	bd70      	pop	{r4, r5, r6, pc}
 8002984:	2000017c 	.word	0x2000017c

08002988 <_malloc_r>:
 8002988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800298c:	1ccd      	adds	r5, r1, #3
 800298e:	f025 0503 	bic.w	r5, r5, #3
 8002992:	3508      	adds	r5, #8
 8002994:	2d0c      	cmp	r5, #12
 8002996:	bf38      	it	cc
 8002998:	250c      	movcc	r5, #12
 800299a:	2d00      	cmp	r5, #0
 800299c:	4607      	mov	r7, r0
 800299e:	db01      	blt.n	80029a4 <_malloc_r+0x1c>
 80029a0:	42a9      	cmp	r1, r5
 80029a2:	d905      	bls.n	80029b0 <_malloc_r+0x28>
 80029a4:	230c      	movs	r3, #12
 80029a6:	2600      	movs	r6, #0
 80029a8:	603b      	str	r3, [r7, #0]
 80029aa:	4630      	mov	r0, r6
 80029ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029b0:	4e2e      	ldr	r6, [pc, #184]	; (8002a6c <_malloc_r+0xe4>)
 80029b2:	f000 fc03 	bl	80031bc <__malloc_lock>
 80029b6:	6833      	ldr	r3, [r6, #0]
 80029b8:	461c      	mov	r4, r3
 80029ba:	bb34      	cbnz	r4, 8002a0a <_malloc_r+0x82>
 80029bc:	4629      	mov	r1, r5
 80029be:	4638      	mov	r0, r7
 80029c0:	f7ff ffc2 	bl	8002948 <sbrk_aligned>
 80029c4:	1c43      	adds	r3, r0, #1
 80029c6:	4604      	mov	r4, r0
 80029c8:	d14d      	bne.n	8002a66 <_malloc_r+0xde>
 80029ca:	6834      	ldr	r4, [r6, #0]
 80029cc:	4626      	mov	r6, r4
 80029ce:	2e00      	cmp	r6, #0
 80029d0:	d140      	bne.n	8002a54 <_malloc_r+0xcc>
 80029d2:	6823      	ldr	r3, [r4, #0]
 80029d4:	4631      	mov	r1, r6
 80029d6:	4638      	mov	r0, r7
 80029d8:	eb04 0803 	add.w	r8, r4, r3
 80029dc:	f000 fb36 	bl	800304c <_sbrk_r>
 80029e0:	4580      	cmp	r8, r0
 80029e2:	d13a      	bne.n	8002a5a <_malloc_r+0xd2>
 80029e4:	6821      	ldr	r1, [r4, #0]
 80029e6:	3503      	adds	r5, #3
 80029e8:	1a6d      	subs	r5, r5, r1
 80029ea:	f025 0503 	bic.w	r5, r5, #3
 80029ee:	3508      	adds	r5, #8
 80029f0:	2d0c      	cmp	r5, #12
 80029f2:	bf38      	it	cc
 80029f4:	250c      	movcc	r5, #12
 80029f6:	4638      	mov	r0, r7
 80029f8:	4629      	mov	r1, r5
 80029fa:	f7ff ffa5 	bl	8002948 <sbrk_aligned>
 80029fe:	3001      	adds	r0, #1
 8002a00:	d02b      	beq.n	8002a5a <_malloc_r+0xd2>
 8002a02:	6823      	ldr	r3, [r4, #0]
 8002a04:	442b      	add	r3, r5
 8002a06:	6023      	str	r3, [r4, #0]
 8002a08:	e00e      	b.n	8002a28 <_malloc_r+0xa0>
 8002a0a:	6822      	ldr	r2, [r4, #0]
 8002a0c:	1b52      	subs	r2, r2, r5
 8002a0e:	d41e      	bmi.n	8002a4e <_malloc_r+0xc6>
 8002a10:	2a0b      	cmp	r2, #11
 8002a12:	d916      	bls.n	8002a42 <_malloc_r+0xba>
 8002a14:	1961      	adds	r1, r4, r5
 8002a16:	42a3      	cmp	r3, r4
 8002a18:	6025      	str	r5, [r4, #0]
 8002a1a:	bf18      	it	ne
 8002a1c:	6059      	strne	r1, [r3, #4]
 8002a1e:	6863      	ldr	r3, [r4, #4]
 8002a20:	bf08      	it	eq
 8002a22:	6031      	streq	r1, [r6, #0]
 8002a24:	5162      	str	r2, [r4, r5]
 8002a26:	604b      	str	r3, [r1, #4]
 8002a28:	4638      	mov	r0, r7
 8002a2a:	f104 060b 	add.w	r6, r4, #11
 8002a2e:	f000 fbcb 	bl	80031c8 <__malloc_unlock>
 8002a32:	f026 0607 	bic.w	r6, r6, #7
 8002a36:	1d23      	adds	r3, r4, #4
 8002a38:	1af2      	subs	r2, r6, r3
 8002a3a:	d0b6      	beq.n	80029aa <_malloc_r+0x22>
 8002a3c:	1b9b      	subs	r3, r3, r6
 8002a3e:	50a3      	str	r3, [r4, r2]
 8002a40:	e7b3      	b.n	80029aa <_malloc_r+0x22>
 8002a42:	6862      	ldr	r2, [r4, #4]
 8002a44:	42a3      	cmp	r3, r4
 8002a46:	bf0c      	ite	eq
 8002a48:	6032      	streq	r2, [r6, #0]
 8002a4a:	605a      	strne	r2, [r3, #4]
 8002a4c:	e7ec      	b.n	8002a28 <_malloc_r+0xa0>
 8002a4e:	4623      	mov	r3, r4
 8002a50:	6864      	ldr	r4, [r4, #4]
 8002a52:	e7b2      	b.n	80029ba <_malloc_r+0x32>
 8002a54:	4634      	mov	r4, r6
 8002a56:	6876      	ldr	r6, [r6, #4]
 8002a58:	e7b9      	b.n	80029ce <_malloc_r+0x46>
 8002a5a:	230c      	movs	r3, #12
 8002a5c:	4638      	mov	r0, r7
 8002a5e:	603b      	str	r3, [r7, #0]
 8002a60:	f000 fbb2 	bl	80031c8 <__malloc_unlock>
 8002a64:	e7a1      	b.n	80029aa <_malloc_r+0x22>
 8002a66:	6025      	str	r5, [r4, #0]
 8002a68:	e7de      	b.n	8002a28 <_malloc_r+0xa0>
 8002a6a:	bf00      	nop
 8002a6c:	20000178 	.word	0x20000178

08002a70 <__sfputc_r>:
 8002a70:	6893      	ldr	r3, [r2, #8]
 8002a72:	b410      	push	{r4}
 8002a74:	3b01      	subs	r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	6093      	str	r3, [r2, #8]
 8002a7a:	da07      	bge.n	8002a8c <__sfputc_r+0x1c>
 8002a7c:	6994      	ldr	r4, [r2, #24]
 8002a7e:	42a3      	cmp	r3, r4
 8002a80:	db01      	blt.n	8002a86 <__sfputc_r+0x16>
 8002a82:	290a      	cmp	r1, #10
 8002a84:	d102      	bne.n	8002a8c <__sfputc_r+0x1c>
 8002a86:	bc10      	pop	{r4}
 8002a88:	f7ff bc3a 	b.w	8002300 <__swbuf_r>
 8002a8c:	6813      	ldr	r3, [r2, #0]
 8002a8e:	1c58      	adds	r0, r3, #1
 8002a90:	6010      	str	r0, [r2, #0]
 8002a92:	7019      	strb	r1, [r3, #0]
 8002a94:	4608      	mov	r0, r1
 8002a96:	bc10      	pop	{r4}
 8002a98:	4770      	bx	lr

08002a9a <__sfputs_r>:
 8002a9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a9c:	4606      	mov	r6, r0
 8002a9e:	460f      	mov	r7, r1
 8002aa0:	4614      	mov	r4, r2
 8002aa2:	18d5      	adds	r5, r2, r3
 8002aa4:	42ac      	cmp	r4, r5
 8002aa6:	d101      	bne.n	8002aac <__sfputs_r+0x12>
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	e007      	b.n	8002abc <__sfputs_r+0x22>
 8002aac:	463a      	mov	r2, r7
 8002aae:	4630      	mov	r0, r6
 8002ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ab4:	f7ff ffdc 	bl	8002a70 <__sfputc_r>
 8002ab8:	1c43      	adds	r3, r0, #1
 8002aba:	d1f3      	bne.n	8002aa4 <__sfputs_r+0xa>
 8002abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ac0 <_vfiprintf_r>:
 8002ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ac4:	460d      	mov	r5, r1
 8002ac6:	4614      	mov	r4, r2
 8002ac8:	4698      	mov	r8, r3
 8002aca:	4606      	mov	r6, r0
 8002acc:	b09d      	sub	sp, #116	; 0x74
 8002ace:	b118      	cbz	r0, 8002ad8 <_vfiprintf_r+0x18>
 8002ad0:	6983      	ldr	r3, [r0, #24]
 8002ad2:	b90b      	cbnz	r3, 8002ad8 <_vfiprintf_r+0x18>
 8002ad4:	f7ff fdea 	bl	80026ac <__sinit>
 8002ad8:	4b89      	ldr	r3, [pc, #548]	; (8002d00 <_vfiprintf_r+0x240>)
 8002ada:	429d      	cmp	r5, r3
 8002adc:	d11b      	bne.n	8002b16 <_vfiprintf_r+0x56>
 8002ade:	6875      	ldr	r5, [r6, #4]
 8002ae0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ae2:	07d9      	lsls	r1, r3, #31
 8002ae4:	d405      	bmi.n	8002af2 <_vfiprintf_r+0x32>
 8002ae6:	89ab      	ldrh	r3, [r5, #12]
 8002ae8:	059a      	lsls	r2, r3, #22
 8002aea:	d402      	bmi.n	8002af2 <_vfiprintf_r+0x32>
 8002aec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002aee:	f7ff fe7b 	bl	80027e8 <__retarget_lock_acquire_recursive>
 8002af2:	89ab      	ldrh	r3, [r5, #12]
 8002af4:	071b      	lsls	r3, r3, #28
 8002af6:	d501      	bpl.n	8002afc <_vfiprintf_r+0x3c>
 8002af8:	692b      	ldr	r3, [r5, #16]
 8002afa:	b9eb      	cbnz	r3, 8002b38 <_vfiprintf_r+0x78>
 8002afc:	4629      	mov	r1, r5
 8002afe:	4630      	mov	r0, r6
 8002b00:	f7ff fc50 	bl	80023a4 <__swsetup_r>
 8002b04:	b1c0      	cbz	r0, 8002b38 <_vfiprintf_r+0x78>
 8002b06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b08:	07dc      	lsls	r4, r3, #31
 8002b0a:	d50e      	bpl.n	8002b2a <_vfiprintf_r+0x6a>
 8002b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b10:	b01d      	add	sp, #116	; 0x74
 8002b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b16:	4b7b      	ldr	r3, [pc, #492]	; (8002d04 <_vfiprintf_r+0x244>)
 8002b18:	429d      	cmp	r5, r3
 8002b1a:	d101      	bne.n	8002b20 <_vfiprintf_r+0x60>
 8002b1c:	68b5      	ldr	r5, [r6, #8]
 8002b1e:	e7df      	b.n	8002ae0 <_vfiprintf_r+0x20>
 8002b20:	4b79      	ldr	r3, [pc, #484]	; (8002d08 <_vfiprintf_r+0x248>)
 8002b22:	429d      	cmp	r5, r3
 8002b24:	bf08      	it	eq
 8002b26:	68f5      	ldreq	r5, [r6, #12]
 8002b28:	e7da      	b.n	8002ae0 <_vfiprintf_r+0x20>
 8002b2a:	89ab      	ldrh	r3, [r5, #12]
 8002b2c:	0598      	lsls	r0, r3, #22
 8002b2e:	d4ed      	bmi.n	8002b0c <_vfiprintf_r+0x4c>
 8002b30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b32:	f7ff fe5a 	bl	80027ea <__retarget_lock_release_recursive>
 8002b36:	e7e9      	b.n	8002b0c <_vfiprintf_r+0x4c>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8002b3c:	2320      	movs	r3, #32
 8002b3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b42:	2330      	movs	r3, #48	; 0x30
 8002b44:	f04f 0901 	mov.w	r9, #1
 8002b48:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b4c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002d0c <_vfiprintf_r+0x24c>
 8002b50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b54:	4623      	mov	r3, r4
 8002b56:	469a      	mov	sl, r3
 8002b58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b5c:	b10a      	cbz	r2, 8002b62 <_vfiprintf_r+0xa2>
 8002b5e:	2a25      	cmp	r2, #37	; 0x25
 8002b60:	d1f9      	bne.n	8002b56 <_vfiprintf_r+0x96>
 8002b62:	ebba 0b04 	subs.w	fp, sl, r4
 8002b66:	d00b      	beq.n	8002b80 <_vfiprintf_r+0xc0>
 8002b68:	465b      	mov	r3, fp
 8002b6a:	4622      	mov	r2, r4
 8002b6c:	4629      	mov	r1, r5
 8002b6e:	4630      	mov	r0, r6
 8002b70:	f7ff ff93 	bl	8002a9a <__sfputs_r>
 8002b74:	3001      	adds	r0, #1
 8002b76:	f000 80aa 	beq.w	8002cce <_vfiprintf_r+0x20e>
 8002b7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b7c:	445a      	add	r2, fp
 8002b7e:	9209      	str	r2, [sp, #36]	; 0x24
 8002b80:	f89a 3000 	ldrb.w	r3, [sl]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 80a2 	beq.w	8002cce <_vfiprintf_r+0x20e>
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b94:	f10a 0a01 	add.w	sl, sl, #1
 8002b98:	9304      	str	r3, [sp, #16]
 8002b9a:	9307      	str	r3, [sp, #28]
 8002b9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ba0:	931a      	str	r3, [sp, #104]	; 0x68
 8002ba2:	4654      	mov	r4, sl
 8002ba4:	2205      	movs	r2, #5
 8002ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002baa:	4858      	ldr	r0, [pc, #352]	; (8002d0c <_vfiprintf_r+0x24c>)
 8002bac:	f000 faf8 	bl	80031a0 <memchr>
 8002bb0:	9a04      	ldr	r2, [sp, #16]
 8002bb2:	b9d8      	cbnz	r0, 8002bec <_vfiprintf_r+0x12c>
 8002bb4:	06d1      	lsls	r1, r2, #27
 8002bb6:	bf44      	itt	mi
 8002bb8:	2320      	movmi	r3, #32
 8002bba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bbe:	0713      	lsls	r3, r2, #28
 8002bc0:	bf44      	itt	mi
 8002bc2:	232b      	movmi	r3, #43	; 0x2b
 8002bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002bc8:	f89a 3000 	ldrb.w	r3, [sl]
 8002bcc:	2b2a      	cmp	r3, #42	; 0x2a
 8002bce:	d015      	beq.n	8002bfc <_vfiprintf_r+0x13c>
 8002bd0:	4654      	mov	r4, sl
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	f04f 0c0a 	mov.w	ip, #10
 8002bd8:	9a07      	ldr	r2, [sp, #28]
 8002bda:	4621      	mov	r1, r4
 8002bdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002be0:	3b30      	subs	r3, #48	; 0x30
 8002be2:	2b09      	cmp	r3, #9
 8002be4:	d94e      	bls.n	8002c84 <_vfiprintf_r+0x1c4>
 8002be6:	b1b0      	cbz	r0, 8002c16 <_vfiprintf_r+0x156>
 8002be8:	9207      	str	r2, [sp, #28]
 8002bea:	e014      	b.n	8002c16 <_vfiprintf_r+0x156>
 8002bec:	eba0 0308 	sub.w	r3, r0, r8
 8002bf0:	fa09 f303 	lsl.w	r3, r9, r3
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	46a2      	mov	sl, r4
 8002bf8:	9304      	str	r3, [sp, #16]
 8002bfa:	e7d2      	b.n	8002ba2 <_vfiprintf_r+0xe2>
 8002bfc:	9b03      	ldr	r3, [sp, #12]
 8002bfe:	1d19      	adds	r1, r3, #4
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	9103      	str	r1, [sp, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	bfbb      	ittet	lt
 8002c08:	425b      	neglt	r3, r3
 8002c0a:	f042 0202 	orrlt.w	r2, r2, #2
 8002c0e:	9307      	strge	r3, [sp, #28]
 8002c10:	9307      	strlt	r3, [sp, #28]
 8002c12:	bfb8      	it	lt
 8002c14:	9204      	strlt	r2, [sp, #16]
 8002c16:	7823      	ldrb	r3, [r4, #0]
 8002c18:	2b2e      	cmp	r3, #46	; 0x2e
 8002c1a:	d10c      	bne.n	8002c36 <_vfiprintf_r+0x176>
 8002c1c:	7863      	ldrb	r3, [r4, #1]
 8002c1e:	2b2a      	cmp	r3, #42	; 0x2a
 8002c20:	d135      	bne.n	8002c8e <_vfiprintf_r+0x1ce>
 8002c22:	9b03      	ldr	r3, [sp, #12]
 8002c24:	3402      	adds	r4, #2
 8002c26:	1d1a      	adds	r2, r3, #4
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	9203      	str	r2, [sp, #12]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bfb8      	it	lt
 8002c30:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c34:	9305      	str	r3, [sp, #20]
 8002c36:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002d10 <_vfiprintf_r+0x250>
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	4650      	mov	r0, sl
 8002c3e:	7821      	ldrb	r1, [r4, #0]
 8002c40:	f000 faae 	bl	80031a0 <memchr>
 8002c44:	b140      	cbz	r0, 8002c58 <_vfiprintf_r+0x198>
 8002c46:	2340      	movs	r3, #64	; 0x40
 8002c48:	eba0 000a 	sub.w	r0, r0, sl
 8002c4c:	fa03 f000 	lsl.w	r0, r3, r0
 8002c50:	9b04      	ldr	r3, [sp, #16]
 8002c52:	3401      	adds	r4, #1
 8002c54:	4303      	orrs	r3, r0
 8002c56:	9304      	str	r3, [sp, #16]
 8002c58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c5c:	2206      	movs	r2, #6
 8002c5e:	482d      	ldr	r0, [pc, #180]	; (8002d14 <_vfiprintf_r+0x254>)
 8002c60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c64:	f000 fa9c 	bl	80031a0 <memchr>
 8002c68:	2800      	cmp	r0, #0
 8002c6a:	d03f      	beq.n	8002cec <_vfiprintf_r+0x22c>
 8002c6c:	4b2a      	ldr	r3, [pc, #168]	; (8002d18 <_vfiprintf_r+0x258>)
 8002c6e:	bb1b      	cbnz	r3, 8002cb8 <_vfiprintf_r+0x1f8>
 8002c70:	9b03      	ldr	r3, [sp, #12]
 8002c72:	3307      	adds	r3, #7
 8002c74:	f023 0307 	bic.w	r3, r3, #7
 8002c78:	3308      	adds	r3, #8
 8002c7a:	9303      	str	r3, [sp, #12]
 8002c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c7e:	443b      	add	r3, r7
 8002c80:	9309      	str	r3, [sp, #36]	; 0x24
 8002c82:	e767      	b.n	8002b54 <_vfiprintf_r+0x94>
 8002c84:	460c      	mov	r4, r1
 8002c86:	2001      	movs	r0, #1
 8002c88:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c8c:	e7a5      	b.n	8002bda <_vfiprintf_r+0x11a>
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f04f 0c0a 	mov.w	ip, #10
 8002c94:	4619      	mov	r1, r3
 8002c96:	3401      	adds	r4, #1
 8002c98:	9305      	str	r3, [sp, #20]
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ca0:	3a30      	subs	r2, #48	; 0x30
 8002ca2:	2a09      	cmp	r2, #9
 8002ca4:	d903      	bls.n	8002cae <_vfiprintf_r+0x1ee>
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0c5      	beq.n	8002c36 <_vfiprintf_r+0x176>
 8002caa:	9105      	str	r1, [sp, #20]
 8002cac:	e7c3      	b.n	8002c36 <_vfiprintf_r+0x176>
 8002cae:	4604      	mov	r4, r0
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8002cb6:	e7f0      	b.n	8002c9a <_vfiprintf_r+0x1da>
 8002cb8:	ab03      	add	r3, sp, #12
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	462a      	mov	r2, r5
 8002cbe:	4630      	mov	r0, r6
 8002cc0:	4b16      	ldr	r3, [pc, #88]	; (8002d1c <_vfiprintf_r+0x25c>)
 8002cc2:	a904      	add	r1, sp, #16
 8002cc4:	f3af 8000 	nop.w
 8002cc8:	4607      	mov	r7, r0
 8002cca:	1c78      	adds	r0, r7, #1
 8002ccc:	d1d6      	bne.n	8002c7c <_vfiprintf_r+0x1bc>
 8002cce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002cd0:	07d9      	lsls	r1, r3, #31
 8002cd2:	d405      	bmi.n	8002ce0 <_vfiprintf_r+0x220>
 8002cd4:	89ab      	ldrh	r3, [r5, #12]
 8002cd6:	059a      	lsls	r2, r3, #22
 8002cd8:	d402      	bmi.n	8002ce0 <_vfiprintf_r+0x220>
 8002cda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002cdc:	f7ff fd85 	bl	80027ea <__retarget_lock_release_recursive>
 8002ce0:	89ab      	ldrh	r3, [r5, #12]
 8002ce2:	065b      	lsls	r3, r3, #25
 8002ce4:	f53f af12 	bmi.w	8002b0c <_vfiprintf_r+0x4c>
 8002ce8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002cea:	e711      	b.n	8002b10 <_vfiprintf_r+0x50>
 8002cec:	ab03      	add	r3, sp, #12
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	462a      	mov	r2, r5
 8002cf2:	4630      	mov	r0, r6
 8002cf4:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <_vfiprintf_r+0x25c>)
 8002cf6:	a904      	add	r1, sp, #16
 8002cf8:	f000 f882 	bl	8002e00 <_printf_i>
 8002cfc:	e7e4      	b.n	8002cc8 <_vfiprintf_r+0x208>
 8002cfe:	bf00      	nop
 8002d00:	08003264 	.word	0x08003264
 8002d04:	08003284 	.word	0x08003284
 8002d08:	08003244 	.word	0x08003244
 8002d0c:	080032a4 	.word	0x080032a4
 8002d10:	080032aa 	.word	0x080032aa
 8002d14:	080032ae 	.word	0x080032ae
 8002d18:	00000000 	.word	0x00000000
 8002d1c:	08002a9b 	.word	0x08002a9b

08002d20 <_printf_common>:
 8002d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d24:	4616      	mov	r6, r2
 8002d26:	4699      	mov	r9, r3
 8002d28:	688a      	ldr	r2, [r1, #8]
 8002d2a:	690b      	ldr	r3, [r1, #16]
 8002d2c:	4607      	mov	r7, r0
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	bfb8      	it	lt
 8002d32:	4613      	movlt	r3, r2
 8002d34:	6033      	str	r3, [r6, #0]
 8002d36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d3a:	460c      	mov	r4, r1
 8002d3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d40:	b10a      	cbz	r2, 8002d46 <_printf_common+0x26>
 8002d42:	3301      	adds	r3, #1
 8002d44:	6033      	str	r3, [r6, #0]
 8002d46:	6823      	ldr	r3, [r4, #0]
 8002d48:	0699      	lsls	r1, r3, #26
 8002d4a:	bf42      	ittt	mi
 8002d4c:	6833      	ldrmi	r3, [r6, #0]
 8002d4e:	3302      	addmi	r3, #2
 8002d50:	6033      	strmi	r3, [r6, #0]
 8002d52:	6825      	ldr	r5, [r4, #0]
 8002d54:	f015 0506 	ands.w	r5, r5, #6
 8002d58:	d106      	bne.n	8002d68 <_printf_common+0x48>
 8002d5a:	f104 0a19 	add.w	sl, r4, #25
 8002d5e:	68e3      	ldr	r3, [r4, #12]
 8002d60:	6832      	ldr	r2, [r6, #0]
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	42ab      	cmp	r3, r5
 8002d66:	dc28      	bgt.n	8002dba <_printf_common+0x9a>
 8002d68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d6c:	1e13      	subs	r3, r2, #0
 8002d6e:	6822      	ldr	r2, [r4, #0]
 8002d70:	bf18      	it	ne
 8002d72:	2301      	movne	r3, #1
 8002d74:	0692      	lsls	r2, r2, #26
 8002d76:	d42d      	bmi.n	8002dd4 <_printf_common+0xb4>
 8002d78:	4649      	mov	r1, r9
 8002d7a:	4638      	mov	r0, r7
 8002d7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d80:	47c0      	blx	r8
 8002d82:	3001      	adds	r0, #1
 8002d84:	d020      	beq.n	8002dc8 <_printf_common+0xa8>
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	68e5      	ldr	r5, [r4, #12]
 8002d8a:	f003 0306 	and.w	r3, r3, #6
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	bf18      	it	ne
 8002d92:	2500      	movne	r5, #0
 8002d94:	6832      	ldr	r2, [r6, #0]
 8002d96:	f04f 0600 	mov.w	r6, #0
 8002d9a:	68a3      	ldr	r3, [r4, #8]
 8002d9c:	bf08      	it	eq
 8002d9e:	1aad      	subeq	r5, r5, r2
 8002da0:	6922      	ldr	r2, [r4, #16]
 8002da2:	bf08      	it	eq
 8002da4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002da8:	4293      	cmp	r3, r2
 8002daa:	bfc4      	itt	gt
 8002dac:	1a9b      	subgt	r3, r3, r2
 8002dae:	18ed      	addgt	r5, r5, r3
 8002db0:	341a      	adds	r4, #26
 8002db2:	42b5      	cmp	r5, r6
 8002db4:	d11a      	bne.n	8002dec <_printf_common+0xcc>
 8002db6:	2000      	movs	r0, #0
 8002db8:	e008      	b.n	8002dcc <_printf_common+0xac>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	4652      	mov	r2, sl
 8002dbe:	4649      	mov	r1, r9
 8002dc0:	4638      	mov	r0, r7
 8002dc2:	47c0      	blx	r8
 8002dc4:	3001      	adds	r0, #1
 8002dc6:	d103      	bne.n	8002dd0 <_printf_common+0xb0>
 8002dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dd0:	3501      	adds	r5, #1
 8002dd2:	e7c4      	b.n	8002d5e <_printf_common+0x3e>
 8002dd4:	2030      	movs	r0, #48	; 0x30
 8002dd6:	18e1      	adds	r1, r4, r3
 8002dd8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002de2:	4422      	add	r2, r4
 8002de4:	3302      	adds	r3, #2
 8002de6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002dea:	e7c5      	b.n	8002d78 <_printf_common+0x58>
 8002dec:	2301      	movs	r3, #1
 8002dee:	4622      	mov	r2, r4
 8002df0:	4649      	mov	r1, r9
 8002df2:	4638      	mov	r0, r7
 8002df4:	47c0      	blx	r8
 8002df6:	3001      	adds	r0, #1
 8002df8:	d0e6      	beq.n	8002dc8 <_printf_common+0xa8>
 8002dfa:	3601      	adds	r6, #1
 8002dfc:	e7d9      	b.n	8002db2 <_printf_common+0x92>
	...

08002e00 <_printf_i>:
 8002e00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e04:	7e0f      	ldrb	r7, [r1, #24]
 8002e06:	4691      	mov	r9, r2
 8002e08:	2f78      	cmp	r7, #120	; 0x78
 8002e0a:	4680      	mov	r8, r0
 8002e0c:	460c      	mov	r4, r1
 8002e0e:	469a      	mov	sl, r3
 8002e10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002e12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002e16:	d807      	bhi.n	8002e28 <_printf_i+0x28>
 8002e18:	2f62      	cmp	r7, #98	; 0x62
 8002e1a:	d80a      	bhi.n	8002e32 <_printf_i+0x32>
 8002e1c:	2f00      	cmp	r7, #0
 8002e1e:	f000 80d9 	beq.w	8002fd4 <_printf_i+0x1d4>
 8002e22:	2f58      	cmp	r7, #88	; 0x58
 8002e24:	f000 80a4 	beq.w	8002f70 <_printf_i+0x170>
 8002e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e30:	e03a      	b.n	8002ea8 <_printf_i+0xa8>
 8002e32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002e36:	2b15      	cmp	r3, #21
 8002e38:	d8f6      	bhi.n	8002e28 <_printf_i+0x28>
 8002e3a:	a101      	add	r1, pc, #4	; (adr r1, 8002e40 <_printf_i+0x40>)
 8002e3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002e40:	08002e99 	.word	0x08002e99
 8002e44:	08002ead 	.word	0x08002ead
 8002e48:	08002e29 	.word	0x08002e29
 8002e4c:	08002e29 	.word	0x08002e29
 8002e50:	08002e29 	.word	0x08002e29
 8002e54:	08002e29 	.word	0x08002e29
 8002e58:	08002ead 	.word	0x08002ead
 8002e5c:	08002e29 	.word	0x08002e29
 8002e60:	08002e29 	.word	0x08002e29
 8002e64:	08002e29 	.word	0x08002e29
 8002e68:	08002e29 	.word	0x08002e29
 8002e6c:	08002fbb 	.word	0x08002fbb
 8002e70:	08002edd 	.word	0x08002edd
 8002e74:	08002f9d 	.word	0x08002f9d
 8002e78:	08002e29 	.word	0x08002e29
 8002e7c:	08002e29 	.word	0x08002e29
 8002e80:	08002fdd 	.word	0x08002fdd
 8002e84:	08002e29 	.word	0x08002e29
 8002e88:	08002edd 	.word	0x08002edd
 8002e8c:	08002e29 	.word	0x08002e29
 8002e90:	08002e29 	.word	0x08002e29
 8002e94:	08002fa5 	.word	0x08002fa5
 8002e98:	682b      	ldr	r3, [r5, #0]
 8002e9a:	1d1a      	adds	r2, r3, #4
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	602a      	str	r2, [r5, #0]
 8002ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0a4      	b.n	8002ff6 <_printf_i+0x1f6>
 8002eac:	6820      	ldr	r0, [r4, #0]
 8002eae:	6829      	ldr	r1, [r5, #0]
 8002eb0:	0606      	lsls	r6, r0, #24
 8002eb2:	f101 0304 	add.w	r3, r1, #4
 8002eb6:	d50a      	bpl.n	8002ece <_printf_i+0xce>
 8002eb8:	680e      	ldr	r6, [r1, #0]
 8002eba:	602b      	str	r3, [r5, #0]
 8002ebc:	2e00      	cmp	r6, #0
 8002ebe:	da03      	bge.n	8002ec8 <_printf_i+0xc8>
 8002ec0:	232d      	movs	r3, #45	; 0x2d
 8002ec2:	4276      	negs	r6, r6
 8002ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ec8:	230a      	movs	r3, #10
 8002eca:	485e      	ldr	r0, [pc, #376]	; (8003044 <_printf_i+0x244>)
 8002ecc:	e019      	b.n	8002f02 <_printf_i+0x102>
 8002ece:	680e      	ldr	r6, [r1, #0]
 8002ed0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ed4:	602b      	str	r3, [r5, #0]
 8002ed6:	bf18      	it	ne
 8002ed8:	b236      	sxthne	r6, r6
 8002eda:	e7ef      	b.n	8002ebc <_printf_i+0xbc>
 8002edc:	682b      	ldr	r3, [r5, #0]
 8002ede:	6820      	ldr	r0, [r4, #0]
 8002ee0:	1d19      	adds	r1, r3, #4
 8002ee2:	6029      	str	r1, [r5, #0]
 8002ee4:	0601      	lsls	r1, r0, #24
 8002ee6:	d501      	bpl.n	8002eec <_printf_i+0xec>
 8002ee8:	681e      	ldr	r6, [r3, #0]
 8002eea:	e002      	b.n	8002ef2 <_printf_i+0xf2>
 8002eec:	0646      	lsls	r6, r0, #25
 8002eee:	d5fb      	bpl.n	8002ee8 <_printf_i+0xe8>
 8002ef0:	881e      	ldrh	r6, [r3, #0]
 8002ef2:	2f6f      	cmp	r7, #111	; 0x6f
 8002ef4:	bf0c      	ite	eq
 8002ef6:	2308      	moveq	r3, #8
 8002ef8:	230a      	movne	r3, #10
 8002efa:	4852      	ldr	r0, [pc, #328]	; (8003044 <_printf_i+0x244>)
 8002efc:	2100      	movs	r1, #0
 8002efe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f02:	6865      	ldr	r5, [r4, #4]
 8002f04:	2d00      	cmp	r5, #0
 8002f06:	bfa8      	it	ge
 8002f08:	6821      	ldrge	r1, [r4, #0]
 8002f0a:	60a5      	str	r5, [r4, #8]
 8002f0c:	bfa4      	itt	ge
 8002f0e:	f021 0104 	bicge.w	r1, r1, #4
 8002f12:	6021      	strge	r1, [r4, #0]
 8002f14:	b90e      	cbnz	r6, 8002f1a <_printf_i+0x11a>
 8002f16:	2d00      	cmp	r5, #0
 8002f18:	d04d      	beq.n	8002fb6 <_printf_i+0x1b6>
 8002f1a:	4615      	mov	r5, r2
 8002f1c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002f20:	fb03 6711 	mls	r7, r3, r1, r6
 8002f24:	5dc7      	ldrb	r7, [r0, r7]
 8002f26:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002f2a:	4637      	mov	r7, r6
 8002f2c:	42bb      	cmp	r3, r7
 8002f2e:	460e      	mov	r6, r1
 8002f30:	d9f4      	bls.n	8002f1c <_printf_i+0x11c>
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d10b      	bne.n	8002f4e <_printf_i+0x14e>
 8002f36:	6823      	ldr	r3, [r4, #0]
 8002f38:	07de      	lsls	r6, r3, #31
 8002f3a:	d508      	bpl.n	8002f4e <_printf_i+0x14e>
 8002f3c:	6923      	ldr	r3, [r4, #16]
 8002f3e:	6861      	ldr	r1, [r4, #4]
 8002f40:	4299      	cmp	r1, r3
 8002f42:	bfde      	ittt	le
 8002f44:	2330      	movle	r3, #48	; 0x30
 8002f46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002f4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002f4e:	1b52      	subs	r2, r2, r5
 8002f50:	6122      	str	r2, [r4, #16]
 8002f52:	464b      	mov	r3, r9
 8002f54:	4621      	mov	r1, r4
 8002f56:	4640      	mov	r0, r8
 8002f58:	f8cd a000 	str.w	sl, [sp]
 8002f5c:	aa03      	add	r2, sp, #12
 8002f5e:	f7ff fedf 	bl	8002d20 <_printf_common>
 8002f62:	3001      	adds	r0, #1
 8002f64:	d14c      	bne.n	8003000 <_printf_i+0x200>
 8002f66:	f04f 30ff 	mov.w	r0, #4294967295
 8002f6a:	b004      	add	sp, #16
 8002f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f70:	4834      	ldr	r0, [pc, #208]	; (8003044 <_printf_i+0x244>)
 8002f72:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002f76:	6829      	ldr	r1, [r5, #0]
 8002f78:	6823      	ldr	r3, [r4, #0]
 8002f7a:	f851 6b04 	ldr.w	r6, [r1], #4
 8002f7e:	6029      	str	r1, [r5, #0]
 8002f80:	061d      	lsls	r5, r3, #24
 8002f82:	d514      	bpl.n	8002fae <_printf_i+0x1ae>
 8002f84:	07df      	lsls	r7, r3, #31
 8002f86:	bf44      	itt	mi
 8002f88:	f043 0320 	orrmi.w	r3, r3, #32
 8002f8c:	6023      	strmi	r3, [r4, #0]
 8002f8e:	b91e      	cbnz	r6, 8002f98 <_printf_i+0x198>
 8002f90:	6823      	ldr	r3, [r4, #0]
 8002f92:	f023 0320 	bic.w	r3, r3, #32
 8002f96:	6023      	str	r3, [r4, #0]
 8002f98:	2310      	movs	r3, #16
 8002f9a:	e7af      	b.n	8002efc <_printf_i+0xfc>
 8002f9c:	6823      	ldr	r3, [r4, #0]
 8002f9e:	f043 0320 	orr.w	r3, r3, #32
 8002fa2:	6023      	str	r3, [r4, #0]
 8002fa4:	2378      	movs	r3, #120	; 0x78
 8002fa6:	4828      	ldr	r0, [pc, #160]	; (8003048 <_printf_i+0x248>)
 8002fa8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002fac:	e7e3      	b.n	8002f76 <_printf_i+0x176>
 8002fae:	0659      	lsls	r1, r3, #25
 8002fb0:	bf48      	it	mi
 8002fb2:	b2b6      	uxthmi	r6, r6
 8002fb4:	e7e6      	b.n	8002f84 <_printf_i+0x184>
 8002fb6:	4615      	mov	r5, r2
 8002fb8:	e7bb      	b.n	8002f32 <_printf_i+0x132>
 8002fba:	682b      	ldr	r3, [r5, #0]
 8002fbc:	6826      	ldr	r6, [r4, #0]
 8002fbe:	1d18      	adds	r0, r3, #4
 8002fc0:	6961      	ldr	r1, [r4, #20]
 8002fc2:	6028      	str	r0, [r5, #0]
 8002fc4:	0635      	lsls	r5, r6, #24
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	d501      	bpl.n	8002fce <_printf_i+0x1ce>
 8002fca:	6019      	str	r1, [r3, #0]
 8002fcc:	e002      	b.n	8002fd4 <_printf_i+0x1d4>
 8002fce:	0670      	lsls	r0, r6, #25
 8002fd0:	d5fb      	bpl.n	8002fca <_printf_i+0x1ca>
 8002fd2:	8019      	strh	r1, [r3, #0]
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	4615      	mov	r5, r2
 8002fd8:	6123      	str	r3, [r4, #16]
 8002fda:	e7ba      	b.n	8002f52 <_printf_i+0x152>
 8002fdc:	682b      	ldr	r3, [r5, #0]
 8002fde:	2100      	movs	r1, #0
 8002fe0:	1d1a      	adds	r2, r3, #4
 8002fe2:	602a      	str	r2, [r5, #0]
 8002fe4:	681d      	ldr	r5, [r3, #0]
 8002fe6:	6862      	ldr	r2, [r4, #4]
 8002fe8:	4628      	mov	r0, r5
 8002fea:	f000 f8d9 	bl	80031a0 <memchr>
 8002fee:	b108      	cbz	r0, 8002ff4 <_printf_i+0x1f4>
 8002ff0:	1b40      	subs	r0, r0, r5
 8002ff2:	6060      	str	r0, [r4, #4]
 8002ff4:	6863      	ldr	r3, [r4, #4]
 8002ff6:	6123      	str	r3, [r4, #16]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ffe:	e7a8      	b.n	8002f52 <_printf_i+0x152>
 8003000:	462a      	mov	r2, r5
 8003002:	4649      	mov	r1, r9
 8003004:	4640      	mov	r0, r8
 8003006:	6923      	ldr	r3, [r4, #16]
 8003008:	47d0      	blx	sl
 800300a:	3001      	adds	r0, #1
 800300c:	d0ab      	beq.n	8002f66 <_printf_i+0x166>
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	079b      	lsls	r3, r3, #30
 8003012:	d413      	bmi.n	800303c <_printf_i+0x23c>
 8003014:	68e0      	ldr	r0, [r4, #12]
 8003016:	9b03      	ldr	r3, [sp, #12]
 8003018:	4298      	cmp	r0, r3
 800301a:	bfb8      	it	lt
 800301c:	4618      	movlt	r0, r3
 800301e:	e7a4      	b.n	8002f6a <_printf_i+0x16a>
 8003020:	2301      	movs	r3, #1
 8003022:	4632      	mov	r2, r6
 8003024:	4649      	mov	r1, r9
 8003026:	4640      	mov	r0, r8
 8003028:	47d0      	blx	sl
 800302a:	3001      	adds	r0, #1
 800302c:	d09b      	beq.n	8002f66 <_printf_i+0x166>
 800302e:	3501      	adds	r5, #1
 8003030:	68e3      	ldr	r3, [r4, #12]
 8003032:	9903      	ldr	r1, [sp, #12]
 8003034:	1a5b      	subs	r3, r3, r1
 8003036:	42ab      	cmp	r3, r5
 8003038:	dcf2      	bgt.n	8003020 <_printf_i+0x220>
 800303a:	e7eb      	b.n	8003014 <_printf_i+0x214>
 800303c:	2500      	movs	r5, #0
 800303e:	f104 0619 	add.w	r6, r4, #25
 8003042:	e7f5      	b.n	8003030 <_printf_i+0x230>
 8003044:	080032b5 	.word	0x080032b5
 8003048:	080032c6 	.word	0x080032c6

0800304c <_sbrk_r>:
 800304c:	b538      	push	{r3, r4, r5, lr}
 800304e:	2300      	movs	r3, #0
 8003050:	4d05      	ldr	r5, [pc, #20]	; (8003068 <_sbrk_r+0x1c>)
 8003052:	4604      	mov	r4, r0
 8003054:	4608      	mov	r0, r1
 8003056:	602b      	str	r3, [r5, #0]
 8003058:	f7fd fb96 	bl	8000788 <_sbrk>
 800305c:	1c43      	adds	r3, r0, #1
 800305e:	d102      	bne.n	8003066 <_sbrk_r+0x1a>
 8003060:	682b      	ldr	r3, [r5, #0]
 8003062:	b103      	cbz	r3, 8003066 <_sbrk_r+0x1a>
 8003064:	6023      	str	r3, [r4, #0]
 8003066:	bd38      	pop	{r3, r4, r5, pc}
 8003068:	20000180 	.word	0x20000180

0800306c <__sread>:
 800306c:	b510      	push	{r4, lr}
 800306e:	460c      	mov	r4, r1
 8003070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003074:	f000 f8ae 	bl	80031d4 <_read_r>
 8003078:	2800      	cmp	r0, #0
 800307a:	bfab      	itete	ge
 800307c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800307e:	89a3      	ldrhlt	r3, [r4, #12]
 8003080:	181b      	addge	r3, r3, r0
 8003082:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003086:	bfac      	ite	ge
 8003088:	6563      	strge	r3, [r4, #84]	; 0x54
 800308a:	81a3      	strhlt	r3, [r4, #12]
 800308c:	bd10      	pop	{r4, pc}

0800308e <__swrite>:
 800308e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003092:	461f      	mov	r7, r3
 8003094:	898b      	ldrh	r3, [r1, #12]
 8003096:	4605      	mov	r5, r0
 8003098:	05db      	lsls	r3, r3, #23
 800309a:	460c      	mov	r4, r1
 800309c:	4616      	mov	r6, r2
 800309e:	d505      	bpl.n	80030ac <__swrite+0x1e>
 80030a0:	2302      	movs	r3, #2
 80030a2:	2200      	movs	r2, #0
 80030a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030a8:	f000 f868 	bl	800317c <_lseek_r>
 80030ac:	89a3      	ldrh	r3, [r4, #12]
 80030ae:	4632      	mov	r2, r6
 80030b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030b4:	81a3      	strh	r3, [r4, #12]
 80030b6:	4628      	mov	r0, r5
 80030b8:	463b      	mov	r3, r7
 80030ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030c2:	f000 b817 	b.w	80030f4 <_write_r>

080030c6 <__sseek>:
 80030c6:	b510      	push	{r4, lr}
 80030c8:	460c      	mov	r4, r1
 80030ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030ce:	f000 f855 	bl	800317c <_lseek_r>
 80030d2:	1c43      	adds	r3, r0, #1
 80030d4:	89a3      	ldrh	r3, [r4, #12]
 80030d6:	bf15      	itete	ne
 80030d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80030da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80030de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80030e2:	81a3      	strheq	r3, [r4, #12]
 80030e4:	bf18      	it	ne
 80030e6:	81a3      	strhne	r3, [r4, #12]
 80030e8:	bd10      	pop	{r4, pc}

080030ea <__sclose>:
 80030ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030ee:	f000 b813 	b.w	8003118 <_close_r>
	...

080030f4 <_write_r>:
 80030f4:	b538      	push	{r3, r4, r5, lr}
 80030f6:	4604      	mov	r4, r0
 80030f8:	4608      	mov	r0, r1
 80030fa:	4611      	mov	r1, r2
 80030fc:	2200      	movs	r2, #0
 80030fe:	4d05      	ldr	r5, [pc, #20]	; (8003114 <_write_r+0x20>)
 8003100:	602a      	str	r2, [r5, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	f7fd faf3 	bl	80006ee <_write>
 8003108:	1c43      	adds	r3, r0, #1
 800310a:	d102      	bne.n	8003112 <_write_r+0x1e>
 800310c:	682b      	ldr	r3, [r5, #0]
 800310e:	b103      	cbz	r3, 8003112 <_write_r+0x1e>
 8003110:	6023      	str	r3, [r4, #0]
 8003112:	bd38      	pop	{r3, r4, r5, pc}
 8003114:	20000180 	.word	0x20000180

08003118 <_close_r>:
 8003118:	b538      	push	{r3, r4, r5, lr}
 800311a:	2300      	movs	r3, #0
 800311c:	4d05      	ldr	r5, [pc, #20]	; (8003134 <_close_r+0x1c>)
 800311e:	4604      	mov	r4, r0
 8003120:	4608      	mov	r0, r1
 8003122:	602b      	str	r3, [r5, #0]
 8003124:	f7fd faff 	bl	8000726 <_close>
 8003128:	1c43      	adds	r3, r0, #1
 800312a:	d102      	bne.n	8003132 <_close_r+0x1a>
 800312c:	682b      	ldr	r3, [r5, #0]
 800312e:	b103      	cbz	r3, 8003132 <_close_r+0x1a>
 8003130:	6023      	str	r3, [r4, #0]
 8003132:	bd38      	pop	{r3, r4, r5, pc}
 8003134:	20000180 	.word	0x20000180

08003138 <_fstat_r>:
 8003138:	b538      	push	{r3, r4, r5, lr}
 800313a:	2300      	movs	r3, #0
 800313c:	4d06      	ldr	r5, [pc, #24]	; (8003158 <_fstat_r+0x20>)
 800313e:	4604      	mov	r4, r0
 8003140:	4608      	mov	r0, r1
 8003142:	4611      	mov	r1, r2
 8003144:	602b      	str	r3, [r5, #0]
 8003146:	f7fd faf9 	bl	800073c <_fstat>
 800314a:	1c43      	adds	r3, r0, #1
 800314c:	d102      	bne.n	8003154 <_fstat_r+0x1c>
 800314e:	682b      	ldr	r3, [r5, #0]
 8003150:	b103      	cbz	r3, 8003154 <_fstat_r+0x1c>
 8003152:	6023      	str	r3, [r4, #0]
 8003154:	bd38      	pop	{r3, r4, r5, pc}
 8003156:	bf00      	nop
 8003158:	20000180 	.word	0x20000180

0800315c <_isatty_r>:
 800315c:	b538      	push	{r3, r4, r5, lr}
 800315e:	2300      	movs	r3, #0
 8003160:	4d05      	ldr	r5, [pc, #20]	; (8003178 <_isatty_r+0x1c>)
 8003162:	4604      	mov	r4, r0
 8003164:	4608      	mov	r0, r1
 8003166:	602b      	str	r3, [r5, #0]
 8003168:	f7fd faf7 	bl	800075a <_isatty>
 800316c:	1c43      	adds	r3, r0, #1
 800316e:	d102      	bne.n	8003176 <_isatty_r+0x1a>
 8003170:	682b      	ldr	r3, [r5, #0]
 8003172:	b103      	cbz	r3, 8003176 <_isatty_r+0x1a>
 8003174:	6023      	str	r3, [r4, #0]
 8003176:	bd38      	pop	{r3, r4, r5, pc}
 8003178:	20000180 	.word	0x20000180

0800317c <_lseek_r>:
 800317c:	b538      	push	{r3, r4, r5, lr}
 800317e:	4604      	mov	r4, r0
 8003180:	4608      	mov	r0, r1
 8003182:	4611      	mov	r1, r2
 8003184:	2200      	movs	r2, #0
 8003186:	4d05      	ldr	r5, [pc, #20]	; (800319c <_lseek_r+0x20>)
 8003188:	602a      	str	r2, [r5, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	f7fd faef 	bl	800076e <_lseek>
 8003190:	1c43      	adds	r3, r0, #1
 8003192:	d102      	bne.n	800319a <_lseek_r+0x1e>
 8003194:	682b      	ldr	r3, [r5, #0]
 8003196:	b103      	cbz	r3, 800319a <_lseek_r+0x1e>
 8003198:	6023      	str	r3, [r4, #0]
 800319a:	bd38      	pop	{r3, r4, r5, pc}
 800319c:	20000180 	.word	0x20000180

080031a0 <memchr>:
 80031a0:	4603      	mov	r3, r0
 80031a2:	b510      	push	{r4, lr}
 80031a4:	b2c9      	uxtb	r1, r1
 80031a6:	4402      	add	r2, r0
 80031a8:	4293      	cmp	r3, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	d101      	bne.n	80031b2 <memchr+0x12>
 80031ae:	2000      	movs	r0, #0
 80031b0:	e003      	b.n	80031ba <memchr+0x1a>
 80031b2:	7804      	ldrb	r4, [r0, #0]
 80031b4:	3301      	adds	r3, #1
 80031b6:	428c      	cmp	r4, r1
 80031b8:	d1f6      	bne.n	80031a8 <memchr+0x8>
 80031ba:	bd10      	pop	{r4, pc}

080031bc <__malloc_lock>:
 80031bc:	4801      	ldr	r0, [pc, #4]	; (80031c4 <__malloc_lock+0x8>)
 80031be:	f7ff bb13 	b.w	80027e8 <__retarget_lock_acquire_recursive>
 80031c2:	bf00      	nop
 80031c4:	20000174 	.word	0x20000174

080031c8 <__malloc_unlock>:
 80031c8:	4801      	ldr	r0, [pc, #4]	; (80031d0 <__malloc_unlock+0x8>)
 80031ca:	f7ff bb0e 	b.w	80027ea <__retarget_lock_release_recursive>
 80031ce:	bf00      	nop
 80031d0:	20000174 	.word	0x20000174

080031d4 <_read_r>:
 80031d4:	b538      	push	{r3, r4, r5, lr}
 80031d6:	4604      	mov	r4, r0
 80031d8:	4608      	mov	r0, r1
 80031da:	4611      	mov	r1, r2
 80031dc:	2200      	movs	r2, #0
 80031de:	4d05      	ldr	r5, [pc, #20]	; (80031f4 <_read_r+0x20>)
 80031e0:	602a      	str	r2, [r5, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	f7fd fa66 	bl	80006b4 <_read>
 80031e8:	1c43      	adds	r3, r0, #1
 80031ea:	d102      	bne.n	80031f2 <_read_r+0x1e>
 80031ec:	682b      	ldr	r3, [r5, #0]
 80031ee:	b103      	cbz	r3, 80031f2 <_read_r+0x1e>
 80031f0:	6023      	str	r3, [r4, #0]
 80031f2:	bd38      	pop	{r3, r4, r5, pc}
 80031f4:	20000180 	.word	0x20000180

080031f8 <_init>:
 80031f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fa:	bf00      	nop
 80031fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031fe:	bc08      	pop	{r3}
 8003200:	469e      	mov	lr, r3
 8003202:	4770      	bx	lr

08003204 <_fini>:
 8003204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003206:	bf00      	nop
 8003208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800320a:	bc08      	pop	{r3}
 800320c:	469e      	mov	lr, r3
 800320e:	4770      	bx	lr
